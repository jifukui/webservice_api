#include <stdio.h>
#include <string.h>
#include <jansson.h>
#include <lig_matrix_dll.h>
#include <sys/time.h>
#define DEBUG 1
#define PORTNUM 34
typedef unsigned char uint8;
typedef char int8;
typedef unsigned int uint32;
typedef int int32;
extern void *lighandle;
uint8 ligPorts=PORTNUM;
static uint8 switchinfo[PORTNUM];
static uint8 CommandHandle(const char *sstr,json_t *json,json_t *ech,json_t *res,char *estr);
static uint8 GetDeviceModuleName(char *data,char *estr);
static uint8 GetDeviceVideoInfo(char *data,char *estr);
static uint8 GetDeviceSwitchInfo(char *data,char *estr);
static uint8 GetDeviceDLLVersion(char *data,char *estr);
static uint8 SetDeviceRouting(json_t *json,char *data,char *estr);
uint8 LiguoWeb_GET_Method(const char *sstr,json_t *json,json_t *ech,json_t *res,char *estr)
{
	char* str=strchr(sstr,'=');
	uint8 flag=0;
	if(str)
	{
		flag=CommandHandle((str+1),json,ech,res,estr);
	}
	else
	{
		strcpy(estr,"Error of format");
	}
	if(str)
	{
		str=NULL;
	}
	return flag;
}
uint8 LiguoWeb_POST_Method(const unsigned char *sstr,json_t *json,json_t *ech,json_t * res,char *estr)
{
	return CommandHandle(sstr,json,ech,res,estr);
}
uint8 CommandHandle(const char *sstr,json_t *json,json_t *ech,json_t *res,char *estr)
{
	json_error_t error;
    json_t *jsonget;
    jsonget=json_loads(sstr,0,&error);
    uint8 flag=0;
    if(jsonget)
    {
        json_t *cmd;
        cmd=json_object_get(jsonget,"cmd");
        if(cmd)
        {
            if(json_typeof(cmd)==JSON_STRING)
            {
				
                char *str=json_string_value(cmd);
                if(str)
                {
					char data[2000];
					json_error_t error;
					json_object_set_new(json,"cmd",json_string(str));
                   	if(!strcmp(str,"matrix_status"))
					{
						flag=GetDeviceModuleName(data,estr);	
					}
					else if(!strcmp(str,"video_info"))
					{
						flag=GetDeviceVideoInfo(data,estr);
					}
					else if(!strcmp(str,"require_switch"))
					{
						flag=GetDeviceSwitchInfo(data,estr);
					}
					else if(!strcmp(str,"version_dll"))
					{
						flag=GetDeviceDLLVersion(data,estr);
					}
					else if(!strcmp(str,"routing"))
					{
						json_t *rout;
						rout==json_object_get(jsonget,"routing");										if(rout)
						{
							if(json_typeof(rout)==JSON_ARRAY)
							{
								flag=SetDeviceRouting(rout,data,estr);
								json_decref(rout);
							}
							else
							{
								strcpy(estr,"Error of rout type");
							}
						}
						else
						{
							strcpy(estr,"Error no rout");
						}
					}
					else
					{
						strcpy(estr,"not this command");
					}
					if(flag)
					{
						res=json_loads(data,0,&error);
						json_object_set_new(ech,"result",res);
						json_object_set_new(json,"echo",ech);
					}
				
            	    str=NULL;
                }
				else
                {
                    strcpy(estr,"The cmd value is error");
                }
            }
            else
            {
                strcpy(estr,"The cmd is error type");
            }
        }
        else
        {
            strcpy(estr,"No the key of cmd");
        }
	
        json_decref(cmd);
    }
    else
    {
        strcpy(estr,"The Format is error");
#if DEBUG
		json_object_set_new(json,"data",json_string(sstr));
		json_object_set_new(json,"errinfo",json_string(error.text));
		json_object_set_new(json,"err",json_string(error.source));
#endif
    }
    json_decref(jsonget);
    return flag;

}
uint8 GetDeviceModuleName(char *data,char *estr)
{
	uint8 flag=0;
	json_t *json;
	json=json_object();
	if(json)
	{
		char *str;
		json_object_set_new(json,"name",json_string("CMPS-34FD"));
		str=json_dumps(json,JSON_PRESERVE_ORDER);
		strcpy(data,str);
		free(str);
		if(str)
		{
			str=NULL;
		}
		flag=1;
		json_decref(json);
	}
	else
	{
		strcpy(estr,"Error of command json init");
	}
	return flag;
}

uint8 GetDeviceVideoInfo(char *data,char *estr)
{
#if DEBUG
	struct timeval start,end;
	unsigned long time;
	json_t *test;
	test=json_array();
	//gettimeofday(&start,NULL);
#endif
	json_t *json,*port,*arr,*cpy;
	uint8 flag=0;
	json=json_object();
	port=json_object();
	arr=json_array();
	cpy=json_object();
	if(json==(json_t*)0||port==(json_t *)0||arr==(json_t*)0||cpy==(json_t*)0)
	{
		strcpy(estr,"Get video info json init error");
	}
	else
	{
#if DEBUG
		json_object_set_new(json,"i",json_integer(0));
		json_object_set_new(json,"routting",json_integer(0));
		json_object_set_new(json,"time",test);
#endif
		json_object_set_new(json,"Port",arr);
		json_object_set_new(port,"index",json_integer(1));
		json_object_set_new(port,"Dir",json_string("In"));
		json_object_set_new(port,"status",json_string("On"));
		json_object_set_new(port,"switch",json_null());
		flag=1;
		int portinfo[ligPorts+1];
		memset(portinfo,0,ligPorts+1);
		memset(switchinfo,0,ligPorts);
		int i,in,index=0,iindex=0;
		for(i=1;i<=(ligPorts/2);i++)
		{
#if DEBUG
			gettimeofday(&start,NULL);
#endif
			in=lig_matrix_get_slot_online_state(lighandle,i);
#if DEBUG
			gettimeofday(&end,NULL);
			time=1000000*(end.tv_sec-start.tv_sec)+end.tv_usec-start.tv_usec;
			json_array_append(test,json_integer(time));
#endif
			if(in)
			{
				portinfo[index]=2*i-1;
				index++;
				portinfo[index]=2*i;
				index++;
			}
		}
		LIG_MATRIX_OBJ_INPUT_SIGNAL in_info;
		LIG_MATRIX_OBJ_OUTPUT_DISPLAY out_info;
		i=0;
#ifdef DEBUG
            json_object_set(port,"i",json_integer(i));
#endif
		while(portinfo[i]>0)
		{
#if DEBUG
			json_object_set(port,"i",json_integer(i));
#endif		
			json_object_set(port,"index",json_integer(portinfo[i]));
#if DEBUG
            gettimeofday(&start,NULL);
#endif
				in=lig_matrix_get_video_pipe_io(lighandle,portinfo[i]);
#if DEBUG
            gettimeofday(&end,NULL);
            time=1000000*(end.tv_sec-start.tv_sec)+end.tv_usec-start.tv_usec;
            json_array_append(test,json_integer(time));
#endif
				if(in==0)
				{
					json_object_set(port,"Dir",json_string("In"));
					//input
					in=lig_matrix_get_port_input_signal_information(lighandle,portinfo[i],&in_info);
					if(in)
					{
						//error
						i++;
						continue;
					}
					else
					{
						//
						if(in_info.signal_status==1)
						{
							json_object_set(port,"status",json_string("On"));
						}
						else
						{
							json_object_set(port,"status",json_string("Off"));
						}
					}
					json_object_set(port,"switch",json_null());
					cpy=json_deep_copy(port);
					json_array_append(arr,cpy);
				}				
				else if(in==1)
				{
					//output
					switchinfo[iindex]=portinfo[i];
#if DEBUG
					json_object_set(port,"routting",json_integer(switchinfo[iindex]));
#endif
					iindex++;
					json_object_set(port,"Dir",json_string("Out"));
					in=lig_matrix_get_port_output_display_information(lighandle,portinfo[i],&out_info);
					if(in)
					{
						//error
						i++;
					unsigned long time;
        time=1000000*(end.tv_sec-start.tv_sec)+end.tv_usec-start.tv_usec;	continue;
					}
					else
					{
						//
						if(out_info.display_status==1)
						{
							json_object_set(port,"status",json_string("On"));	
						}
						else
						{
							json_object_set(port,"status",json_string("Off"));
						}
					}
					in=lig_matrix_get_video_switch_state(lighandle,portinfo[i]);
					if(in>0)
					{
						json_object_set(port,"switch",json_integer(in));
					}
					else
					{
						json_object_set(port,"switch",json_integer(0));
					}
					cpy=json_deep_copy(port);
					json_array_append(arr,cpy);
				}
				else
				{
					//now no support
				}
			i++;
		}
#if DEBUG
		//gettimeofday(&end,NULL);
        //time=1000000*(end.tv_sec-start.tv_sec)+end.tv_usec-start.tv_usec;
		//json_object_set_new(json,"time",json_integer(time));
#endif
		char *str;
		str=json_dumps(json,JSON_PRESERVE_ORDER);
		strcpy(data,str);
		free(str);
		if(str!=NULL)
		{
			str=NULL;
		}
		json_decref(json);
		json_decref(port);
		json_decref(arr);
		json_decref(cpy);
	}
	
	return flag;
}
uint8 GetDeviceSwitchInfo(char *data,char *estr)
{
	uint8 i=0;
	int in;
	json_t *json,*port,*cpy,*arr;
	uint8 flag=0;
    json=json_object();
    port=json_object();
    arr=json_array();
    cpy=json_object();
    if(json==(json_t*)0||port==(json_t *)0||arr==(json_t*)0||cpy==(json_t*)0)
    {
        strcpy(estr,"Get switch info json init error");
    }
	else
	{
		flag=1;
		json_object_set_new(json,"routing",arr);
		json_object_set_new(port,"in",json_integer(0));
		json_object_set_new(port,"out",json_integer(0));
		json_object_set_new(port,"type",json_string("v"));
		//while(switchinfo[i])
		for(i=1;i<=PORTNUM;i++)
		{
			in=lig_matrix_get_video_switch_state(lighandle,i);
        	if(in>=0)
        	{
				json_object_set(port,"out",json_integer(i));
        		json_object_set(port,"in",json_integer(in));
        	}
        	else
        	{
			
				continue;
       			//json_object_set(port,"in",json_integer(0));
       		}
            cpy=json_deep_copy(port);
            json_array_append(arr,cpy);
		}
		char *str;
        str=json_dumps(json,JSON_PRESERVE_ORDER);
        strcpy(data,str);
        free(str);
        if(str!=NULL)
        {
            str=NULL;
        }
        json_decref(json);
        json_decref(port);
        json_decref(arr);
        json_decref(cpy);
	}	
	return flag;
}
uint8 GetDeviceDLLVersion(char *data,char *estr)
{
	
	uint8 flag=0;
	json_t *json;
	json=json_object();
	unsigned int version;
#if DEBUG
	struct timeval start,end;
#endif 
	if(json)
	{
		flag=1;
#if DEBUG
		gettimeofday(&start,NULL);
#endif
		version=lig_matrix_get_version(lighandle,0);
#if DEBUG	
		gettimeofday(&end,NULL);
		unsigned long time;
		time=1000000*(end.tv_sec-start.tv_sec)+end.tv_usec-start.tv_usec;
		json_object_set_new(json,"time",json_integer(time));
#endif
		json_object_set_new(json,"version",json_integer(version));
		json_object_set_new(json,"handle",json_integer(lighandle));
		char *str;
		str=json_dumps(json,JSON_PRESERVE_ORDER);
        strcpy(data,str);
        free(str);
        if(str!=NULL)
        {
            str=NULL;
        }
        json_decref(json);

	}
	else
	{
		strcpy(estr,"Get DLL Version Error");
	}
	return flag;
}
uint8 SetDeviceRouting(json_t *json,char *data,char *estr)
{
	uint flag=0,ff91=1;
	uint8 num,stat;
	num=json_array_size(json);
	if(num==0)
	{
		strcpy(estr,"The rout number is 0");
	}
	else
	{
		uint8 i;
		json_t *data;
		json_t *jsondata;
		uint32 in;
		uint32 out;
		char *str;
		for(i=0;i<num;i++)
		{
			data=json_array_get(json,i);
			if(data)
			{
				if(json_typeof(data)==JSON_OBJECT)
				{
					jsondata=json_object_get(json,"in");
					if(jsondata)
					{
						in=json_integer_value(jsondata);
					}
					else
					{
						ff91=0;
						strcpy(estr,"error of in");
						break;
					}	
					jsondata=json_object_get(json,"out");    
                    if(jsondata)
                    {
                        out=json_integer_value(jsondata);
                    } 
                    else
                    {
						ff91=0;
                        strcpy(estr,"error of out");
						break;
                    }   
					jsondata=json_object_get(json,"type");    
                    if(jsondata)
                    {
                        str=json_string_value(jsondata);
                    } 
                    else
                    {
						ff91=0;
                        strcpy(estr,"error of type");
						break;
                    }   
					stat=lig_matrx_set_video_switch(lighandle,in,out);
					if(!stat)
					{
						stat= lig_matrx_stash_video_switch_data(lighandle,in,out);
						if(stat)
						{
							ff91=0;
							strcpy(estr,"error of pre");
							break;
						}
					}
					else
					{
						ff91=0;
						strcpy(estr,"error of set");
						break;
					}
				}
				else
				{
					ff91=0;
					strcpy(estr,"Rout data error");
					break;
				}
			}
			else
			{
				ff91=0;
				strcpy(estr,"Get data error");
				break;
			}
			if(!ff91)
			{
				break;	
			}
			
		}
		json_decref(data);
		json_decref(jsondata);
		str=NULL;
		stat=lig_matrx_set_video_switch_done(lighandle);
		if(!stat)
		{
			flag=1;
		}
		else
		{
			flag=0;
		}
		if(ff91)
		{
			flag=1;
		}
	}
	return flag;
}
