
thttpd:     file format elf32-powerpc


Disassembly of section .init:

10001b8c <_init>:
10001b8c:	94 21 ff f0 	stwu    r1,-16(r1)
10001b90:	7c 08 02 a6 	mflr    r0
10001b94:	90 01 00 14 	stw     r0,20(r1)
10001b98:	93 c1 00 08 	stw     r30,8(r1)
10001b9c:	42 9f 00 05 	bcl     20,4*cr7+so,10001ba0 <_init+0x14>
10001ba0:	7f c8 02 a6 	mflr    r30
10001ba4:	3f de 00 03 	addis   r30,r30,3
10001ba8:	3b de b7 8c 	addi    r30,r30,-18548
10001bac:	80 1e ff f8 	lwz     r0,-8(r30)
10001bb0:	2f 80 00 00 	cmpwi   cr7,r0,0
10001bb4:	41 be 00 08 	beq     cr7,10001bbc <_init+0x30>
10001bb8:	48 02 ba 15 	bl      1002d5cc <__gmon_start__@plt>
10001bbc:	48 00 01 a5 	bl      10001d60 <frame_dummy>
10001bc0:	48 01 60 61 	bl      10017c20 <__do_global_ctors_aux>
10001bc4:	80 01 00 14 	lwz     r0,20(r1)
10001bc8:	7c 08 03 a6 	mtlr    r0
10001bcc:	83 c1 00 08 	lwz     r30,8(r1)
10001bd0:	38 21 00 10 	addi    r1,r1,16
10001bd4:	4e 80 00 20 	blr

Disassembly of section .text:

10001be0 <_start>:
10001be0:	7c 29 0b 78 	mr      r9,r1
10001be4:	54 21 00 36 	rlwinm  r1,r1,0,0,27
10001be8:	38 00 00 00 	li      r0,0
10001bec:	94 21 ff f0 	stwu    r1,-16(r1)
10001bf0:	7c 08 03 a6 	mtlr    r0
10001bf4:	90 01 00 00 	stw     r0,0(r1)
10001bf8:	3d 00 10 01 	lis     r8,4097
10001bfc:	85 a8 7c e0 	lwzu    r13,31968(r8)
10001c00:	48 02 ba 64 	b       1002d664 <__libc_start_main@plt>
	...

10001c10 <deregister_tm_clones>:
10001c10:	3d 20 10 03 	lis     r9,4099
10001c14:	3c 60 10 03 	lis     r3,4099
10001c18:	39 29 d3 24 	addi    r9,r9,-11484
10001c1c:	38 63 d3 24 	addi    r3,r3,-11484
10001c20:	39 29 00 03 	addi    r9,r9,3
10001c24:	7d 23 48 50 	subf    r9,r3,r9
10001c28:	2b 89 00 06 	cmplwi  cr7,r9,6
10001c2c:	4c bd 00 20 	bclr+   4,4*cr7+gt
10001c30:	3d 20 00 00 	lis     r9,0
10001c34:	39 29 00 00 	addi    r9,r9,0
10001c38:	2f 89 00 00 	cmpwi   cr7,r9,0
10001c3c:	4d 9e 00 20 	beqlr   cr7
10001c40:	7d 29 03 a6 	mtctr   r9
10001c44:	4e 80 04 20 	bctr
10001c48:	60 00 00 00 	nop
10001c4c:	60 00 00 00 	nop

10001c50 <register_tm_clones>:
10001c50:	3c 60 10 03 	lis     r3,4099
10001c54:	3d 20 10 03 	lis     r9,4099
10001c58:	38 63 d3 24 	addi    r3,r3,-11484
10001c5c:	39 29 d3 24 	addi    r9,r9,-11484
10001c60:	7d 23 48 50 	subf    r9,r3,r9
10001c64:	7d 29 16 70 	srawi   r9,r9,2
10001c68:	7d 24 0e 70 	srawi   r4,r9,1
10001c6c:	7c 84 01 95 	addze.  r4,r4
10001c70:	4d a2 00 20 	bclr+   12,eq
10001c74:	3d 20 00 00 	lis     r9,0
10001c78:	39 29 00 00 	addi    r9,r9,0
10001c7c:	2f 89 00 00 	cmpwi   cr7,r9,0
10001c80:	4d 9e 00 20 	beqlr   cr7
10001c84:	7d 29 03 a6 	mtctr   r9
10001c88:	4e 80 04 20 	bctr
10001c8c:	60 00 00 00 	nop

10001c90 <__do_global_dtors_aux>:
10001c90:	94 21 ff e0 	stwu    r1,-32(r1)
10001c94:	7c 08 02 a6 	mflr    r0
10001c98:	93 81 00 10 	stw     r28,16(r1)
10001c9c:	3f 80 10 03 	lis     r28,4099
10001ca0:	89 3c da 94 	lbz     r9,-9580(r28)
10001ca4:	90 01 00 24 	stw     r0,36(r1)
10001ca8:	93 a1 00 14 	stw     r29,20(r1)
10001cac:	93 c1 00 18 	stw     r30,24(r1)
10001cb0:	2f 89 00 00 	cmpwi   cr7,r9,0
10001cb4:	93 e1 00 1c 	stw     r31,28(r1)
10001cb8:	40 9e 00 68 	bne     cr7,10001d20 <__do_global_dtors_aux+0x90>
10001cbc:	3f a0 10 03 	lis     r29,4099
10001cc0:	3f c0 10 03 	lis     r30,4099
10001cc4:	3b bd c0 08 	addi    r29,r29,-16376
10001cc8:	3b de c0 0c 	addi    r30,r30,-16372
10001ccc:	3f e0 10 03 	lis     r31,4099
10001cd0:	7f dd f0 50 	subf    r30,r29,r30
10001cd4:	81 3f da 98 	lwz     r9,-9576(r31)
10001cd8:	7f de 16 70 	srawi   r30,r30,2
10001cdc:	3b ff da 98 	addi    r31,r31,-9576
10001ce0:	3b de ff ff 	addi    r30,r30,-1
10001ce4:	7f 89 f0 40 	cmplw   cr7,r9,r30
10001ce8:	40 9c 00 2c 	bge     cr7,10001d14 <__do_global_dtors_aux+0x84>
10001cec:	60 00 00 00 	nop
10001cf0:	39 29 00 01 	addi    r9,r9,1
10001cf4:	55 2a 10 3a 	rlwinm  r10,r9,2,0,29
10001cf8:	91 3f 00 00 	stw     r9,0(r31)
10001cfc:	7d 3d 50 2e 	lwzx    r9,r29,r10
10001d00:	7d 29 03 a6 	mtctr   r9
10001d04:	4e 80 04 21 	bctrl
10001d08:	81 3f 00 00 	lwz     r9,0(r31)
10001d0c:	7f 89 f0 40 	cmplw   cr7,r9,r30
10001d10:	41 9c ff e0 	blt     cr7,10001cf0 <__do_global_dtors_aux+0x60>
10001d14:	4b ff fe fd 	bl      10001c10 <deregister_tm_clones>
10001d18:	39 20 00 01 	li      r9,1
10001d1c:	99 3c da 94 	stb     r9,-9580(r28)
10001d20:	80 01 00 24 	lwz     r0,36(r1)
10001d24:	83 81 00 10 	lwz     r28,16(r1)
10001d28:	83 a1 00 14 	lwz     r29,20(r1)
10001d2c:	83 c1 00 18 	lwz     r30,24(r1)
10001d30:	7c 08 03 a6 	mtlr    r0
10001d34:	83 e1 00 1c 	lwz     r31,28(r1)
10001d38:	38 21 00 20 	addi    r1,r1,32
10001d3c:	4e 80 00 20 	blr

10001d40 <call___do_global_dtors_aux>:
10001d40:	94 21 ff f0 	stwu    r1,-16(r1)
10001d44:	7c 08 02 a6 	mflr    r0
10001d48:	90 01 00 14 	stw     r0,20(r1)
10001d4c:	80 01 00 14 	lwz     r0,20(r1)
10001d50:	38 21 00 10 	addi    r1,r1,16
10001d54:	7c 08 03 a6 	mtlr    r0
10001d58:	4e 80 00 20 	blr
10001d5c:	60 00 00 00 	nop

10001d60 <frame_dummy>:
10001d60:	3c 60 10 03 	lis     r3,4099
10001d64:	81 23 c0 10 	lwz     r9,-16368(r3)
10001d68:	38 63 c0 10 	addi    r3,r3,-16368
10001d6c:	2f 89 00 00 	cmpwi   cr7,r9,0
10001d70:	41 9e 00 40 	beq     cr7,10001db0 <frame_dummy+0x50>
10001d74:	3d 20 00 00 	lis     r9,0
10001d78:	39 29 00 00 	addi    r9,r9,0
10001d7c:	2f 89 00 00 	cmpwi   cr7,r9,0
10001d80:	41 9e 00 30 	beq     cr7,10001db0 <frame_dummy+0x50>
10001d84:	94 21 ff f0 	stwu    r1,-16(r1)
10001d88:	7c 08 02 a6 	mflr    r0
10001d8c:	7d 29 03 a6 	mtctr   r9
10001d90:	90 01 00 14 	stw     r0,20(r1)
10001d94:	4e 80 04 21 	bctrl
10001d98:	80 01 00 14 	lwz     r0,20(r1)
10001d9c:	38 21 00 10 	addi    r1,r1,16
10001da0:	7c 08 03 a6 	mtlr    r0
10001da4:	4b ff fe ac 	b       10001c50 <register_tm_clones>
10001da8:	60 00 00 00 	nop
10001dac:	60 00 00 00 	nop
10001db0:	4b ff fe a0 	b       10001c50 <register_tm_clones>
10001db4:	60 00 00 00 	nop
10001db8:	60 00 00 00 	nop
10001dbc:	60 00 00 00 	nop

10001dc0 <call_frame_dummy>:
10001dc0:	94 21 ff f0 	stwu    r1,-16(r1)
10001dc4:	7c 08 02 a6 	mflr    r0
10001dc8:	90 01 00 14 	stw     r0,20(r1)
10001dcc:	80 01 00 14 	lwz     r0,20(r1)
10001dd0:	38 21 00 10 	addi    r1,r1,16
10001dd4:	7c 08 03 a6 	mtlr    r0
10001dd8:	4e 80 00 20 	blr

10001ddc <handle_term>:

extern void * lighandle;
/* SIGTERM and SIGINT say to exit immediately. */
static void
handle_term( int sig )
    {
10001ddc:	94 21 ff e0 	stwu    r1,-32(r1)
10001de0:	7c 08 02 a6 	mflr    r0
10001de4:	90 01 00 24 	stw     r0,36(r1)
10001de8:	93 e1 00 1c 	stw     r31,28(r1)
10001dec:	7c 3f 0b 78 	mr      r31,r1
10001df0:	90 7f 00 08 	stw     r3,8(r31)
    /* Don't need to set up the handler again, since it's a one-shot. */

    shut_down();
10001df4:	48 00 32 45 	bl      10005038 <shut_down>
    syslog( LOG_NOTICE, "exiting due to signal %d", sig );
10001df8:	38 60 00 05 	li      r3,5
10001dfc:	3d 20 10 01 	lis     r9,4097
10001e00:	38 89 7c f8 	addi    r4,r9,31992
10001e04:	80 bf 00 08 	lwz     r5,8(r31)
10001e08:	4c c6 31 82 	crclr   4*cr1+eq
10001e0c:	48 02 b9 79 	bl      1002d784 <syslog@plt>
    closelog();
10001e10:	48 02 b8 25 	bl      1002d634 <closelog@plt>
    exit( 1 );
10001e14:	38 60 00 01 	li      r3,1
10001e18:	48 02 b7 bd 	bl      1002d5d4 <exit@plt>

10001e1c <handle_chld>:


/* SIGCHLD - a chile process exitted, so we need to reap the zombie */
static void
handle_chld( int sig )
    {
10001e1c:	94 21 ff d0 	stwu    r1,-48(r1)
10001e20:	7c 08 02 a6 	mflr    r0
10001e24:	90 01 00 34 	stw     r0,52(r1)
10001e28:	93 e1 00 2c 	stw     r31,44(r1)
10001e2c:	7c 3f 0b 78 	mr      r31,r1
10001e30:	90 7f 00 18 	stw     r3,24(r31)
    const int oerrno = errno;
10001e34:	48 02 b8 a9 	bl      1002d6dc <__errno_location@plt>
10001e38:	7c 69 1b 78 	mr      r9,r3
10001e3c:	81 29 00 00 	lwz     r9,0(r9)
10001e40:	91 3f 00 08 	stw     r9,8(r31)

    /* Reap defunct children until there aren't any more. */
    for (;;)
	{
#ifdef HAVE_WAITPID
	pid = waitpid( (pid_t) -1, &status, WNOHANG );
10001e44:	39 3f 00 10 	addi    r9,r31,16
10001e48:	38 60 ff ff 	li      r3,-1
10001e4c:	7d 24 4b 78 	mr      r4,r9
10001e50:	38 a0 00 01 	li      r5,1
10001e54:	48 02 b6 f9 	bl      1002d54c <waitpid@plt>
10001e58:	90 7f 00 0c 	stw     r3,12(r31)
#else /* HAVE_WAITPID */
	pid = wait3( &status, WNOHANG, (struct rusage*) 0 );
#endif /* HAVE_WAITPID */
	if ( (int) pid == 0 )		/* none left */
10001e5c:	81 3f 00 0c 	lwz     r9,12(r31)
10001e60:	2f 89 00 00 	cmpwi   cr7,r9,0
10001e64:	40 9e 00 08 	bne     cr7,10001e6c <handle_chld+0x50>
	    break;
10001e68:	48 00 00 bc 	b       10001f24 <handle_chld+0x108>
	if ( (int) pid < 0 )
10001e6c:	81 3f 00 0c 	lwz     r9,12(r31)
10001e70:	2f 89 00 00 	cmpwi   cr7,r9,0
10001e74:	40 9c 00 60 	bge     cr7,10001ed4 <handle_chld+0xb8>
	    {
	    if ( errno == EINTR || errno == EAGAIN )
10001e78:	48 02 b8 65 	bl      1002d6dc <__errno_location@plt>
10001e7c:	7c 69 1b 78 	mr      r9,r3
10001e80:	81 29 00 00 	lwz     r9,0(r9)
10001e84:	2f 89 00 04 	cmpwi   cr7,r9,4
10001e88:	41 9e 00 18 	beq     cr7,10001ea0 <handle_chld+0x84>
10001e8c:	48 02 b8 51 	bl      1002d6dc <__errno_location@plt>
10001e90:	7c 69 1b 78 	mr      r9,r3
10001e94:	81 29 00 00 	lwz     r9,0(r9)
10001e98:	2f 89 00 0b 	cmpwi   cr7,r9,11
10001e9c:	40 9e 00 08 	bne     cr7,10001ea4 <handle_chld+0x88>
		continue;
10001ea0:	48 00 00 80 	b       10001f20 <handle_chld+0x104>
	    /* ECHILD shouldn't happen with the WNOHANG option,
	    ** but with some kernels it does anyway.  Ignore it.
	    */
	    if ( errno != ECHILD )
10001ea4:	48 02 b8 39 	bl      1002d6dc <__errno_location@plt>
10001ea8:	7c 69 1b 78 	mr      r9,r3
10001eac:	81 29 00 00 	lwz     r9,0(r9)
10001eb0:	2f 89 00 0a 	cmpwi   cr7,r9,10
10001eb4:	41 9e 00 1c 	beq     cr7,10001ed0 <handle_chld+0xb4>
		syslog( LOG_ERR, "child wait - %m" );
10001eb8:	38 60 00 03 	li      r3,3
10001ebc:	3d 20 10 01 	lis     r9,4097
10001ec0:	38 89 7d 14 	addi    r4,r9,32020
10001ec4:	4c c6 31 82 	crclr   4*cr1+eq
10001ec8:	48 02 b8 bd 	bl      1002d784 <syslog@plt>
	    break;
10001ecc:	48 00 00 58 	b       10001f24 <handle_chld+0x108>
10001ed0:	48 00 00 54 	b       10001f24 <handle_chld+0x108>
	** each CGI can involve two or even three child processes.
	** Decrementing for each child means that when there is heavy CGI
	** activity, the count will be lower than it should be, and therefore
	** more CGIs will be allowed than should be.
	*/
	if ( hs != (httpd_server*) 0 )
10001ed4:	3d 20 10 03 	lis     r9,4099
10001ed8:	81 29 db 18 	lwz     r9,-9448(r9)
10001edc:	2f 89 00 00 	cmpwi   cr7,r9,0
10001ee0:	41 9e 00 40 	beq     cr7,10001f20 <handle_chld+0x104>
	    {
	    --hs->cgi_count;
10001ee4:	3d 20 10 03 	lis     r9,4099
10001ee8:	81 29 db 18 	lwz     r9,-9448(r9)
10001eec:	81 49 00 14 	lwz     r10,20(r9)
10001ef0:	39 4a ff ff 	addi    r10,r10,-1
10001ef4:	91 49 00 14 	stw     r10,20(r9)
	    if ( hs->cgi_count < 0 )
10001ef8:	3d 20 10 03 	lis     r9,4099
10001efc:	81 29 db 18 	lwz     r9,-9448(r9)
10001f00:	81 29 00 14 	lwz     r9,20(r9)
10001f04:	2f 89 00 00 	cmpwi   cr7,r9,0
10001f08:	40 9c 00 18 	bge     cr7,10001f20 <handle_chld+0x104>
		hs->cgi_count = 0;
10001f0c:	3d 20 10 03 	lis     r9,4099
10001f10:	81 29 db 18 	lwz     r9,-9448(r9)
10001f14:	39 40 00 00 	li      r10,0
10001f18:	91 49 00 14 	stw     r10,20(r9)
	    }
	}
10001f1c:	4b ff ff 28 	b       10001e44 <handle_chld+0x28>
10001f20:	4b ff ff 24 	b       10001e44 <handle_chld+0x28>

    /* Restore previous errno. */
    errno = oerrno;
10001f24:	48 02 b7 b9 	bl      1002d6dc <__errno_location@plt>
10001f28:	7c 69 1b 78 	mr      r9,r3
10001f2c:	81 5f 00 08 	lwz     r10,8(r31)
10001f30:	91 49 00 00 	stw     r10,0(r9)
    }
10001f34:	39 7f 00 30 	addi    r11,r31,48
10001f38:	80 0b 00 04 	lwz     r0,4(r11)
10001f3c:	7c 08 03 a6 	mtlr    r0
10001f40:	83 eb ff fc 	lwz     r31,-4(r11)
10001f44:	7d 61 5b 78 	mr      r1,r11
10001f48:	4e 80 00 20 	blr

10001f4c <handle_hup>:


/* SIGHUP says to re-open the log file. */
static void
handle_hup( int sig )
    {
10001f4c:	94 21 ff d0 	stwu    r1,-48(r1)
10001f50:	7c 08 02 a6 	mflr    r0
10001f54:	90 01 00 34 	stw     r0,52(r1)
10001f58:	93 e1 00 2c 	stw     r31,44(r1)
10001f5c:	7c 3f 0b 78 	mr      r31,r1
10001f60:	90 7f 00 18 	stw     r3,24(r31)
    const int oerrno = errno;
10001f64:	48 02 b7 79 	bl      1002d6dc <__errno_location@plt>
10001f68:	7c 69 1b 78 	mr      r9,r3
10001f6c:	81 29 00 00 	lwz     r9,0(r9)
10001f70:	91 3f 00 08 	stw     r9,8(r31)
    /* Set up handler again. */
    (void) signal( SIGHUP, handle_hup );
#endif /* ! HAVE_SIGSET */

    /* Just set a flag that we got the signal. */
    got_hup = 1;
10001f74:	3d 20 10 03 	lis     r9,4099
10001f78:	39 40 00 01 	li      r10,1
10001f7c:	91 49 db 1c 	stw     r10,-9444(r9)

    /* Restore previous errno. */
    errno = oerrno;
10001f80:	48 02 b7 5d 	bl      1002d6dc <__errno_location@plt>
10001f84:	7c 69 1b 78 	mr      r9,r3
10001f88:	81 5f 00 08 	lwz     r10,8(r31)
10001f8c:	91 49 00 00 	stw     r10,0(r9)
    }
10001f90:	39 7f 00 30 	addi    r11,r31,48
10001f94:	80 0b 00 04 	lwz     r0,4(r11)
10001f98:	7c 08 03 a6 	mtlr    r0
10001f9c:	83 eb ff fc 	lwz     r31,-4(r11)
10001fa0:	7d 61 5b 78 	mr      r1,r11
10001fa4:	4e 80 00 20 	blr

10001fa8 <handle_usr1>:


/* SIGUSR1 says to exit as soon as all current connections are done. */
static void
handle_usr1( int sig )
    {
10001fa8:	94 21 ff e0 	stwu    r1,-32(r1)
10001fac:	7c 08 02 a6 	mflr    r0
10001fb0:	90 01 00 24 	stw     r0,36(r1)
10001fb4:	93 e1 00 1c 	stw     r31,28(r1)
10001fb8:	7c 3f 0b 78 	mr      r31,r1
10001fbc:	90 7f 00 08 	stw     r3,8(r31)
    /* Don't need to set up the handler again, since it's a one-shot. */

    if ( num_connects == 0 )
10001fc0:	3d 20 10 03 	lis     r9,4099
10001fc4:	81 29 db 08 	lwz     r9,-9464(r9)
10001fc8:	2f 89 00 00 	cmpwi   cr7,r9,0
10001fcc:	40 9e 00 28 	bne     cr7,10001ff4 <handle_usr1+0x4c>
	{
	/* If there are no active connections we want to exit immediately
	** here.  Not only is it faster, but without any connections the
	** main loop won't wake up until the next new connection.
	*/
	shut_down();
10001fd0:	48 00 30 69 	bl      10005038 <shut_down>
	syslog( LOG_NOTICE, "exiting" );
10001fd4:	38 60 00 05 	li      r3,5
10001fd8:	3d 20 10 01 	lis     r9,4097
10001fdc:	38 89 7d 24 	addi    r4,r9,32036
10001fe0:	4c c6 31 82 	crclr   4*cr1+eq
10001fe4:	48 02 b7 a1 	bl      1002d784 <syslog@plt>
	closelog();
10001fe8:	48 02 b6 4d 	bl      1002d634 <closelog@plt>
	exit( 0 );
10001fec:	38 60 00 00 	li      r3,0
10001ff0:	48 02 b5 e5 	bl      1002d5d4 <exit@plt>
	}

    /* Otherwise, just set a flag that we got the signal. */
    got_usr1 = 1;
10001ff4:	3d 20 10 03 	lis     r9,4099
10001ff8:	39 40 00 01 	li      r10,1
10001ffc:	91 49 db 20 	stw     r10,-9440(r9)

    /* Don't need to restore old errno, since we didn't do any syscalls. */
    }
10002000:	39 7f 00 20 	addi    r11,r31,32
10002004:	80 0b 00 04 	lwz     r0,4(r11)
10002008:	7c 08 03 a6 	mtlr    r0
1000200c:	83 eb ff fc 	lwz     r31,-4(r11)
10002010:	7d 61 5b 78 	mr      r1,r11
10002014:	4e 80 00 20 	blr

10002018 <handle_usr2>:


/* SIGUSR2 says to generate the stats syslogs immediately. */
static void
handle_usr2( int sig )
    {
10002018:	94 21 ff d0 	stwu    r1,-48(r1)
1000201c:	7c 08 02 a6 	mflr    r0
10002020:	90 01 00 34 	stw     r0,52(r1)
10002024:	93 e1 00 2c 	stw     r31,44(r1)
10002028:	7c 3f 0b 78 	mr      r31,r1
1000202c:	90 7f 00 18 	stw     r3,24(r31)
    const int oerrno = errno;
10002030:	48 02 b6 ad 	bl      1002d6dc <__errno_location@plt>
10002034:	7c 69 1b 78 	mr      r9,r3
10002038:	81 29 00 00 	lwz     r9,0(r9)
1000203c:	91 3f 00 08 	stw     r9,8(r31)
#ifndef HAVE_SIGSET
    /* Set up handler again. */
    (void) signal( SIGUSR2, handle_usr2 );
#endif /* ! HAVE_SIGSET */

    logstats( (struct timeval*) 0 );
10002040:	38 60 00 00 	li      r3,0
10002044:	48 00 4e 19 	bl      10006e5c <logstats>

    /* Restore previous errno. */
    errno = oerrno;
10002048:	48 02 b6 95 	bl      1002d6dc <__errno_location@plt>
1000204c:	7c 69 1b 78 	mr      r9,r3
10002050:	81 5f 00 08 	lwz     r10,8(r31)
10002054:	91 49 00 00 	stw     r10,0(r9)
    }
10002058:	39 7f 00 30 	addi    r11,r31,48
1000205c:	80 0b 00 04 	lwz     r0,4(r11)
10002060:	7c 08 03 a6 	mtlr    r0
10002064:	83 eb ff fc 	lwz     r31,-4(r11)
10002068:	7d 61 5b 78 	mr      r1,r11
1000206c:	4e 80 00 20 	blr

10002070 <handle_alrm>:


/* SIGALRM is used as a watchdog. */
static void
handle_alrm( int sig )
    {
10002070:	94 21 ff d0 	stwu    r1,-48(r1)
10002074:	7c 08 02 a6 	mflr    r0
10002078:	90 01 00 34 	stw     r0,52(r1)
1000207c:	93 e1 00 2c 	stw     r31,44(r1)
10002080:	7c 3f 0b 78 	mr      r31,r1
10002084:	90 7f 00 18 	stw     r3,24(r31)
    const int oerrno = errno;
10002088:	48 02 b6 55 	bl      1002d6dc <__errno_location@plt>
1000208c:	7c 69 1b 78 	mr      r9,r3
10002090:	81 29 00 00 	lwz     r9,0(r9)
10002094:	91 3f 00 08 	stw     r9,8(r31)

    /* If nothing has been happening */
    if ( ! watchdog_flag )
10002098:	3d 20 10 03 	lis     r9,4099
1000209c:	81 29 db 24 	lwz     r9,-9436(r9)
100020a0:	2f 89 00 00 	cmpwi   cr7,r9,0
100020a4:	40 9e 00 14 	bne     cr7,100020b8 <handle_alrm+0x48>
	{
	/* Try changing dirs to someplace we can write. */
	(void) chdir( "/tmp" );
100020a8:	3d 20 10 01 	lis     r9,4097
100020ac:	38 69 7d 2c 	addi    r3,r9,32044
100020b0:	48 02 b3 f5 	bl      1002d4a4 <chdir@plt>
	/* Dump core. */
	abort();
100020b4:	48 02 b7 49 	bl      1002d7fc <abort@plt>
	}
    watchdog_flag = 0;
100020b8:	3d 20 10 03 	lis     r9,4099
100020bc:	39 40 00 00 	li      r10,0
100020c0:	91 49 db 24 	stw     r10,-9436(r9)
#ifndef HAVE_SIGSET
    /* Set up handler again. */
    (void) signal( SIGALRM, handle_alrm );
#endif /* ! HAVE_SIGSET */
    /* Set up alarm again. */
    (void) alarm( OCCASIONAL_TIME * 3 );
100020c4:	38 60 01 68 	li      r3,360
100020c8:	48 02 b3 fd 	bl      1002d4c4 <alarm@plt>

    /* Restore previous errno. */
    errno = oerrno;
100020cc:	48 02 b6 11 	bl      1002d6dc <__errno_location@plt>
100020d0:	7c 69 1b 78 	mr      r9,r3
100020d4:	81 5f 00 08 	lwz     r10,8(r31)
100020d8:	91 49 00 00 	stw     r10,0(r9)
    }
100020dc:	39 7f 00 30 	addi    r11,r31,48
100020e0:	80 0b 00 04 	lwz     r0,4(r11)
100020e4:	7c 08 03 a6 	mtlr    r0
100020e8:	83 eb ff fc 	lwz     r31,-4(r11)
100020ec:	7d 61 5b 78 	mr      r1,r11
100020f0:	4e 80 00 20 	blr

100020f4 <re_open_logfile>:


static void
re_open_logfile( void )
    {
100020f4:	94 21 ff e0 	stwu    r1,-32(r1)
100020f8:	7c 08 02 a6 	mflr    r0
100020fc:	90 01 00 24 	stw     r0,36(r1)
10002100:	93 e1 00 1c 	stw     r31,28(r1)
10002104:	7c 3f 0b 78 	mr      r31,r1
    FILE* logfp;

    if ( no_log || hs == (httpd_server*) 0 )
10002108:	3d 20 10 03 	lis     r9,4099
1000210c:	81 29 da b4 	lwz     r9,-9548(r9)
10002110:	2f 89 00 00 	cmpwi   cr7,r9,0
10002114:	40 9e 00 14 	bne     cr7,10002128 <re_open_logfile+0x34>
10002118:	3d 20 10 03 	lis     r9,4099
1000211c:	81 29 db 18 	lwz     r9,-9448(r9)
10002120:	2f 89 00 00 	cmpwi   cr7,r9,0
10002124:	40 9e 00 08 	bne     cr7,1000212c <re_open_logfile+0x38>
	return;
10002128:	48 00 00 cc 	b       100021f4 <re_open_logfile+0x100>

    /* Re-open the log file. */
    if ( logfile != (char*) 0 && strcmp( logfile, "-" ) != 0 )
1000212c:	3d 20 10 03 	lis     r9,4099
10002130:	81 29 da d8 	lwz     r9,-9512(r9)
10002134:	2f 89 00 00 	cmpwi   cr7,r9,0
10002138:	41 9e 00 bc 	beq     cr7,100021f4 <re_open_logfile+0x100>
1000213c:	3d 20 10 03 	lis     r9,4099
10002140:	81 29 da d8 	lwz     r9,-9512(r9)
10002144:	7d 23 4b 78 	mr      r3,r9
10002148:	3d 20 10 01 	lis     r9,4097
1000214c:	38 89 7d 34 	addi    r4,r9,32052
10002150:	48 02 b2 8d 	bl      1002d3dc <strcmp@plt>
10002154:	7c 69 1b 78 	mr      r9,r3
10002158:	2f 89 00 00 	cmpwi   cr7,r9,0
1000215c:	41 9e 00 98 	beq     cr7,100021f4 <re_open_logfile+0x100>
	{
	syslog( LOG_NOTICE, "re-opening logfile" );
10002160:	38 60 00 05 	li      r3,5
10002164:	3d 20 10 01 	lis     r9,4097
10002168:	38 89 7d 38 	addi    r4,r9,32056
1000216c:	4c c6 31 82 	crclr   4*cr1+eq
10002170:	48 02 b6 15 	bl      1002d784 <syslog@plt>
	logfp = fopen( logfile, "a" );
10002174:	3d 20 10 03 	lis     r9,4099
10002178:	81 29 da d8 	lwz     r9,-9512(r9)
1000217c:	7d 23 4b 78 	mr      r3,r9
10002180:	3d 20 10 01 	lis     r9,4097
10002184:	38 89 7d 4c 	addi    r4,r9,32076
10002188:	48 02 b5 2d 	bl      1002d6b4 <fopen@plt>
1000218c:	90 7f 00 08 	stw     r3,8(r31)
	if ( logfp == (FILE*) 0 )
10002190:	81 3f 00 08 	lwz     r9,8(r31)
10002194:	2f 89 00 00 	cmpwi   cr7,r9,0
10002198:	40 9e 00 28 	bne     cr7,100021c0 <re_open_logfile+0xcc>
	    {
	    syslog( LOG_CRIT, "re-opening %.80s - %m", logfile );
1000219c:	3d 20 10 03 	lis     r9,4099
100021a0:	81 29 da d8 	lwz     r9,-9512(r9)
100021a4:	38 60 00 02 	li      r3,2
100021a8:	3d 40 10 01 	lis     r10,4097
100021ac:	38 8a 7d 50 	addi    r4,r10,32080
100021b0:	7d 25 4b 78 	mr      r5,r9
100021b4:	4c c6 31 82 	crclr   4*cr1+eq
100021b8:	48 02 b5 cd 	bl      1002d784 <syslog@plt>
	    return;
100021bc:	48 00 00 38 	b       100021f4 <re_open_logfile+0x100>
	    }
	(void) fcntl( fileno( logfp ), F_SETFD, 1 );
100021c0:	80 7f 00 08 	lwz     r3,8(r31)
100021c4:	48 02 b5 29 	bl      1002d6ec <fileno@plt>
100021c8:	7c 69 1b 78 	mr      r9,r3
100021cc:	7d 23 4b 78 	mr      r3,r9
100021d0:	38 80 00 02 	li      r4,2
100021d4:	38 a0 00 01 	li      r5,1
100021d8:	4c c6 31 82 	crclr   4*cr1+eq
100021dc:	48 02 b4 b9 	bl      1002d694 <fcntl@plt>
	httpd_set_logfp( hs, logfp );
100021e0:	3d 20 10 03 	lis     r9,4099
100021e4:	81 29 db 18 	lwz     r9,-9448(r9)
100021e8:	7d 23 4b 78 	mr      r3,r9
100021ec:	80 9f 00 08 	lwz     r4,8(r31)
100021f0:	48 00 58 29 	bl      10007a18 <httpd_set_logfp>
	}
    }
100021f4:	39 7f 00 20 	addi    r11,r31,32
100021f8:	80 0b 00 04 	lwz     r0,4(r11)
100021fc:	7c 08 03 a6 	mtlr    r0
10002200:	83 eb ff fc 	lwz     r31,-4(r11)
10002204:	7d 61 5b 78 	mr      r1,r11
10002208:	4e 80 00 20 	blr

1000220c <main>:


int
main( int argc, char** argv )
    {
1000220c:	94 21 ee 60 	stwu    r1,-4512(r1)
10002210:	7c 08 02 a6 	mflr    r0
10002214:	90 01 11 a4 	stw     r0,4516(r1)
10002218:	93 21 11 84 	stw     r25,4484(r1)
1000221c:	93 41 11 88 	stw     r26,4488(r1)
10002220:	93 61 11 8c 	stw     r27,4492(r1)
10002224:	93 81 11 90 	stw     r28,4496(r1)
10002228:	93 a1 11 94 	stw     r29,4500(r1)
1000222c:	93 c1 11 98 	stw     r30,4504(r1)
10002230:	93 e1 11 9c 	stw     r31,4508(r1)
10002234:	7c 3f 0b 78 	mr      r31,r1
10002238:	90 7f 11 70 	stw     r3,4464(r31)
1000223c:	90 9f 11 74 	stw     r4,4468(r31)
    char* cp;
    struct passwd* pwd;
    uid_t uid = 32767;
10002240:	39 20 7f ff 	li      r9,32767
10002244:	91 3f 00 34 	stw     r9,52(r31)
    gid_t gid = 32767;
10002248:	39 20 7f ff 	li      r9,32767
1000224c:	91 3f 00 38 	stw     r9,56(r31)
    httpd_conn* hc;
    httpd_sockaddr sa4;
    httpd_sockaddr sa6;
    int gotv4, gotv6;
    struct timeval tv;
    lighandle=lig_matrix_open(LIG_MATRIX_DLL_VER);
10002250:	3d 20 01 00 	lis     r9,256
10002254:	61 23 00 05 	ori     r3,r9,5
10002258:	48 02 b4 dd 	bl      1002d734 <lig_matrix_open@plt>
1000225c:	7c 6a 1b 78 	mr      r10,r3
10002260:	3d 20 10 03 	lis     r9,4099
10002264:	91 49 d3 6c 	stw     r10,-11412(r9)
    argv0 = argv[0];
10002268:	81 3f 11 74 	lwz     r9,4468(r31)
1000226c:	81 49 00 00 	lwz     r10,0(r9)
10002270:	3d 20 10 03 	lis     r9,4099
10002274:	91 49 da 9c 	stw     r10,-9572(r9)

    cp = strrchr( argv0, '/' );
10002278:	3d 20 10 03 	lis     r9,4099
1000227c:	81 29 da 9c 	lwz     r9,-9572(r9)
10002280:	7d 23 4b 78 	mr      r3,r9
10002284:	38 80 00 2f 	li      r4,47
10002288:	48 02 b4 f5 	bl      1002d77c <strrchr@plt>
1000228c:	90 7f 00 30 	stw     r3,48(r31)
    if ( cp != (char*) 0 )
10002290:	81 3f 00 30 	lwz     r9,48(r31)
10002294:	2f 89 00 00 	cmpwi   cr7,r9,0
10002298:	41 9e 00 14 	beq     cr7,100022ac <main+0xa0>
	++cp;
1000229c:	81 3f 00 30 	lwz     r9,48(r31)
100022a0:	39 29 00 01 	addi    r9,r9,1
100022a4:	91 3f 00 30 	stw     r9,48(r31)
100022a8:	48 00 00 10 	b       100022b8 <main+0xac>
    else
	cp = argv0;
100022ac:	3d 20 10 03 	lis     r9,4099
100022b0:	81 29 da 9c 	lwz     r9,-9572(r9)
100022b4:	91 3f 00 30 	stw     r9,48(r31)
    openlog( cp, LOG_NDELAY|LOG_PID, LOG_FACILITY );
100022b8:	80 7f 00 30 	lwz     r3,48(r31)
100022bc:	38 80 00 09 	li      r4,9
100022c0:	38 a0 00 18 	li      r5,24
100022c4:	48 02 b4 d9 	bl      1002d79c <openlog@plt>

    /* Handle command-line arguments. */
    parse_args( argc, argv );
100022c8:	80 7f 11 70 	lwz     r3,4464(r31)
100022cc:	80 9f 11 74 	lwz     r4,4468(r31)
100022d0:	48 00 11 01 	bl      100033d0 <parse_args>

    /* Read zone info now, in case we chroot(). */
    tzset();
100022d4:	48 02 b2 69 	bl      1002d53c <tzset@plt>

    /* Look up hostname now, in case we chroot(). */
    lookup_hostname( &sa4, sizeof(sa4), &gotv4, &sa6, sizeof(sa6), &gotv6 );
100022d8:	38 ff 10 5c 	addi    r7,r31,4188
100022dc:	39 1f 11 5c 	addi    r8,r31,4444
100022e0:	39 5f 10 dc 	addi    r10,r31,4316
100022e4:	39 3f 11 60 	addi    r9,r31,4448
100022e8:	7c e3 3b 78 	mr      r3,r7
100022ec:	38 80 00 80 	li      r4,128
100022f0:	7d 05 43 78 	mr      r5,r8
100022f4:	7d 46 53 78 	mr      r6,r10
100022f8:	38 e0 00 80 	li      r7,128
100022fc:	7d 28 4b 78 	mr      r8,r9
10002300:	48 00 24 e9 	bl      100047e8 <lookup_hostname>
    if ( ! ( gotv4 || gotv6 ) )
10002304:	81 3f 11 5c 	lwz     r9,4444(r31)
10002308:	2f 89 00 00 	cmpwi   cr7,r9,0
1000230c:	40 9e 00 54 	bne     cr7,10002360 <main+0x154>
10002310:	81 3f 11 60 	lwz     r9,4448(r31)
10002314:	2f 89 00 00 	cmpwi   cr7,r9,0
10002318:	40 9e 00 48 	bne     cr7,10002360 <main+0x154>
	{
	syslog( LOG_ERR, "can't find any valid address" );
1000231c:	38 60 00 03 	li      r3,3
10002320:	3d 20 10 01 	lis     r9,4097
10002324:	38 89 7d 68 	addi    r4,r9,32104
10002328:	4c c6 31 82 	crclr   4*cr1+eq
1000232c:	48 02 b4 59 	bl      1002d784 <syslog@plt>
	(void) fprintf( stderr, "%s: can't find any valid address\n", argv0 );
10002330:	3d 20 10 03 	lis     r9,4099
10002334:	81 49 da 88 	lwz     r10,-9592(r9)
10002338:	3d 20 10 03 	lis     r9,4099
1000233c:	81 29 da 9c 	lwz     r9,-9572(r9)
10002340:	7d 43 53 78 	mr      r3,r10
10002344:	3d 40 10 01 	lis     r10,4097
10002348:	38 8a 7d 88 	addi    r4,r10,32136
1000234c:	7d 25 4b 78 	mr      r5,r9
10002350:	4c c6 31 82 	crclr   4*cr1+eq
10002354:	48 02 b3 29 	bl      1002d67c <fprintf@plt>
	exit( 1 );
10002358:	38 60 00 01 	li      r3,1
1000235c:	48 02 b2 79 	bl      1002d5d4 <exit@plt>
	}

    /* Throttle file. */
    numthrottles = 0;
10002360:	3d 20 10 03 	lis     r9,4099
10002364:	39 40 00 00 	li      r10,0
10002368:	91 49 da fc 	stw     r10,-9476(r9)
    maxthrottles = 0;
1000236c:	3d 20 10 03 	lis     r9,4099
10002370:	39 40 00 00 	li      r10,0
10002374:	91 49 db 00 	stw     r10,-9472(r9)
    throttles = (throttletab*) 0;
10002378:	3d 20 10 03 	lis     r9,4099
1000237c:	39 40 00 00 	li      r10,0
10002380:	91 49 da f8 	stw     r10,-9480(r9)
    if ( throttlefile != (char*) 0 )
10002384:	3d 20 10 03 	lis     r9,4099
10002388:	81 29 da dc 	lwz     r9,-9508(r9)
1000238c:	2f 89 00 00 	cmpwi   cr7,r9,0
10002390:	41 9e 00 14 	beq     cr7,100023a4 <main+0x198>
	read_throttlefile( throttlefile );
10002394:	3d 20 10 03 	lis     r9,4099
10002398:	81 29 da dc 	lwz     r9,-9508(r9)
1000239c:	7d 23 4b 78 	mr      r3,r9
100023a0:	48 00 27 89 	bl      10004b28 <read_throttlefile>

    /* If we're root and we're going to become another user, get the uid/gid
    ** now.
    */
    if ( getuid() == 0 )
100023a4:	48 02 b1 29 	bl      1002d4cc <getuid@plt>
100023a8:	7c 69 1b 78 	mr      r9,r3
100023ac:	2f 89 00 00 	cmpwi   cr7,r9,0
100023b0:	40 9e 00 98 	bne     cr7,10002448 <main+0x23c>
	{
	pwd = getpwnam( user );
100023b4:	3d 20 10 03 	lis     r9,4099
100023b8:	81 29 da e8 	lwz     r9,-9496(r9)
100023bc:	7d 23 4b 78 	mr      r3,r9
100023c0:	48 02 b0 05 	bl      1002d3c4 <getpwnam@plt>
100023c4:	90 7f 00 44 	stw     r3,68(r31)
	if ( pwd == (struct passwd*) 0 )
100023c8:	81 3f 00 44 	lwz     r9,68(r31)
100023cc:	2f 89 00 00 	cmpwi   cr7,r9,0
100023d0:	40 9e 00 60 	bne     cr7,10002430 <main+0x224>
	    {
	    syslog( LOG_CRIT, "unknown user - '%.80s'", user );
100023d4:	3d 20 10 03 	lis     r9,4099
100023d8:	81 29 da e8 	lwz     r9,-9496(r9)
100023dc:	38 60 00 02 	li      r3,2
100023e0:	3d 40 10 01 	lis     r10,4097
100023e4:	38 8a 7d ac 	addi    r4,r10,32172
100023e8:	7d 25 4b 78 	mr      r5,r9
100023ec:	4c c6 31 82 	crclr   4*cr1+eq
100023f0:	48 02 b3 95 	bl      1002d784 <syslog@plt>
	    (void) fprintf( stderr, "%s: unknown user - '%s'\n", argv0, user );
100023f4:	3d 20 10 03 	lis     r9,4099
100023f8:	81 09 da 88 	lwz     r8,-9592(r9)
100023fc:	3d 20 10 03 	lis     r9,4099
10002400:	81 49 da 9c 	lwz     r10,-9572(r9)
10002404:	3d 20 10 03 	lis     r9,4099
10002408:	81 29 da e8 	lwz     r9,-9496(r9)
1000240c:	7d 03 43 78 	mr      r3,r8
10002410:	3d 00 10 01 	lis     r8,4097
10002414:	38 88 7d c4 	addi    r4,r8,32196
10002418:	7d 45 53 78 	mr      r5,r10
1000241c:	7d 26 4b 78 	mr      r6,r9
10002420:	4c c6 31 82 	crclr   4*cr1+eq
10002424:	48 02 b2 59 	bl      1002d67c <fprintf@plt>
	    exit( 1 );
10002428:	38 60 00 01 	li      r3,1
1000242c:	48 02 b1 a9 	bl      1002d5d4 <exit@plt>
	    }
	uid = pwd->pw_uid;
10002430:	81 3f 00 44 	lwz     r9,68(r31)
10002434:	81 29 00 08 	lwz     r9,8(r9)
10002438:	91 3f 00 34 	stw     r9,52(r31)
	gid = pwd->pw_gid;
1000243c:	81 3f 00 44 	lwz     r9,68(r31)
10002440:	81 29 00 0c 	lwz     r9,12(r9)
10002444:	91 3f 00 38 	stw     r9,56(r31)
	}

    /* Log file. */
    if ( logfile != (char*) 0 )
10002448:	3d 20 10 03 	lis     r9,4099
1000244c:	81 29 da d8 	lwz     r9,-9512(r9)
10002450:	2f 89 00 00 	cmpwi   cr7,r9,0
10002454:	41 9e 01 a4 	beq     cr7,100025f8 <main+0x3ec>
	{
	if ( strcmp( logfile, "/dev/null" ) == 0 )
10002458:	3d 20 10 03 	lis     r9,4099
1000245c:	81 29 da d8 	lwz     r9,-9512(r9)
10002460:	7d 23 4b 78 	mr      r3,r9
10002464:	3d 20 10 01 	lis     r9,4097
10002468:	38 89 7d e0 	addi    r4,r9,32224
1000246c:	48 02 af 71 	bl      1002d3dc <strcmp@plt>
10002470:	7c 69 1b 78 	mr      r9,r3
10002474:	2f 89 00 00 	cmpwi   cr7,r9,0
10002478:	40 9e 00 1c 	bne     cr7,10002494 <main+0x288>
	    {
	    no_log = 1;
1000247c:	3d 20 10 03 	lis     r9,4099
10002480:	39 40 00 01 	li      r10,1
10002484:	91 49 da b4 	stw     r10,-9548(r9)
	    logfp = (FILE*) 0;
10002488:	39 20 00 00 	li      r9,0
1000248c:	91 3f 00 3c 	stw     r9,60(r31)
10002490:	48 00 01 70 	b       10002600 <main+0x3f4>
	    }
	else if ( strcmp( logfile, "-" ) == 0 )
10002494:	3d 20 10 03 	lis     r9,4099
10002498:	81 29 da d8 	lwz     r9,-9512(r9)
1000249c:	7d 23 4b 78 	mr      r3,r9
100024a0:	3d 20 10 01 	lis     r9,4097
100024a4:	38 89 7d 34 	addi    r4,r9,32052
100024a8:	48 02 af 35 	bl      1002d3dc <strcmp@plt>
100024ac:	7c 69 1b 78 	mr      r9,r3
100024b0:	2f 89 00 00 	cmpwi   cr7,r9,0
100024b4:	40 9e 00 14 	bne     cr7,100024c8 <main+0x2bc>
	    logfp = stdout;
100024b8:	3d 20 10 03 	lis     r9,4099
100024bc:	81 29 da 90 	lwz     r9,-9584(r9)
100024c0:	91 3f 00 3c 	stw     r9,60(r31)
100024c4:	48 00 01 3c 	b       10002600 <main+0x3f4>
	else
	    {
	    logfp = fopen( logfile, "a" );
100024c8:	3d 20 10 03 	lis     r9,4099
100024cc:	81 29 da d8 	lwz     r9,-9512(r9)
100024d0:	7d 23 4b 78 	mr      r3,r9
100024d4:	3d 20 10 01 	lis     r9,4097
100024d8:	38 89 7d 4c 	addi    r4,r9,32076
100024dc:	48 02 b1 d9 	bl      1002d6b4 <fopen@plt>
100024e0:	90 7f 00 3c 	stw     r3,60(r31)
	    if ( logfp == (FILE*) 0 )
100024e4:	81 3f 00 3c 	lwz     r9,60(r31)
100024e8:	2f 89 00 00 	cmpwi   cr7,r9,0
100024ec:	40 9e 00 3c 	bne     cr7,10002528 <main+0x31c>
		{
		syslog( LOG_CRIT, "%.80s - %m", logfile );
100024f0:	3d 20 10 03 	lis     r9,4099
100024f4:	81 29 da d8 	lwz     r9,-9512(r9)
100024f8:	38 60 00 02 	li      r3,2
100024fc:	3d 40 10 01 	lis     r10,4097
10002500:	38 8a 7d ec 	addi    r4,r10,32236
10002504:	7d 25 4b 78 	mr      r5,r9
10002508:	4c c6 31 82 	crclr   4*cr1+eq
1000250c:	48 02 b2 79 	bl      1002d784 <syslog@plt>
		perror( logfile );
10002510:	3d 20 10 03 	lis     r9,4099
10002514:	81 29 da d8 	lwz     r9,-9512(r9)
10002518:	7d 23 4b 78 	mr      r3,r9
1000251c:	48 02 af f9 	bl      1002d514 <perror@plt>
		exit( 1 );
10002520:	38 60 00 01 	li      r3,1
10002524:	48 02 b0 b1 	bl      1002d5d4 <exit@plt>
		}
	    if ( logfile[0] != '/' )
10002528:	3d 20 10 03 	lis     r9,4099
1000252c:	81 29 da d8 	lwz     r9,-9512(r9)
10002530:	89 29 00 00 	lbz     r9,0(r9)
10002534:	55 29 06 3e 	clrlwi  r9,r9,24
10002538:	2b 89 00 2f 	cmplwi  cr7,r9,47
1000253c:	41 9e 00 40 	beq     cr7,1000257c <main+0x370>
		{
		syslog( LOG_WARNING, "logfile is not an absolute path, you may not be able to re-open it" );
10002540:	38 60 00 04 	li      r3,4
10002544:	3d 20 10 01 	lis     r9,4097
10002548:	38 89 7d f8 	addi    r4,r9,32248
1000254c:	4c c6 31 82 	crclr   4*cr1+eq
10002550:	48 02 b2 35 	bl      1002d784 <syslog@plt>
		(void) fprintf( stderr, "%s: logfile is not an absolute path, you may not be able to re-open it\n", argv0 );
10002554:	3d 20 10 03 	lis     r9,4099
10002558:	81 49 da 88 	lwz     r10,-9592(r9)
1000255c:	3d 20 10 03 	lis     r9,4099
10002560:	81 29 da 9c 	lwz     r9,-9572(r9)
10002564:	7d 43 53 78 	mr      r3,r10
10002568:	3d 40 10 01 	lis     r10,4097
1000256c:	38 8a 7e 3c 	addi    r4,r10,32316
10002570:	7d 25 4b 78 	mr      r5,r9
10002574:	4c c6 31 82 	crclr   4*cr1+eq
10002578:	48 02 b1 05 	bl      1002d67c <fprintf@plt>
		}
	    (void) fcntl( fileno( logfp ), F_SETFD, 1 );
1000257c:	80 7f 00 3c 	lwz     r3,60(r31)
10002580:	48 02 b1 6d 	bl      1002d6ec <fileno@plt>
10002584:	7c 69 1b 78 	mr      r9,r3
10002588:	7d 23 4b 78 	mr      r3,r9
1000258c:	38 80 00 02 	li      r4,2
10002590:	38 a0 00 01 	li      r5,1
10002594:	4c c6 31 82 	crclr   4*cr1+eq
10002598:	48 02 b0 fd 	bl      1002d694 <fcntl@plt>
	    if ( getuid() == 0 )
1000259c:	48 02 af 31 	bl      1002d4cc <getuid@plt>
100025a0:	7c 69 1b 78 	mr      r9,r3
100025a4:	2f 89 00 00 	cmpwi   cr7,r9,0
100025a8:	40 9e 00 58 	bne     cr7,10002600 <main+0x3f4>
		{
		/* If we are root then we chown the log file to the user we'll
		** be switching to.
		*/
		if ( fchown( fileno( logfp ), uid, gid ) < 0 )
100025ac:	80 7f 00 3c 	lwz     r3,60(r31)
100025b0:	48 02 b1 3d 	bl      1002d6ec <fileno@plt>
100025b4:	7c 69 1b 78 	mr      r9,r3
100025b8:	7d 23 4b 78 	mr      r3,r9
100025bc:	80 9f 00 34 	lwz     r4,52(r31)
100025c0:	80 bf 00 38 	lwz     r5,56(r31)
100025c4:	48 02 b0 99 	bl      1002d65c <fchown@plt>
100025c8:	7c 69 1b 78 	mr      r9,r3
100025cc:	2f 89 00 00 	cmpwi   cr7,r9,0
100025d0:	40 9c 00 30 	bge     cr7,10002600 <main+0x3f4>
		    {
		    syslog( LOG_WARNING, "fchown logfile - %m" );
100025d4:	38 60 00 04 	li      r3,4
100025d8:	3d 20 10 01 	lis     r9,4097
100025dc:	38 89 7e 84 	addi    r4,r9,32388
100025e0:	4c c6 31 82 	crclr   4*cr1+eq
100025e4:	48 02 b1 a1 	bl      1002d784 <syslog@plt>
		    perror( "fchown logfile" );
100025e8:	3d 20 10 01 	lis     r9,4097
100025ec:	38 69 7e 98 	addi    r3,r9,32408
100025f0:	48 02 af 25 	bl      1002d514 <perror@plt>
100025f4:	48 00 00 0c 	b       10002600 <main+0x3f4>
		    }
		}
	    }
	}
    else
	logfp = (FILE*) 0;
100025f8:	39 20 00 00 	li      r9,0
100025fc:	91 3f 00 3c 	stw     r9,60(r31)

    /* Switch directories if requested. */
    if ( dir != (char*) 0 )
10002600:	3d 20 10 03 	lis     r9,4099
10002604:	81 29 da a8 	lwz     r9,-9560(r9)
10002608:	2f 89 00 00 	cmpwi   cr7,r9,0
1000260c:	41 9e 00 48 	beq     cr7,10002654 <main+0x448>
	{
	if ( chdir( dir ) < 0 )
10002610:	3d 20 10 03 	lis     r9,4099
10002614:	81 29 da a8 	lwz     r9,-9560(r9)
10002618:	7d 23 4b 78 	mr      r3,r9
1000261c:	48 02 ae 89 	bl      1002d4a4 <chdir@plt>
10002620:	7c 69 1b 78 	mr      r9,r3
10002624:	2f 89 00 00 	cmpwi   cr7,r9,0
10002628:	40 9c 00 2c 	bge     cr7,10002654 <main+0x448>
	    {
	    syslog( LOG_CRIT, "chdir - %m" );
1000262c:	38 60 00 02 	li      r3,2
10002630:	3d 20 10 01 	lis     r9,4097
10002634:	38 89 7e a8 	addi    r4,r9,32424
10002638:	4c c6 31 82 	crclr   4*cr1+eq
1000263c:	48 02 b1 49 	bl      1002d784 <syslog@plt>
	    perror( "chdir" );
10002640:	3d 20 10 01 	lis     r9,4097
10002644:	38 69 7e b4 	addi    r3,r9,32436
10002648:	48 02 ae cd 	bl      1002d514 <perror@plt>
	    exit( 1 );
1000264c:	38 60 00 01 	li      r3,1
10002650:	48 02 af 85 	bl      1002d5d4 <exit@plt>
	    }
	}
#endif /* USE_USER_DIR */

    /* Get current directory. */
    (void) getcwd( cwd, sizeof(cwd) - 1 );
10002654:	39 3f 00 58 	addi    r9,r31,88
10002658:	7d 23 4b 78 	mr      r3,r9
1000265c:	38 80 10 00 	li      r4,4096
10002660:	48 02 af ed 	bl      1002d64c <getcwd@plt>
    if ( cwd[strlen( cwd ) - 1] != '/' )
10002664:	39 3f 00 58 	addi    r9,r31,88
10002668:	7d 23 4b 78 	mr      r3,r9
1000266c:	48 02 af e9 	bl      1002d654 <strlen@plt>
10002670:	7c 69 1b 78 	mr      r9,r3
10002674:	39 29 ff ff 	addi    r9,r9,-1
10002678:	39 5f 00 30 	addi    r10,r31,48
1000267c:	7d 2a 4a 14 	add     r9,r10,r9
10002680:	89 29 00 28 	lbz     r9,40(r9)
10002684:	55 29 06 3e 	clrlwi  r9,r9,24
10002688:	2b 89 00 2f 	cmplwi  cr7,r9,47
1000268c:	41 9e 00 24 	beq     cr7,100026b0 <main+0x4a4>
	(void) strcat( cwd, "/" );
10002690:	39 3f 00 58 	addi    r9,r31,88
10002694:	7d 23 4b 78 	mr      r3,r9
10002698:	48 02 af bd 	bl      1002d654 <strlen@plt>
1000269c:	7c 69 1b 78 	mr      r9,r3
100026a0:	39 5f 00 58 	addi    r10,r31,88
100026a4:	7d 2a 4a 14 	add     r9,r10,r9
100026a8:	39 40 2f 00 	li      r10,12032
100026ac:	b1 49 00 00 	sth     r10,0(r9)

    if ( ! debug )
100026b0:	3d 20 10 03 	lis     r9,4099
100026b4:	81 29 da a0 	lwz     r9,-9568(r9)
100026b8:	2f 89 00 00 	cmpwi   cr7,r9,0
100026bc:	40 9e 00 7c 	bne     cr7,10002738 <main+0x52c>
	{
	/* We're not going to use stdin stdout or stderr from here on, so close
	** them to save file descriptors.
	*/
	(void) fclose( stdin );
100026c0:	3d 20 10 03 	lis     r9,4099
100026c4:	81 29 da 8c 	lwz     r9,-9588(r9)
100026c8:	7d 23 4b 78 	mr      r3,r9
100026cc:	48 02 ad a1 	bl      1002d46c <fclose@plt>
	if ( logfp != stdout )
100026d0:	3d 20 10 03 	lis     r9,4099
100026d4:	81 29 da 90 	lwz     r9,-9584(r9)
100026d8:	81 5f 00 3c 	lwz     r10,60(r31)
100026dc:	7f 8a 48 00 	cmpw    cr7,r10,r9
100026e0:	41 9e 00 14 	beq     cr7,100026f4 <main+0x4e8>
	    (void) fclose( stdout );
100026e4:	3d 20 10 03 	lis     r9,4099
100026e8:	81 29 da 90 	lwz     r9,-9584(r9)
100026ec:	7d 23 4b 78 	mr      r3,r9
100026f0:	48 02 ad 7d 	bl      1002d46c <fclose@plt>
	(void) fclose( stderr );
100026f4:	3d 20 10 03 	lis     r9,4099
100026f8:	81 29 da 88 	lwz     r9,-9592(r9)
100026fc:	7d 23 4b 78 	mr      r3,r9
10002700:	48 02 ad 6d 	bl      1002d46c <fclose@plt>

	/* Daemonize - make ourselves a subprocess. */
#ifdef HAVE_DAEMON
	if ( daemon( 1, 1 ) < 0 )
10002704:	38 60 00 01 	li      r3,1
10002708:	38 80 00 01 	li      r4,1
1000270c:	48 02 ae 79 	bl      1002d584 <daemon@plt>
10002710:	7c 69 1b 78 	mr      r9,r3
10002714:	2f 89 00 00 	cmpwi   cr7,r9,0
10002718:	40 9c 00 24 	bge     cr7,1000273c <main+0x530>
	    {
	    syslog( LOG_CRIT, "daemon - %m" );
1000271c:	38 60 00 02 	li      r3,2
10002720:	3d 20 10 01 	lis     r9,4097
10002724:	38 89 7e bc 	addi    r4,r9,32444
10002728:	4c c6 31 82 	crclr   4*cr1+eq
1000272c:	48 02 b0 59 	bl      1002d784 <syslog@plt>
	    exit( 1 );
10002730:	38 60 00 01 	li      r3,1
10002734:	48 02 ae a1 	bl      1002d5d4 <exit@plt>
	{
	/* Even if we don't daemonize, we still want to disown our parent
	** process.
	*/
#ifdef HAVE_SETSID
        (void) setsid();
10002738:	48 02 ae e5 	bl      1002d61c <setsid@plt>
#endif /* HAVE_SETSID */
	}
    if ( pidfile != (char*) 0 )
1000273c:	3d 20 10 03 	lis     r9,4099
10002740:	81 29 da e4 	lwz     r9,-9500(r9)
10002744:	2f 89 00 00 	cmpwi   cr7,r9,0
10002748:	41 9e 00 7c 	beq     cr7,100027c4 <main+0x5b8>
	{
	/* Write the PID file. */
	FILE* pidfp = fopen( pidfile, "w" );
1000274c:	3d 20 10 03 	lis     r9,4099
10002750:	81 29 da e4 	lwz     r9,-9500(r9)
10002754:	7d 23 4b 78 	mr      r3,r9
10002758:	3d 20 10 01 	lis     r9,4097
1000275c:	38 89 7e c8 	addi    r4,r9,32456
10002760:	48 02 af 55 	bl      1002d6b4 <fopen@plt>
10002764:	90 7f 00 48 	stw     r3,72(r31)
	if ( pidfp == (FILE*) 0 )
10002768:	81 3f 00 48 	lwz     r9,72(r31)
1000276c:	2f 89 00 00 	cmpwi   cr7,r9,0
10002770:	40 9e 00 2c 	bne     cr7,1000279c <main+0x590>
	    {
	    syslog( LOG_CRIT, "%.80s - %m", pidfile );
10002774:	3d 20 10 03 	lis     r9,4099
10002778:	81 29 da e4 	lwz     r9,-9500(r9)
1000277c:	38 60 00 02 	li      r3,2
10002780:	3d 40 10 01 	lis     r10,4097
10002784:	38 8a 7d ec 	addi    r4,r10,32236
10002788:	7d 25 4b 78 	mr      r5,r9
1000278c:	4c c6 31 82 	crclr   4*cr1+eq
10002790:	48 02 af f5 	bl      1002d784 <syslog@plt>
	    exit( 1 );
10002794:	38 60 00 01 	li      r3,1
10002798:	48 02 ae 3d 	bl      1002d5d4 <exit@plt>
	    }
	(void) fprintf( pidfp, "%d\n", (int) getpid() );
1000279c:	48 02 ad d9 	bl      1002d574 <getpid@plt>
100027a0:	7c 69 1b 78 	mr      r9,r3
100027a4:	80 7f 00 48 	lwz     r3,72(r31)
100027a8:	3d 40 10 01 	lis     r10,4097
100027ac:	38 8a 7e cc 	addi    r4,r10,32460
100027b0:	7d 25 4b 78 	mr      r5,r9
100027b4:	4c c6 31 82 	crclr   4*cr1+eq
100027b8:	48 02 ae c5 	bl      1002d67c <fprintf@plt>
	(void) fclose( pidfp );
100027bc:	80 7f 00 48 	lwz     r3,72(r31)
100027c0:	48 02 ac ad 	bl      1002d46c <fclose@plt>
	}

    /* Initialize the fdwatch package.  Have to do this before chroot,
    ** if /dev/poll is used.
    */
    max_connects = fdwatch_get_nfiles();
100027c4:	48 00 f1 05 	bl      100118c8 <fdwatch_get_nfiles>
100027c8:	7c 6a 1b 78 	mr      r10,r3
100027cc:	3d 20 10 03 	lis     r9,4099
100027d0:	91 49 db 0c 	stw     r10,-9460(r9)
    if ( max_connects < 0 )
100027d4:	3d 20 10 03 	lis     r9,4099
100027d8:	81 29 db 0c 	lwz     r9,-9460(r9)
100027dc:	2f 89 00 00 	cmpwi   cr7,r9,0
100027e0:	40 9c 00 20 	bge     cr7,10002800 <main+0x5f4>
	{
	syslog( LOG_CRIT, "fdwatch initialization failure" );
100027e4:	38 60 00 02 	li      r3,2
100027e8:	3d 20 10 01 	lis     r9,4097
100027ec:	38 89 7e d0 	addi    r4,r9,32464
100027f0:	4c c6 31 82 	crclr   4*cr1+eq
100027f4:	48 02 af 91 	bl      1002d784 <syslog@plt>
	exit( 1 );
100027f8:	38 60 00 01 	li      r3,1
100027fc:	48 02 ad d9 	bl      1002d5d4 <exit@plt>
	}
    max_connects -= SPARE_FDS;
10002800:	3d 20 10 03 	lis     r9,4099
10002804:	81 29 db 0c 	lwz     r9,-9460(r9)
10002808:	39 49 ff f6 	addi    r10,r9,-10
1000280c:	3d 20 10 03 	lis     r9,4099
10002810:	91 49 db 0c 	stw     r10,-9460(r9)
    /* Chroot if requested. */
    if ( do_chroot )
10002814:	3d 20 10 03 	lis     r9,4099
10002818:	81 29 da b0 	lwz     r9,-9552(r9)
1000281c:	2f 89 00 00 	cmpwi   cr7,r9,0
10002820:	41 9e 01 a4 	beq     cr7,100029c4 <main+0x7b8>
	{
	if ( chroot( cwd ) < 0 )
10002824:	39 3f 00 58 	addi    r9,r31,88
10002828:	7d 23 4b 78 	mr      r3,r9
1000282c:	48 02 ad 41 	bl      1002d56c <chroot@plt>
10002830:	7c 69 1b 78 	mr      r9,r3
10002834:	2f 89 00 00 	cmpwi   cr7,r9,0
10002838:	40 9c 00 2c 	bge     cr7,10002864 <main+0x658>
	    {
	    syslog( LOG_CRIT, "chroot - %m" );
1000283c:	38 60 00 02 	li      r3,2
10002840:	3d 20 10 01 	lis     r9,4097
10002844:	38 89 7e f0 	addi    r4,r9,32496
10002848:	4c c6 31 82 	crclr   4*cr1+eq
1000284c:	48 02 af 39 	bl      1002d784 <syslog@plt>
	    perror( "chroot" );
10002850:	3d 20 10 01 	lis     r9,4097
10002854:	38 69 7e fc 	addi    r3,r9,32508
10002858:	48 02 ac bd 	bl      1002d514 <perror@plt>
	    exit( 1 );
1000285c:	38 60 00 01 	li      r3,1
10002860:	48 02 ad 75 	bl      1002d5d4 <exit@plt>
	/* If we're logging and the logfile's pathname begins with the
	** chroot tree's pathname, then elide the chroot pathname so
	** that the logfile pathname still works from inside the chroot
	** tree.
	*/
	if ( logfile != (char*) 0 && strcmp( logfile, "-" ) != 0 )
10002864:	3d 20 10 03 	lis     r9,4099
10002868:	81 29 da d8 	lwz     r9,-9512(r9)
1000286c:	2f 89 00 00 	cmpwi   cr7,r9,0
10002870:	41 9e 01 08 	beq     cr7,10002978 <main+0x76c>
10002874:	3d 20 10 03 	lis     r9,4099
10002878:	81 29 da d8 	lwz     r9,-9512(r9)
1000287c:	7d 23 4b 78 	mr      r3,r9
10002880:	3d 20 10 01 	lis     r9,4097
10002884:	38 89 7d 34 	addi    r4,r9,32052
10002888:	48 02 ab 55 	bl      1002d3dc <strcmp@plt>
1000288c:	7c 69 1b 78 	mr      r9,r3
10002890:	2f 89 00 00 	cmpwi   cr7,r9,0
10002894:	41 9e 00 e4 	beq     cr7,10002978 <main+0x76c>
	    {
	    if ( strncmp( logfile, cwd, strlen( cwd ) ) == 0 )
10002898:	3d 20 10 03 	lis     r9,4099
1000289c:	83 c9 da d8 	lwz     r30,-9512(r9)
100028a0:	39 3f 00 58 	addi    r9,r31,88
100028a4:	7d 23 4b 78 	mr      r3,r9
100028a8:	48 02 ad ad 	bl      1002d654 <strlen@plt>
100028ac:	7c 69 1b 78 	mr      r9,r3
100028b0:	39 5f 00 58 	addi    r10,r31,88
100028b4:	7f c3 f3 78 	mr      r3,r30
100028b8:	7d 44 53 78 	mr      r4,r10
100028bc:	7d 25 4b 78 	mr      r5,r9
100028c0:	48 02 af 35 	bl      1002d7f4 <strncmp@plt>
100028c4:	7c 69 1b 78 	mr      r9,r3
100028c8:	2f 89 00 00 	cmpwi   cr7,r9,0
100028cc:	40 9e 00 70 	bne     cr7,1000293c <main+0x730>
		{
		(void) ol_strcpy( logfile, &logfile[strlen( cwd ) - 1] );
100028d0:	3d 20 10 03 	lis     r9,4099
100028d4:	83 a9 da d8 	lwz     r29,-9512(r9)
100028d8:	3d 20 10 03 	lis     r9,4099
100028dc:	83 c9 da d8 	lwz     r30,-9512(r9)
100028e0:	39 3f 00 58 	addi    r9,r31,88
100028e4:	7d 23 4b 78 	mr      r3,r9
100028e8:	48 02 ad 6d 	bl      1002d654 <strlen@plt>
100028ec:	7c 69 1b 78 	mr      r9,r3
100028f0:	39 29 ff ff 	addi    r9,r9,-1
100028f4:	7f de 4a 14 	add     r30,r30,r9
100028f8:	3d 20 10 03 	lis     r9,4099
100028fc:	83 89 da d8 	lwz     r28,-9512(r9)
10002900:	39 3f 00 58 	addi    r9,r31,88
10002904:	7d 23 4b 78 	mr      r3,r9
10002908:	48 02 ad 4d 	bl      1002d654 <strlen@plt>
1000290c:	7c 69 1b 78 	mr      r9,r3
10002910:	39 29 ff ff 	addi    r9,r9,-1
10002914:	7d 3c 4a 14 	add     r9,r28,r9
10002918:	7d 23 4b 78 	mr      r3,r9
1000291c:	48 02 ad 39 	bl      1002d654 <strlen@plt>
10002920:	7c 69 1b 78 	mr      r9,r3
10002924:	39 29 00 01 	addi    r9,r9,1
10002928:	7f a3 eb 78 	mr      r3,r29
1000292c:	7f c4 f3 78 	mr      r4,r30
10002930:	7d 25 4b 78 	mr      r5,r9
10002934:	48 02 aa f1 	bl      1002d424 <memmove@plt>
10002938:	48 00 00 40 	b       10002978 <main+0x76c>
		** the chroot tree.)
		*/
		}
	    else
		{
		syslog( LOG_WARNING, "logfile is not within the chroot tree, you will not be able to re-open it" );
1000293c:	38 60 00 04 	li      r3,4
10002940:	3d 20 10 01 	lis     r9,4097
10002944:	38 89 7f 04 	addi    r4,r9,32516
10002948:	4c c6 31 82 	crclr   4*cr1+eq
1000294c:	48 02 ae 39 	bl      1002d784 <syslog@plt>
		(void) fprintf( stderr, "%s: logfile is not within the chroot tree, you will not be able to re-open it\n", argv0 );
10002950:	3d 20 10 03 	lis     r9,4099
10002954:	81 49 da 88 	lwz     r10,-9592(r9)
10002958:	3d 20 10 03 	lis     r9,4099
1000295c:	81 29 da 9c 	lwz     r9,-9572(r9)
10002960:	7d 43 53 78 	mr      r3,r10
10002964:	3d 40 10 01 	lis     r10,4097
10002968:	38 8a 7f 50 	addi    r4,r10,32592
1000296c:	7d 25 4b 78 	mr      r5,r9
10002970:	4c c6 31 82 	crclr   4*cr1+eq
10002974:	48 02 ad 09 	bl      1002d67c <fprintf@plt>
		}
	    }
	(void) strcpy( cwd, "/" );
10002978:	39 3f 00 58 	addi    r9,r31,88
1000297c:	39 40 2f 00 	li      r10,12032
10002980:	b1 49 00 00 	sth     r10,0(r9)
	/* Always chdir to / after a chroot. */
	if ( chdir( cwd ) < 0 )
10002984:	39 3f 00 58 	addi    r9,r31,88
10002988:	7d 23 4b 78 	mr      r3,r9
1000298c:	48 02 ab 19 	bl      1002d4a4 <chdir@plt>
10002990:	7c 69 1b 78 	mr      r9,r3
10002994:	2f 89 00 00 	cmpwi   cr7,r9,0
10002998:	40 9c 00 2c 	bge     cr7,100029c4 <main+0x7b8>
	    {
	    syslog( LOG_CRIT, "chroot chdir - %m" );
1000299c:	38 60 00 02 	li      r3,2
100029a0:	3d 20 10 01 	lis     r9,4097
100029a4:	38 89 7f a0 	addi    r4,r9,32672
100029a8:	4c c6 31 82 	crclr   4*cr1+eq
100029ac:	48 02 ad d9 	bl      1002d784 <syslog@plt>
	    perror( "chroot chdir" );
100029b0:	3d 20 10 01 	lis     r9,4097
100029b4:	38 69 7f b4 	addi    r3,r9,32692
100029b8:	48 02 ab 5d 	bl      1002d514 <perror@plt>
	    exit( 1 );
100029bc:	38 60 00 01 	li      r3,1
100029c0:	48 02 ac 15 	bl      1002d5d4 <exit@plt>
	    }
	}
	
    /* Switch directories again if requested. */
    if ( data_dir != (char*) 0 )
100029c4:	3d 20 10 03 	lis     r9,4099
100029c8:	81 29 da ac 	lwz     r9,-9556(r9)
100029cc:	2f 89 00 00 	cmpwi   cr7,r9,0
100029d0:	41 9e 00 48 	beq     cr7,10002a18 <main+0x80c>
	{
	if ( chdir( data_dir ) < 0 )
100029d4:	3d 20 10 03 	lis     r9,4099
100029d8:	81 29 da ac 	lwz     r9,-9556(r9)
100029dc:	7d 23 4b 78 	mr      r3,r9
100029e0:	48 02 aa c5 	bl      1002d4a4 <chdir@plt>
100029e4:	7c 69 1b 78 	mr      r9,r3
100029e8:	2f 89 00 00 	cmpwi   cr7,r9,0
100029ec:	40 9c 00 2c 	bge     cr7,10002a18 <main+0x80c>
	    {
	    syslog( LOG_CRIT, "data_dir chdir - %m" );
100029f0:	38 60 00 02 	li      r3,2
100029f4:	3d 20 10 01 	lis     r9,4097
100029f8:	38 89 7f c4 	addi    r4,r9,32708
100029fc:	4c c6 31 82 	crclr   4*cr1+eq
10002a00:	48 02 ad 85 	bl      1002d784 <syslog@plt>
	    perror( "data_dir chdir" );
10002a04:	3d 20 10 01 	lis     r9,4097
10002a08:	38 69 7f d8 	addi    r3,r9,32728
10002a0c:	48 02 ab 09 	bl      1002d514 <perror@plt>
	    exit( 1 );
10002a10:	38 60 00 01 	li      r3,1
10002a14:	48 02 ab c1 	bl      1002d5d4 <exit@plt>
	    }
	}
	
    /* Set up to catch signals. */
#ifdef HAVE_SIGSET
    (void) sigset( SIGTERM, handle_term );
10002a18:	38 60 00 0f 	li      r3,15
10002a1c:	3d 20 10 00 	lis     r9,4096
10002a20:	38 89 1d dc 	addi    r4,r9,7644
10002a24:	4c c6 31 82 	crclr   4*cr1+eq
10002a28:	48 02 aa 05 	bl      1002d42c <sigset@plt>
    (void) sigset( SIGINT, handle_term );
10002a2c:	38 60 00 02 	li      r3,2
10002a30:	3d 20 10 00 	lis     r9,4096
10002a34:	38 89 1d dc 	addi    r4,r9,7644
10002a38:	4c c6 31 82 	crclr   4*cr1+eq
10002a3c:	48 02 a9 f1 	bl      1002d42c <sigset@plt>
    (void) sigset( SIGCHLD, handle_chld );
10002a40:	38 60 00 11 	li      r3,17
10002a44:	3d 20 10 00 	lis     r9,4096
10002a48:	38 89 1e 1c 	addi    r4,r9,7708
10002a4c:	4c c6 31 82 	crclr   4*cr1+eq
10002a50:	48 02 a9 dd 	bl      1002d42c <sigset@plt>
    (void) sigset( SIGPIPE, SIG_IGN );          /* get EPIPE instead */
10002a54:	38 60 00 0d 	li      r3,13
10002a58:	38 80 00 01 	li      r4,1
10002a5c:	4c c6 31 82 	crclr   4*cr1+eq
10002a60:	48 02 a9 cd 	bl      1002d42c <sigset@plt>
    (void) sigset( SIGHUP, handle_hup );
10002a64:	38 60 00 01 	li      r3,1
10002a68:	3d 20 10 00 	lis     r9,4096
10002a6c:	38 89 1f 4c 	addi    r4,r9,8012
10002a70:	4c c6 31 82 	crclr   4*cr1+eq
10002a74:	48 02 a9 b9 	bl      1002d42c <sigset@plt>
    (void) sigset( SIGUSR1, handle_usr1 );
10002a78:	38 60 00 0a 	li      r3,10
10002a7c:	3d 20 10 00 	lis     r9,4096
10002a80:	38 89 1f a8 	addi    r4,r9,8104
10002a84:	4c c6 31 82 	crclr   4*cr1+eq
10002a88:	48 02 a9 a5 	bl      1002d42c <sigset@plt>
    (void) sigset( SIGUSR2, handle_usr2 );
10002a8c:	38 60 00 0c 	li      r3,12
10002a90:	3d 20 10 00 	lis     r9,4096
10002a94:	38 89 20 18 	addi    r4,r9,8216
10002a98:	4c c6 31 82 	crclr   4*cr1+eq
10002a9c:	48 02 a9 91 	bl      1002d42c <sigset@plt>
    (void) sigset( SIGALRM, handle_alrm );
10002aa0:	38 60 00 0e 	li      r3,14
10002aa4:	3d 20 10 00 	lis     r9,4096
10002aa8:	38 89 20 70 	addi    r4,r9,8304
10002aac:	4c c6 31 82 	crclr   4*cr1+eq
10002ab0:	48 02 a9 7d 	bl      1002d42c <sigset@plt>
    (void) signal( SIGHUP, handle_hup );
    (void) signal( SIGUSR1, handle_usr1 );
    (void) signal( SIGUSR2, handle_usr2 );
    (void) signal( SIGALRM, handle_alrm );
#endif /* HAVE_SIGSET */
    got_hup = 0;
10002ab4:	3d 20 10 03 	lis     r9,4099
10002ab8:	39 40 00 00 	li      r10,0
10002abc:	91 49 db 1c 	stw     r10,-9444(r9)
    got_usr1 = 0;
10002ac0:	3d 20 10 03 	lis     r9,4099
10002ac4:	39 40 00 00 	li      r10,0
10002ac8:	91 49 db 20 	stw     r10,-9440(r9)
    watchdog_flag = 0;
10002acc:	3d 20 10 03 	lis     r9,4099
10002ad0:	39 40 00 00 	li      r10,0
10002ad4:	91 49 db 24 	stw     r10,-9436(r9)
    (void) alarm( OCCASIONAL_TIME * 3 );
10002ad8:	38 60 01 68 	li      r3,360
10002adc:	48 02 a9 e9 	bl      1002d4c4 <alarm@plt>

    /* Initialize the timer package. */
    tmr_init();
10002ae0:	48 01 0d c1 	bl      100138a0 <tmr_init>

    /* Initialize the HTTP layer.  Got to do this before giving up root,
    ** so that we can bind to a privileged port.
    */
    hs = httpd_initialize(
10002ae4:	3d 20 10 03 	lis     r9,4099
10002ae8:	80 a9 da e0 	lwz     r5,-9504(r9)
	hostname,
	gotv4 ? &sa4 : (httpd_sockaddr*) 0, gotv6 ? &sa6 : (httpd_sockaddr*) 0,
10002aec:	81 3f 11 5c 	lwz     r9,4444(r31)
    tmr_init();

    /* Initialize the HTTP layer.  Got to do this before giving up root,
    ** so that we can bind to a privileged port.
    */
    hs = httpd_initialize(
10002af0:	2f 89 00 00 	cmpwi   cr7,r9,0
10002af4:	41 9e 00 0c 	beq     cr7,10002b00 <main+0x8f4>
10002af8:	39 5f 10 5c 	addi    r10,r31,4188
10002afc:	48 00 00 08 	b       10002b04 <main+0x8f8>
10002b00:	39 40 00 00 	li      r10,0
	hostname,
	gotv4 ? &sa4 : (httpd_sockaddr*) 0, gotv6 ? &sa6 : (httpd_sockaddr*) 0,
10002b04:	81 3f 11 60 	lwz     r9,4448(r31)
    tmr_init();

    /* Initialize the HTTP layer.  Got to do this before giving up root,
    ** so that we can bind to a privileged port.
    */
    hs = httpd_initialize(
10002b08:	2f 89 00 00 	cmpwi   cr7,r9,0
10002b0c:	41 9e 00 0c 	beq     cr7,10002b18 <main+0x90c>
10002b10:	39 3f 10 dc 	addi    r9,r31,4316
10002b14:	48 00 00 08 	b       10002b1c <main+0x910>
10002b18:	39 20 00 00 	li      r9,0
10002b1c:	3d 00 10 03 	lis     r8,4099
10002b20:	a1 08 da a4 	lhz     r8,-9564(r8)
10002b24:	55 06 04 3e 	clrlwi  r6,r8,16
10002b28:	3d 00 10 03 	lis     r8,4099
10002b2c:	80 e8 da c4 	lwz     r7,-9532(r8)
10002b30:	3d 00 10 03 	lis     r8,4099
10002b34:	81 08 da c8 	lwz     r8,-9528(r8)
10002b38:	3c 80 10 03 	lis     r4,4099
10002b3c:	80 04 da ec 	lwz     r0,-9492(r4)
10002b40:	3c 80 10 03 	lis     r4,4099
10002b44:	81 64 da f0 	lwz     r11,-9488(r4)
10002b48:	3c 80 10 03 	lis     r4,4099
10002b4c:	83 24 da f4 	lwz     r25,-9484(r4)
10002b50:	3c 80 10 03 	lis     r4,4099
10002b54:	83 44 da b4 	lwz     r26,-9548(r4)
10002b58:	3c 80 10 03 	lis     r4,4099
10002b5c:	83 64 da b8 	lwz     r27,-9544(r4)
10002b60:	3c 80 10 03 	lis     r4,4099
10002b64:	83 84 da bc 	lwz     r28,-9540(r4)
10002b68:	3c 80 10 03 	lis     r4,4099
10002b6c:	83 a4 da c0 	lwz     r29,-9536(r4)
10002b70:	3c 80 10 03 	lis     r4,4099
10002b74:	83 c4 da cc 	lwz     r30,-9524(r4)
10002b78:	3c 80 10 03 	lis     r4,4099
10002b7c:	80 64 da d4 	lwz     r3,-9516(r4)
10002b80:	3c 80 10 03 	lis     r4,4099
10002b84:	80 84 da d0 	lwz     r4,-9520(r4)
10002b88:	93 21 00 08 	stw     r25,8(r1)
10002b8c:	3b 3f 00 58 	addi    r25,r31,88
10002b90:	93 21 00 0c 	stw     r25,12(r1)
10002b94:	93 41 00 10 	stw     r26,16(r1)
10002b98:	83 5f 00 3c 	lwz     r26,60(r31)
10002b9c:	93 41 00 14 	stw     r26,20(r1)
10002ba0:	93 61 00 18 	stw     r27,24(r1)
10002ba4:	93 81 00 1c 	stw     r28,28(r1)
10002ba8:	93 a1 00 20 	stw     r29,32(r1)
10002bac:	93 c1 00 24 	stw     r30,36(r1)
10002bb0:	90 61 00 28 	stw     r3,40(r1)
10002bb4:	90 81 00 2c 	stw     r4,44(r1)
10002bb8:	7c a3 2b 78 	mr      r3,r5
10002bbc:	7d 44 53 78 	mr      r4,r10
10002bc0:	7d 25 4b 78 	mr      r5,r9
10002bc4:	7c 09 03 78 	mr      r9,r0
10002bc8:	7d 6a 5b 78 	mr      r10,r11
10002bcc:	48 00 46 a5 	bl      10007270 <httpd_initialize>
10002bd0:	7c 6a 1b 78 	mr      r10,r3
10002bd4:	3d 20 10 03 	lis     r9,4099
10002bd8:	91 49 db 18 	stw     r10,-9448(r9)
	hostname,
	gotv4 ? &sa4 : (httpd_sockaddr*) 0, gotv6 ? &sa6 : (httpd_sockaddr*) 0,
	port, cgi_pattern, cgi_limit, charset, p3p, max_age, cwd, no_log, logfp,
	no_symlink_check, do_vhost, do_global_passwd, url_pattern,
	local_pattern, no_empty_referrers );
    if ( hs == (httpd_server*) 0 )
10002bdc:	3d 20 10 03 	lis     r9,4099
10002be0:	81 29 db 18 	lwz     r9,-9448(r9)
10002be4:	2f 89 00 00 	cmpwi   cr7,r9,0
10002be8:	40 9e 00 0c 	bne     cr7,10002bf4 <main+0x9e8>
	exit( 1 );
10002bec:	38 60 00 01 	li      r3,1
10002bf0:	48 02 a9 e5 	bl      1002d5d4 <exit@plt>

    /* Set up the occasional timer. */
    if ( tmr_create( (struct timeval*) 0, occasional, JunkClientData, OCCASIONAL_TIME * 1000L, 1 ) == (Timer*) 0 )
10002bf4:	3d 20 10 03 	lis     r9,4099
10002bf8:	81 29 d3 70 	lwz     r9,-11408(r9)
10002bfc:	91 3f 11 78 	stw     r9,4472(r31)
10002c00:	39 3f 11 78 	addi    r9,r31,4472
10002c04:	38 60 00 00 	li      r3,0
10002c08:	3d 40 10 00 	lis     r10,4096
10002c0c:	38 8a 6d dc 	addi    r4,r10,28124
10002c10:	7d 25 4b 78 	mr      r5,r9
10002c14:	3d 20 00 01 	lis     r9,1
10002c18:	61 26 d4 c0 	ori     r6,r9,54464
10002c1c:	38 e0 00 01 	li      r7,1
10002c20:	48 01 0d 15 	bl      10013934 <tmr_create>
10002c24:	7c 69 1b 78 	mr      r9,r3
10002c28:	2f 89 00 00 	cmpwi   cr7,r9,0
10002c2c:	40 9e 00 20 	bne     cr7,10002c4c <main+0xa40>
	{
	syslog( LOG_CRIT, "tmr_create(occasional) failed" );
10002c30:	38 60 00 02 	li      r3,2
10002c34:	3d 20 10 01 	lis     r9,4097
10002c38:	38 89 7f e8 	addi    r4,r9,32744
10002c3c:	4c c6 31 82 	crclr   4*cr1+eq
10002c40:	48 02 ab 45 	bl      1002d784 <syslog@plt>
	exit( 1 );
10002c44:	38 60 00 01 	li      r3,1
10002c48:	48 02 a9 8d 	bl      1002d5d4 <exit@plt>
	}
    /* Set up the idle timer. */
    if ( tmr_create( (struct timeval*) 0, idle, JunkClientData, 5 * 1000L, 1 ) == (Timer*) 0 )
10002c4c:	3d 20 10 03 	lis     r9,4099
10002c50:	81 29 d3 70 	lwz     r9,-11408(r9)
10002c54:	91 3f 11 78 	stw     r9,4472(r31)
10002c58:	39 3f 11 78 	addi    r9,r31,4472
10002c5c:	38 60 00 00 	li      r3,0
10002c60:	3d 40 10 00 	lis     r10,4096
10002c64:	38 8a 6b 64 	addi    r4,r10,27492
10002c68:	7d 25 4b 78 	mr      r5,r9
10002c6c:	38 c0 13 88 	li      r6,5000
10002c70:	38 e0 00 01 	li      r7,1
10002c74:	48 01 0c c1 	bl      10013934 <tmr_create>
10002c78:	7c 69 1b 78 	mr      r9,r3
10002c7c:	2f 89 00 00 	cmpwi   cr7,r9,0
10002c80:	40 9e 00 20 	bne     cr7,10002ca0 <main+0xa94>
	{
	syslog( LOG_CRIT, "tmr_create(idle) failed" );
10002c84:	38 60 00 02 	li      r3,2
10002c88:	3d 20 10 02 	lis     r9,4098
10002c8c:	38 89 80 08 	addi    r4,r9,-32760
10002c90:	4c c6 31 82 	crclr   4*cr1+eq
10002c94:	48 02 aa f1 	bl      1002d784 <syslog@plt>
	exit( 1 );
10002c98:	38 60 00 01 	li      r3,1
10002c9c:	48 02 a9 39 	bl      1002d5d4 <exit@plt>
	}
    if ( numthrottles > 0 )
10002ca0:	3d 20 10 03 	lis     r9,4099
10002ca4:	81 29 da fc 	lwz     r9,-9476(r9)
10002ca8:	2f 89 00 00 	cmpwi   cr7,r9,0
10002cac:	40 9d 00 58 	ble     cr7,10002d04 <main+0xaf8>
	{
	/* Set up the throttles timer. */
	if ( tmr_create( (struct timeval*) 0, update_throttles, JunkClientData, THROTTLE_TIME * 1000L, 1 ) == (Timer*) 0 )
10002cb0:	3d 20 10 03 	lis     r9,4099
10002cb4:	81 29 d3 70 	lwz     r9,-11408(r9)
10002cb8:	91 3f 11 78 	stw     r9,4472(r31)
10002cbc:	39 3f 11 78 	addi    r9,r31,4472
10002cc0:	38 60 00 00 	li      r3,0
10002cc4:	3d 40 10 00 	lis     r10,4096
10002cc8:	38 8a 63 b4 	addi    r4,r10,25524
10002ccc:	7d 25 4b 78 	mr      r5,r9
10002cd0:	38 c0 07 d0 	li      r6,2000
10002cd4:	38 e0 00 01 	li      r7,1
10002cd8:	48 01 0c 5d 	bl      10013934 <tmr_create>
10002cdc:	7c 69 1b 78 	mr      r9,r3
10002ce0:	2f 89 00 00 	cmpwi   cr7,r9,0
10002ce4:	40 9e 00 20 	bne     cr7,10002d04 <main+0xaf8>
	    {
	    syslog( LOG_CRIT, "tmr_create(update_throttles) failed" );
10002ce8:	38 60 00 02 	li      r3,2
10002cec:	3d 20 10 02 	lis     r9,4098
10002cf0:	38 89 80 20 	addi    r4,r9,-32736
10002cf4:	4c c6 31 82 	crclr   4*cr1+eq
10002cf8:	48 02 aa 8d 	bl      1002d784 <syslog@plt>
	    exit( 1 );
10002cfc:	38 60 00 01 	li      r3,1
10002d00:	48 02 a8 d5 	bl      1002d5d4 <exit@plt>
	    }
	}
#ifdef STATS_TIME
    /* Set up the stats timer. */
    if ( tmr_create( (struct timeval*) 0, show_stats, JunkClientData, STATS_TIME * 1000L, 1 ) == (Timer*) 0 )
10002d04:	3d 20 10 03 	lis     r9,4099
10002d08:	81 29 d3 70 	lwz     r9,-11408(r9)
10002d0c:	91 3f 11 78 	stw     r9,4472(r31)
10002d10:	39 3f 11 78 	addi    r9,r31,4472
10002d14:	38 60 00 00 	li      r3,0
10002d18:	3d 40 10 00 	lis     r10,4096
10002d1c:	38 8a 6e 24 	addi    r4,r10,28196
10002d20:	7d 25 4b 78 	mr      r5,r9
10002d24:	3d 20 00 36 	lis     r9,54
10002d28:	61 26 ee 80 	ori     r6,r9,61056
10002d2c:	38 e0 00 01 	li      r7,1
10002d30:	48 01 0c 05 	bl      10013934 <tmr_create>
10002d34:	7c 69 1b 78 	mr      r9,r3
10002d38:	2f 89 00 00 	cmpwi   cr7,r9,0
10002d3c:	40 9e 00 20 	bne     cr7,10002d5c <main+0xb50>
	{
	syslog( LOG_CRIT, "tmr_create(show_stats) failed" );
10002d40:	38 60 00 02 	li      r3,2
10002d44:	3d 20 10 02 	lis     r9,4098
10002d48:	38 89 80 44 	addi    r4,r9,-32700
10002d4c:	4c c6 31 82 	crclr   4*cr1+eq
10002d50:	48 02 aa 35 	bl      1002d784 <syslog@plt>
	exit( 1 );
10002d54:	38 60 00 01 	li      r3,1
10002d58:	48 02 a8 7d 	bl      1002d5d4 <exit@plt>
	}
#endif /* STATS_TIME */
    start_time = stats_time = time( (time_t*) 0 );
10002d5c:	38 60 00 00 	li      r3,0
10002d60:	48 02 a7 15 	bl      1002d474 <time@plt>
10002d64:	7c 6a 1b 78 	mr      r10,r3
10002d68:	3d 20 10 03 	lis     r9,4099
10002d6c:	91 49 d3 64 	stw     r10,-11420(r9)
10002d70:	3d 20 10 03 	lis     r9,4099
10002d74:	81 49 d3 64 	lwz     r10,-11420(r9)
10002d78:	3d 20 10 03 	lis     r9,4099
10002d7c:	91 49 d3 60 	stw     r10,-11424(r9)
    stats_connections = 0;
10002d80:	3d 20 10 03 	lis     r9,4099
10002d84:	39 40 00 00 	li      r10,0
10002d88:	91 49 d3 68 	stw     r10,-11416(r9)
    stats_bytes = 0;
10002d8c:	3d 20 10 03 	lis     r9,4099
10002d90:	39 40 00 00 	li      r10,0
10002d94:	91 49 d3 58 	stw     r10,-11432(r9)
    stats_simultaneous = 0;
10002d98:	3d 20 10 03 	lis     r9,4099
10002d9c:	39 40 00 00 	li      r10,0
10002da0:	91 49 d3 5c 	stw     r10,-11428(r9)
	
    /* If we're root, try to become someone else. */
	/*当前是root用户*/

    if ( getuid() == 0 )
10002da4:	48 02 a7 29 	bl      1002d4cc <getuid@plt>
10002da8:	7c 69 1b 78 	mr      r9,r3
10002dac:	2f 89 00 00 	cmpwi   cr7,r9,0
10002db0:	40 9e 00 f0 	bne     cr7,10002ea0 <main+0xc94>
	{
		
		if ( setgroups( 0, (const gid_t*) 0 ) < 0 )
10002db4:	38 60 00 00 	li      r3,0
10002db8:	38 80 00 00 	li      r4,0
10002dbc:	48 02 a7 49 	bl      1002d504 <setgroups@plt>
10002dc0:	7c 69 1b 78 	mr      r9,r3
10002dc4:	2f 89 00 00 	cmpwi   cr7,r9,0
10002dc8:	40 9c 00 20 	bge     cr7,10002de8 <main+0xbdc>
	    {
	    	syslog( LOG_CRIT, "setgroups - %m" );
10002dcc:	38 60 00 02 	li      r3,2
10002dd0:	3d 20 10 02 	lis     r9,4098
10002dd4:	38 89 80 64 	addi    r4,r9,-32668
10002dd8:	4c c6 31 82 	crclr   4*cr1+eq
10002ddc:	48 02 a9 a9 	bl      1002d784 <syslog@plt>
	    	exit( 1 );
10002de0:	38 60 00 01 	li      r3,1
10002de4:	48 02 a7 f1 	bl      1002d5d4 <exit@plt>
	    }
		
		if ( setgid( gid ) < 0 )
10002de8:	80 7f 00 38 	lwz     r3,56(r31)
10002dec:	48 02 a7 c1 	bl      1002d5ac <setgid@plt>
10002df0:	7c 69 1b 78 	mr      r9,r3
10002df4:	2f 89 00 00 	cmpwi   cr7,r9,0
10002df8:	40 9c 00 20 	bge     cr7,10002e18 <main+0xc0c>
	    {
	    	syslog( LOG_CRIT, "setgid - %m" );
10002dfc:	38 60 00 02 	li      r3,2
10002e00:	3d 20 10 02 	lis     r9,4098
10002e04:	38 89 80 74 	addi    r4,r9,-32652
10002e08:	4c c6 31 82 	crclr   4*cr1+eq
10002e0c:	48 02 a9 79 	bl      1002d784 <syslog@plt>
	    	exit( 1 );
10002e10:	38 60 00 01 	li      r3,1
10002e14:	48 02 a7 c1 	bl      1002d5d4 <exit@plt>
	    }
		
		if ( initgroups( user, gid ) < 0 )
10002e18:	3d 20 10 03 	lis     r9,4099
10002e1c:	81 29 da e8 	lwz     r9,-9496(r9)
10002e20:	7d 23 4b 78 	mr      r3,r9
10002e24:	80 9f 00 38 	lwz     r4,56(r31)
10002e28:	48 02 a6 ad 	bl      1002d4d4 <initgroups@plt>
10002e2c:	7c 69 1b 78 	mr      r9,r3
10002e30:	2f 89 00 00 	cmpwi   cr7,r9,0
10002e34:	40 9c 00 18 	bge     cr7,10002e4c <main+0xc40>
	    {
			syslog( LOG_WARNING, "initgroups - %m" );
10002e38:	38 60 00 04 	li      r3,4
10002e3c:	3d 20 10 02 	lis     r9,4098
10002e40:	38 89 80 80 	addi    r4,r9,-32640
10002e44:	4c c6 31 82 	crclr   4*cr1+eq
10002e48:	48 02 a9 3d 	bl      1002d784 <syslog@plt>
#ifdef HAVE_SETLOGIN
		
        	(void) setlogin( user );
#endif 
		
		if ( setuid( uid ) < 0 )
10002e4c:	80 7f 00 34 	lwz     r3,52(r31)
10002e50:	48 02 a9 3d 	bl      1002d78c <setuid@plt>
10002e54:	7c 69 1b 78 	mr      r9,r3
10002e58:	2f 89 00 00 	cmpwi   cr7,r9,0
10002e5c:	40 9c 00 20 	bge     cr7,10002e7c <main+0xc70>
	    {
	    	syslog( LOG_CRIT, "setuid - %m" );
10002e60:	38 60 00 02 	li      r3,2
10002e64:	3d 20 10 02 	lis     r9,4098
10002e68:	38 89 80 90 	addi    r4,r9,-32624
10002e6c:	4c c6 31 82 	crclr   4*cr1+eq
10002e70:	48 02 a9 15 	bl      1002d784 <syslog@plt>
	    	exit( 1 );
10002e74:	38 60 00 01 	li      r3,1
10002e78:	48 02 a7 5d 	bl      1002d5d4 <exit@plt>
	    }
		
		if ( ! do_chroot )
10002e7c:	3d 20 10 03 	lis     r9,4099
10002e80:	81 29 da b0 	lwz     r9,-9552(r9)
10002e84:	2f 89 00 00 	cmpwi   cr7,r9,0
10002e88:	40 9e 00 18 	bne     cr7,10002ea0 <main+0xc94>
		{
			syslog(LOG_WARNING,"started as root without requesting chroot(), warning only" );
10002e8c:	38 60 00 04 	li      r3,4
10002e90:	3d 20 10 02 	lis     r9,4098
10002e94:	38 89 80 9c 	addi    r4,r9,-32612
10002e98:	4c c6 31 82 	crclr   4*cr1+eq
10002e9c:	48 02 a8 e9 	bl      1002d784 <syslog@plt>
		}
	    	
	}
    /* Initialize our connections table. */
    connects = NEW( connecttab, max_connects );
10002ea0:	3d 20 10 03 	lis     r9,4099
10002ea4:	81 29 db 0c 	lwz     r9,-9460(r9)
10002ea8:	1d 29 00 60 	mulli   r9,r9,96
10002eac:	7d 23 4b 78 	mr      r3,r9
10002eb0:	48 02 a6 f5 	bl      1002d5a4 <malloc@plt>
10002eb4:	7c 69 1b 78 	mr      r9,r3
10002eb8:	7d 2a 4b 78 	mr      r10,r9
10002ebc:	3d 20 10 03 	lis     r9,4099
10002ec0:	91 49 db 04 	stw     r10,-9468(r9)
    if ( connects == (connecttab*) 0 )
10002ec4:	3d 20 10 03 	lis     r9,4099
10002ec8:	81 29 db 04 	lwz     r9,-9468(r9)
10002ecc:	2f 89 00 00 	cmpwi   cr7,r9,0
10002ed0:	40 9e 00 20 	bne     cr7,10002ef0 <main+0xce4>
	{
	syslog( LOG_CRIT, "out of memory allocating a connecttab" );
10002ed4:	38 60 00 02 	li      r3,2
10002ed8:	3d 20 10 02 	lis     r9,4098
10002edc:	38 89 80 d8 	addi    r4,r9,-32552
10002ee0:	4c c6 31 82 	crclr   4*cr1+eq
10002ee4:	48 02 a8 a1 	bl      1002d784 <syslog@plt>
	exit( 1 );
10002ee8:	38 60 00 01 	li      r3,1
10002eec:	48 02 a6 e9 	bl      1002d5d4 <exit@plt>
	}
    for ( cnum = 0; cnum < max_connects; ++cnum )
10002ef0:	39 20 00 00 	li      r9,0
10002ef4:	91 3f 00 40 	stw     r9,64(r31)
10002ef8:	48 00 00 68 	b       10002f60 <main+0xd54>
	{
	connects[cnum].conn_state = CNST_FREE;
10002efc:	3d 20 10 03 	lis     r9,4099
10002f00:	81 49 db 04 	lwz     r10,-9468(r9)
10002f04:	81 3f 00 40 	lwz     r9,64(r31)
10002f08:	1d 29 00 60 	mulli   r9,r9,96
10002f0c:	7d 2a 4a 14 	add     r9,r10,r9
10002f10:	39 40 00 00 	li      r10,0
10002f14:	91 49 00 00 	stw     r10,0(r9)
	connects[cnum].next_free_connect = cnum + 1;
10002f18:	3d 20 10 03 	lis     r9,4099
10002f1c:	81 49 db 04 	lwz     r10,-9468(r9)
10002f20:	81 3f 00 40 	lwz     r9,64(r31)
10002f24:	1d 29 00 60 	mulli   r9,r9,96
10002f28:	7d 2a 4a 14 	add     r9,r10,r9
10002f2c:	81 5f 00 40 	lwz     r10,64(r31)
10002f30:	39 4a 00 01 	addi    r10,r10,1
10002f34:	91 49 00 04 	stw     r10,4(r9)
	connects[cnum].hc = (httpd_conn*) 0;
10002f38:	3d 20 10 03 	lis     r9,4099
10002f3c:	81 49 db 04 	lwz     r10,-9468(r9)
10002f40:	81 3f 00 40 	lwz     r9,64(r31)
10002f44:	1d 29 00 60 	mulli   r9,r9,96
10002f48:	7d 2a 4a 14 	add     r9,r10,r9
10002f4c:	39 40 00 00 	li      r10,0
10002f50:	91 49 00 08 	stw     r10,8(r9)
    if ( connects == (connecttab*) 0 )
	{
	syslog( LOG_CRIT, "out of memory allocating a connecttab" );
	exit( 1 );
	}
    for ( cnum = 0; cnum < max_connects; ++cnum )
10002f54:	81 3f 00 40 	lwz     r9,64(r31)
10002f58:	39 29 00 01 	addi    r9,r9,1
10002f5c:	91 3f 00 40 	stw     r9,64(r31)
10002f60:	3d 20 10 03 	lis     r9,4099
10002f64:	81 29 db 0c 	lwz     r9,-9460(r9)
10002f68:	81 5f 00 40 	lwz     r10,64(r31)
10002f6c:	7f 8a 48 00 	cmpw    cr7,r10,r9
10002f70:	41 9c ff 8c 	blt     cr7,10002efc <main+0xcf0>
	{
	connects[cnum].conn_state = CNST_FREE;
	connects[cnum].next_free_connect = cnum + 1;
	connects[cnum].hc = (httpd_conn*) 0;
	}
    connects[max_connects - 1].next_free_connect = -1;	/* end of link list */
10002f74:	3d 20 10 03 	lis     r9,4099
10002f78:	81 49 db 04 	lwz     r10,-9468(r9)
10002f7c:	3d 20 10 03 	lis     r9,4099
10002f80:	81 29 db 0c 	lwz     r9,-9460(r9)
10002f84:	1d 29 00 60 	mulli   r9,r9,96
10002f88:	39 29 ff a0 	addi    r9,r9,-96
10002f8c:	7d 2a 4a 14 	add     r9,r10,r9
10002f90:	39 40 ff ff 	li      r10,-1
10002f94:	91 49 00 04 	stw     r10,4(r9)
    first_free_connect = 0;
10002f98:	3d 20 10 03 	lis     r9,4099
10002f9c:	39 40 00 00 	li      r10,0
10002fa0:	91 49 db 10 	stw     r10,-9456(r9)
    num_connects = 0;
10002fa4:	3d 20 10 03 	lis     r9,4099
10002fa8:	39 40 00 00 	li      r10,0
10002fac:	91 49 db 08 	stw     r10,-9464(r9)
    httpd_conn_count = 0;
10002fb0:	3d 20 10 03 	lis     r9,4099
10002fb4:	39 40 00 00 	li      r10,0
10002fb8:	91 49 db 14 	stw     r10,-9452(r9)

    if ( hs != (httpd_server*) 0 )
10002fbc:	3d 20 10 03 	lis     r9,4099
10002fc0:	81 29 db 18 	lwz     r9,-9448(r9)
10002fc4:	2f 89 00 00 	cmpwi   cr7,r9,0
10002fc8:	41 9e 00 6c 	beq     cr7,10003034 <main+0xe28>
	{
	if ( hs->listen4_fd != -1 )
10002fcc:	3d 20 10 03 	lis     r9,4099
10002fd0:	81 29 db 18 	lwz     r9,-9448(r9)
10002fd4:	81 49 00 28 	lwz     r10,40(r9)
10002fd8:	39 20 ff ff 	li      r9,-1
10002fdc:	7f 8a 48 00 	cmpw    cr7,r10,r9
10002fe0:	41 9e 00 20 	beq     cr7,10003000 <main+0xdf4>
	    fdwatch_add_fd( hs->listen4_fd, (void*) 0, FDW_READ );
10002fe4:	3d 20 10 03 	lis     r9,4099
10002fe8:	81 29 db 18 	lwz     r9,-9448(r9)
10002fec:	81 29 00 28 	lwz     r9,40(r9)
10002ff0:	7d 23 4b 78 	mr      r3,r9
10002ff4:	38 80 00 00 	li      r4,0
10002ff8:	38 a0 00 00 	li      r5,0
10002ffc:	48 00 ea 8d 	bl      10011a88 <fdwatch_add_fd>
	if ( hs->listen6_fd != -1 )
10003000:	3d 20 10 03 	lis     r9,4099
10003004:	81 29 db 18 	lwz     r9,-9448(r9)
10003008:	81 49 00 2c 	lwz     r10,44(r9)
1000300c:	39 20 ff ff 	li      r9,-1
10003010:	7f 8a 48 00 	cmpw    cr7,r10,r9
10003014:	41 9e 00 20 	beq     cr7,10003034 <main+0xe28>
	    fdwatch_add_fd( hs->listen6_fd, (void*) 0, FDW_READ );
10003018:	3d 20 10 03 	lis     r9,4099
1000301c:	81 29 db 18 	lwz     r9,-9448(r9)
10003020:	81 29 00 2c 	lwz     r9,44(r9)
10003024:	7d 23 4b 78 	mr      r3,r9
10003028:	38 80 00 00 	li      r4,0
1000302c:	38 a0 00 00 	li      r5,0
10003030:	48 00 ea 59 	bl      10011a88 <fdwatch_add_fd>
	}
	
    /* Main loop. */
    (void) gettimeofday( &tv, (struct timezone*) 0 );
10003034:	39 3f 11 64 	addi    r9,r31,4452
10003038:	7d 23 4b 78 	mr      r3,r9
1000303c:	38 80 00 00 	li      r4,0
10003040:	48 02 a4 55 	bl      1002d494 <gettimeofday@plt>
    while ( ( ! terminate ) || num_connects > 0 )
10003044:	48 00 03 1c 	b       10003360 <main+0x1154>
	{
	/* Do we need to re-open the log file? */
	if ( got_hup )
10003048:	3d 20 10 03 	lis     r9,4099
1000304c:	81 29 db 1c 	lwz     r9,-9444(r9)
10003050:	2f 89 00 00 	cmpwi   cr7,r9,0
10003054:	41 9e 00 14 	beq     cr7,10003068 <main+0xe5c>
	    {
	    re_open_logfile();
10003058:	4b ff f0 9d 	bl      100020f4 <re_open_logfile>
	    got_hup = 0;
1000305c:	3d 20 10 03 	lis     r9,4099
10003060:	39 40 00 00 	li      r10,0
10003064:	91 49 db 1c 	stw     r10,-9444(r9)
	    }

	/* Do the fd watch. */
	num_ready = fdwatch( tmr_mstimeout( &tv ) );
10003068:	39 3f 11 64 	addi    r9,r31,4452
1000306c:	7d 23 4b 78 	mr      r3,r9
10003070:	48 01 0b d5 	bl      10013c44 <tmr_mstimeout>
10003074:	7c 69 1b 78 	mr      r9,r3
10003078:	7d 23 4b 78 	mr      r3,r9
1000307c:	48 00 eb b9 	bl      10011c34 <fdwatch>
10003080:	90 7f 00 4c 	stw     r3,76(r31)
	if ( num_ready < 0 )
10003084:	81 3f 00 4c 	lwz     r9,76(r31)
10003088:	2f 89 00 00 	cmpwi   cr7,r9,0
1000308c:	40 9c 00 4c 	bge     cr7,100030d8 <main+0xecc>
	    {
	    if ( errno == EINTR || errno == EAGAIN )
10003090:	48 02 a6 4d 	bl      1002d6dc <__errno_location@plt>
10003094:	7c 69 1b 78 	mr      r9,r3
10003098:	81 29 00 00 	lwz     r9,0(r9)
1000309c:	2f 89 00 04 	cmpwi   cr7,r9,4
100030a0:	41 9e 00 18 	beq     cr7,100030b8 <main+0xeac>
100030a4:	48 02 a6 39 	bl      1002d6dc <__errno_location@plt>
100030a8:	7c 69 1b 78 	mr      r9,r3
100030ac:	81 29 00 00 	lwz     r9,0(r9)
100030b0:	2f 89 00 0b 	cmpwi   cr7,r9,11
100030b4:	40 9e 00 08 	bne     cr7,100030bc <main+0xeb0>
		continue;       /* try again */
100030b8:	48 00 02 a8 	b       10003360 <main+0x1154>
	    syslog( LOG_ERR, "fdwatch - %m" );
100030bc:	38 60 00 03 	li      r3,3
100030c0:	3d 20 10 02 	lis     r9,4098
100030c4:	38 89 81 00 	addi    r4,r9,-32512
100030c8:	4c c6 31 82 	crclr   4*cr1+eq
100030cc:	48 02 a6 b9 	bl      1002d784 <syslog@plt>
	    exit( 1 );
100030d0:	38 60 00 01 	li      r3,1
100030d4:	48 02 a5 01 	bl      1002d5d4 <exit@plt>
	    }
	(void) gettimeofday( &tv, (struct timezone*) 0 );
100030d8:	39 3f 11 64 	addi    r9,r31,4452
100030dc:	7d 23 4b 78 	mr      r3,r9
100030e0:	38 80 00 00 	li      r4,0
100030e4:	48 02 a3 b1 	bl      1002d494 <gettimeofday@plt>

	if ( num_ready == 0 )
100030e8:	81 3f 00 4c 	lwz     r9,76(r31)
100030ec:	2f 89 00 00 	cmpwi   cr7,r9,0
100030f0:	40 9e 00 14 	bne     cr7,10003104 <main+0xef8>
	    {
	    /* No fd's are ready - run the timers. */
	    tmr_run( &tv );
100030f4:	39 3f 11 64 	addi    r9,r31,4452
100030f8:	7d 23 4b 78 	mr      r3,r9
100030fc:	48 01 0c 79 	bl      10013d74 <tmr_run>
	    continue;
10003100:	48 00 02 60 	b       10003360 <main+0x1154>
	    }

	/* Is it a new connection? */
	if ( hs != (httpd_server*) 0 && hs->listen6_fd != -1 &&
10003104:	3d 20 10 03 	lis     r9,4099
10003108:	81 29 db 18 	lwz     r9,-9448(r9)
1000310c:	2f 89 00 00 	cmpwi   cr7,r9,0
10003110:	41 9e 00 68 	beq     cr7,10003178 <main+0xf6c>
10003114:	3d 20 10 03 	lis     r9,4099
10003118:	81 29 db 18 	lwz     r9,-9448(r9)
1000311c:	81 49 00 2c 	lwz     r10,44(r9)
10003120:	39 20 ff ff 	li      r9,-1
10003124:	7f 8a 48 00 	cmpw    cr7,r10,r9
10003128:	41 9e 00 50 	beq     cr7,10003178 <main+0xf6c>
	     fdwatch_check_fd( hs->listen6_fd ) )
1000312c:	3d 20 10 03 	lis     r9,4099
10003130:	81 29 db 18 	lwz     r9,-9448(r9)
10003134:	81 29 00 2c 	lwz     r9,44(r9)
10003138:	7d 23 4b 78 	mr      r3,r9
1000313c:	48 00 eb 69 	bl      10011ca4 <fdwatch_check_fd>
10003140:	7c 69 1b 78 	mr      r9,r3
	    tmr_run( &tv );
	    continue;
	    }

	/* Is it a new connection? */
	if ( hs != (httpd_server*) 0 && hs->listen6_fd != -1 &&
10003144:	2f 89 00 00 	cmpwi   cr7,r9,0
10003148:	41 9e 00 30 	beq     cr7,10003178 <main+0xf6c>
	     fdwatch_check_fd( hs->listen6_fd ) )
	    {
	    if ( handle_newconnect( &tv, hs->listen6_fd ) )
1000314c:	3d 20 10 03 	lis     r9,4099
10003150:	81 29 db 18 	lwz     r9,-9448(r9)
10003154:	81 29 00 2c 	lwz     r9,44(r9)
10003158:	39 5f 11 64 	addi    r10,r31,4452
1000315c:	7d 43 53 78 	mr      r3,r10
10003160:	7d 24 4b 78 	mr      r4,r9
10003164:	48 00 20 d1 	bl      10005234 <handle_newconnect>
10003168:	7c 69 1b 78 	mr      r9,r3
1000316c:	2f 89 00 00 	cmpwi   cr7,r9,0
10003170:	41 9e 00 08 	beq     cr7,10003178 <main+0xf6c>
		/* Go around the loop and do another fdwatch, rather than
		** dropping through and processing existing connections.
		** New connections always get priority.
		*/
		continue;
10003174:	48 00 01 ec 	b       10003360 <main+0x1154>
	    }
	if ( hs != (httpd_server*) 0 && hs->listen4_fd != -1 &&
10003178:	3d 20 10 03 	lis     r9,4099
1000317c:	81 29 db 18 	lwz     r9,-9448(r9)
10003180:	2f 89 00 00 	cmpwi   cr7,r9,0
10003184:	41 9e 00 68 	beq     cr7,100031ec <main+0xfe0>
10003188:	3d 20 10 03 	lis     r9,4099
1000318c:	81 29 db 18 	lwz     r9,-9448(r9)
10003190:	81 49 00 28 	lwz     r10,40(r9)
10003194:	39 20 ff ff 	li      r9,-1
10003198:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000319c:	41 9e 00 50 	beq     cr7,100031ec <main+0xfe0>
	     fdwatch_check_fd( hs->listen4_fd ) )
100031a0:	3d 20 10 03 	lis     r9,4099
100031a4:	81 29 db 18 	lwz     r9,-9448(r9)
100031a8:	81 29 00 28 	lwz     r9,40(r9)
100031ac:	7d 23 4b 78 	mr      r3,r9
100031b0:	48 00 ea f5 	bl      10011ca4 <fdwatch_check_fd>
100031b4:	7c 69 1b 78 	mr      r9,r3
		** dropping through and processing existing connections.
		** New connections always get priority.
		*/
		continue;
	    }
	if ( hs != (httpd_server*) 0 && hs->listen4_fd != -1 &&
100031b8:	2f 89 00 00 	cmpwi   cr7,r9,0
100031bc:	41 9e 00 30 	beq     cr7,100031ec <main+0xfe0>
	     fdwatch_check_fd( hs->listen4_fd ) )
	    {
	    if ( handle_newconnect( &tv, hs->listen4_fd ) )
100031c0:	3d 20 10 03 	lis     r9,4099
100031c4:	81 29 db 18 	lwz     r9,-9448(r9)
100031c8:	81 29 00 28 	lwz     r9,40(r9)
100031cc:	39 5f 11 64 	addi    r10,r31,4452
100031d0:	7d 43 53 78 	mr      r3,r10
100031d4:	7d 24 4b 78 	mr      r4,r9
100031d8:	48 00 20 5d 	bl      10005234 <handle_newconnect>
100031dc:	7c 69 1b 78 	mr      r9,r3
100031e0:	2f 89 00 00 	cmpwi   cr7,r9,0
100031e4:	41 9e 00 08 	beq     cr7,100031ec <main+0xfe0>
		/* Go around the loop and do another fdwatch, rather than
		** dropping through and processing existing connections.
		** New connections always get priority.
		*/
		continue;
100031e8:	48 00 01 78 	b       10003360 <main+0x1154>
	    }
	/* Find the connections that need servicing. */
	while ( ( c = (connecttab*) fdwatch_get_next_client_data() ) != (connecttab*) -1 )
100031ec:	48 00 00 ac 	b       10003298 <main+0x108c>
	    {
	    if ( c == (connecttab*) 0 )
100031f0:	81 3f 00 50 	lwz     r9,80(r31)
100031f4:	2f 89 00 00 	cmpwi   cr7,r9,0
100031f8:	40 9e 00 08 	bne     cr7,10003200 <main+0xff4>
		continue;
100031fc:	48 00 00 9c 	b       10003298 <main+0x108c>
	    hc = c->hc;
10003200:	81 3f 00 50 	lwz     r9,80(r31)
10003204:	81 29 00 08 	lwz     r9,8(r9)
10003208:	91 3f 00 54 	stw     r9,84(r31)
	    if ( ! fdwatch_check_fd( hc->conn_fd ) )
1000320c:	81 3f 00 54 	lwz     r9,84(r31)
10003210:	81 29 01 c0 	lwz     r9,448(r9)
10003214:	7d 23 4b 78 	mr      r3,r9
10003218:	48 00 ea 8d 	bl      10011ca4 <fdwatch_check_fd>
1000321c:	7c 69 1b 78 	mr      r9,r3
10003220:	2f 89 00 00 	cmpwi   cr7,r9,0
10003224:	40 9e 00 18 	bne     cr7,1000323c <main+0x1030>
		/* Something went wrong. */
		clear_connection( c, &tv );
10003228:	39 3f 11 64 	addi    r9,r31,4452
1000322c:	80 7f 00 50 	lwz     r3,80(r31)
10003230:	7d 24 4b 78 	mr      r4,r9
10003234:	48 00 36 65 	bl      10006898 <clear_connection>
10003238:	48 00 00 60 	b       10003298 <main+0x108c>
	    else
		switch ( c->conn_state )
1000323c:	81 3f 00 50 	lwz     r9,80(r31)
10003240:	81 29 00 00 	lwz     r9,0(r9)
10003244:	2f 89 00 02 	cmpwi   cr7,r9,2
10003248:	41 9e 00 28 	beq     cr7,10003270 <main+0x1064>
1000324c:	2f 89 00 04 	cmpwi   cr7,r9,4
10003250:	41 9e 00 34 	beq     cr7,10003284 <main+0x1078>
10003254:	2f 89 00 01 	cmpwi   cr7,r9,1
10003258:	40 9e 00 40 	bne     cr7,10003298 <main+0x108c>
		    {
		    case CNST_READING: handle_read( c, &tv ); break;
1000325c:	39 3f 11 64 	addi    r9,r31,4452
10003260:	80 7f 00 50 	lwz     r3,80(r31)
10003264:	7d 24 4b 78 	mr      r4,r9
10003268:	48 00 22 71 	bl      100054d8 <handle_read>
1000326c:	48 00 00 2c 	b       10003298 <main+0x108c>
		    case CNST_SENDING: handle_send( c, &tv ); break;
10003270:	39 3f 11 64 	addi    r9,r31,4452
10003274:	80 7f 00 50 	lwz     r3,80(r31)
10003278:	7d 24 4b 78 	mr      r4,r9
1000327c:	48 00 27 39 	bl      100059b4 <handle_send>
10003280:	48 00 00 18 	b       10003298 <main+0x108c>
		    case CNST_LINGERING: handle_linger( c, &tv ); break;
10003284:	39 3f 11 64 	addi    r9,r31,4452
10003288:	80 7f 00 50 	lwz     r3,80(r31)
1000328c:	7d 24 4b 78 	mr      r4,r9
10003290:	48 00 2d 29 	bl      10005fb8 <handle_linger>
10003294:	60 00 00 00 	nop
		** New connections always get priority.
		*/
		continue;
	    }
	/* Find the connections that need servicing. */
	while ( ( c = (connecttab*) fdwatch_get_next_client_data() ) != (connecttab*) -1 )
10003298:	48 00 ea b1 	bl      10011d48 <fdwatch_get_next_client_data>
1000329c:	90 7f 00 50 	stw     r3,80(r31)
100032a0:	81 5f 00 50 	lwz     r10,80(r31)
100032a4:	39 20 ff ff 	li      r9,-1
100032a8:	7f 8a 48 00 	cmpw    cr7,r10,r9
100032ac:	40 9e ff 44 	bne     cr7,100031f0 <main+0xfe4>
		    case CNST_READING: handle_read( c, &tv ); break;
		    case CNST_SENDING: handle_send( c, &tv ); break;
		    case CNST_LINGERING: handle_linger( c, &tv ); break;
		    }
	    }
	tmr_run( &tv );
100032b0:	39 3f 11 64 	addi    r9,r31,4452
100032b4:	7d 23 4b 78 	mr      r3,r9
100032b8:	48 01 0a bd 	bl      10013d74 <tmr_run>

	if ( got_usr1 && ! terminate )
100032bc:	3d 20 10 03 	lis     r9,4099
100032c0:	81 29 db 20 	lwz     r9,-9440(r9)
100032c4:	2f 89 00 00 	cmpwi   cr7,r9,0
100032c8:	41 9e 00 98 	beq     cr7,10003360 <main+0x1154>
100032cc:	3d 20 10 03 	lis     r9,4099
100032d0:	81 29 d3 54 	lwz     r9,-11436(r9)
100032d4:	2f 89 00 00 	cmpwi   cr7,r9,0
100032d8:	40 9e 00 88 	bne     cr7,10003360 <main+0x1154>
	    {
	    terminate = 1;
100032dc:	3d 20 10 03 	lis     r9,4099
100032e0:	39 40 00 01 	li      r10,1
100032e4:	91 49 d3 54 	stw     r10,-11436(r9)
	    if ( hs != (httpd_server*) 0 )
100032e8:	3d 20 10 03 	lis     r9,4099
100032ec:	81 29 db 18 	lwz     r9,-9448(r9)
100032f0:	2f 89 00 00 	cmpwi   cr7,r9,0
100032f4:	41 9e 00 6c 	beq     cr7,10003360 <main+0x1154>
		{
		if ( hs->listen4_fd != -1 )
100032f8:	3d 20 10 03 	lis     r9,4099
100032fc:	81 29 db 18 	lwz     r9,-9448(r9)
10003300:	81 49 00 28 	lwz     r10,40(r9)
10003304:	39 20 ff ff 	li      r9,-1
10003308:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000330c:	41 9e 00 18 	beq     cr7,10003324 <main+0x1118>
		    fdwatch_del_fd( hs->listen4_fd );
10003310:	3d 20 10 03 	lis     r9,4099
10003314:	81 29 db 18 	lwz     r9,-9448(r9)
10003318:	81 29 00 28 	lwz     r9,40(r9)
1000331c:	7d 23 4b 78 	mr      r3,r9
10003320:	48 00 e8 45 	bl      10011b64 <fdwatch_del_fd>
		if ( hs->listen6_fd != -1 )
10003324:	3d 20 10 03 	lis     r9,4099
10003328:	81 29 db 18 	lwz     r9,-9448(r9)
1000332c:	81 49 00 2c 	lwz     r10,44(r9)
10003330:	39 20 ff ff 	li      r9,-1
10003334:	7f 8a 48 00 	cmpw    cr7,r10,r9
10003338:	41 9e 00 18 	beq     cr7,10003350 <main+0x1144>
		    fdwatch_del_fd( hs->listen6_fd );
1000333c:	3d 20 10 03 	lis     r9,4099
10003340:	81 29 db 18 	lwz     r9,-9448(r9)
10003344:	81 29 00 2c 	lwz     r9,44(r9)
10003348:	7d 23 4b 78 	mr      r3,r9
1000334c:	48 00 e8 19 	bl      10011b64 <fdwatch_del_fd>
		httpd_unlisten( hs );
10003350:	3d 20 10 03 	lis     r9,4099
10003354:	81 29 db 18 	lwz     r9,-9448(r9)
10003358:	7d 23 4b 78 	mr      r3,r9
1000335c:	48 00 47 7d 	bl      10007ad8 <httpd_unlisten>
	    fdwatch_add_fd( hs->listen6_fd, (void*) 0, FDW_READ );
	}
	
    /* Main loop. */
    (void) gettimeofday( &tv, (struct timezone*) 0 );
    while ( ( ! terminate ) || num_connects > 0 )
10003360:	3d 20 10 03 	lis     r9,4099
10003364:	81 29 d3 54 	lwz     r9,-11436(r9)
10003368:	2f 89 00 00 	cmpwi   cr7,r9,0
1000336c:	41 9e fc dc 	beq     cr7,10003048 <main+0xe3c>
10003370:	3d 20 10 03 	lis     r9,4099
10003374:	81 29 db 08 	lwz     r9,-9464(r9)
10003378:	2f 89 00 00 	cmpwi   cr7,r9,0
1000337c:	41 9d fc cc 	bgt     cr7,10003048 <main+0xe3c>
		}
	    }
	}

    /* The main loop terminated. */
	if(lighandle!=NULL)
10003380:	3d 20 10 03 	lis     r9,4099
10003384:	81 29 d3 6c 	lwz     r9,-11412(r9)
10003388:	2f 89 00 00 	cmpwi   cr7,r9,0
1000338c:	41 9e 00 20 	beq     cr7,100033ac <main+0x11a0>
	{
		lig_matrix_close(lighandle);
10003390:	3d 20 10 03 	lis     r9,4099
10003394:	81 29 d3 6c 	lwz     r9,-11412(r9)
10003398:	7d 23 4b 78 	mr      r3,r9
1000339c:	48 02 a2 69 	bl      1002d604 <lig_matrix_close@plt>
		lighandle=NULL;
100033a0:	3d 20 10 03 	lis     r9,4099
100033a4:	39 40 00 00 	li      r10,0
100033a8:	91 49 d3 6c 	stw     r10,-11412(r9)
	}
    shut_down();
100033ac:	48 00 1c 8d 	bl      10005038 <shut_down>
    syslog( LOG_NOTICE, "exiting" );
100033b0:	38 60 00 05 	li      r3,5
100033b4:	3d 20 10 01 	lis     r9,4097
100033b8:	38 89 7d 24 	addi    r4,r9,32036
100033bc:	4c c6 31 82 	crclr   4*cr1+eq
100033c0:	48 02 a3 c5 	bl      1002d784 <syslog@plt>
    closelog();
100033c4:	48 02 a2 71 	bl      1002d634 <closelog@plt>
    exit( 0 );
100033c8:	38 60 00 00 	li      r3,0
100033cc:	48 02 a2 09 	bl      1002d5d4 <exit@plt>

100033d0 <parse_args>:
    }


static void
parse_args( int argc, char** argv )
    {
100033d0:	94 21 ff d0 	stwu    r1,-48(r1)
100033d4:	7c 08 02 a6 	mflr    r0
100033d8:	90 01 00 34 	stw     r0,52(r1)
100033dc:	93 e1 00 2c 	stw     r31,44(r1)
100033e0:	7c 3f 0b 78 	mr      r31,r1
100033e4:	90 7f 00 18 	stw     r3,24(r31)
100033e8:	90 9f 00 1c 	stw     r4,28(r31)
    int argn;

    debug = 0;
100033ec:	3d 20 10 03 	lis     r9,4099
100033f0:	39 40 00 00 	li      r10,0
100033f4:	91 49 da a0 	stw     r10,-9568(r9)
    port = DEFAULT_PORT;
100033f8:	3d 20 10 03 	lis     r9,4099
100033fc:	39 40 00 50 	li      r10,80
10003400:	b1 49 da a4 	sth     r10,-9564(r9)
    dir = (char*) 0;
10003404:	3d 20 10 03 	lis     r9,4099
10003408:	39 40 00 00 	li      r10,0
1000340c:	91 49 da a8 	stw     r10,-9560(r9)
    data_dir = (char*) 0;
10003410:	3d 20 10 03 	lis     r9,4099
10003414:	39 40 00 00 	li      r10,0
10003418:	91 49 da ac 	stw     r10,-9556(r9)
#ifdef ALWAYS_CHROOT
    do_chroot = 1;
#else /* ALWAYS_CHROOT */
    do_chroot = 0;
1000341c:	3d 20 10 03 	lis     r9,4099
10003420:	39 40 00 00 	li      r10,0
10003424:	91 49 da b0 	stw     r10,-9552(r9)
#endif /* ALWAYS_CHROOT */
    no_log = 0;
10003428:	3d 20 10 03 	lis     r9,4099
1000342c:	39 40 00 00 	li      r10,0
10003430:	91 49 da b4 	stw     r10,-9548(r9)
    no_symlink_check = do_chroot;
10003434:	3d 20 10 03 	lis     r9,4099
10003438:	81 49 da b0 	lwz     r10,-9552(r9)
1000343c:	3d 20 10 03 	lis     r9,4099
10003440:	91 49 da b8 	stw     r10,-9544(r9)
#ifdef ALWAYS_VHOST
    do_vhost = 1;
#else /* ALWAYS_VHOST */
    do_vhost = 0;
10003444:	3d 20 10 03 	lis     r9,4099
10003448:	39 40 00 00 	li      r10,0
1000344c:	91 49 da bc 	stw     r10,-9540(r9)
#endif /* ALWAYS_VHOST */
#ifdef ALWAYS_GLOBAL_PASSWD
    do_global_passwd = 1;
#else /* ALWAYS_GLOBAL_PASSWD */
    do_global_passwd = 0;
10003450:	3d 20 10 03 	lis     r9,4099
10003454:	39 40 00 00 	li      r10,0
10003458:	91 49 da c0 	stw     r10,-9536(r9)
#endif /* ALWAYS_GLOBAL_PASSWD */
#ifdef CGI_PATTERN
    cgi_pattern = CGI_PATTERN;
#else /* CGI_PATTERN */
    cgi_pattern = (char*) 0;
1000345c:	3d 20 10 03 	lis     r9,4099
10003460:	39 40 00 00 	li      r10,0
10003464:	91 49 da c4 	stw     r10,-9532(r9)
#endif /* CGI_PATTERN */
#ifdef CGI_LIMIT
    cgi_limit = CGI_LIMIT;
#else /* CGI_LIMIT */
    cgi_limit = 0;
10003468:	3d 20 10 03 	lis     r9,4099
1000346c:	39 40 00 00 	li      r10,0
10003470:	91 49 da c8 	stw     r10,-9528(r9)
#endif /* CGI_LIMIT */
    url_pattern = (char*) 0;
10003474:	3d 20 10 03 	lis     r9,4099
10003478:	39 40 00 00 	li      r10,0
1000347c:	91 49 da cc 	stw     r10,-9524(r9)
    no_empty_referrers = 0;
10003480:	3d 20 10 03 	lis     r9,4099
10003484:	39 40 00 00 	li      r10,0
10003488:	91 49 da d0 	stw     r10,-9520(r9)
    local_pattern = (char*) 0;
1000348c:	3d 20 10 03 	lis     r9,4099
10003490:	39 40 00 00 	li      r10,0
10003494:	91 49 da d4 	stw     r10,-9516(r9)
    throttlefile = (char*) 0;
10003498:	3d 20 10 03 	lis     r9,4099
1000349c:	39 40 00 00 	li      r10,0
100034a0:	91 49 da dc 	stw     r10,-9508(r9)
    hostname = (char*) 0;
100034a4:	3d 20 10 03 	lis     r9,4099
100034a8:	39 40 00 00 	li      r10,0
100034ac:	91 49 da e0 	stw     r10,-9504(r9)
    logfile = (char*) 0;
100034b0:	3d 20 10 03 	lis     r9,4099
100034b4:	39 40 00 00 	li      r10,0
100034b8:	91 49 da d8 	stw     r10,-9512(r9)
    pidfile = (char*) 0;
100034bc:	3d 20 10 03 	lis     r9,4099
100034c0:	39 40 00 00 	li      r10,0
100034c4:	91 49 da e4 	stw     r10,-9500(r9)
    user = DEFAULT_USER;
100034c8:	3d 20 10 03 	lis     r9,4099
100034cc:	3d 40 10 02 	lis     r10,4098
100034d0:	39 4a 81 10 	addi    r10,r10,-32496
100034d4:	91 49 da e8 	stw     r10,-9496(r9)
    charset = DEFAULT_CHARSET;
100034d8:	3d 20 10 03 	lis     r9,4099
100034dc:	3d 40 10 02 	lis     r10,4098
100034e0:	39 4a 81 18 	addi    r10,r10,-32488
100034e4:	91 49 da ec 	stw     r10,-9492(r9)
    p3p = "";
100034e8:	3d 20 10 03 	lis     r9,4099
100034ec:	3d 40 10 02 	lis     r10,4098
100034f0:	39 4a 81 20 	addi    r10,r10,-32480
100034f4:	91 49 da f0 	stw     r10,-9488(r9)
    max_age = -1;
100034f8:	3d 20 10 03 	lis     r9,4099
100034fc:	39 40 ff ff 	li      r10,-1
10003500:	91 49 da f4 	stw     r10,-9484(r9)
    argn = 1;
10003504:	39 20 00 01 	li      r9,1
10003508:	91 3f 00 08 	stw     r9,8(r31)
    while ( argn < argc && argv[argn][0] == '-' )
1000350c:	48 00 08 7c 	b       10003d88 <parse_args+0x9b8>
	{
	if ( strcmp( argv[argn], "-V" ) == 0 )
10003510:	81 3f 00 08 	lwz     r9,8(r31)
10003514:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10003518:	81 5f 00 1c 	lwz     r10,28(r31)
1000351c:	7d 2a 4a 14 	add     r9,r10,r9
10003520:	81 29 00 00 	lwz     r9,0(r9)
10003524:	7d 23 4b 78 	mr      r3,r9
10003528:	3d 20 10 02 	lis     r9,4098
1000352c:	38 89 81 24 	addi    r4,r9,-32476
10003530:	48 02 9e ad 	bl      1002d3dc <strcmp@plt>
10003534:	7c 69 1b 78 	mr      r9,r3
10003538:	2f 89 00 00 	cmpwi   cr7,r9,0
1000353c:	40 9e 00 18 	bne     cr7,10003554 <parse_args+0x184>
	    {
	    (void) printf( "%s\n", SERVER_SOFTWARE );
10003540:	3d 20 10 02 	lis     r9,4098
10003544:	38 69 81 28 	addi    r3,r9,-32472
10003548:	48 02 a0 6d 	bl      1002d5b4 <puts@plt>
	    exit( 0 );
1000354c:	38 60 00 00 	li      r3,0
10003550:	48 02 a0 85 	bl      1002d5d4 <exit@plt>
	    }
	else if ( strcmp( argv[argn], "-C" ) == 0 && argn + 1 < argc )
10003554:	81 3f 00 08 	lwz     r9,8(r31)
10003558:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1000355c:	81 5f 00 1c 	lwz     r10,28(r31)
10003560:	7d 2a 4a 14 	add     r9,r10,r9
10003564:	81 29 00 00 	lwz     r9,0(r9)
10003568:	7d 23 4b 78 	mr      r3,r9
1000356c:	3d 20 10 02 	lis     r9,4098
10003570:	38 89 81 40 	addi    r4,r9,-32448
10003574:	48 02 9e 69 	bl      1002d3dc <strcmp@plt>
10003578:	7c 69 1b 78 	mr      r9,r3
1000357c:	2f 89 00 00 	cmpwi   cr7,r9,0
10003580:	40 9e 00 44 	bne     cr7,100035c4 <parse_args+0x1f4>
10003584:	81 3f 00 08 	lwz     r9,8(r31)
10003588:	39 49 00 01 	addi    r10,r9,1
1000358c:	81 3f 00 18 	lwz     r9,24(r31)
10003590:	7f 8a 48 00 	cmpw    cr7,r10,r9
10003594:	40 9c 00 30 	bge     cr7,100035c4 <parse_args+0x1f4>
	    {
	    ++argn;
10003598:	81 3f 00 08 	lwz     r9,8(r31)
1000359c:	39 29 00 01 	addi    r9,r9,1
100035a0:	91 3f 00 08 	stw     r9,8(r31)
	    read_config( argv[argn] );
100035a4:	81 3f 00 08 	lwz     r9,8(r31)
100035a8:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
100035ac:	81 5f 00 1c 	lwz     r10,28(r31)
100035b0:	7d 2a 4a 14 	add     r9,r10,r9
100035b4:	81 29 00 00 	lwz     r9,0(r9)
100035b8:	7d 23 4b 78 	mr      r3,r9
100035bc:	48 00 08 71 	bl      10003e2c <read_config>
100035c0:	48 00 07 bc 	b       10003d7c <parse_args+0x9ac>
	    }
	else if ( strcmp( argv[argn], "-p" ) == 0 && argn + 1 < argc )
100035c4:	81 3f 00 08 	lwz     r9,8(r31)
100035c8:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
100035cc:	81 5f 00 1c 	lwz     r10,28(r31)
100035d0:	7d 2a 4a 14 	add     r9,r10,r9
100035d4:	81 29 00 00 	lwz     r9,0(r9)
100035d8:	7d 23 4b 78 	mr      r3,r9
100035dc:	3d 20 10 02 	lis     r9,4098
100035e0:	38 89 81 44 	addi    r4,r9,-32444
100035e4:	48 02 9d f9 	bl      1002d3dc <strcmp@plt>
100035e8:	7c 69 1b 78 	mr      r9,r3
100035ec:	2f 89 00 00 	cmpwi   cr7,r9,0
100035f0:	40 9e 00 54 	bne     cr7,10003644 <parse_args+0x274>
100035f4:	81 3f 00 08 	lwz     r9,8(r31)
100035f8:	39 49 00 01 	addi    r10,r9,1
100035fc:	81 3f 00 18 	lwz     r9,24(r31)
10003600:	7f 8a 48 00 	cmpw    cr7,r10,r9
10003604:	40 9c 00 40 	bge     cr7,10003644 <parse_args+0x274>
	    {
	    ++argn;
10003608:	81 3f 00 08 	lwz     r9,8(r31)
1000360c:	39 29 00 01 	addi    r9,r9,1
10003610:	91 3f 00 08 	stw     r9,8(r31)
	    port = (unsigned short) atoi( argv[argn] );
10003614:	81 3f 00 08 	lwz     r9,8(r31)
10003618:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1000361c:	81 5f 00 1c 	lwz     r10,28(r31)
10003620:	7d 2a 4a 14 	add     r9,r10,r9
10003624:	81 29 00 00 	lwz     r9,0(r9)
10003628:	7d 23 4b 78 	mr      r3,r9
1000362c:	48 02 a1 a1 	bl      1002d7cc <atoi@plt>
10003630:	7c 69 1b 78 	mr      r9,r3
10003634:	55 2a 04 3e 	clrlwi  r10,r9,16
10003638:	3d 20 10 03 	lis     r9,4099
1000363c:	b1 49 da a4 	sth     r10,-9564(r9)
10003640:	48 00 07 3c 	b       10003d7c <parse_args+0x9ac>
	    }
	else if ( strcmp( argv[argn], "-d" ) == 0 && argn + 1 < argc )
10003644:	81 3f 00 08 	lwz     r9,8(r31)
10003648:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1000364c:	81 5f 00 1c 	lwz     r10,28(r31)
10003650:	7d 2a 4a 14 	add     r9,r10,r9
10003654:	81 29 00 00 	lwz     r9,0(r9)
10003658:	7d 23 4b 78 	mr      r3,r9
1000365c:	3d 20 10 02 	lis     r9,4098
10003660:	38 89 81 48 	addi    r4,r9,-32440
10003664:	48 02 9d 79 	bl      1002d3dc <strcmp@plt>
10003668:	7c 69 1b 78 	mr      r9,r3
1000366c:	2f 89 00 00 	cmpwi   cr7,r9,0
10003670:	40 9e 00 44 	bne     cr7,100036b4 <parse_args+0x2e4>
10003674:	81 3f 00 08 	lwz     r9,8(r31)
10003678:	39 49 00 01 	addi    r10,r9,1
1000367c:	81 3f 00 18 	lwz     r9,24(r31)
10003680:	7f 8a 48 00 	cmpw    cr7,r10,r9
10003684:	40 9c 00 30 	bge     cr7,100036b4 <parse_args+0x2e4>
	    {
	    ++argn;
10003688:	81 3f 00 08 	lwz     r9,8(r31)
1000368c:	39 29 00 01 	addi    r9,r9,1
10003690:	91 3f 00 08 	stw     r9,8(r31)
	    dir = argv[argn];
10003694:	81 3f 00 08 	lwz     r9,8(r31)
10003698:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1000369c:	81 5f 00 1c 	lwz     r10,28(r31)
100036a0:	7d 2a 4a 14 	add     r9,r10,r9
100036a4:	81 49 00 00 	lwz     r10,0(r9)
100036a8:	3d 20 10 03 	lis     r9,4099
100036ac:	91 49 da a8 	stw     r10,-9560(r9)
100036b0:	48 00 06 cc 	b       10003d7c <parse_args+0x9ac>
	    }
	else if ( strcmp( argv[argn], "-r" ) == 0 )
100036b4:	81 3f 00 08 	lwz     r9,8(r31)
100036b8:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
100036bc:	81 5f 00 1c 	lwz     r10,28(r31)
100036c0:	7d 2a 4a 14 	add     r9,r10,r9
100036c4:	81 29 00 00 	lwz     r9,0(r9)
100036c8:	7d 23 4b 78 	mr      r3,r9
100036cc:	3d 20 10 02 	lis     r9,4098
100036d0:	38 89 81 4c 	addi    r4,r9,-32436
100036d4:	48 02 9d 09 	bl      1002d3dc <strcmp@plt>
100036d8:	7c 69 1b 78 	mr      r9,r3
100036dc:	2f 89 00 00 	cmpwi   cr7,r9,0
100036e0:	40 9e 00 20 	bne     cr7,10003700 <parse_args+0x330>
	    {
	    do_chroot = 1;
100036e4:	3d 20 10 03 	lis     r9,4099
100036e8:	39 40 00 01 	li      r10,1
100036ec:	91 49 da b0 	stw     r10,-9552(r9)
	    no_symlink_check = 1;
100036f0:	3d 20 10 03 	lis     r9,4099
100036f4:	39 40 00 01 	li      r10,1
100036f8:	91 49 da b8 	stw     r10,-9544(r9)
100036fc:	48 00 06 80 	b       10003d7c <parse_args+0x9ac>
	    }
	else if ( strcmp( argv[argn], "-nor" ) == 0 )
10003700:	81 3f 00 08 	lwz     r9,8(r31)
10003704:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10003708:	81 5f 00 1c 	lwz     r10,28(r31)
1000370c:	7d 2a 4a 14 	add     r9,r10,r9
10003710:	81 29 00 00 	lwz     r9,0(r9)
10003714:	7d 23 4b 78 	mr      r3,r9
10003718:	3d 20 10 02 	lis     r9,4098
1000371c:	38 89 81 50 	addi    r4,r9,-32432
10003720:	48 02 9c bd 	bl      1002d3dc <strcmp@plt>
10003724:	7c 69 1b 78 	mr      r9,r3
10003728:	2f 89 00 00 	cmpwi   cr7,r9,0
1000372c:	40 9e 00 20 	bne     cr7,1000374c <parse_args+0x37c>
	    {
	    do_chroot = 0;
10003730:	3d 20 10 03 	lis     r9,4099
10003734:	39 40 00 00 	li      r10,0
10003738:	91 49 da b0 	stw     r10,-9552(r9)
	    no_symlink_check = 0;
1000373c:	3d 20 10 03 	lis     r9,4099
10003740:	39 40 00 00 	li      r10,0
10003744:	91 49 da b8 	stw     r10,-9544(r9)
10003748:	48 00 06 34 	b       10003d7c <parse_args+0x9ac>
	    }
	else if ( strcmp( argv[argn], "-dd" ) == 0 && argn + 1 < argc )
1000374c:	81 3f 00 08 	lwz     r9,8(r31)
10003750:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10003754:	81 5f 00 1c 	lwz     r10,28(r31)
10003758:	7d 2a 4a 14 	add     r9,r10,r9
1000375c:	81 29 00 00 	lwz     r9,0(r9)
10003760:	7d 23 4b 78 	mr      r3,r9
10003764:	3d 20 10 02 	lis     r9,4098
10003768:	38 89 81 58 	addi    r4,r9,-32424
1000376c:	48 02 9c 71 	bl      1002d3dc <strcmp@plt>
10003770:	7c 69 1b 78 	mr      r9,r3
10003774:	2f 89 00 00 	cmpwi   cr7,r9,0
10003778:	40 9e 00 44 	bne     cr7,100037bc <parse_args+0x3ec>
1000377c:	81 3f 00 08 	lwz     r9,8(r31)
10003780:	39 49 00 01 	addi    r10,r9,1
10003784:	81 3f 00 18 	lwz     r9,24(r31)
10003788:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000378c:	40 9c 00 30 	bge     cr7,100037bc <parse_args+0x3ec>
	    {
	    ++argn;
10003790:	81 3f 00 08 	lwz     r9,8(r31)
10003794:	39 29 00 01 	addi    r9,r9,1
10003798:	91 3f 00 08 	stw     r9,8(r31)
	    data_dir = argv[argn];
1000379c:	81 3f 00 08 	lwz     r9,8(r31)
100037a0:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
100037a4:	81 5f 00 1c 	lwz     r10,28(r31)
100037a8:	7d 2a 4a 14 	add     r9,r10,r9
100037ac:	81 49 00 00 	lwz     r10,0(r9)
100037b0:	3d 20 10 03 	lis     r9,4099
100037b4:	91 49 da ac 	stw     r10,-9556(r9)
100037b8:	48 00 05 c4 	b       10003d7c <parse_args+0x9ac>
	    }
	else if ( strcmp( argv[argn], "-s" ) == 0 )
100037bc:	81 3f 00 08 	lwz     r9,8(r31)
100037c0:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
100037c4:	81 5f 00 1c 	lwz     r10,28(r31)
100037c8:	7d 2a 4a 14 	add     r9,r10,r9
100037cc:	81 29 00 00 	lwz     r9,0(r9)
100037d0:	7d 23 4b 78 	mr      r3,r9
100037d4:	3d 20 10 02 	lis     r9,4098
100037d8:	38 89 81 5c 	addi    r4,r9,-32420
100037dc:	48 02 9c 01 	bl      1002d3dc <strcmp@plt>
100037e0:	7c 69 1b 78 	mr      r9,r3
100037e4:	2f 89 00 00 	cmpwi   cr7,r9,0
100037e8:	40 9e 00 14 	bne     cr7,100037fc <parse_args+0x42c>
	    no_symlink_check = 0;
100037ec:	3d 20 10 03 	lis     r9,4099
100037f0:	39 40 00 00 	li      r10,0
100037f4:	91 49 da b8 	stw     r10,-9544(r9)
100037f8:	48 00 05 84 	b       10003d7c <parse_args+0x9ac>
	else if ( strcmp( argv[argn], "-nos" ) == 0 )
100037fc:	81 3f 00 08 	lwz     r9,8(r31)
10003800:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10003804:	81 5f 00 1c 	lwz     r10,28(r31)
10003808:	7d 2a 4a 14 	add     r9,r10,r9
1000380c:	81 29 00 00 	lwz     r9,0(r9)
10003810:	7d 23 4b 78 	mr      r3,r9
10003814:	3d 20 10 02 	lis     r9,4098
10003818:	38 89 81 60 	addi    r4,r9,-32416
1000381c:	48 02 9b c1 	bl      1002d3dc <strcmp@plt>
10003820:	7c 69 1b 78 	mr      r9,r3
10003824:	2f 89 00 00 	cmpwi   cr7,r9,0
10003828:	40 9e 00 14 	bne     cr7,1000383c <parse_args+0x46c>
	    no_symlink_check = 1;
1000382c:	3d 20 10 03 	lis     r9,4099
10003830:	39 40 00 01 	li      r10,1
10003834:	91 49 da b8 	stw     r10,-9544(r9)
10003838:	48 00 05 44 	b       10003d7c <parse_args+0x9ac>
	else if ( strcmp( argv[argn], "-u" ) == 0 && argn + 1 < argc )
1000383c:	81 3f 00 08 	lwz     r9,8(r31)
10003840:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10003844:	81 5f 00 1c 	lwz     r10,28(r31)
10003848:	7d 2a 4a 14 	add     r9,r10,r9
1000384c:	81 29 00 00 	lwz     r9,0(r9)
10003850:	7d 23 4b 78 	mr      r3,r9
10003854:	3d 20 10 02 	lis     r9,4098
10003858:	38 89 81 68 	addi    r4,r9,-32408
1000385c:	48 02 9b 81 	bl      1002d3dc <strcmp@plt>
10003860:	7c 69 1b 78 	mr      r9,r3
10003864:	2f 89 00 00 	cmpwi   cr7,r9,0
10003868:	40 9e 00 44 	bne     cr7,100038ac <parse_args+0x4dc>
1000386c:	81 3f 00 08 	lwz     r9,8(r31)
10003870:	39 49 00 01 	addi    r10,r9,1
10003874:	81 3f 00 18 	lwz     r9,24(r31)
10003878:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000387c:	40 9c 00 30 	bge     cr7,100038ac <parse_args+0x4dc>
	    {
	    ++argn;
10003880:	81 3f 00 08 	lwz     r9,8(r31)
10003884:	39 29 00 01 	addi    r9,r9,1
10003888:	91 3f 00 08 	stw     r9,8(r31)
	    user = argv[argn];
1000388c:	81 3f 00 08 	lwz     r9,8(r31)
10003890:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10003894:	81 5f 00 1c 	lwz     r10,28(r31)
10003898:	7d 2a 4a 14 	add     r9,r10,r9
1000389c:	81 49 00 00 	lwz     r10,0(r9)
100038a0:	3d 20 10 03 	lis     r9,4099
100038a4:	91 49 da e8 	stw     r10,-9496(r9)
100038a8:	48 00 04 d4 	b       10003d7c <parse_args+0x9ac>
	    }
	else if ( strcmp( argv[argn], "-c" ) == 0 && argn + 1 < argc )
100038ac:	81 3f 00 08 	lwz     r9,8(r31)
100038b0:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
100038b4:	81 5f 00 1c 	lwz     r10,28(r31)
100038b8:	7d 2a 4a 14 	add     r9,r10,r9
100038bc:	81 29 00 00 	lwz     r9,0(r9)
100038c0:	7d 23 4b 78 	mr      r3,r9
100038c4:	3d 20 10 02 	lis     r9,4098
100038c8:	38 89 81 6c 	addi    r4,r9,-32404
100038cc:	48 02 9b 11 	bl      1002d3dc <strcmp@plt>
100038d0:	7c 69 1b 78 	mr      r9,r3
100038d4:	2f 89 00 00 	cmpwi   cr7,r9,0
100038d8:	40 9e 00 44 	bne     cr7,1000391c <parse_args+0x54c>
100038dc:	81 3f 00 08 	lwz     r9,8(r31)
100038e0:	39 49 00 01 	addi    r10,r9,1
100038e4:	81 3f 00 18 	lwz     r9,24(r31)
100038e8:	7f 8a 48 00 	cmpw    cr7,r10,r9
100038ec:	40 9c 00 30 	bge     cr7,1000391c <parse_args+0x54c>
	    {
	    ++argn;
100038f0:	81 3f 00 08 	lwz     r9,8(r31)
100038f4:	39 29 00 01 	addi    r9,r9,1
100038f8:	91 3f 00 08 	stw     r9,8(r31)
	    cgi_pattern = argv[argn];
100038fc:	81 3f 00 08 	lwz     r9,8(r31)
10003900:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10003904:	81 5f 00 1c 	lwz     r10,28(r31)
10003908:	7d 2a 4a 14 	add     r9,r10,r9
1000390c:	81 49 00 00 	lwz     r10,0(r9)
10003910:	3d 20 10 03 	lis     r9,4099
10003914:	91 49 da c4 	stw     r10,-9532(r9)
10003918:	48 00 04 64 	b       10003d7c <parse_args+0x9ac>
	    }
	else if ( strcmp( argv[argn], "-t" ) == 0 && argn + 1 < argc )
1000391c:	81 3f 00 08 	lwz     r9,8(r31)
10003920:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10003924:	81 5f 00 1c 	lwz     r10,28(r31)
10003928:	7d 2a 4a 14 	add     r9,r10,r9
1000392c:	81 29 00 00 	lwz     r9,0(r9)
10003930:	7d 23 4b 78 	mr      r3,r9
10003934:	3d 20 10 02 	lis     r9,4098
10003938:	38 89 81 70 	addi    r4,r9,-32400
1000393c:	48 02 9a a1 	bl      1002d3dc <strcmp@plt>
10003940:	7c 69 1b 78 	mr      r9,r3
10003944:	2f 89 00 00 	cmpwi   cr7,r9,0
10003948:	40 9e 00 44 	bne     cr7,1000398c <parse_args+0x5bc>
1000394c:	81 3f 00 08 	lwz     r9,8(r31)
10003950:	39 49 00 01 	addi    r10,r9,1
10003954:	81 3f 00 18 	lwz     r9,24(r31)
10003958:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000395c:	40 9c 00 30 	bge     cr7,1000398c <parse_args+0x5bc>
	    {
	    ++argn;
10003960:	81 3f 00 08 	lwz     r9,8(r31)
10003964:	39 29 00 01 	addi    r9,r9,1
10003968:	91 3f 00 08 	stw     r9,8(r31)
	    throttlefile = argv[argn];
1000396c:	81 3f 00 08 	lwz     r9,8(r31)
10003970:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10003974:	81 5f 00 1c 	lwz     r10,28(r31)
10003978:	7d 2a 4a 14 	add     r9,r10,r9
1000397c:	81 49 00 00 	lwz     r10,0(r9)
10003980:	3d 20 10 03 	lis     r9,4099
10003984:	91 49 da dc 	stw     r10,-9508(r9)
10003988:	48 00 03 f4 	b       10003d7c <parse_args+0x9ac>
	    }
	else if ( strcmp( argv[argn], "-h" ) == 0 && argn + 1 < argc )
1000398c:	81 3f 00 08 	lwz     r9,8(r31)
10003990:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10003994:	81 5f 00 1c 	lwz     r10,28(r31)
10003998:	7d 2a 4a 14 	add     r9,r10,r9
1000399c:	81 29 00 00 	lwz     r9,0(r9)
100039a0:	7d 23 4b 78 	mr      r3,r9
100039a4:	3d 20 10 02 	lis     r9,4098
100039a8:	38 89 81 74 	addi    r4,r9,-32396
100039ac:	48 02 9a 31 	bl      1002d3dc <strcmp@plt>
100039b0:	7c 69 1b 78 	mr      r9,r3
100039b4:	2f 89 00 00 	cmpwi   cr7,r9,0
100039b8:	40 9e 00 44 	bne     cr7,100039fc <parse_args+0x62c>
100039bc:	81 3f 00 08 	lwz     r9,8(r31)
100039c0:	39 49 00 01 	addi    r10,r9,1
100039c4:	81 3f 00 18 	lwz     r9,24(r31)
100039c8:	7f 8a 48 00 	cmpw    cr7,r10,r9
100039cc:	40 9c 00 30 	bge     cr7,100039fc <parse_args+0x62c>
	    {
	    ++argn;
100039d0:	81 3f 00 08 	lwz     r9,8(r31)
100039d4:	39 29 00 01 	addi    r9,r9,1
100039d8:	91 3f 00 08 	stw     r9,8(r31)
	    hostname = argv[argn];
100039dc:	81 3f 00 08 	lwz     r9,8(r31)
100039e0:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
100039e4:	81 5f 00 1c 	lwz     r10,28(r31)
100039e8:	7d 2a 4a 14 	add     r9,r10,r9
100039ec:	81 49 00 00 	lwz     r10,0(r9)
100039f0:	3d 20 10 03 	lis     r9,4099
100039f4:	91 49 da e0 	stw     r10,-9504(r9)
100039f8:	48 00 03 84 	b       10003d7c <parse_args+0x9ac>
	    }
	else if ( strcmp( argv[argn], "-l" ) == 0 && argn + 1 < argc )
100039fc:	81 3f 00 08 	lwz     r9,8(r31)
10003a00:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10003a04:	81 5f 00 1c 	lwz     r10,28(r31)
10003a08:	7d 2a 4a 14 	add     r9,r10,r9
10003a0c:	81 29 00 00 	lwz     r9,0(r9)
10003a10:	7d 23 4b 78 	mr      r3,r9
10003a14:	3d 20 10 02 	lis     r9,4098
10003a18:	38 89 81 78 	addi    r4,r9,-32392
10003a1c:	48 02 99 c1 	bl      1002d3dc <strcmp@plt>
10003a20:	7c 69 1b 78 	mr      r9,r3
10003a24:	2f 89 00 00 	cmpwi   cr7,r9,0
10003a28:	40 9e 00 44 	bne     cr7,10003a6c <parse_args+0x69c>
10003a2c:	81 3f 00 08 	lwz     r9,8(r31)
10003a30:	39 49 00 01 	addi    r10,r9,1
10003a34:	81 3f 00 18 	lwz     r9,24(r31)
10003a38:	7f 8a 48 00 	cmpw    cr7,r10,r9
10003a3c:	40 9c 00 30 	bge     cr7,10003a6c <parse_args+0x69c>
	    {
	    ++argn;
10003a40:	81 3f 00 08 	lwz     r9,8(r31)
10003a44:	39 29 00 01 	addi    r9,r9,1
10003a48:	91 3f 00 08 	stw     r9,8(r31)
	    logfile = argv[argn];
10003a4c:	81 3f 00 08 	lwz     r9,8(r31)
10003a50:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10003a54:	81 5f 00 1c 	lwz     r10,28(r31)
10003a58:	7d 2a 4a 14 	add     r9,r10,r9
10003a5c:	81 49 00 00 	lwz     r10,0(r9)
10003a60:	3d 20 10 03 	lis     r9,4099
10003a64:	91 49 da d8 	stw     r10,-9512(r9)
10003a68:	48 00 03 14 	b       10003d7c <parse_args+0x9ac>
	    }
	else if ( strcmp( argv[argn], "-v" ) == 0 )
10003a6c:	81 3f 00 08 	lwz     r9,8(r31)
10003a70:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10003a74:	81 5f 00 1c 	lwz     r10,28(r31)
10003a78:	7d 2a 4a 14 	add     r9,r10,r9
10003a7c:	81 29 00 00 	lwz     r9,0(r9)
10003a80:	7d 23 4b 78 	mr      r3,r9
10003a84:	3d 20 10 02 	lis     r9,4098
10003a88:	38 89 81 7c 	addi    r4,r9,-32388
10003a8c:	48 02 99 51 	bl      1002d3dc <strcmp@plt>
10003a90:	7c 69 1b 78 	mr      r9,r3
10003a94:	2f 89 00 00 	cmpwi   cr7,r9,0
10003a98:	40 9e 00 14 	bne     cr7,10003aac <parse_args+0x6dc>
	    do_vhost = 1;
10003a9c:	3d 20 10 03 	lis     r9,4099
10003aa0:	39 40 00 01 	li      r10,1
10003aa4:	91 49 da bc 	stw     r10,-9540(r9)
10003aa8:	48 00 02 d4 	b       10003d7c <parse_args+0x9ac>
	else if ( strcmp( argv[argn], "-nov" ) == 0 )
10003aac:	81 3f 00 08 	lwz     r9,8(r31)
10003ab0:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10003ab4:	81 5f 00 1c 	lwz     r10,28(r31)
10003ab8:	7d 2a 4a 14 	add     r9,r10,r9
10003abc:	81 29 00 00 	lwz     r9,0(r9)
10003ac0:	7d 23 4b 78 	mr      r3,r9
10003ac4:	3d 20 10 02 	lis     r9,4098
10003ac8:	38 89 81 80 	addi    r4,r9,-32384
10003acc:	48 02 99 11 	bl      1002d3dc <strcmp@plt>
10003ad0:	7c 69 1b 78 	mr      r9,r3
10003ad4:	2f 89 00 00 	cmpwi   cr7,r9,0
10003ad8:	40 9e 00 14 	bne     cr7,10003aec <parse_args+0x71c>
	    do_vhost = 0;
10003adc:	3d 20 10 03 	lis     r9,4099
10003ae0:	39 40 00 00 	li      r10,0
10003ae4:	91 49 da bc 	stw     r10,-9540(r9)
10003ae8:	48 00 02 94 	b       10003d7c <parse_args+0x9ac>
	else if ( strcmp( argv[argn], "-g" ) == 0 )
10003aec:	81 3f 00 08 	lwz     r9,8(r31)
10003af0:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10003af4:	81 5f 00 1c 	lwz     r10,28(r31)
10003af8:	7d 2a 4a 14 	add     r9,r10,r9
10003afc:	81 29 00 00 	lwz     r9,0(r9)
10003b00:	7d 23 4b 78 	mr      r3,r9
10003b04:	3d 20 10 02 	lis     r9,4098
10003b08:	38 89 81 88 	addi    r4,r9,-32376
10003b0c:	48 02 98 d1 	bl      1002d3dc <strcmp@plt>
10003b10:	7c 69 1b 78 	mr      r9,r3
10003b14:	2f 89 00 00 	cmpwi   cr7,r9,0
10003b18:	40 9e 00 14 	bne     cr7,10003b2c <parse_args+0x75c>
	    do_global_passwd = 1;
10003b1c:	3d 20 10 03 	lis     r9,4099
10003b20:	39 40 00 01 	li      r10,1
10003b24:	91 49 da c0 	stw     r10,-9536(r9)
10003b28:	48 00 02 54 	b       10003d7c <parse_args+0x9ac>
	else if ( strcmp( argv[argn], "-nog" ) == 0 )
10003b2c:	81 3f 00 08 	lwz     r9,8(r31)
10003b30:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10003b34:	81 5f 00 1c 	lwz     r10,28(r31)
10003b38:	7d 2a 4a 14 	add     r9,r10,r9
10003b3c:	81 29 00 00 	lwz     r9,0(r9)
10003b40:	7d 23 4b 78 	mr      r3,r9
10003b44:	3d 20 10 02 	lis     r9,4098
10003b48:	38 89 81 8c 	addi    r4,r9,-32372
10003b4c:	48 02 98 91 	bl      1002d3dc <strcmp@plt>
10003b50:	7c 69 1b 78 	mr      r9,r3
10003b54:	2f 89 00 00 	cmpwi   cr7,r9,0
10003b58:	40 9e 00 14 	bne     cr7,10003b6c <parse_args+0x79c>
	    do_global_passwd = 0;
10003b5c:	3d 20 10 03 	lis     r9,4099
10003b60:	39 40 00 00 	li      r10,0
10003b64:	91 49 da c0 	stw     r10,-9536(r9)
10003b68:	48 00 02 14 	b       10003d7c <parse_args+0x9ac>
	else if ( strcmp( argv[argn], "-i" ) == 0 && argn + 1 < argc )
10003b6c:	81 3f 00 08 	lwz     r9,8(r31)
10003b70:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10003b74:	81 5f 00 1c 	lwz     r10,28(r31)
10003b78:	7d 2a 4a 14 	add     r9,r10,r9
10003b7c:	81 29 00 00 	lwz     r9,0(r9)
10003b80:	7d 23 4b 78 	mr      r3,r9
10003b84:	3d 20 10 02 	lis     r9,4098
10003b88:	38 89 81 94 	addi    r4,r9,-32364
10003b8c:	48 02 98 51 	bl      1002d3dc <strcmp@plt>
10003b90:	7c 69 1b 78 	mr      r9,r3
10003b94:	2f 89 00 00 	cmpwi   cr7,r9,0
10003b98:	40 9e 00 44 	bne     cr7,10003bdc <parse_args+0x80c>
10003b9c:	81 3f 00 08 	lwz     r9,8(r31)
10003ba0:	39 49 00 01 	addi    r10,r9,1
10003ba4:	81 3f 00 18 	lwz     r9,24(r31)
10003ba8:	7f 8a 48 00 	cmpw    cr7,r10,r9
10003bac:	40 9c 00 30 	bge     cr7,10003bdc <parse_args+0x80c>
	    {
	    ++argn;
10003bb0:	81 3f 00 08 	lwz     r9,8(r31)
10003bb4:	39 29 00 01 	addi    r9,r9,1
10003bb8:	91 3f 00 08 	stw     r9,8(r31)
	    pidfile = argv[argn];
10003bbc:	81 3f 00 08 	lwz     r9,8(r31)
10003bc0:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10003bc4:	81 5f 00 1c 	lwz     r10,28(r31)
10003bc8:	7d 2a 4a 14 	add     r9,r10,r9
10003bcc:	81 49 00 00 	lwz     r10,0(r9)
10003bd0:	3d 20 10 03 	lis     r9,4099
10003bd4:	91 49 da e4 	stw     r10,-9500(r9)
10003bd8:	48 00 01 a4 	b       10003d7c <parse_args+0x9ac>
	    }
	else if ( strcmp( argv[argn], "-T" ) == 0 && argn + 1 < argc )
10003bdc:	81 3f 00 08 	lwz     r9,8(r31)
10003be0:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10003be4:	81 5f 00 1c 	lwz     r10,28(r31)
10003be8:	7d 2a 4a 14 	add     r9,r10,r9
10003bec:	81 29 00 00 	lwz     r9,0(r9)
10003bf0:	7d 23 4b 78 	mr      r3,r9
10003bf4:	3d 20 10 02 	lis     r9,4098
10003bf8:	38 89 81 98 	addi    r4,r9,-32360
10003bfc:	48 02 97 e1 	bl      1002d3dc <strcmp@plt>
10003c00:	7c 69 1b 78 	mr      r9,r3
10003c04:	2f 89 00 00 	cmpwi   cr7,r9,0
10003c08:	40 9e 00 44 	bne     cr7,10003c4c <parse_args+0x87c>
10003c0c:	81 3f 00 08 	lwz     r9,8(r31)
10003c10:	39 49 00 01 	addi    r10,r9,1
10003c14:	81 3f 00 18 	lwz     r9,24(r31)
10003c18:	7f 8a 48 00 	cmpw    cr7,r10,r9
10003c1c:	40 9c 00 30 	bge     cr7,10003c4c <parse_args+0x87c>
	    {
	    ++argn;
10003c20:	81 3f 00 08 	lwz     r9,8(r31)
10003c24:	39 29 00 01 	addi    r9,r9,1
10003c28:	91 3f 00 08 	stw     r9,8(r31)
	    charset = argv[argn];
10003c2c:	81 3f 00 08 	lwz     r9,8(r31)
10003c30:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10003c34:	81 5f 00 1c 	lwz     r10,28(r31)
10003c38:	7d 2a 4a 14 	add     r9,r10,r9
10003c3c:	81 49 00 00 	lwz     r10,0(r9)
10003c40:	3d 20 10 03 	lis     r9,4099
10003c44:	91 49 da ec 	stw     r10,-9492(r9)
10003c48:	48 00 01 34 	b       10003d7c <parse_args+0x9ac>
	    }
	else if ( strcmp( argv[argn], "-P" ) == 0 && argn + 1 < argc )
10003c4c:	81 3f 00 08 	lwz     r9,8(r31)
10003c50:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10003c54:	81 5f 00 1c 	lwz     r10,28(r31)
10003c58:	7d 2a 4a 14 	add     r9,r10,r9
10003c5c:	81 29 00 00 	lwz     r9,0(r9)
10003c60:	7d 23 4b 78 	mr      r3,r9
10003c64:	3d 20 10 02 	lis     r9,4098
10003c68:	38 89 81 9c 	addi    r4,r9,-32356
10003c6c:	48 02 97 71 	bl      1002d3dc <strcmp@plt>
10003c70:	7c 69 1b 78 	mr      r9,r3
10003c74:	2f 89 00 00 	cmpwi   cr7,r9,0
10003c78:	40 9e 00 44 	bne     cr7,10003cbc <parse_args+0x8ec>
10003c7c:	81 3f 00 08 	lwz     r9,8(r31)
10003c80:	39 49 00 01 	addi    r10,r9,1
10003c84:	81 3f 00 18 	lwz     r9,24(r31)
10003c88:	7f 8a 48 00 	cmpw    cr7,r10,r9
10003c8c:	40 9c 00 30 	bge     cr7,10003cbc <parse_args+0x8ec>
	    {
	    ++argn;
10003c90:	81 3f 00 08 	lwz     r9,8(r31)
10003c94:	39 29 00 01 	addi    r9,r9,1
10003c98:	91 3f 00 08 	stw     r9,8(r31)
	    p3p = argv[argn];
10003c9c:	81 3f 00 08 	lwz     r9,8(r31)
10003ca0:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10003ca4:	81 5f 00 1c 	lwz     r10,28(r31)
10003ca8:	7d 2a 4a 14 	add     r9,r10,r9
10003cac:	81 49 00 00 	lwz     r10,0(r9)
10003cb0:	3d 20 10 03 	lis     r9,4099
10003cb4:	91 49 da f0 	stw     r10,-9488(r9)
10003cb8:	48 00 00 c4 	b       10003d7c <parse_args+0x9ac>
	    }
	else if ( strcmp( argv[argn], "-M" ) == 0 && argn + 1 < argc )
10003cbc:	81 3f 00 08 	lwz     r9,8(r31)
10003cc0:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10003cc4:	81 5f 00 1c 	lwz     r10,28(r31)
10003cc8:	7d 2a 4a 14 	add     r9,r10,r9
10003ccc:	81 29 00 00 	lwz     r9,0(r9)
10003cd0:	7d 23 4b 78 	mr      r3,r9
10003cd4:	3d 20 10 02 	lis     r9,4098
10003cd8:	38 89 81 a0 	addi    r4,r9,-32352
10003cdc:	48 02 97 01 	bl      1002d3dc <strcmp@plt>
10003ce0:	7c 69 1b 78 	mr      r9,r3
10003ce4:	2f 89 00 00 	cmpwi   cr7,r9,0
10003ce8:	40 9e 00 50 	bne     cr7,10003d38 <parse_args+0x968>
10003cec:	81 3f 00 08 	lwz     r9,8(r31)
10003cf0:	39 49 00 01 	addi    r10,r9,1
10003cf4:	81 3f 00 18 	lwz     r9,24(r31)
10003cf8:	7f 8a 48 00 	cmpw    cr7,r10,r9
10003cfc:	40 9c 00 3c 	bge     cr7,10003d38 <parse_args+0x968>
	    {
	    ++argn;
10003d00:	81 3f 00 08 	lwz     r9,8(r31)
10003d04:	39 29 00 01 	addi    r9,r9,1
10003d08:	91 3f 00 08 	stw     r9,8(r31)
	    max_age = atoi( argv[argn] );
10003d0c:	81 3f 00 08 	lwz     r9,8(r31)
10003d10:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10003d14:	81 5f 00 1c 	lwz     r10,28(r31)
10003d18:	7d 2a 4a 14 	add     r9,r10,r9
10003d1c:	81 29 00 00 	lwz     r9,0(r9)
10003d20:	7d 23 4b 78 	mr      r3,r9
10003d24:	48 02 9a a9 	bl      1002d7cc <atoi@plt>
10003d28:	7c 6a 1b 78 	mr      r10,r3
10003d2c:	3d 20 10 03 	lis     r9,4099
10003d30:	91 49 da f4 	stw     r10,-9484(r9)
10003d34:	48 00 00 48 	b       10003d7c <parse_args+0x9ac>
	    }
	else if ( strcmp( argv[argn], "-D" ) == 0 )
10003d38:	81 3f 00 08 	lwz     r9,8(r31)
10003d3c:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10003d40:	81 5f 00 1c 	lwz     r10,28(r31)
10003d44:	7d 2a 4a 14 	add     r9,r10,r9
10003d48:	81 29 00 00 	lwz     r9,0(r9)
10003d4c:	7d 23 4b 78 	mr      r3,r9
10003d50:	3d 20 10 02 	lis     r9,4098
10003d54:	38 89 81 a4 	addi    r4,r9,-32348
10003d58:	48 02 96 85 	bl      1002d3dc <strcmp@plt>
10003d5c:	7c 69 1b 78 	mr      r9,r3
10003d60:	2f 89 00 00 	cmpwi   cr7,r9,0
10003d64:	40 9e 00 14 	bne     cr7,10003d78 <parse_args+0x9a8>
	    debug = 1;
10003d68:	3d 20 10 03 	lis     r9,4099
10003d6c:	39 40 00 01 	li      r10,1
10003d70:	91 49 da a0 	stw     r10,-9568(r9)
10003d74:	48 00 00 08 	b       10003d7c <parse_args+0x9ac>
	else
	    usage();
10003d78:	48 00 00 71 	bl      10003de8 <usage>
	++argn;
10003d7c:	81 3f 00 08 	lwz     r9,8(r31)
10003d80:	39 29 00 01 	addi    r9,r9,1
10003d84:	91 3f 00 08 	stw     r9,8(r31)
    user = DEFAULT_USER;
    charset = DEFAULT_CHARSET;
    p3p = "";
    max_age = -1;
    argn = 1;
    while ( argn < argc && argv[argn][0] == '-' )
10003d88:	81 5f 00 08 	lwz     r10,8(r31)
10003d8c:	81 3f 00 18 	lwz     r9,24(r31)
10003d90:	7f 8a 48 00 	cmpw    cr7,r10,r9
10003d94:	40 9c 00 28 	bge     cr7,10003dbc <parse_args+0x9ec>
10003d98:	81 3f 00 08 	lwz     r9,8(r31)
10003d9c:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10003da0:	81 5f 00 1c 	lwz     r10,28(r31)
10003da4:	7d 2a 4a 14 	add     r9,r10,r9
10003da8:	81 29 00 00 	lwz     r9,0(r9)
10003dac:	89 29 00 00 	lbz     r9,0(r9)
10003db0:	55 29 06 3e 	clrlwi  r9,r9,24
10003db4:	2b 89 00 2d 	cmplwi  cr7,r9,45
10003db8:	41 9e f7 58 	beq     cr7,10003510 <parse_args+0x140>
	    debug = 1;
	else
	    usage();
	++argn;
	}
    if ( argn != argc )
10003dbc:	81 5f 00 08 	lwz     r10,8(r31)
10003dc0:	81 3f 00 18 	lwz     r9,24(r31)
10003dc4:	7f 8a 48 00 	cmpw    cr7,r10,r9
10003dc8:	41 9e 00 08 	beq     cr7,10003dd0 <parse_args+0xa00>
	usage();
10003dcc:	48 00 00 1d 	bl      10003de8 <usage>
    }
10003dd0:	39 7f 00 30 	addi    r11,r31,48
10003dd4:	80 0b 00 04 	lwz     r0,4(r11)
10003dd8:	7c 08 03 a6 	mtlr    r0
10003ddc:	83 eb ff fc 	lwz     r31,-4(r11)
10003de0:	7d 61 5b 78 	mr      r1,r11
10003de4:	4e 80 00 20 	blr

10003de8 <usage>:


static void
usage( void )
    {
10003de8:	94 21 ff f0 	stwu    r1,-16(r1)
10003dec:	7c 08 02 a6 	mflr    r0
10003df0:	90 01 00 14 	stw     r0,20(r1)
10003df4:	93 e1 00 0c 	stw     r31,12(r1)
10003df8:	7c 3f 0b 78 	mr      r31,r1
    (void) fprintf( stderr,
10003dfc:	3d 20 10 03 	lis     r9,4099
10003e00:	81 49 da 88 	lwz     r10,-9592(r9)
10003e04:	3d 20 10 03 	lis     r9,4099
10003e08:	81 29 da 9c 	lwz     r9,-9572(r9)
10003e0c:	7d 43 53 78 	mr      r3,r10
10003e10:	3d 40 10 02 	lis     r10,4098
10003e14:	38 8a 81 a8 	addi    r4,r10,-32344
10003e18:	7d 25 4b 78 	mr      r5,r9
10003e1c:	4c c6 31 82 	crclr   4*cr1+eq
10003e20:	48 02 98 5d 	bl      1002d67c <fprintf@plt>
"usage:  %s [-C configfile] [-p port] [-d dir] [-r|-nor] [-dd data_dir] [-s|-nos] [-v|-nov] [-g|-nog] [-u user] [-c cgipat] [-t throttles] [-h host] [-l logfile] [-i pidfile] [-T charset] [-P P3P] [-M maxage] [-V] [-D]\n",
	argv0 );
    exit( 1 );
10003e24:	38 60 00 01 	li      r3,1
10003e28:	48 02 97 ad 	bl      1002d5d4 <exit@plt>

10003e2c <read_config>:
    }


static void
read_config( char* filename )
    {
10003e2c:	94 21 d8 b0 	stwu    r1,-10064(r1)
10003e30:	7c 08 02 a6 	mflr    r0
10003e34:	90 01 27 54 	stw     r0,10068(r1)
10003e38:	93 e1 27 4c 	stw     r31,10060(r1)
10003e3c:	7c 3f 0b 78 	mr      r31,r1
10003e40:	90 7f 27 38 	stw     r3,10040(r31)
    char* cp;
    char* cp2;
    char* name;
    char* value;

    fp = fopen( filename, "r" );
10003e44:	80 7f 27 38 	lwz     r3,10040(r31)
10003e48:	3d 20 10 02 	lis     r9,4098
10003e4c:	38 89 82 84 	addi    r4,r9,-32124
10003e50:	48 02 98 65 	bl      1002d6b4 <fopen@plt>
10003e54:	90 7f 00 14 	stw     r3,20(r31)
    if ( fp == (FILE*) 0 )
10003e58:	81 3f 00 14 	lwz     r9,20(r31)
10003e5c:	2f 89 00 00 	cmpwi   cr7,r9,0
10003e60:	40 9e 00 14 	bne     cr7,10003e74 <read_config+0x48>
	{
	perror( filename );
10003e64:	80 7f 27 38 	lwz     r3,10040(r31)
10003e68:	48 02 96 ad 	bl      1002d514 <perror@plt>
	exit( 1 );
10003e6c:	38 60 00 01 	li      r3,1
10003e70:	48 02 97 65 	bl      1002d5d4 <exit@plt>
	}

    while ( fgets( line, sizeof(line), fp ) != (char*) 0 )
10003e74:	48 00 07 b4 	b       10004628 <read_config+0x7fc>
	{
	/* Trim comments. */
	if ( ( cp = strchr( line, '#' ) ) != (char*) 0 )
10003e78:	39 3f 00 1c 	addi    r9,r31,28
10003e7c:	7d 23 4b 78 	mr      r3,r9
10003e80:	38 80 00 23 	li      r4,35
10003e84:	48 02 97 c1 	bl      1002d644 <strchr@plt>
10003e88:	90 7f 00 08 	stw     r3,8(r31)
10003e8c:	81 3f 00 08 	lwz     r9,8(r31)
10003e90:	2f 89 00 00 	cmpwi   cr7,r9,0
10003e94:	41 9e 00 10 	beq     cr7,10003ea4 <read_config+0x78>
	    *cp = '\0';
10003e98:	81 3f 00 08 	lwz     r9,8(r31)
10003e9c:	39 40 00 00 	li      r10,0
10003ea0:	99 49 00 00 	stb     r10,0(r9)

	/* Skip leading whitespace. */
	cp = line;
10003ea4:	39 3f 00 1c 	addi    r9,r31,28
10003ea8:	91 3f 00 08 	stw     r9,8(r31)
	cp += strspn( cp, " \t\n\r" );
10003eac:	80 7f 00 08 	lwz     r3,8(r31)
10003eb0:	3d 20 10 02 	lis     r9,4098
10003eb4:	38 89 82 88 	addi    r4,r9,-32120
10003eb8:	48 02 99 65 	bl      1002d81c <strspn@plt>
10003ebc:	7c 69 1b 78 	mr      r9,r3
10003ec0:	81 5f 00 08 	lwz     r10,8(r31)
10003ec4:	7d 2a 4a 14 	add     r9,r10,r9
10003ec8:	91 3f 00 08 	stw     r9,8(r31)

	/* Split line into words. */
	while ( *cp != '\0' )
10003ecc:	48 00 07 48 	b       10004614 <read_config+0x7e8>
	    {
	    /* Find next whitespace. */
	    cp2 = cp + strcspn( cp, " \t\n\r" );
10003ed0:	80 7f 00 08 	lwz     r3,8(r31)
10003ed4:	3d 20 10 02 	lis     r9,4098
10003ed8:	38 89 82 88 	addi    r4,r9,-32120
10003edc:	48 02 95 19 	bl      1002d3f4 <strcspn@plt>
10003ee0:	7c 69 1b 78 	mr      r9,r3
10003ee4:	81 5f 00 08 	lwz     r10,8(r31)
10003ee8:	7d 2a 4a 14 	add     r9,r10,r9
10003eec:	91 3f 00 0c 	stw     r9,12(r31)
	    /* Insert EOS and advance next-word pointer. */
	    while ( *cp2 == ' ' || *cp2 == '\t' || *cp2 == '\n' || *cp2 == '\r' )
10003ef0:	48 00 00 18 	b       10003f08 <read_config+0xdc>
		*cp2++ = '\0';
10003ef4:	81 3f 00 0c 	lwz     r9,12(r31)
10003ef8:	39 49 00 01 	addi    r10,r9,1
10003efc:	91 5f 00 0c 	stw     r10,12(r31)
10003f00:	39 40 00 00 	li      r10,0
10003f04:	99 49 00 00 	stb     r10,0(r9)
	while ( *cp != '\0' )
	    {
	    /* Find next whitespace. */
	    cp2 = cp + strcspn( cp, " \t\n\r" );
	    /* Insert EOS and advance next-word pointer. */
	    while ( *cp2 == ' ' || *cp2 == '\t' || *cp2 == '\n' || *cp2 == '\r' )
10003f08:	81 3f 00 0c 	lwz     r9,12(r31)
10003f0c:	89 29 00 00 	lbz     r9,0(r9)
10003f10:	55 29 06 3e 	clrlwi  r9,r9,24
10003f14:	2b 89 00 20 	cmplwi  cr7,r9,32
10003f18:	41 9e ff dc 	beq     cr7,10003ef4 <read_config+0xc8>
10003f1c:	81 3f 00 0c 	lwz     r9,12(r31)
10003f20:	89 29 00 00 	lbz     r9,0(r9)
10003f24:	55 29 06 3e 	clrlwi  r9,r9,24
10003f28:	2b 89 00 09 	cmplwi  cr7,r9,9
10003f2c:	41 9e ff c8 	beq     cr7,10003ef4 <read_config+0xc8>
10003f30:	81 3f 00 0c 	lwz     r9,12(r31)
10003f34:	89 29 00 00 	lbz     r9,0(r9)
10003f38:	55 29 06 3e 	clrlwi  r9,r9,24
10003f3c:	2b 89 00 0a 	cmplwi  cr7,r9,10
10003f40:	41 9e ff b4 	beq     cr7,10003ef4 <read_config+0xc8>
10003f44:	81 3f 00 0c 	lwz     r9,12(r31)
10003f48:	89 29 00 00 	lbz     r9,0(r9)
10003f4c:	55 29 06 3e 	clrlwi  r9,r9,24
10003f50:	2b 89 00 0d 	cmplwi  cr7,r9,13
10003f54:	41 9e ff a0 	beq     cr7,10003ef4 <read_config+0xc8>
		*cp2++ = '\0';
	    /* Split into name and value. */
	    name = cp;
10003f58:	81 3f 00 08 	lwz     r9,8(r31)
10003f5c:	91 3f 00 18 	stw     r9,24(r31)
	    value = strchr( name, '=' );
10003f60:	80 7f 00 18 	lwz     r3,24(r31)
10003f64:	38 80 00 3d 	li      r4,61
10003f68:	48 02 96 dd 	bl      1002d644 <strchr@plt>
10003f6c:	90 7f 00 10 	stw     r3,16(r31)
	    if ( value != (char*) 0 )
10003f70:	81 3f 00 10 	lwz     r9,16(r31)
10003f74:	2f 89 00 00 	cmpwi   cr7,r9,0
10003f78:	41 9e 00 18 	beq     cr7,10003f90 <read_config+0x164>
		*value++ = '\0';
10003f7c:	81 3f 00 10 	lwz     r9,16(r31)
10003f80:	39 49 00 01 	addi    r10,r9,1
10003f84:	91 5f 00 10 	stw     r10,16(r31)
10003f88:	39 40 00 00 	li      r10,0
10003f8c:	99 49 00 00 	stb     r10,0(r9)
	    /* Interpret. */
	    if ( strcasecmp( name, "debug" ) == 0 )
10003f90:	80 7f 00 18 	lwz     r3,24(r31)
10003f94:	3d 20 10 02 	lis     r9,4098
10003f98:	38 89 82 90 	addi    r4,r9,-32112
10003f9c:	48 02 96 e9 	bl      1002d684 <strcasecmp@plt>
10003fa0:	7c 69 1b 78 	mr      r9,r3
10003fa4:	2f 89 00 00 	cmpwi   cr7,r9,0
10003fa8:	40 9e 00 20 	bne     cr7,10003fc8 <read_config+0x19c>
		{
		no_value_required( name, value );
10003fac:	80 7f 00 18 	lwz     r3,24(r31)
10003fb0:	80 9f 00 10 	lwz     r4,16(r31)
10003fb4:	48 00 07 29 	bl      100046dc <no_value_required>
		debug = 1;
10003fb8:	3d 20 10 03 	lis     r9,4099
10003fbc:	39 40 00 01 	li      r10,1
10003fc0:	91 49 da a0 	stw     r10,-9568(r9)
10003fc4:	48 00 06 28 	b       100045ec <read_config+0x7c0>
		}
	    else if ( strcasecmp( name, "port" ) == 0 )
10003fc8:	80 7f 00 18 	lwz     r3,24(r31)
10003fcc:	3d 20 10 02 	lis     r9,4098
10003fd0:	38 89 82 98 	addi    r4,r9,-32104
10003fd4:	48 02 96 b1 	bl      1002d684 <strcasecmp@plt>
10003fd8:	7c 69 1b 78 	mr      r9,r3
10003fdc:	2f 89 00 00 	cmpwi   cr7,r9,0
10003fe0:	40 9e 00 2c 	bne     cr7,1000400c <read_config+0x1e0>
		{
		value_required( name, value );
10003fe4:	80 7f 00 18 	lwz     r3,24(r31)
10003fe8:	80 9f 00 10 	lwz     r4,16(r31)
10003fec:	48 00 06 7d 	bl      10004668 <value_required>
		port = (unsigned short) atoi( value );
10003ff0:	80 7f 00 10 	lwz     r3,16(r31)
10003ff4:	48 02 97 d9 	bl      1002d7cc <atoi@plt>
10003ff8:	7c 69 1b 78 	mr      r9,r3
10003ffc:	55 2a 04 3e 	clrlwi  r10,r9,16
10004000:	3d 20 10 03 	lis     r9,4099
10004004:	b1 49 da a4 	sth     r10,-9564(r9)
10004008:	48 00 05 e4 	b       100045ec <read_config+0x7c0>
		}
	    else if ( strcasecmp( name, "dir" ) == 0 )
1000400c:	80 7f 00 18 	lwz     r3,24(r31)
10004010:	3d 20 10 02 	lis     r9,4098
10004014:	38 89 82 a0 	addi    r4,r9,-32096
10004018:	48 02 96 6d 	bl      1002d684 <strcasecmp@plt>
1000401c:	7c 69 1b 78 	mr      r9,r3
10004020:	2f 89 00 00 	cmpwi   cr7,r9,0
10004024:	40 9e 00 28 	bne     cr7,1000404c <read_config+0x220>
		{
		value_required( name, value );
10004028:	80 7f 00 18 	lwz     r3,24(r31)
1000402c:	80 9f 00 10 	lwz     r4,16(r31)
10004030:	48 00 06 39 	bl      10004668 <value_required>
		dir = e_strdup( value );
10004034:	80 7f 00 10 	lwz     r3,16(r31)
10004038:	48 00 07 19 	bl      10004750 <e_strdup>
1000403c:	7c 6a 1b 78 	mr      r10,r3
10004040:	3d 20 10 03 	lis     r9,4099
10004044:	91 49 da a8 	stw     r10,-9560(r9)
10004048:	48 00 05 a4 	b       100045ec <read_config+0x7c0>
		}
	    else if ( strcasecmp( name, "chroot" ) == 0 )
1000404c:	80 7f 00 18 	lwz     r3,24(r31)
10004050:	3d 20 10 01 	lis     r9,4097
10004054:	38 89 7e fc 	addi    r4,r9,32508
10004058:	48 02 96 2d 	bl      1002d684 <strcasecmp@plt>
1000405c:	7c 69 1b 78 	mr      r9,r3
10004060:	2f 89 00 00 	cmpwi   cr7,r9,0
10004064:	40 9e 00 2c 	bne     cr7,10004090 <read_config+0x264>
		{
		no_value_required( name, value );
10004068:	80 7f 00 18 	lwz     r3,24(r31)
1000406c:	80 9f 00 10 	lwz     r4,16(r31)
10004070:	48 00 06 6d 	bl      100046dc <no_value_required>
		do_chroot = 1;
10004074:	3d 20 10 03 	lis     r9,4099
10004078:	39 40 00 01 	li      r10,1
1000407c:	91 49 da b0 	stw     r10,-9552(r9)
		no_symlink_check = 1;
10004080:	3d 20 10 03 	lis     r9,4099
10004084:	39 40 00 01 	li      r10,1
10004088:	91 49 da b8 	stw     r10,-9544(r9)
1000408c:	48 00 05 60 	b       100045ec <read_config+0x7c0>
		}
	    else if ( strcasecmp( name, "nochroot" ) == 0 )
10004090:	80 7f 00 18 	lwz     r3,24(r31)
10004094:	3d 20 10 02 	lis     r9,4098
10004098:	38 89 82 a4 	addi    r4,r9,-32092
1000409c:	48 02 95 e9 	bl      1002d684 <strcasecmp@plt>
100040a0:	7c 69 1b 78 	mr      r9,r3
100040a4:	2f 89 00 00 	cmpwi   cr7,r9,0
100040a8:	40 9e 00 2c 	bne     cr7,100040d4 <read_config+0x2a8>
		{
		no_value_required( name, value );
100040ac:	80 7f 00 18 	lwz     r3,24(r31)
100040b0:	80 9f 00 10 	lwz     r4,16(r31)
100040b4:	48 00 06 29 	bl      100046dc <no_value_required>
		do_chroot = 0;
100040b8:	3d 20 10 03 	lis     r9,4099
100040bc:	39 40 00 00 	li      r10,0
100040c0:	91 49 da b0 	stw     r10,-9552(r9)
		no_symlink_check = 0;
100040c4:	3d 20 10 03 	lis     r9,4099
100040c8:	39 40 00 00 	li      r10,0
100040cc:	91 49 da b8 	stw     r10,-9544(r9)
100040d0:	48 00 05 1c 	b       100045ec <read_config+0x7c0>
		}
	    else if ( strcasecmp( name, "data_dir" ) == 0 )
100040d4:	80 7f 00 18 	lwz     r3,24(r31)
100040d8:	3d 20 10 02 	lis     r9,4098
100040dc:	38 89 82 b0 	addi    r4,r9,-32080
100040e0:	48 02 95 a5 	bl      1002d684 <strcasecmp@plt>
100040e4:	7c 69 1b 78 	mr      r9,r3
100040e8:	2f 89 00 00 	cmpwi   cr7,r9,0
100040ec:	40 9e 00 28 	bne     cr7,10004114 <read_config+0x2e8>
		{
		value_required( name, value );
100040f0:	80 7f 00 18 	lwz     r3,24(r31)
100040f4:	80 9f 00 10 	lwz     r4,16(r31)
100040f8:	48 00 05 71 	bl      10004668 <value_required>
		data_dir = e_strdup( value );
100040fc:	80 7f 00 10 	lwz     r3,16(r31)
10004100:	48 00 06 51 	bl      10004750 <e_strdup>
10004104:	7c 6a 1b 78 	mr      r10,r3
10004108:	3d 20 10 03 	lis     r9,4099
1000410c:	91 49 da ac 	stw     r10,-9556(r9)
10004110:	48 00 04 dc 	b       100045ec <read_config+0x7c0>
		}
	    else if ( strcasecmp( name, "nosymlinkcheck" ) == 0 )
10004114:	80 7f 00 18 	lwz     r3,24(r31)
10004118:	3d 20 10 02 	lis     r9,4098
1000411c:	38 89 82 bc 	addi    r4,r9,-32068
10004120:	48 02 95 65 	bl      1002d684 <strcasecmp@plt>
10004124:	7c 69 1b 78 	mr      r9,r3
10004128:	2f 89 00 00 	cmpwi   cr7,r9,0
1000412c:	40 9e 00 20 	bne     cr7,1000414c <read_config+0x320>
		{
		no_value_required( name, value );
10004130:	80 7f 00 18 	lwz     r3,24(r31)
10004134:	80 9f 00 10 	lwz     r4,16(r31)
10004138:	48 00 05 a5 	bl      100046dc <no_value_required>
		no_symlink_check = 1;
1000413c:	3d 20 10 03 	lis     r9,4099
10004140:	39 40 00 01 	li      r10,1
10004144:	91 49 da b8 	stw     r10,-9544(r9)
10004148:	48 00 04 a4 	b       100045ec <read_config+0x7c0>
		}
	    else if ( strcasecmp( name, "symlinkcheck" ) == 0 )
1000414c:	80 7f 00 18 	lwz     r3,24(r31)
10004150:	3d 20 10 02 	lis     r9,4098
10004154:	38 89 82 cc 	addi    r4,r9,-32052
10004158:	48 02 95 2d 	bl      1002d684 <strcasecmp@plt>
1000415c:	7c 69 1b 78 	mr      r9,r3
10004160:	2f 89 00 00 	cmpwi   cr7,r9,0
10004164:	40 9e 00 20 	bne     cr7,10004184 <read_config+0x358>
		{
		no_value_required( name, value );
10004168:	80 7f 00 18 	lwz     r3,24(r31)
1000416c:	80 9f 00 10 	lwz     r4,16(r31)
10004170:	48 00 05 6d 	bl      100046dc <no_value_required>
		no_symlink_check = 0;
10004174:	3d 20 10 03 	lis     r9,4099
10004178:	39 40 00 00 	li      r10,0
1000417c:	91 49 da b8 	stw     r10,-9544(r9)
10004180:	48 00 04 6c 	b       100045ec <read_config+0x7c0>
		}
	    else if ( strcasecmp( name, "user" ) == 0 )
10004184:	80 7f 00 18 	lwz     r3,24(r31)
10004188:	3d 20 10 02 	lis     r9,4098
1000418c:	38 89 82 dc 	addi    r4,r9,-32036
10004190:	48 02 94 f5 	bl      1002d684 <strcasecmp@plt>
10004194:	7c 69 1b 78 	mr      r9,r3
10004198:	2f 89 00 00 	cmpwi   cr7,r9,0
1000419c:	40 9e 00 28 	bne     cr7,100041c4 <read_config+0x398>
		{
		value_required( name, value );
100041a0:	80 7f 00 18 	lwz     r3,24(r31)
100041a4:	80 9f 00 10 	lwz     r4,16(r31)
100041a8:	48 00 04 c1 	bl      10004668 <value_required>
		user = e_strdup( value );
100041ac:	80 7f 00 10 	lwz     r3,16(r31)
100041b0:	48 00 05 a1 	bl      10004750 <e_strdup>
100041b4:	7c 6a 1b 78 	mr      r10,r3
100041b8:	3d 20 10 03 	lis     r9,4099
100041bc:	91 49 da e8 	stw     r10,-9496(r9)
100041c0:	48 00 04 2c 	b       100045ec <read_config+0x7c0>
		}
	    else if ( strcasecmp( name, "cgipat" ) == 0 )
100041c4:	80 7f 00 18 	lwz     r3,24(r31)
100041c8:	3d 20 10 02 	lis     r9,4098
100041cc:	38 89 82 e4 	addi    r4,r9,-32028
100041d0:	48 02 94 b5 	bl      1002d684 <strcasecmp@plt>
100041d4:	7c 69 1b 78 	mr      r9,r3
100041d8:	2f 89 00 00 	cmpwi   cr7,r9,0
100041dc:	40 9e 00 28 	bne     cr7,10004204 <read_config+0x3d8>
		{
		value_required( name, value );
100041e0:	80 7f 00 18 	lwz     r3,24(r31)
100041e4:	80 9f 00 10 	lwz     r4,16(r31)
100041e8:	48 00 04 81 	bl      10004668 <value_required>
		cgi_pattern = e_strdup( value );
100041ec:	80 7f 00 10 	lwz     r3,16(r31)
100041f0:	48 00 05 61 	bl      10004750 <e_strdup>
100041f4:	7c 6a 1b 78 	mr      r10,r3
100041f8:	3d 20 10 03 	lis     r9,4099
100041fc:	91 49 da c4 	stw     r10,-9532(r9)
10004200:	48 00 03 ec 	b       100045ec <read_config+0x7c0>
		}
	    else if ( strcasecmp( name, "cgilimit" ) == 0 )
10004204:	80 7f 00 18 	lwz     r3,24(r31)
10004208:	3d 20 10 02 	lis     r9,4098
1000420c:	38 89 82 ec 	addi    r4,r9,-32020
10004210:	48 02 94 75 	bl      1002d684 <strcasecmp@plt>
10004214:	7c 69 1b 78 	mr      r9,r3
10004218:	2f 89 00 00 	cmpwi   cr7,r9,0
1000421c:	40 9e 00 28 	bne     cr7,10004244 <read_config+0x418>
		{
		value_required( name, value );
10004220:	80 7f 00 18 	lwz     r3,24(r31)
10004224:	80 9f 00 10 	lwz     r4,16(r31)
10004228:	48 00 04 41 	bl      10004668 <value_required>
		cgi_limit = atoi( value );
1000422c:	80 7f 00 10 	lwz     r3,16(r31)
10004230:	48 02 95 9d 	bl      1002d7cc <atoi@plt>
10004234:	7c 6a 1b 78 	mr      r10,r3
10004238:	3d 20 10 03 	lis     r9,4099
1000423c:	91 49 da c8 	stw     r10,-9528(r9)
10004240:	48 00 03 ac 	b       100045ec <read_config+0x7c0>
		}
	    else if ( strcasecmp( name, "urlpat" ) == 0 )
10004244:	80 7f 00 18 	lwz     r3,24(r31)
10004248:	3d 20 10 02 	lis     r9,4098
1000424c:	38 89 82 f8 	addi    r4,r9,-32008
10004250:	48 02 94 35 	bl      1002d684 <strcasecmp@plt>
10004254:	7c 69 1b 78 	mr      r9,r3
10004258:	2f 89 00 00 	cmpwi   cr7,r9,0
1000425c:	40 9e 00 28 	bne     cr7,10004284 <read_config+0x458>
		{
		value_required( name, value );
10004260:	80 7f 00 18 	lwz     r3,24(r31)
10004264:	80 9f 00 10 	lwz     r4,16(r31)
10004268:	48 00 04 01 	bl      10004668 <value_required>
		url_pattern = e_strdup( value );
1000426c:	80 7f 00 10 	lwz     r3,16(r31)
10004270:	48 00 04 e1 	bl      10004750 <e_strdup>
10004274:	7c 6a 1b 78 	mr      r10,r3
10004278:	3d 20 10 03 	lis     r9,4099
1000427c:	91 49 da cc 	stw     r10,-9524(r9)
10004280:	48 00 03 6c 	b       100045ec <read_config+0x7c0>
		}
	    else if ( strcasecmp( name, "noemptyreferers" ) == 0 ||
10004284:	80 7f 00 18 	lwz     r3,24(r31)
10004288:	3d 20 10 02 	lis     r9,4098
1000428c:	38 89 83 00 	addi    r4,r9,-32000
10004290:	48 02 93 f5 	bl      1002d684 <strcasecmp@plt>
10004294:	7c 69 1b 78 	mr      r9,r3
10004298:	2f 89 00 00 	cmpwi   cr7,r9,0
1000429c:	41 9e 00 20 	beq     cr7,100042bc <read_config+0x490>
	              strcasecmp( name, "noemptyreferrers" ) == 0 )
100042a0:	80 7f 00 18 	lwz     r3,24(r31)
100042a4:	3d 20 10 02 	lis     r9,4098
100042a8:	38 89 83 10 	addi    r4,r9,-31984
100042ac:	48 02 93 d9 	bl      1002d684 <strcasecmp@plt>
100042b0:	7c 69 1b 78 	mr      r9,r3
	    else if ( strcasecmp( name, "urlpat" ) == 0 )
		{
		value_required( name, value );
		url_pattern = e_strdup( value );
		}
	    else if ( strcasecmp( name, "noemptyreferers" ) == 0 ||
100042b4:	2f 89 00 00 	cmpwi   cr7,r9,0
100042b8:	40 9e 00 20 	bne     cr7,100042d8 <read_config+0x4ac>
	              strcasecmp( name, "noemptyreferrers" ) == 0 )
		{
		no_value_required( name, value );
100042bc:	80 7f 00 18 	lwz     r3,24(r31)
100042c0:	80 9f 00 10 	lwz     r4,16(r31)
100042c4:	48 00 04 19 	bl      100046dc <no_value_required>
		no_empty_referrers = 1;
100042c8:	3d 20 10 03 	lis     r9,4099
100042cc:	39 40 00 01 	li      r10,1
100042d0:	91 49 da d0 	stw     r10,-9520(r9)
100042d4:	48 00 03 18 	b       100045ec <read_config+0x7c0>
		}
	    else if ( strcasecmp( name, "localpat" ) == 0 )
100042d8:	80 7f 00 18 	lwz     r3,24(r31)
100042dc:	3d 20 10 02 	lis     r9,4098
100042e0:	38 89 83 24 	addi    r4,r9,-31964
100042e4:	48 02 93 a1 	bl      1002d684 <strcasecmp@plt>
100042e8:	7c 69 1b 78 	mr      r9,r3
100042ec:	2f 89 00 00 	cmpwi   cr7,r9,0
100042f0:	40 9e 00 28 	bne     cr7,10004318 <read_config+0x4ec>
		{
		value_required( name, value );
100042f4:	80 7f 00 18 	lwz     r3,24(r31)
100042f8:	80 9f 00 10 	lwz     r4,16(r31)
100042fc:	48 00 03 6d 	bl      10004668 <value_required>
		local_pattern = e_strdup( value );
10004300:	80 7f 00 10 	lwz     r3,16(r31)
10004304:	48 00 04 4d 	bl      10004750 <e_strdup>
10004308:	7c 6a 1b 78 	mr      r10,r3
1000430c:	3d 20 10 03 	lis     r9,4099
10004310:	91 49 da d4 	stw     r10,-9516(r9)
10004314:	48 00 02 d8 	b       100045ec <read_config+0x7c0>
		}
	    else if ( strcasecmp( name, "throttles" ) == 0 )
10004318:	80 7f 00 18 	lwz     r3,24(r31)
1000431c:	3d 20 10 02 	lis     r9,4098
10004320:	38 89 83 30 	addi    r4,r9,-31952
10004324:	48 02 93 61 	bl      1002d684 <strcasecmp@plt>
10004328:	7c 69 1b 78 	mr      r9,r3
1000432c:	2f 89 00 00 	cmpwi   cr7,r9,0
10004330:	40 9e 00 28 	bne     cr7,10004358 <read_config+0x52c>
		{
		value_required( name, value );
10004334:	80 7f 00 18 	lwz     r3,24(r31)
10004338:	80 9f 00 10 	lwz     r4,16(r31)
1000433c:	48 00 03 2d 	bl      10004668 <value_required>
		throttlefile = e_strdup( value );
10004340:	80 7f 00 10 	lwz     r3,16(r31)
10004344:	48 00 04 0d 	bl      10004750 <e_strdup>
10004348:	7c 6a 1b 78 	mr      r10,r3
1000434c:	3d 20 10 03 	lis     r9,4099
10004350:	91 49 da dc 	stw     r10,-9508(r9)
10004354:	48 00 02 98 	b       100045ec <read_config+0x7c0>
		}
	    else if ( strcasecmp( name, "host" ) == 0 )
10004358:	80 7f 00 18 	lwz     r3,24(r31)
1000435c:	3d 20 10 02 	lis     r9,4098
10004360:	38 89 83 3c 	addi    r4,r9,-31940
10004364:	48 02 93 21 	bl      1002d684 <strcasecmp@plt>
10004368:	7c 69 1b 78 	mr      r9,r3
1000436c:	2f 89 00 00 	cmpwi   cr7,r9,0
10004370:	40 9e 00 28 	bne     cr7,10004398 <read_config+0x56c>
		{
		value_required( name, value );
10004374:	80 7f 00 18 	lwz     r3,24(r31)
10004378:	80 9f 00 10 	lwz     r4,16(r31)
1000437c:	48 00 02 ed 	bl      10004668 <value_required>
		hostname = e_strdup( value );
10004380:	80 7f 00 10 	lwz     r3,16(r31)
10004384:	48 00 03 cd 	bl      10004750 <e_strdup>
10004388:	7c 6a 1b 78 	mr      r10,r3
1000438c:	3d 20 10 03 	lis     r9,4099
10004390:	91 49 da e0 	stw     r10,-9504(r9)
10004394:	48 00 02 58 	b       100045ec <read_config+0x7c0>
		}
	    else if ( strcasecmp( name, "logfile" ) == 0 )
10004398:	80 7f 00 18 	lwz     r3,24(r31)
1000439c:	3d 20 10 02 	lis     r9,4098
100043a0:	38 89 83 44 	addi    r4,r9,-31932
100043a4:	48 02 92 e1 	bl      1002d684 <strcasecmp@plt>
100043a8:	7c 69 1b 78 	mr      r9,r3
100043ac:	2f 89 00 00 	cmpwi   cr7,r9,0
100043b0:	40 9e 00 28 	bne     cr7,100043d8 <read_config+0x5ac>
		{
		value_required( name, value );
100043b4:	80 7f 00 18 	lwz     r3,24(r31)
100043b8:	80 9f 00 10 	lwz     r4,16(r31)
100043bc:	48 00 02 ad 	bl      10004668 <value_required>
		logfile = e_strdup( value );
100043c0:	80 7f 00 10 	lwz     r3,16(r31)
100043c4:	48 00 03 8d 	bl      10004750 <e_strdup>
100043c8:	7c 6a 1b 78 	mr      r10,r3
100043cc:	3d 20 10 03 	lis     r9,4099
100043d0:	91 49 da d8 	stw     r10,-9512(r9)
100043d4:	48 00 02 18 	b       100045ec <read_config+0x7c0>
		}
	    else if ( strcasecmp( name, "vhost" ) == 0 )
100043d8:	80 7f 00 18 	lwz     r3,24(r31)
100043dc:	3d 20 10 02 	lis     r9,4098
100043e0:	38 89 83 4c 	addi    r4,r9,-31924
100043e4:	48 02 92 a1 	bl      1002d684 <strcasecmp@plt>
100043e8:	7c 69 1b 78 	mr      r9,r3
100043ec:	2f 89 00 00 	cmpwi   cr7,r9,0
100043f0:	40 9e 00 20 	bne     cr7,10004410 <read_config+0x5e4>
		{
		no_value_required( name, value );
100043f4:	80 7f 00 18 	lwz     r3,24(r31)
100043f8:	80 9f 00 10 	lwz     r4,16(r31)
100043fc:	48 00 02 e1 	bl      100046dc <no_value_required>
		do_vhost = 1;
10004400:	3d 20 10 03 	lis     r9,4099
10004404:	39 40 00 01 	li      r10,1
10004408:	91 49 da bc 	stw     r10,-9540(r9)
1000440c:	48 00 01 e0 	b       100045ec <read_config+0x7c0>
		}
	    else if ( strcasecmp( name, "novhost" ) == 0 )
10004410:	80 7f 00 18 	lwz     r3,24(r31)
10004414:	3d 20 10 02 	lis     r9,4098
10004418:	38 89 83 54 	addi    r4,r9,-31916
1000441c:	48 02 92 69 	bl      1002d684 <strcasecmp@plt>
10004420:	7c 69 1b 78 	mr      r9,r3
10004424:	2f 89 00 00 	cmpwi   cr7,r9,0
10004428:	40 9e 00 20 	bne     cr7,10004448 <read_config+0x61c>
		{
		no_value_required( name, value );
1000442c:	80 7f 00 18 	lwz     r3,24(r31)
10004430:	80 9f 00 10 	lwz     r4,16(r31)
10004434:	48 00 02 a9 	bl      100046dc <no_value_required>
		do_vhost = 0;
10004438:	3d 20 10 03 	lis     r9,4099
1000443c:	39 40 00 00 	li      r10,0
10004440:	91 49 da bc 	stw     r10,-9540(r9)
10004444:	48 00 01 a8 	b       100045ec <read_config+0x7c0>
		}
	    else if ( strcasecmp( name, "globalpasswd" ) == 0 )
10004448:	80 7f 00 18 	lwz     r3,24(r31)
1000444c:	3d 20 10 02 	lis     r9,4098
10004450:	38 89 83 5c 	addi    r4,r9,-31908
10004454:	48 02 92 31 	bl      1002d684 <strcasecmp@plt>
10004458:	7c 69 1b 78 	mr      r9,r3
1000445c:	2f 89 00 00 	cmpwi   cr7,r9,0
10004460:	40 9e 00 20 	bne     cr7,10004480 <read_config+0x654>
		{
		no_value_required( name, value );
10004464:	80 7f 00 18 	lwz     r3,24(r31)
10004468:	80 9f 00 10 	lwz     r4,16(r31)
1000446c:	48 00 02 71 	bl      100046dc <no_value_required>
		do_global_passwd = 1;
10004470:	3d 20 10 03 	lis     r9,4099
10004474:	39 40 00 01 	li      r10,1
10004478:	91 49 da c0 	stw     r10,-9536(r9)
1000447c:	48 00 01 70 	b       100045ec <read_config+0x7c0>
		}
	    else if ( strcasecmp( name, "noglobalpasswd" ) == 0 )
10004480:	80 7f 00 18 	lwz     r3,24(r31)
10004484:	3d 20 10 02 	lis     r9,4098
10004488:	38 89 83 6c 	addi    r4,r9,-31892
1000448c:	48 02 91 f9 	bl      1002d684 <strcasecmp@plt>
10004490:	7c 69 1b 78 	mr      r9,r3
10004494:	2f 89 00 00 	cmpwi   cr7,r9,0
10004498:	40 9e 00 20 	bne     cr7,100044b8 <read_config+0x68c>
		{
		no_value_required( name, value );
1000449c:	80 7f 00 18 	lwz     r3,24(r31)
100044a0:	80 9f 00 10 	lwz     r4,16(r31)
100044a4:	48 00 02 39 	bl      100046dc <no_value_required>
		do_global_passwd = 0;
100044a8:	3d 20 10 03 	lis     r9,4099
100044ac:	39 40 00 00 	li      r10,0
100044b0:	91 49 da c0 	stw     r10,-9536(r9)
100044b4:	48 00 01 38 	b       100045ec <read_config+0x7c0>
		}
	    else if ( strcasecmp( name, "pidfile" ) == 0 )
100044b8:	80 7f 00 18 	lwz     r3,24(r31)
100044bc:	3d 20 10 02 	lis     r9,4098
100044c0:	38 89 83 7c 	addi    r4,r9,-31876
100044c4:	48 02 91 c1 	bl      1002d684 <strcasecmp@plt>
100044c8:	7c 69 1b 78 	mr      r9,r3
100044cc:	2f 89 00 00 	cmpwi   cr7,r9,0
100044d0:	40 9e 00 28 	bne     cr7,100044f8 <read_config+0x6cc>
		{
		value_required( name, value );
100044d4:	80 7f 00 18 	lwz     r3,24(r31)
100044d8:	80 9f 00 10 	lwz     r4,16(r31)
100044dc:	48 00 01 8d 	bl      10004668 <value_required>
		pidfile = e_strdup( value );
100044e0:	80 7f 00 10 	lwz     r3,16(r31)
100044e4:	48 00 02 6d 	bl      10004750 <e_strdup>
100044e8:	7c 6a 1b 78 	mr      r10,r3
100044ec:	3d 20 10 03 	lis     r9,4099
100044f0:	91 49 da e4 	stw     r10,-9500(r9)
100044f4:	48 00 00 f8 	b       100045ec <read_config+0x7c0>
		}
	    else if ( strcasecmp( name, "charset" ) == 0 )
100044f8:	80 7f 00 18 	lwz     r3,24(r31)
100044fc:	3d 20 10 02 	lis     r9,4098
10004500:	38 89 83 84 	addi    r4,r9,-31868
10004504:	48 02 91 81 	bl      1002d684 <strcasecmp@plt>
10004508:	7c 69 1b 78 	mr      r9,r3
1000450c:	2f 89 00 00 	cmpwi   cr7,r9,0
10004510:	40 9e 00 28 	bne     cr7,10004538 <read_config+0x70c>
		{
		value_required( name, value );
10004514:	80 7f 00 18 	lwz     r3,24(r31)
10004518:	80 9f 00 10 	lwz     r4,16(r31)
1000451c:	48 00 01 4d 	bl      10004668 <value_required>
		charset = e_strdup( value );
10004520:	80 7f 00 10 	lwz     r3,16(r31)
10004524:	48 00 02 2d 	bl      10004750 <e_strdup>
10004528:	7c 6a 1b 78 	mr      r10,r3
1000452c:	3d 20 10 03 	lis     r9,4099
10004530:	91 49 da ec 	stw     r10,-9492(r9)
10004534:	48 00 00 b8 	b       100045ec <read_config+0x7c0>
		}
	    else if ( strcasecmp( name, "p3p" ) == 0 )
10004538:	80 7f 00 18 	lwz     r3,24(r31)
1000453c:	3d 20 10 02 	lis     r9,4098
10004540:	38 89 83 8c 	addi    r4,r9,-31860
10004544:	48 02 91 41 	bl      1002d684 <strcasecmp@plt>
10004548:	7c 69 1b 78 	mr      r9,r3
1000454c:	2f 89 00 00 	cmpwi   cr7,r9,0
10004550:	40 9e 00 28 	bne     cr7,10004578 <read_config+0x74c>
		{
		value_required( name, value );
10004554:	80 7f 00 18 	lwz     r3,24(r31)
10004558:	80 9f 00 10 	lwz     r4,16(r31)
1000455c:	48 00 01 0d 	bl      10004668 <value_required>
		p3p = e_strdup( value );
10004560:	80 7f 00 10 	lwz     r3,16(r31)
10004564:	48 00 01 ed 	bl      10004750 <e_strdup>
10004568:	7c 6a 1b 78 	mr      r10,r3
1000456c:	3d 20 10 03 	lis     r9,4099
10004570:	91 49 da f0 	stw     r10,-9488(r9)
10004574:	48 00 00 78 	b       100045ec <read_config+0x7c0>
		}
	    else if ( strcasecmp( name, "max_age" ) == 0 )
10004578:	80 7f 00 18 	lwz     r3,24(r31)
1000457c:	3d 20 10 02 	lis     r9,4098
10004580:	38 89 83 90 	addi    r4,r9,-31856
10004584:	48 02 91 01 	bl      1002d684 <strcasecmp@plt>
10004588:	7c 69 1b 78 	mr      r9,r3
1000458c:	2f 89 00 00 	cmpwi   cr7,r9,0
10004590:	40 9e 00 28 	bne     cr7,100045b8 <read_config+0x78c>
		{
		value_required( name, value );
10004594:	80 7f 00 18 	lwz     r3,24(r31)
10004598:	80 9f 00 10 	lwz     r4,16(r31)
1000459c:	48 00 00 cd 	bl      10004668 <value_required>
		max_age = atoi( value );
100045a0:	80 7f 00 10 	lwz     r3,16(r31)
100045a4:	48 02 92 29 	bl      1002d7cc <atoi@plt>
100045a8:	7c 6a 1b 78 	mr      r10,r3
100045ac:	3d 20 10 03 	lis     r9,4099
100045b0:	91 49 da f4 	stw     r10,-9484(r9)
100045b4:	48 00 00 38 	b       100045ec <read_config+0x7c0>
		}
	    else
		{
		(void) fprintf(
100045b8:	3d 20 10 03 	lis     r9,4099
100045bc:	81 49 da 88 	lwz     r10,-9592(r9)
100045c0:	3d 20 10 03 	lis     r9,4099
100045c4:	81 29 da 9c 	lwz     r9,-9572(r9)
100045c8:	7d 43 53 78 	mr      r3,r10
100045cc:	3d 40 10 02 	lis     r10,4098
100045d0:	38 8a 83 98 	addi    r4,r10,-31848
100045d4:	7d 25 4b 78 	mr      r5,r9
100045d8:	80 df 00 18 	lwz     r6,24(r31)
100045dc:	4c c6 31 82 	crclr   4*cr1+eq
100045e0:	48 02 90 9d 	bl      1002d67c <fprintf@plt>
		    stderr, "%s: unknown config option '%s'\n", argv0, name );
		exit( 1 );
100045e4:	38 60 00 01 	li      r3,1
100045e8:	48 02 8f ed 	bl      1002d5d4 <exit@plt>
		}

	    /* Advance to next word. */
	    cp = cp2;
100045ec:	81 3f 00 0c 	lwz     r9,12(r31)
100045f0:	91 3f 00 08 	stw     r9,8(r31)
	    cp += strspn( cp, " \t\n\r" );
100045f4:	80 7f 00 08 	lwz     r3,8(r31)
100045f8:	3d 20 10 02 	lis     r9,4098
100045fc:	38 89 82 88 	addi    r4,r9,-32120
10004600:	48 02 92 1d 	bl      1002d81c <strspn@plt>
10004604:	7c 69 1b 78 	mr      r9,r3
10004608:	81 5f 00 08 	lwz     r10,8(r31)
1000460c:	7d 2a 4a 14 	add     r9,r10,r9
10004610:	91 3f 00 08 	stw     r9,8(r31)
	/* Skip leading whitespace. */
	cp = line;
	cp += strspn( cp, " \t\n\r" );

	/* Split line into words. */
	while ( *cp != '\0' )
10004614:	81 3f 00 08 	lwz     r9,8(r31)
10004618:	89 29 00 00 	lbz     r9,0(r9)
1000461c:	55 29 06 3e 	clrlwi  r9,r9,24
10004620:	2f 89 00 00 	cmpwi   cr7,r9,0
10004624:	40 9e f8 ac 	bne     cr7,10003ed0 <read_config+0xa4>
	{
	perror( filename );
	exit( 1 );
	}

    while ( fgets( line, sizeof(line), fp ) != (char*) 0 )
10004628:	39 3f 00 1c 	addi    r9,r31,28
1000462c:	7d 23 4b 78 	mr      r3,r9
10004630:	38 80 27 10 	li      r4,10000
10004634:	80 bf 00 14 	lwz     r5,20(r31)
10004638:	48 02 8e 25 	bl      1002d45c <fgets@plt>
1000463c:	7c 69 1b 78 	mr      r9,r3
10004640:	2f 89 00 00 	cmpwi   cr7,r9,0
10004644:	40 9e f8 34 	bne     cr7,10003e78 <read_config+0x4c>
	    cp = cp2;
	    cp += strspn( cp, " \t\n\r" );
	    }
	}

    (void) fclose( fp );
10004648:	80 7f 00 14 	lwz     r3,20(r31)
1000464c:	48 02 8e 21 	bl      1002d46c <fclose@plt>
    }
10004650:	39 7f 27 50 	addi    r11,r31,10064
10004654:	80 0b 00 04 	lwz     r0,4(r11)
10004658:	7c 08 03 a6 	mtlr    r0
1000465c:	83 eb ff fc 	lwz     r31,-4(r11)
10004660:	7d 61 5b 78 	mr      r1,r11
10004664:	4e 80 00 20 	blr

10004668 <value_required>:


static void
value_required( char* name, char* value )
    {
10004668:	94 21 ff e0 	stwu    r1,-32(r1)
1000466c:	7c 08 02 a6 	mflr    r0
10004670:	90 01 00 24 	stw     r0,36(r1)
10004674:	93 e1 00 1c 	stw     r31,28(r1)
10004678:	7c 3f 0b 78 	mr      r31,r1
1000467c:	90 7f 00 08 	stw     r3,8(r31)
10004680:	90 9f 00 0c 	stw     r4,12(r31)
    if ( value == (char*) 0 )
10004684:	81 3f 00 0c 	lwz     r9,12(r31)
10004688:	2f 89 00 00 	cmpwi   cr7,r9,0
1000468c:	40 9e 00 38 	bne     cr7,100046c4 <value_required+0x5c>
	{
	(void) fprintf(
10004690:	3d 20 10 03 	lis     r9,4099
10004694:	81 49 da 88 	lwz     r10,-9592(r9)
10004698:	3d 20 10 03 	lis     r9,4099
1000469c:	81 29 da 9c 	lwz     r9,-9572(r9)
100046a0:	7d 43 53 78 	mr      r3,r10
100046a4:	3d 40 10 02 	lis     r10,4098
100046a8:	38 8a 83 b8 	addi    r4,r10,-31816
100046ac:	7d 25 4b 78 	mr      r5,r9
100046b0:	80 df 00 08 	lwz     r6,8(r31)
100046b4:	4c c6 31 82 	crclr   4*cr1+eq
100046b8:	48 02 8f c5 	bl      1002d67c <fprintf@plt>
	    stderr, "%s: value required for %s option\n", argv0, name );
	exit( 1 );
100046bc:	38 60 00 01 	li      r3,1
100046c0:	48 02 8f 15 	bl      1002d5d4 <exit@plt>
	}
    }
100046c4:	39 7f 00 20 	addi    r11,r31,32
100046c8:	80 0b 00 04 	lwz     r0,4(r11)
100046cc:	7c 08 03 a6 	mtlr    r0
100046d0:	83 eb ff fc 	lwz     r31,-4(r11)
100046d4:	7d 61 5b 78 	mr      r1,r11
100046d8:	4e 80 00 20 	blr

100046dc <no_value_required>:


static void
no_value_required( char* name, char* value )
    {
100046dc:	94 21 ff e0 	stwu    r1,-32(r1)
100046e0:	7c 08 02 a6 	mflr    r0
100046e4:	90 01 00 24 	stw     r0,36(r1)
100046e8:	93 e1 00 1c 	stw     r31,28(r1)
100046ec:	7c 3f 0b 78 	mr      r31,r1
100046f0:	90 7f 00 08 	stw     r3,8(r31)
100046f4:	90 9f 00 0c 	stw     r4,12(r31)
    if ( value != (char*) 0 )
100046f8:	81 3f 00 0c 	lwz     r9,12(r31)
100046fc:	2f 89 00 00 	cmpwi   cr7,r9,0
10004700:	41 9e 00 38 	beq     cr7,10004738 <no_value_required+0x5c>
	{
	(void) fprintf(
10004704:	3d 20 10 03 	lis     r9,4099
10004708:	81 49 da 88 	lwz     r10,-9592(r9)
1000470c:	3d 20 10 03 	lis     r9,4099
10004710:	81 29 da 9c 	lwz     r9,-9572(r9)
10004714:	7d 43 53 78 	mr      r3,r10
10004718:	3d 40 10 02 	lis     r10,4098
1000471c:	38 8a 83 dc 	addi    r4,r10,-31780
10004720:	7d 25 4b 78 	mr      r5,r9
10004724:	80 df 00 08 	lwz     r6,8(r31)
10004728:	4c c6 31 82 	crclr   4*cr1+eq
1000472c:	48 02 8f 51 	bl      1002d67c <fprintf@plt>
	    stderr, "%s: no value required for %s option\n",
	    argv0, name );
	exit( 1 );
10004730:	38 60 00 01 	li      r3,1
10004734:	48 02 8e a1 	bl      1002d5d4 <exit@plt>
	}
    }
10004738:	39 7f 00 20 	addi    r11,r31,32
1000473c:	80 0b 00 04 	lwz     r0,4(r11)
10004740:	7c 08 03 a6 	mtlr    r0
10004744:	83 eb ff fc 	lwz     r31,-4(r11)
10004748:	7d 61 5b 78 	mr      r1,r11
1000474c:	4e 80 00 20 	blr

10004750 <e_strdup>:


static char*
e_strdup( char* oldstr )
    {
10004750:	94 21 ff d0 	stwu    r1,-48(r1)
10004754:	7c 08 02 a6 	mflr    r0
10004758:	90 01 00 34 	stw     r0,52(r1)
1000475c:	93 e1 00 2c 	stw     r31,44(r1)
10004760:	7c 3f 0b 78 	mr      r31,r1
10004764:	90 7f 00 18 	stw     r3,24(r31)
    char* newstr;

    newstr = strdup( oldstr );
10004768:	80 7f 00 18 	lwz     r3,24(r31)
1000476c:	48 02 8c d1 	bl      1002d43c <strdup@plt>
10004770:	7c 69 1b 78 	mr      r9,r3
10004774:	91 3f 00 08 	stw     r9,8(r31)
    if ( newstr == (char*) 0 )
10004778:	81 3f 00 08 	lwz     r9,8(r31)
1000477c:	2f 89 00 00 	cmpwi   cr7,r9,0
10004780:	40 9e 00 48 	bne     cr7,100047c8 <e_strdup+0x78>
	{
	syslog( LOG_CRIT, "out of memory copying a string" );
10004784:	38 60 00 02 	li      r3,2
10004788:	3d 20 10 02 	lis     r9,4098
1000478c:	38 89 84 04 	addi    r4,r9,-31740
10004790:	4c c6 31 82 	crclr   4*cr1+eq
10004794:	48 02 8f f1 	bl      1002d784 <syslog@plt>
	(void) fprintf( stderr, "%s: out of memory copying a string\n", argv0 );
10004798:	3d 20 10 03 	lis     r9,4099
1000479c:	81 49 da 88 	lwz     r10,-9592(r9)
100047a0:	3d 20 10 03 	lis     r9,4099
100047a4:	81 29 da 9c 	lwz     r9,-9572(r9)
100047a8:	7d 43 53 78 	mr      r3,r10
100047ac:	3d 40 10 02 	lis     r10,4098
100047b0:	38 8a 84 24 	addi    r4,r10,-31708
100047b4:	7d 25 4b 78 	mr      r5,r9
100047b8:	4c c6 31 82 	crclr   4*cr1+eq
100047bc:	48 02 8e c1 	bl      1002d67c <fprintf@plt>
	exit( 1 );
100047c0:	38 60 00 01 	li      r3,1
100047c4:	48 02 8e 11 	bl      1002d5d4 <exit@plt>
	}
    return newstr;
100047c8:	81 3f 00 08 	lwz     r9,8(r31)
    }
100047cc:	7d 23 4b 78 	mr      r3,r9
100047d0:	39 7f 00 30 	addi    r11,r31,48
100047d4:	80 0b 00 04 	lwz     r0,4(r11)
100047d8:	7c 08 03 a6 	mtlr    r0
100047dc:	83 eb ff fc 	lwz     r31,-4(r11)
100047e0:	7d 61 5b 78 	mr      r1,r11
100047e4:	4e 80 00 20 	blr

100047e8 <lookup_hostname>:


static void
lookup_hostname( httpd_sockaddr* sa4P, size_t sa4_len, int* gotv4P, httpd_sockaddr* sa6P, size_t sa6_len, int* gotv6P )
    {
100047e8:	94 21 ff 90 	stwu    r1,-112(r1)
100047ec:	7c 08 02 a6 	mflr    r0
100047f0:	90 01 00 74 	stw     r0,116(r1)
100047f4:	93 81 00 60 	stw     r28,96(r1)
100047f8:	93 a1 00 64 	stw     r29,100(r1)
100047fc:	93 c1 00 68 	stw     r30,104(r1)
10004800:	93 e1 00 6c 	stw     r31,108(r1)
10004804:	7c 3f 0b 78 	mr      r31,r1
10004808:	90 7f 00 48 	stw     r3,72(r31)
1000480c:	90 9f 00 4c 	stw     r4,76(r31)
10004810:	90 bf 00 50 	stw     r5,80(r31)
10004814:	90 df 00 54 	stw     r6,84(r31)
10004818:	90 ff 00 58 	stw     r7,88(r31)
1000481c:	91 1f 00 5c 	stw     r8,92(r31)
    struct addrinfo* ai;
    struct addrinfo* ai2;
    struct addrinfo* aiv6;
    struct addrinfo* aiv4;

    (void) memset( &hints, 0, sizeof(hints) );
10004820:	39 3f 00 18 	addi    r9,r31,24
10004824:	7d 23 4b 78 	mr      r3,r9
10004828:	38 80 00 00 	li      r4,0
1000482c:	38 a0 00 20 	li      r5,32
10004830:	48 02 8e 95 	bl      1002d6c4 <memset@plt>
    hints.ai_family = PF_UNSPEC;
10004834:	39 20 00 00 	li      r9,0
10004838:	91 3f 00 1c 	stw     r9,28(r31)
    hints.ai_flags = AI_PASSIVE;
1000483c:	39 20 00 01 	li      r9,1
10004840:	91 3f 00 18 	stw     r9,24(r31)
    hints.ai_socktype = SOCK_STREAM;
10004844:	39 20 00 01 	li      r9,1
10004848:	91 3f 00 20 	stw     r9,32(r31)
    (void) snprintf( portstr, sizeof(portstr), "%d", (int) port );
1000484c:	3d 20 10 03 	lis     r9,4099
10004850:	a1 29 da a4 	lhz     r9,-9564(r9)
10004854:	55 29 04 3e 	clrlwi  r9,r9,16
10004858:	39 5f 00 38 	addi    r10,r31,56
1000485c:	7d 43 53 78 	mr      r3,r10
10004860:	38 80 00 0a 	li      r4,10
10004864:	3d 40 10 02 	lis     r10,4098
10004868:	38 aa 84 48 	addi    r5,r10,-31672
1000486c:	7d 26 4b 78 	mr      r6,r9
10004870:	4c c6 31 82 	crclr   4*cr1+eq
10004874:	48 02 8e 31 	bl      1002d6a4 <snprintf@plt>
    if ( (gaierr = getaddrinfo( hostname, portstr, &hints, &ai )) != 0 )
10004878:	3d 20 10 03 	lis     r9,4099
1000487c:	80 e9 da e0 	lwz     r7,-9504(r9)
10004880:	39 1f 00 38 	addi    r8,r31,56
10004884:	39 5f 00 18 	addi    r10,r31,24
10004888:	39 3f 00 44 	addi    r9,r31,68
1000488c:	7c e3 3b 78 	mr      r3,r7
10004890:	7d 04 43 78 	mr      r4,r8
10004894:	7d 45 53 78 	mr      r5,r10
10004898:	7d 26 4b 78 	mr      r6,r9
1000489c:	48 02 8f 49 	bl      1002d7e4 <getaddrinfo@plt>
100048a0:	90 7f 00 14 	stw     r3,20(r31)
100048a4:	81 3f 00 14 	lwz     r9,20(r31)
100048a8:	2f 89 00 00 	cmpwi   cr7,r9,0
100048ac:	41 9e 00 80 	beq     cr7,1000492c <lookup_hostname+0x144>
	{
	syslog(
100048b0:	3d 20 10 03 	lis     r9,4099
100048b4:	83 c9 da e0 	lwz     r30,-9504(r9)
100048b8:	80 7f 00 14 	lwz     r3,20(r31)
100048bc:	48 02 8e 41 	bl      1002d6fc <gai_strerror@plt>
100048c0:	7c 69 1b 78 	mr      r9,r3
100048c4:	38 60 00 02 	li      r3,2
100048c8:	3d 40 10 02 	lis     r10,4098
100048cc:	38 8a 84 4c 	addi    r4,r10,-31668
100048d0:	7f c5 f3 78 	mr      r5,r30
100048d4:	7d 26 4b 78 	mr      r6,r9
100048d8:	4c c6 31 82 	crclr   4*cr1+eq
100048dc:	48 02 8e a9 	bl      1002d784 <syslog@plt>
	    LOG_CRIT, "getaddrinfo %.80s - %.80s",
	    hostname, gai_strerror( gaierr ) );
	(void) fprintf(
100048e0:	3d 20 10 03 	lis     r9,4099
100048e4:	83 89 da 88 	lwz     r28,-9592(r9)
100048e8:	3d 20 10 03 	lis     r9,4099
100048ec:	83 a9 da 9c 	lwz     r29,-9572(r9)
100048f0:	3d 20 10 03 	lis     r9,4099
100048f4:	83 c9 da e0 	lwz     r30,-9504(r9)
100048f8:	80 7f 00 14 	lwz     r3,20(r31)
100048fc:	48 02 8e 01 	bl      1002d6fc <gai_strerror@plt>
10004900:	7c 69 1b 78 	mr      r9,r3
10004904:	7f 83 e3 78 	mr      r3,r28
10004908:	3d 40 10 02 	lis     r10,4098
1000490c:	38 8a 84 68 	addi    r4,r10,-31640
10004910:	7f a5 eb 78 	mr      r5,r29
10004914:	7f c6 f3 78 	mr      r6,r30
10004918:	7d 27 4b 78 	mr      r7,r9
1000491c:	4c c6 31 82 	crclr   4*cr1+eq
10004920:	48 02 8d 5d 	bl      1002d67c <fprintf@plt>
	    stderr, "%s: getaddrinfo %s - %s\n",
	    argv0, hostname, gai_strerror( gaierr ) );
	exit( 1 );
10004924:	38 60 00 01 	li      r3,1
10004928:	48 02 8c ad 	bl      1002d5d4 <exit@plt>
	}

    /* Find the first IPv6 and IPv4 entries. */
    aiv6 = (struct addrinfo*) 0;
1000492c:	39 20 00 00 	li      r9,0
10004930:	91 3f 00 0c 	stw     r9,12(r31)
    aiv4 = (struct addrinfo*) 0;
10004934:	39 20 00 00 	li      r9,0
10004938:	91 3f 00 10 	stw     r9,16(r31)
    for ( ai2 = ai; ai2 != (struct addrinfo*) 0; ai2 = ai2->ai_next )
1000493c:	81 3f 00 44 	lwz     r9,68(r31)
10004940:	91 3f 00 08 	stw     r9,8(r31)
10004944:	48 00 00 60 	b       100049a4 <lookup_hostname+0x1bc>
	{
	switch ( ai2->ai_family )
10004948:	81 3f 00 08 	lwz     r9,8(r31)
1000494c:	81 29 00 04 	lwz     r9,4(r9)
10004950:	2f 89 00 02 	cmpwi   cr7,r9,2
10004954:	41 9e 00 28 	beq     cr7,1000497c <lookup_hostname+0x194>
10004958:	2f 89 00 0a 	cmpwi   cr7,r9,10
1000495c:	40 9e 00 3c 	bne     cr7,10004998 <lookup_hostname+0x1b0>
	    {
	    case AF_INET6:
	    if ( aiv6 == (struct addrinfo*) 0 )
10004960:	81 3f 00 0c 	lwz     r9,12(r31)
10004964:	2f 89 00 00 	cmpwi   cr7,r9,0
10004968:	40 9e 00 10 	bne     cr7,10004978 <lookup_hostname+0x190>
		aiv6 = ai2;
1000496c:	81 3f 00 08 	lwz     r9,8(r31)
10004970:	91 3f 00 0c 	stw     r9,12(r31)
	    break;
10004974:	48 00 00 24 	b       10004998 <lookup_hostname+0x1b0>
10004978:	48 00 00 20 	b       10004998 <lookup_hostname+0x1b0>
	    case AF_INET:
	    if ( aiv4 == (struct addrinfo*) 0 )
1000497c:	81 3f 00 10 	lwz     r9,16(r31)
10004980:	2f 89 00 00 	cmpwi   cr7,r9,0
10004984:	40 9e 00 10 	bne     cr7,10004994 <lookup_hostname+0x1ac>
		aiv4 = ai2;
10004988:	81 3f 00 08 	lwz     r9,8(r31)
1000498c:	91 3f 00 10 	stw     r9,16(r31)
	    break;
10004990:	48 00 00 04 	b       10004994 <lookup_hostname+0x1ac>
10004994:	60 00 00 00 	nop
	}

    /* Find the first IPv6 and IPv4 entries. */
    aiv6 = (struct addrinfo*) 0;
    aiv4 = (struct addrinfo*) 0;
    for ( ai2 = ai; ai2 != (struct addrinfo*) 0; ai2 = ai2->ai_next )
10004998:	81 3f 00 08 	lwz     r9,8(r31)
1000499c:	81 29 00 1c 	lwz     r9,28(r9)
100049a0:	91 3f 00 08 	stw     r9,8(r31)
100049a4:	81 3f 00 08 	lwz     r9,8(r31)
100049a8:	2f 89 00 00 	cmpwi   cr7,r9,0
100049ac:	40 9e ff 9c 	bne     cr7,10004948 <lookup_hostname+0x160>
		aiv4 = ai2;
	    break;
	    }
	}

    if ( aiv6 == (struct addrinfo*) 0 )
100049b0:	81 3f 00 0c 	lwz     r9,12(r31)
100049b4:	2f 89 00 00 	cmpwi   cr7,r9,0
100049b8:	40 9e 00 14 	bne     cr7,100049cc <lookup_hostname+0x1e4>
	*gotv6P = 0;
100049bc:	81 3f 00 5c 	lwz     r9,92(r31)
100049c0:	39 40 00 00 	li      r10,0
100049c4:	91 49 00 00 	stw     r10,0(r9)
100049c8:	48 00 00 8c 	b       10004a54 <lookup_hostname+0x26c>
    else
	{
	if ( sa6_len < aiv6->ai_addrlen )
100049cc:	81 3f 00 0c 	lwz     r9,12(r31)
100049d0:	81 49 00 10 	lwz     r10,16(r9)
100049d4:	81 3f 00 58 	lwz     r9,88(r31)
100049d8:	7f 8a 48 40 	cmplw   cr7,r10,r9
100049dc:	40 9d 00 3c 	ble     cr7,10004a18 <lookup_hostname+0x230>
	    {
	    syslog(
100049e0:	3d 20 10 03 	lis     r9,4099
100049e4:	81 49 da e0 	lwz     r10,-9504(r9)
		LOG_CRIT, "%.80s - sockaddr too small (%lu < %lu)",
		hostname, (unsigned long) sa6_len,
		(unsigned long) aiv6->ai_addrlen );
100049e8:	81 3f 00 0c 	lwz     r9,12(r31)
100049ec:	81 29 00 10 	lwz     r9,16(r9)
	*gotv6P = 0;
    else
	{
	if ( sa6_len < aiv6->ai_addrlen )
	    {
	    syslog(
100049f0:	38 60 00 02 	li      r3,2
100049f4:	3d 00 10 02 	lis     r8,4098
100049f8:	38 88 84 84 	addi    r4,r8,-31612
100049fc:	7d 45 53 78 	mr      r5,r10
10004a00:	80 df 00 58 	lwz     r6,88(r31)
10004a04:	7d 27 4b 78 	mr      r7,r9
10004a08:	4c c6 31 82 	crclr   4*cr1+eq
10004a0c:	48 02 8d 79 	bl      1002d784 <syslog@plt>
		LOG_CRIT, "%.80s - sockaddr too small (%lu < %lu)",
		hostname, (unsigned long) sa6_len,
		(unsigned long) aiv6->ai_addrlen );
	    exit( 1 );
10004a10:	38 60 00 01 	li      r3,1
10004a14:	48 02 8b c1 	bl      1002d5d4 <exit@plt>
	    }
	(void) memset( sa6P, 0, sa6_len );
10004a18:	80 7f 00 54 	lwz     r3,84(r31)
10004a1c:	38 80 00 00 	li      r4,0
10004a20:	80 bf 00 58 	lwz     r5,88(r31)
10004a24:	48 02 8c a1 	bl      1002d6c4 <memset@plt>
	(void) memmove( sa6P, aiv6->ai_addr, aiv6->ai_addrlen );
10004a28:	81 3f 00 0c 	lwz     r9,12(r31)
10004a2c:	81 49 00 14 	lwz     r10,20(r9)
10004a30:	81 3f 00 0c 	lwz     r9,12(r31)
10004a34:	81 29 00 10 	lwz     r9,16(r9)
10004a38:	80 7f 00 54 	lwz     r3,84(r31)
10004a3c:	7d 44 53 78 	mr      r4,r10
10004a40:	7d 25 4b 78 	mr      r5,r9
10004a44:	48 02 89 e1 	bl      1002d424 <memmove@plt>
	*gotv6P = 1;
10004a48:	81 3f 00 5c 	lwz     r9,92(r31)
10004a4c:	39 40 00 01 	li      r10,1
10004a50:	91 49 00 00 	stw     r10,0(r9)
	}

    if ( aiv4 == (struct addrinfo*) 0 )
10004a54:	81 3f 00 10 	lwz     r9,16(r31)
10004a58:	2f 89 00 00 	cmpwi   cr7,r9,0
10004a5c:	40 9e 00 14 	bne     cr7,10004a70 <lookup_hostname+0x288>
	*gotv4P = 0;
10004a60:	81 3f 00 50 	lwz     r9,80(r31)
10004a64:	39 40 00 00 	li      r10,0
10004a68:	91 49 00 00 	stw     r10,0(r9)
10004a6c:	48 00 00 8c 	b       10004af8 <lookup_hostname+0x310>
    else
	{
	if ( sa4_len < aiv4->ai_addrlen )
10004a70:	81 3f 00 10 	lwz     r9,16(r31)
10004a74:	81 49 00 10 	lwz     r10,16(r9)
10004a78:	81 3f 00 4c 	lwz     r9,76(r31)
10004a7c:	7f 8a 48 40 	cmplw   cr7,r10,r9
10004a80:	40 9d 00 3c 	ble     cr7,10004abc <lookup_hostname+0x2d4>
	    {
	    syslog(
10004a84:	3d 20 10 03 	lis     r9,4099
10004a88:	81 49 da e0 	lwz     r10,-9504(r9)
		LOG_CRIT, "%.80s - sockaddr too small (%lu < %lu)",
		hostname, (unsigned long) sa4_len,
		(unsigned long) aiv4->ai_addrlen );
10004a8c:	81 3f 00 10 	lwz     r9,16(r31)
10004a90:	81 29 00 10 	lwz     r9,16(r9)
	*gotv4P = 0;
    else
	{
	if ( sa4_len < aiv4->ai_addrlen )
	    {
	    syslog(
10004a94:	38 60 00 02 	li      r3,2
10004a98:	3d 00 10 02 	lis     r8,4098
10004a9c:	38 88 84 84 	addi    r4,r8,-31612
10004aa0:	7d 45 53 78 	mr      r5,r10
10004aa4:	80 df 00 4c 	lwz     r6,76(r31)
10004aa8:	7d 27 4b 78 	mr      r7,r9
10004aac:	4c c6 31 82 	crclr   4*cr1+eq
10004ab0:	48 02 8c d5 	bl      1002d784 <syslog@plt>
		LOG_CRIT, "%.80s - sockaddr too small (%lu < %lu)",
		hostname, (unsigned long) sa4_len,
		(unsigned long) aiv4->ai_addrlen );
	    exit( 1 );
10004ab4:	38 60 00 01 	li      r3,1
10004ab8:	48 02 8b 1d 	bl      1002d5d4 <exit@plt>
	    }
	(void) memset( sa4P, 0, sa4_len );
10004abc:	80 7f 00 48 	lwz     r3,72(r31)
10004ac0:	38 80 00 00 	li      r4,0
10004ac4:	80 bf 00 4c 	lwz     r5,76(r31)
10004ac8:	48 02 8b fd 	bl      1002d6c4 <memset@plt>
	(void) memmove( sa4P, aiv4->ai_addr, aiv4->ai_addrlen );
10004acc:	81 3f 00 10 	lwz     r9,16(r31)
10004ad0:	81 49 00 14 	lwz     r10,20(r9)
10004ad4:	81 3f 00 10 	lwz     r9,16(r31)
10004ad8:	81 29 00 10 	lwz     r9,16(r9)
10004adc:	80 7f 00 48 	lwz     r3,72(r31)
10004ae0:	7d 44 53 78 	mr      r4,r10
10004ae4:	7d 25 4b 78 	mr      r5,r9
10004ae8:	48 02 89 3d 	bl      1002d424 <memmove@plt>
	*gotv4P = 1;
10004aec:	81 3f 00 50 	lwz     r9,80(r31)
10004af0:	39 40 00 01 	li      r10,1
10004af4:	91 49 00 00 	stw     r10,0(r9)
	}

    freeaddrinfo( ai );
10004af8:	81 3f 00 44 	lwz     r9,68(r31)
10004afc:	7d 23 4b 78 	mr      r3,r9
10004b00:	48 02 8c 65 	bl      1002d764 <freeaddrinfo@plt>
	}
    sa4P->sa_in.sin_port = htons( port );
    *gotv4P = 1;

#endif /* USE_IPV6 */
    }
10004b04:	39 7f 00 70 	addi    r11,r31,112
10004b08:	80 0b 00 04 	lwz     r0,4(r11)
10004b0c:	7c 08 03 a6 	mtlr    r0
10004b10:	83 8b ff f0 	lwz     r28,-16(r11)
10004b14:	83 ab ff f4 	lwz     r29,-12(r11)
10004b18:	83 cb ff f8 	lwz     r30,-8(r11)
10004b1c:	83 eb ff fc 	lwz     r31,-4(r11)
10004b20:	7d 61 5b 78 	mr      r1,r11
10004b24:	4e 80 00 20 	blr

10004b28 <read_throttlefile>:


static void
read_throttlefile( char* tf )
    {
10004b28:	94 21 d8 b0 	stwu    r1,-10064(r1)
10004b2c:	7c 08 02 a6 	mflr    r0
10004b30:	90 01 27 54 	stw     r0,10068(r1)
10004b34:	93 a1 27 44 	stw     r29,10052(r1)
10004b38:	93 c1 27 48 	stw     r30,10056(r1)
10004b3c:	93 e1 27 4c 	stw     r31,10060(r1)
10004b40:	7c 3f 0b 78 	mr      r31,r1
10004b44:	90 7f 27 38 	stw     r3,10040(r31)
    int len;
    char pattern[5000];
    long max_limit, min_limit;
    struct timeval tv;

    fp = fopen( tf, "r" );
10004b48:	80 7f 27 38 	lwz     r3,10040(r31)
10004b4c:	3d 20 10 02 	lis     r9,4098
10004b50:	38 89 82 84 	addi    r4,r9,-32124
10004b54:	48 02 8b 61 	bl      1002d6b4 <fopen@plt>
10004b58:	90 7f 00 0c 	stw     r3,12(r31)
    if ( fp == (FILE*) 0 )
10004b5c:	81 3f 00 0c 	lwz     r9,12(r31)
10004b60:	2f 89 00 00 	cmpwi   cr7,r9,0
10004b64:	40 9e 00 2c 	bne     cr7,10004b90 <read_throttlefile+0x68>
	{
	syslog( LOG_CRIT, "%.80s - %m", tf );
10004b68:	38 60 00 02 	li      r3,2
10004b6c:	3d 20 10 01 	lis     r9,4097
10004b70:	38 89 7d ec 	addi    r4,r9,32236
10004b74:	80 bf 27 38 	lwz     r5,10040(r31)
10004b78:	4c c6 31 82 	crclr   4*cr1+eq
10004b7c:	48 02 8c 09 	bl      1002d784 <syslog@plt>
	perror( tf );
10004b80:	80 7f 27 38 	lwz     r3,10040(r31)
10004b84:	48 02 89 91 	bl      1002d514 <perror@plt>
	exit( 1 );
10004b88:	38 60 00 01 	li      r3,1
10004b8c:	48 02 8a 49 	bl      1002d5d4 <exit@plt>
	}

    (void) gettimeofday( &tv, (struct timezone*) 0 );
10004b90:	39 3f 27 2c 	addi    r9,r31,10028
10004b94:	7d 23 4b 78 	mr      r3,r9
10004b98:	38 80 00 00 	li      r4,0
10004b9c:	48 02 88 f9 	bl      1002d494 <gettimeofday@plt>

    while ( fgets( buf, sizeof(buf), fp ) != (char*) 0 )
10004ba0:	48 00 04 50 	b       10004ff0 <read_throttlefile+0x4c8>
	{
	/* Nuke comments. */
	cp = strchr( buf, '#' );
10004ba4:	39 3f 00 14 	addi    r9,r31,20
10004ba8:	7d 23 4b 78 	mr      r3,r9
10004bac:	38 80 00 23 	li      r4,35
10004bb0:	48 02 8a 95 	bl      1002d644 <strchr@plt>
10004bb4:	90 7f 00 10 	stw     r3,16(r31)
	if ( cp != (char*) 0 )
10004bb8:	81 3f 00 10 	lwz     r9,16(r31)
10004bbc:	2f 89 00 00 	cmpwi   cr7,r9,0
10004bc0:	41 9e 00 10 	beq     cr7,10004bd0 <read_throttlefile+0xa8>
	    *cp = '\0';
10004bc4:	81 3f 00 10 	lwz     r9,16(r31)
10004bc8:	39 40 00 00 	li      r10,0
10004bcc:	99 49 00 00 	stb     r10,0(r9)

	/* Nuke trailing whitespace. */
	len = strlen( buf );
10004bd0:	39 3f 00 14 	addi    r9,r31,20
10004bd4:	7d 23 4b 78 	mr      r3,r9
10004bd8:	48 02 8a 7d 	bl      1002d654 <strlen@plt>
10004bdc:	7c 69 1b 78 	mr      r9,r3
10004be0:	91 3f 00 08 	stw     r9,8(r31)
	while ( len > 0 &&
10004be4:	48 00 00 24 	b       10004c08 <read_throttlefile+0xe0>
		( buf[len-1] == ' ' || buf[len-1] == '\t' ||
		  buf[len-1] == '\n' || buf[len-1] == '\r' ) )
	    buf[--len] = '\0';
10004be8:	81 3f 00 08 	lwz     r9,8(r31)
10004bec:	39 29 ff ff 	addi    r9,r9,-1
10004bf0:	91 3f 00 08 	stw     r9,8(r31)
10004bf4:	39 5f 00 14 	addi    r10,r31,20
10004bf8:	81 3f 00 08 	lwz     r9,8(r31)
10004bfc:	7d 2a 4a 14 	add     r9,r10,r9
10004c00:	39 40 00 00 	li      r10,0
10004c04:	99 49 00 00 	stb     r10,0(r9)
	if ( cp != (char*) 0 )
	    *cp = '\0';

	/* Nuke trailing whitespace. */
	len = strlen( buf );
	while ( len > 0 &&
10004c08:	81 3f 00 08 	lwz     r9,8(r31)
10004c0c:	2f 89 00 00 	cmpwi   cr7,r9,0
10004c10:	40 9d 00 84 	ble     cr7,10004c94 <read_throttlefile+0x16c>
		( buf[len-1] == ' ' || buf[len-1] == '\t' ||
10004c14:	81 3f 00 08 	lwz     r9,8(r31)
10004c18:	39 29 ff ff 	addi    r9,r9,-1
10004c1c:	39 5f 00 08 	addi    r10,r31,8
10004c20:	7d 2a 4a 14 	add     r9,r10,r9
10004c24:	89 29 00 0c 	lbz     r9,12(r9)
10004c28:	55 29 06 3e 	clrlwi  r9,r9,24
	if ( cp != (char*) 0 )
	    *cp = '\0';

	/* Nuke trailing whitespace. */
	len = strlen( buf );
	while ( len > 0 &&
10004c2c:	2b 89 00 20 	cmplwi  cr7,r9,32
10004c30:	41 9e ff b8 	beq     cr7,10004be8 <read_throttlefile+0xc0>
		( buf[len-1] == ' ' || buf[len-1] == '\t' ||
10004c34:	81 3f 00 08 	lwz     r9,8(r31)
10004c38:	39 29 ff ff 	addi    r9,r9,-1
10004c3c:	39 5f 00 08 	addi    r10,r31,8
10004c40:	7d 2a 4a 14 	add     r9,r10,r9
10004c44:	89 29 00 0c 	lbz     r9,12(r9)
10004c48:	55 29 06 3e 	clrlwi  r9,r9,24
10004c4c:	2b 89 00 09 	cmplwi  cr7,r9,9
10004c50:	41 9e ff 98 	beq     cr7,10004be8 <read_throttlefile+0xc0>
		  buf[len-1] == '\n' || buf[len-1] == '\r' ) )
10004c54:	81 3f 00 08 	lwz     r9,8(r31)
10004c58:	39 29 ff ff 	addi    r9,r9,-1
10004c5c:	39 5f 00 08 	addi    r10,r31,8
10004c60:	7d 2a 4a 14 	add     r9,r10,r9
10004c64:	89 29 00 0c 	lbz     r9,12(r9)
10004c68:	55 29 06 3e 	clrlwi  r9,r9,24
	    *cp = '\0';

	/* Nuke trailing whitespace. */
	len = strlen( buf );
	while ( len > 0 &&
		( buf[len-1] == ' ' || buf[len-1] == '\t' ||
10004c6c:	2b 89 00 0a 	cmplwi  cr7,r9,10
10004c70:	41 9e ff 78 	beq     cr7,10004be8 <read_throttlefile+0xc0>
		  buf[len-1] == '\n' || buf[len-1] == '\r' ) )
10004c74:	81 3f 00 08 	lwz     r9,8(r31)
10004c78:	39 29 ff ff 	addi    r9,r9,-1
10004c7c:	39 5f 00 08 	addi    r10,r31,8
10004c80:	7d 2a 4a 14 	add     r9,r10,r9
10004c84:	89 29 00 0c 	lbz     r9,12(r9)
10004c88:	55 29 06 3e 	clrlwi  r9,r9,24
10004c8c:	2b 89 00 0d 	cmplwi  cr7,r9,13
10004c90:	41 9e ff 58 	beq     cr7,10004be8 <read_throttlefile+0xc0>
	    buf[--len] = '\0';

	/* Ignore empty lines. */
	if ( len == 0 )
10004c94:	81 3f 00 08 	lwz     r9,8(r31)
10004c98:	2f 89 00 00 	cmpwi   cr7,r9,0
10004c9c:	40 9e 00 08 	bne     cr7,10004ca4 <read_throttlefile+0x17c>
	    continue;
10004ca0:	48 00 03 50 	b       10004ff0 <read_throttlefile+0x4c8>

	/* Parse line. */
	if ( sscanf( buf, " %4900[^ \t] %ld-%ld", pattern, &min_limit, &max_limit ) == 3 )
10004ca4:	38 ff 00 14 	addi    r7,r31,20
10004ca8:	39 1f 13 9c 	addi    r8,r31,5020
10004cac:	39 5f 27 28 	addi    r10,r31,10024
10004cb0:	39 3f 27 24 	addi    r9,r31,10020
10004cb4:	7c e3 3b 78 	mr      r3,r7
10004cb8:	3c e0 10 02 	lis     r7,4098
10004cbc:	38 87 84 ac 	addi    r4,r7,-31572
10004cc0:	7d 05 43 78 	mr      r5,r8
10004cc4:	7d 46 53 78 	mr      r6,r10
10004cc8:	7d 27 4b 78 	mr      r7,r9
10004ccc:	4c c6 31 82 	crclr   4*cr1+eq
10004cd0:	48 02 89 dd 	bl      1002d6ac <__isoc99_sscanf@plt>
10004cd4:	7c 69 1b 78 	mr      r9,r3
10004cd8:	2f 89 00 03 	cmpwi   cr7,r9,3
10004cdc:	41 9e 00 9c 	beq     cr7,10004d78 <read_throttlefile+0x250>
	    {}
	else if ( sscanf( buf, " %4900[^ \t] %ld", pattern, &max_limit ) == 2 )
10004ce0:	39 1f 00 14 	addi    r8,r31,20
10004ce4:	39 5f 13 9c 	addi    r10,r31,5020
10004ce8:	39 3f 27 24 	addi    r9,r31,10020
10004cec:	7d 03 43 78 	mr      r3,r8
10004cf0:	3d 00 10 02 	lis     r8,4098
10004cf4:	38 88 84 c0 	addi    r4,r8,-31552
10004cf8:	7d 45 53 78 	mr      r5,r10
10004cfc:	7d 26 4b 78 	mr      r6,r9
10004d00:	4c c6 31 82 	crclr   4*cr1+eq
10004d04:	48 02 89 a9 	bl      1002d6ac <__isoc99_sscanf@plt>
10004d08:	7c 69 1b 78 	mr      r9,r3
10004d0c:	2f 89 00 02 	cmpwi   cr7,r9,2
10004d10:	40 9e 00 10 	bne     cr7,10004d20 <read_throttlefile+0x1f8>
	    min_limit = 0;
10004d14:	39 20 00 00 	li      r9,0
10004d18:	91 3f 27 28 	stw     r9,10024(r31)
10004d1c:	48 00 00 5c 	b       10004d78 <read_throttlefile+0x250>
	else
	    {
	    syslog( LOG_CRIT,
10004d20:	39 3f 00 14 	addi    r9,r31,20
10004d24:	38 60 00 02 	li      r3,2
10004d28:	3d 40 10 02 	lis     r10,4098
10004d2c:	38 8a 84 d0 	addi    r4,r10,-31536
10004d30:	80 bf 27 38 	lwz     r5,10040(r31)
10004d34:	7d 26 4b 78 	mr      r6,r9
10004d38:	4c c6 31 82 	crclr   4*cr1+eq
10004d3c:	48 02 8a 49 	bl      1002d784 <syslog@plt>
		"unparsable line in %.80s - %.80s", tf, buf );
	    (void) fprintf( stderr,
10004d40:	3d 20 10 03 	lis     r9,4099
10004d44:	81 09 da 88 	lwz     r8,-9592(r9)
10004d48:	3d 20 10 03 	lis     r9,4099
10004d4c:	81 49 da 9c 	lwz     r10,-9572(r9)
10004d50:	39 3f 00 14 	addi    r9,r31,20
10004d54:	7d 03 43 78 	mr      r3,r8
10004d58:	3d 00 10 02 	lis     r8,4098
10004d5c:	38 88 84 f4 	addi    r4,r8,-31500
10004d60:	7d 45 53 78 	mr      r5,r10
10004d64:	80 df 27 38 	lwz     r6,10040(r31)
10004d68:	7d 27 4b 78 	mr      r7,r9
10004d6c:	4c c6 31 82 	crclr   4*cr1+eq
10004d70:	48 02 89 0d 	bl      1002d67c <fprintf@plt>
		"%s: unparsable line in %.80s - %.80s\n",
		argv0, tf, buf );
	    continue;
10004d74:	48 00 02 7c 	b       10004ff0 <read_throttlefile+0x4c8>
	    }

	/* Nuke any leading slashes in pattern. */
	if ( pattern[0] == '/' )
10004d78:	89 3f 13 9c 	lbz     r9,5020(r31)
10004d7c:	55 29 06 3e 	clrlwi  r9,r9,24
10004d80:	2b 89 00 2f 	cmplwi  cr7,r9,47
10004d84:	40 9e 00 3c 	bne     cr7,10004dc0 <read_throttlefile+0x298>
	    (void) ol_strcpy( pattern, &pattern[1] );
10004d88:	39 3f 13 9c 	addi    r9,r31,5020
10004d8c:	39 29 00 01 	addi    r9,r9,1
10004d90:	7d 23 4b 78 	mr      r3,r9
10004d94:	48 02 88 c1 	bl      1002d654 <strlen@plt>
10004d98:	7c 69 1b 78 	mr      r9,r3
10004d9c:	39 29 00 01 	addi    r9,r9,1
10004da0:	39 1f 13 9c 	addi    r8,r31,5020
10004da4:	39 5f 13 9c 	addi    r10,r31,5020
10004da8:	39 4a 00 01 	addi    r10,r10,1
10004dac:	7d 03 43 78 	mr      r3,r8
10004db0:	7d 44 53 78 	mr      r4,r10
10004db4:	7d 25 4b 78 	mr      r5,r9
10004db8:	48 02 86 6d 	bl      1002d424 <memmove@plt>
	while ( ( cp = strstr( pattern, "|/" ) ) != (char*) 0 )
10004dbc:	48 00 00 40 	b       10004dfc <read_throttlefile+0x2d4>
10004dc0:	48 00 00 3c 	b       10004dfc <read_throttlefile+0x2d4>
	    (void) ol_strcpy( cp + 1, cp + 2 );
10004dc4:	81 3f 00 10 	lwz     r9,16(r31)
10004dc8:	3b a9 00 01 	addi    r29,r9,1
10004dcc:	81 3f 00 10 	lwz     r9,16(r31)
10004dd0:	3b c9 00 02 	addi    r30,r9,2
10004dd4:	81 3f 00 10 	lwz     r9,16(r31)
10004dd8:	39 29 00 02 	addi    r9,r9,2
10004ddc:	7d 23 4b 78 	mr      r3,r9
10004de0:	48 02 88 75 	bl      1002d654 <strlen@plt>
10004de4:	7c 69 1b 78 	mr      r9,r3
10004de8:	39 29 00 01 	addi    r9,r9,1
10004dec:	7f a3 eb 78 	mr      r3,r29
10004df0:	7f c4 f3 78 	mr      r4,r30
10004df4:	7d 25 4b 78 	mr      r5,r9
10004df8:	48 02 86 2d 	bl      1002d424 <memmove@plt>
	    }

	/* Nuke any leading slashes in pattern. */
	if ( pattern[0] == '/' )
	    (void) ol_strcpy( pattern, &pattern[1] );
	while ( ( cp = strstr( pattern, "|/" ) ) != (char*) 0 )
10004dfc:	39 3f 13 9c 	addi    r9,r31,5020
10004e00:	7d 23 4b 78 	mr      r3,r9
10004e04:	3d 20 10 02 	lis     r9,4098
10004e08:	38 89 85 1c 	addi    r4,r9,-31460
10004e0c:	48 02 85 c9 	bl      1002d3d4 <strstr@plt>
10004e10:	90 7f 00 10 	stw     r3,16(r31)
10004e14:	81 3f 00 10 	lwz     r9,16(r31)
10004e18:	2f 89 00 00 	cmpwi   cr7,r9,0
10004e1c:	40 9e ff a8 	bne     cr7,10004dc4 <read_throttlefile+0x29c>
	    (void) ol_strcpy( cp + 1, cp + 2 );

	/* Check for room in throttles. */
	if ( numthrottles >= maxthrottles )
10004e20:	3d 20 10 03 	lis     r9,4099
10004e24:	81 49 da fc 	lwz     r10,-9476(r9)
10004e28:	3d 20 10 03 	lis     r9,4099
10004e2c:	81 29 db 00 	lwz     r9,-9472(r9)
10004e30:	7f 8a 48 00 	cmpw    cr7,r10,r9
10004e34:	41 9c 00 dc 	blt     cr7,10004f10 <read_throttlefile+0x3e8>
	    {
	    if ( maxthrottles == 0 )
10004e38:	3d 20 10 03 	lis     r9,4099
10004e3c:	81 29 db 00 	lwz     r9,-9472(r9)
10004e40:	2f 89 00 00 	cmpwi   cr7,r9,0
10004e44:	40 9e 00 38 	bne     cr7,10004e7c <read_throttlefile+0x354>
		{
		maxthrottles = 100;     /* arbitrary */
10004e48:	3d 20 10 03 	lis     r9,4099
10004e4c:	39 40 00 64 	li      r10,100
10004e50:	91 49 db 00 	stw     r10,-9472(r9)
		throttles = NEW( throttletab, maxthrottles );
10004e54:	3d 20 10 03 	lis     r9,4099
10004e58:	81 29 db 00 	lwz     r9,-9472(r9)
10004e5c:	1d 29 00 18 	mulli   r9,r9,24
10004e60:	7d 23 4b 78 	mr      r3,r9
10004e64:	48 02 87 41 	bl      1002d5a4 <malloc@plt>
10004e68:	7c 69 1b 78 	mr      r9,r3
10004e6c:	7d 2a 4b 78 	mr      r10,r9
10004e70:	3d 20 10 03 	lis     r9,4099
10004e74:	91 49 da f8 	stw     r10,-9480(r9)
10004e78:	48 00 00 44 	b       10004ebc <read_throttlefile+0x394>
		}
	    else
		{
		maxthrottles *= 2;
10004e7c:	3d 20 10 03 	lis     r9,4099
10004e80:	81 29 db 00 	lwz     r9,-9472(r9)
10004e84:	55 2a 08 3c 	rlwinm  r10,r9,1,0,30
10004e88:	3d 20 10 03 	lis     r9,4099
10004e8c:	91 49 db 00 	stw     r10,-9472(r9)
		throttles = RENEW( throttles, throttletab, maxthrottles );
10004e90:	3d 20 10 03 	lis     r9,4099
10004e94:	81 49 da f8 	lwz     r10,-9480(r9)
10004e98:	3d 20 10 03 	lis     r9,4099
10004e9c:	81 29 db 00 	lwz     r9,-9472(r9)
10004ea0:	1d 29 00 18 	mulli   r9,r9,24
10004ea4:	7d 43 53 78 	mr      r3,r10
10004ea8:	7d 24 4b 78 	mr      r4,r9
10004eac:	48 02 86 f1 	bl      1002d59c <realloc@plt>
10004eb0:	7c 6a 1b 78 	mr      r10,r3
10004eb4:	3d 20 10 03 	lis     r9,4099
10004eb8:	91 49 da f8 	stw     r10,-9480(r9)
		}
	    if ( throttles == (throttletab*) 0 )
10004ebc:	3d 20 10 03 	lis     r9,4099
10004ec0:	81 29 da f8 	lwz     r9,-9480(r9)
10004ec4:	2f 89 00 00 	cmpwi   cr7,r9,0
10004ec8:	40 9e 00 48 	bne     cr7,10004f10 <read_throttlefile+0x3e8>
		{
		syslog( LOG_CRIT, "out of memory allocating a throttletab" );
10004ecc:	38 60 00 02 	li      r3,2
10004ed0:	3d 20 10 02 	lis     r9,4098
10004ed4:	38 89 85 20 	addi    r4,r9,-31456
10004ed8:	4c c6 31 82 	crclr   4*cr1+eq
10004edc:	48 02 88 a9 	bl      1002d784 <syslog@plt>
		(void) fprintf(
10004ee0:	3d 20 10 03 	lis     r9,4099
10004ee4:	81 49 da 88 	lwz     r10,-9592(r9)
10004ee8:	3d 20 10 03 	lis     r9,4099
10004eec:	81 29 da 9c 	lwz     r9,-9572(r9)
10004ef0:	7d 43 53 78 	mr      r3,r10
10004ef4:	3d 40 10 02 	lis     r10,4098
10004ef8:	38 8a 85 48 	addi    r4,r10,-31416
10004efc:	7d 25 4b 78 	mr      r5,r9
10004f00:	4c c6 31 82 	crclr   4*cr1+eq
10004f04:	48 02 87 79 	bl      1002d67c <fprintf@plt>
		    stderr, "%s: out of memory allocating a throttletab\n",
		    argv0 );
		exit( 1 );
10004f08:	38 60 00 01 	li      r3,1
10004f0c:	48 02 86 c9 	bl      1002d5d4 <exit@plt>
		}
	    }

	/* Add to table. */
	throttles[numthrottles].pattern = e_strdup( pattern );
10004f10:	3d 20 10 03 	lis     r9,4099
10004f14:	81 49 da f8 	lwz     r10,-9480(r9)
10004f18:	3d 20 10 03 	lis     r9,4099
10004f1c:	81 29 da fc 	lwz     r9,-9476(r9)
10004f20:	1d 29 00 18 	mulli   r9,r9,24
10004f24:	7f ca 4a 14 	add     r30,r10,r9
10004f28:	39 3f 13 9c 	addi    r9,r31,5020
10004f2c:	7d 23 4b 78 	mr      r3,r9
10004f30:	4b ff f8 21 	bl      10004750 <e_strdup>
10004f34:	7c 69 1b 78 	mr      r9,r3
10004f38:	91 3e 00 00 	stw     r9,0(r30)
	throttles[numthrottles].max_limit = max_limit;
10004f3c:	3d 20 10 03 	lis     r9,4099
10004f40:	81 49 da f8 	lwz     r10,-9480(r9)
10004f44:	3d 20 10 03 	lis     r9,4099
10004f48:	81 29 da fc 	lwz     r9,-9476(r9)
10004f4c:	1d 29 00 18 	mulli   r9,r9,24
10004f50:	7d 2a 4a 14 	add     r9,r10,r9
10004f54:	81 5f 27 24 	lwz     r10,10020(r31)
10004f58:	91 49 00 04 	stw     r10,4(r9)
	throttles[numthrottles].min_limit = min_limit;
10004f5c:	3d 20 10 03 	lis     r9,4099
10004f60:	81 49 da f8 	lwz     r10,-9480(r9)
10004f64:	3d 20 10 03 	lis     r9,4099
10004f68:	81 29 da fc 	lwz     r9,-9476(r9)
10004f6c:	1d 29 00 18 	mulli   r9,r9,24
10004f70:	7d 2a 4a 14 	add     r9,r10,r9
10004f74:	81 5f 27 28 	lwz     r10,10024(r31)
10004f78:	91 49 00 08 	stw     r10,8(r9)
	throttles[numthrottles].rate = 0;
10004f7c:	3d 20 10 03 	lis     r9,4099
10004f80:	81 49 da f8 	lwz     r10,-9480(r9)
10004f84:	3d 20 10 03 	lis     r9,4099
10004f88:	81 29 da fc 	lwz     r9,-9476(r9)
10004f8c:	1d 29 00 18 	mulli   r9,r9,24
10004f90:	7d 2a 4a 14 	add     r9,r10,r9
10004f94:	39 40 00 00 	li      r10,0
10004f98:	91 49 00 0c 	stw     r10,12(r9)
	throttles[numthrottles].bytes_since_avg = 0;
10004f9c:	3d 20 10 03 	lis     r9,4099
10004fa0:	81 49 da f8 	lwz     r10,-9480(r9)
10004fa4:	3d 20 10 03 	lis     r9,4099
10004fa8:	81 29 da fc 	lwz     r9,-9476(r9)
10004fac:	1d 29 00 18 	mulli   r9,r9,24
10004fb0:	7d 2a 4a 14 	add     r9,r10,r9
10004fb4:	39 40 00 00 	li      r10,0
10004fb8:	91 49 00 10 	stw     r10,16(r9)
	throttles[numthrottles].num_sending = 0;
10004fbc:	3d 20 10 03 	lis     r9,4099
10004fc0:	81 49 da f8 	lwz     r10,-9480(r9)
10004fc4:	3d 20 10 03 	lis     r9,4099
10004fc8:	81 29 da fc 	lwz     r9,-9476(r9)
10004fcc:	1d 29 00 18 	mulli   r9,r9,24
10004fd0:	7d 2a 4a 14 	add     r9,r10,r9
10004fd4:	39 40 00 00 	li      r10,0
10004fd8:	91 49 00 14 	stw     r10,20(r9)

	++numthrottles;
10004fdc:	3d 20 10 03 	lis     r9,4099
10004fe0:	81 29 da fc 	lwz     r9,-9476(r9)
10004fe4:	39 49 00 01 	addi    r10,r9,1
10004fe8:	3d 20 10 03 	lis     r9,4099
10004fec:	91 49 da fc 	stw     r10,-9476(r9)
	exit( 1 );
	}

    (void) gettimeofday( &tv, (struct timezone*) 0 );

    while ( fgets( buf, sizeof(buf), fp ) != (char*) 0 )
10004ff0:	39 3f 00 14 	addi    r9,r31,20
10004ff4:	7d 23 4b 78 	mr      r3,r9
10004ff8:	38 80 13 88 	li      r4,5000
10004ffc:	80 bf 00 0c 	lwz     r5,12(r31)
10005000:	48 02 84 5d 	bl      1002d45c <fgets@plt>
10005004:	7c 69 1b 78 	mr      r9,r3
10005008:	2f 89 00 00 	cmpwi   cr7,r9,0
1000500c:	40 9e fb 98 	bne     cr7,10004ba4 <read_throttlefile+0x7c>
	throttles[numthrottles].bytes_since_avg = 0;
	throttles[numthrottles].num_sending = 0;

	++numthrottles;
	}
    (void) fclose( fp );
10005010:	80 7f 00 0c 	lwz     r3,12(r31)
10005014:	48 02 84 59 	bl      1002d46c <fclose@plt>
    }
10005018:	39 7f 27 50 	addi    r11,r31,10064
1000501c:	80 0b 00 04 	lwz     r0,4(r11)
10005020:	7c 08 03 a6 	mtlr    r0
10005024:	83 ab ff f4 	lwz     r29,-12(r11)
10005028:	83 cb ff f8 	lwz     r30,-8(r11)
1000502c:	83 eb ff fc 	lwz     r31,-4(r11)
10005030:	7d 61 5b 78 	mr      r1,r11
10005034:	4e 80 00 20 	blr

10005038 <shut_down>:


static void
shut_down( void )
    {
10005038:	94 21 ff e0 	stwu    r1,-32(r1)
1000503c:	7c 08 02 a6 	mflr    r0
10005040:	90 01 00 24 	stw     r0,36(r1)
10005044:	93 e1 00 1c 	stw     r31,28(r1)
10005048:	7c 3f 0b 78 	mr      r31,r1
    int cnum;
    struct timeval tv;

    (void) gettimeofday( &tv, (struct timezone*) 0 );
1000504c:	39 3f 00 10 	addi    r9,r31,16
10005050:	7d 23 4b 78 	mr      r3,r9
10005054:	38 80 00 00 	li      r4,0
10005058:	48 02 84 3d 	bl      1002d494 <gettimeofday@plt>
    logstats( &tv );
1000505c:	39 3f 00 10 	addi    r9,r31,16
10005060:	7d 23 4b 78 	mr      r3,r9
10005064:	48 00 1d f9 	bl      10006e5c <logstats>
    for ( cnum = 0; cnum < max_connects; ++cnum )
10005068:	39 20 00 00 	li      r9,0
1000506c:	91 3f 00 08 	stw     r9,8(r31)
10005070:	48 00 00 e8 	b       10005158 <shut_down+0x120>
	{
	if ( connects[cnum].conn_state != CNST_FREE )
10005074:	3d 20 10 03 	lis     r9,4099
10005078:	81 49 db 04 	lwz     r10,-9468(r9)
1000507c:	81 3f 00 08 	lwz     r9,8(r31)
10005080:	1d 29 00 60 	mulli   r9,r9,96
10005084:	7d 2a 4a 14 	add     r9,r10,r9
10005088:	81 29 00 00 	lwz     r9,0(r9)
1000508c:	2f 89 00 00 	cmpwi   cr7,r9,0
10005090:	41 9e 00 2c 	beq     cr7,100050bc <shut_down+0x84>
	    httpd_close_conn( connects[cnum].hc, &tv );
10005094:	3d 20 10 03 	lis     r9,4099
10005098:	81 49 db 04 	lwz     r10,-9468(r9)
1000509c:	81 3f 00 08 	lwz     r9,8(r31)
100050a0:	1d 29 00 60 	mulli   r9,r9,96
100050a4:	7d 2a 4a 14 	add     r9,r10,r9
100050a8:	81 49 00 08 	lwz     r10,8(r9)
100050ac:	39 3f 00 10 	addi    r9,r31,16
100050b0:	7d 43 53 78 	mr      r3,r10
100050b4:	7d 24 4b 78 	mr      r4,r9
100050b8:	48 00 7a 9d 	bl      1000cb54 <httpd_close_conn>
	if ( connects[cnum].hc != (httpd_conn*) 0 )
100050bc:	3d 20 10 03 	lis     r9,4099
100050c0:	81 49 db 04 	lwz     r10,-9468(r9)
100050c4:	81 3f 00 08 	lwz     r9,8(r31)
100050c8:	1d 29 00 60 	mulli   r9,r9,96
100050cc:	7d 2a 4a 14 	add     r9,r10,r9
100050d0:	81 29 00 08 	lwz     r9,8(r9)
100050d4:	2f 89 00 00 	cmpwi   cr7,r9,0
100050d8:	41 9e 00 74 	beq     cr7,1000514c <shut_down+0x114>
	    {
	    httpd_destroy_conn( connects[cnum].hc );
100050dc:	3d 20 10 03 	lis     r9,4099
100050e0:	81 49 db 04 	lwz     r10,-9468(r9)
100050e4:	81 3f 00 08 	lwz     r9,8(r31)
100050e8:	1d 29 00 60 	mulli   r9,r9,96
100050ec:	7d 2a 4a 14 	add     r9,r10,r9
100050f0:	81 29 00 08 	lwz     r9,8(r9)
100050f4:	7d 23 4b 78 	mr      r3,r9
100050f8:	48 00 7b 05 	bl      1000cbfc <httpd_destroy_conn>
	    free( (void*) connects[cnum].hc );
100050fc:	3d 20 10 03 	lis     r9,4099
10005100:	81 49 db 04 	lwz     r10,-9468(r9)
10005104:	81 3f 00 08 	lwz     r9,8(r31)
10005108:	1d 29 00 60 	mulli   r9,r9,96
1000510c:	7d 2a 4a 14 	add     r9,r10,r9
10005110:	81 29 00 08 	lwz     r9,8(r9)
10005114:	7d 23 4b 78 	mr      r3,r9
10005118:	48 02 83 1d 	bl      1002d434 <free@plt>
	    --httpd_conn_count;
1000511c:	3d 20 10 03 	lis     r9,4099
10005120:	81 29 db 14 	lwz     r9,-9452(r9)
10005124:	39 49 ff ff 	addi    r10,r9,-1
10005128:	3d 20 10 03 	lis     r9,4099
1000512c:	91 49 db 14 	stw     r10,-9452(r9)
	    connects[cnum].hc = (httpd_conn*) 0;
10005130:	3d 20 10 03 	lis     r9,4099
10005134:	81 49 db 04 	lwz     r10,-9468(r9)
10005138:	81 3f 00 08 	lwz     r9,8(r31)
1000513c:	1d 29 00 60 	mulli   r9,r9,96
10005140:	7d 2a 4a 14 	add     r9,r10,r9
10005144:	39 40 00 00 	li      r10,0
10005148:	91 49 00 08 	stw     r10,8(r9)
    int cnum;
    struct timeval tv;

    (void) gettimeofday( &tv, (struct timezone*) 0 );
    logstats( &tv );
    for ( cnum = 0; cnum < max_connects; ++cnum )
1000514c:	81 3f 00 08 	lwz     r9,8(r31)
10005150:	39 29 00 01 	addi    r9,r9,1
10005154:	91 3f 00 08 	stw     r9,8(r31)
10005158:	3d 20 10 03 	lis     r9,4099
1000515c:	81 29 db 0c 	lwz     r9,-9460(r9)
10005160:	81 5f 00 08 	lwz     r10,8(r31)
10005164:	7f 8a 48 00 	cmpw    cr7,r10,r9
10005168:	41 9c ff 0c 	blt     cr7,10005074 <shut_down+0x3c>
	    free( (void*) connects[cnum].hc );
	    --httpd_conn_count;
	    connects[cnum].hc = (httpd_conn*) 0;
	    }
	}
    if ( hs != (httpd_server*) 0 )
1000516c:	3d 20 10 03 	lis     r9,4099
10005170:	81 29 db 18 	lwz     r9,-9448(r9)
10005174:	2f 89 00 00 	cmpwi   cr7,r9,0
10005178:	41 9e 00 6c 	beq     cr7,100051e4 <shut_down+0x1ac>
	{
	httpd_server* ths = hs;
1000517c:	3d 20 10 03 	lis     r9,4099
10005180:	81 29 db 18 	lwz     r9,-9448(r9)
10005184:	91 3f 00 0c 	stw     r9,12(r31)
	hs = (httpd_server*) 0;
10005188:	3d 20 10 03 	lis     r9,4099
1000518c:	39 40 00 00 	li      r10,0
10005190:	91 49 db 18 	stw     r10,-9448(r9)
	if ( ths->listen4_fd != -1 )
10005194:	81 3f 00 0c 	lwz     r9,12(r31)
10005198:	81 49 00 28 	lwz     r10,40(r9)
1000519c:	39 20 ff ff 	li      r9,-1
100051a0:	7f 8a 48 00 	cmpw    cr7,r10,r9
100051a4:	41 9e 00 14 	beq     cr7,100051b8 <shut_down+0x180>
	    fdwatch_del_fd( ths->listen4_fd );
100051a8:	81 3f 00 0c 	lwz     r9,12(r31)
100051ac:	81 29 00 28 	lwz     r9,40(r9)
100051b0:	7d 23 4b 78 	mr      r3,r9
100051b4:	48 00 c9 b1 	bl      10011b64 <fdwatch_del_fd>
	if ( ths->listen6_fd != -1 )
100051b8:	81 3f 00 0c 	lwz     r9,12(r31)
100051bc:	81 49 00 2c 	lwz     r10,44(r9)
100051c0:	39 20 ff ff 	li      r9,-1
100051c4:	7f 8a 48 00 	cmpw    cr7,r10,r9
100051c8:	41 9e 00 14 	beq     cr7,100051dc <shut_down+0x1a4>
	    fdwatch_del_fd( ths->listen6_fd );
100051cc:	81 3f 00 0c 	lwz     r9,12(r31)
100051d0:	81 29 00 2c 	lwz     r9,44(r9)
100051d4:	7d 23 4b 78 	mr      r3,r9
100051d8:	48 00 c9 8d 	bl      10011b64 <fdwatch_del_fd>
	httpd_terminate( ths );
100051dc:	80 7f 00 0c 	lwz     r3,12(r31)
100051e0:	48 00 28 99 	bl      10007a78 <httpd_terminate>
	}
    mmc_term();
100051e4:	48 00 dc d9 	bl      10012ebc <mmc_term>
    tmr_term();
100051e8:	48 00 f0 05 	bl      100141ec <tmr_term>
    free( (void*) connects );
100051ec:	3d 20 10 03 	lis     r9,4099
100051f0:	81 29 db 04 	lwz     r9,-9468(r9)
100051f4:	7d 23 4b 78 	mr      r3,r9
100051f8:	48 02 82 3d 	bl      1002d434 <free@plt>
    if ( throttles != (throttletab*) 0 )
100051fc:	3d 20 10 03 	lis     r9,4099
10005200:	81 29 da f8 	lwz     r9,-9480(r9)
10005204:	2f 89 00 00 	cmpwi   cr7,r9,0
10005208:	41 9e 00 14 	beq     cr7,1000521c <shut_down+0x1e4>
	free( (void*) throttles );
1000520c:	3d 20 10 03 	lis     r9,4099
10005210:	81 29 da f8 	lwz     r9,-9480(r9)
10005214:	7d 23 4b 78 	mr      r3,r9
10005218:	48 02 82 1d 	bl      1002d434 <free@plt>
    }
1000521c:	39 7f 00 20 	addi    r11,r31,32
10005220:	80 0b 00 04 	lwz     r0,4(r11)
10005224:	7c 08 03 a6 	mtlr    r0
10005228:	83 eb ff fc 	lwz     r31,-4(r11)
1000522c:	7d 61 5b 78 	mr      r1,r11
10005230:	4e 80 00 20 	blr

10005234 <handle_newconnect>:


static int
handle_newconnect( struct timeval* tvP, int listen_fd )
    {
10005234:	94 21 ff d0 	stwu    r1,-48(r1)
10005238:	7c 08 02 a6 	mflr    r0
1000523c:	90 01 00 34 	stw     r0,52(r1)
10005240:	93 e1 00 2c 	stw     r31,44(r1)
10005244:	7c 3f 0b 78 	mr      r31,r1
10005248:	90 7f 00 18 	stw     r3,24(r31)
1000524c:	90 9f 00 1c 	stw     r4,28(r31)
    ** listen queue.
    */
    for (;;)
	{
	/* Is there room in the connection table? */
	if ( num_connects >= max_connects )
10005250:	3d 20 10 03 	lis     r9,4099
10005254:	81 49 db 08 	lwz     r10,-9464(r9)
10005258:	3d 20 10 03 	lis     r9,4099
1000525c:	81 29 db 0c 	lwz     r9,-9460(r9)
10005260:	7f 8a 48 00 	cmpw    cr7,r10,r9
10005264:	41 9c 00 28 	blt     cr7,1000528c <handle_newconnect+0x58>
	    {
	    /* Out of connection slots.  Run the timers, then the
	    ** existing connections, and maybe we'll free up a slot
	    ** by the time we get back here.
	    */
	    syslog( LOG_WARNING, "too many connections!" );
10005268:	38 60 00 04 	li      r3,4
1000526c:	3d 20 10 02 	lis     r9,4098
10005270:	38 89 85 74 	addi    r4,r9,-31372
10005274:	4c c6 31 82 	crclr   4*cr1+eq
10005278:	48 02 85 0d 	bl      1002d784 <syslog@plt>
	    tmr_run( tvP );
1000527c:	80 7f 00 18 	lwz     r3,24(r31)
10005280:	48 00 ea f5 	bl      10013d74 <tmr_run>
	    return 0;
10005284:	39 20 00 00 	li      r9,0
10005288:	48 00 02 34 	b       100054bc <handle_newconnect+0x288>
	    }
	/* Get the first free connection entry off the free list. */
	if ( first_free_connect == -1 || connects[first_free_connect].conn_state != CNST_FREE )
1000528c:	3d 20 10 03 	lis     r9,4099
10005290:	81 49 db 10 	lwz     r10,-9456(r9)
10005294:	39 20 ff ff 	li      r9,-1
10005298:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000529c:	41 9e 00 28 	beq     cr7,100052c4 <handle_newconnect+0x90>
100052a0:	3d 20 10 03 	lis     r9,4099
100052a4:	81 49 db 04 	lwz     r10,-9468(r9)
100052a8:	3d 20 10 03 	lis     r9,4099
100052ac:	81 29 db 10 	lwz     r9,-9456(r9)
100052b0:	1d 29 00 60 	mulli   r9,r9,96
100052b4:	7d 2a 4a 14 	add     r9,r10,r9
100052b8:	81 29 00 00 	lwz     r9,0(r9)
100052bc:	2f 89 00 00 	cmpwi   cr7,r9,0
100052c0:	41 9e 00 20 	beq     cr7,100052e0 <handle_newconnect+0xac>
	    {
	    syslog( LOG_CRIT, "the connects free list is messed up" );
100052c4:	38 60 00 02 	li      r3,2
100052c8:	3d 20 10 02 	lis     r9,4098
100052cc:	38 89 85 8c 	addi    r4,r9,-31348
100052d0:	4c c6 31 82 	crclr   4*cr1+eq
100052d4:	48 02 84 b1 	bl      1002d784 <syslog@plt>
	    exit( 1 );
100052d8:	38 60 00 01 	li      r3,1
100052dc:	48 02 82 f9 	bl      1002d5d4 <exit@plt>
	    }
	c = &connects[first_free_connect];
100052e0:	3d 20 10 03 	lis     r9,4099
100052e4:	81 49 db 04 	lwz     r10,-9468(r9)
100052e8:	3d 20 10 03 	lis     r9,4099
100052ec:	81 29 db 10 	lwz     r9,-9456(r9)
100052f0:	1d 29 00 60 	mulli   r9,r9,96
100052f4:	7d 2a 4a 14 	add     r9,r10,r9
100052f8:	91 3f 00 08 	stw     r9,8(r31)
	/* Make the httpd_conn if necessary. */
	if ( c->hc == (httpd_conn*) 0 )
100052fc:	81 3f 00 08 	lwz     r9,8(r31)
10005300:	81 29 00 08 	lwz     r9,8(r9)
10005304:	2f 89 00 00 	cmpwi   cr7,r9,0
10005308:	40 9e 00 6c 	bne     cr7,10005374 <handle_newconnect+0x140>
	    {
	    c->hc = NEW( httpd_conn, 1 );
1000530c:	38 60 01 c8 	li      r3,456
10005310:	48 02 82 95 	bl      1002d5a4 <malloc@plt>
10005314:	7c 69 1b 78 	mr      r9,r3
10005318:	7d 2a 4b 78 	mr      r10,r9
1000531c:	81 3f 00 08 	lwz     r9,8(r31)
10005320:	91 49 00 08 	stw     r10,8(r9)
	    if ( c->hc == (httpd_conn*) 0 )
10005324:	81 3f 00 08 	lwz     r9,8(r31)
10005328:	81 29 00 08 	lwz     r9,8(r9)
1000532c:	2f 89 00 00 	cmpwi   cr7,r9,0
10005330:	40 9e 00 20 	bne     cr7,10005350 <handle_newconnect+0x11c>
		{
		syslog( LOG_CRIT, "out of memory allocating an httpd_conn" );
10005334:	38 60 00 02 	li      r3,2
10005338:	3d 20 10 02 	lis     r9,4098
1000533c:	38 89 85 b0 	addi    r4,r9,-31312
10005340:	4c c6 31 82 	crclr   4*cr1+eq
10005344:	48 02 84 41 	bl      1002d784 <syslog@plt>
		exit( 1 );
10005348:	38 60 00 01 	li      r3,1
1000534c:	48 02 82 89 	bl      1002d5d4 <exit@plt>
		}
	    c->hc->initialized = 0;
10005350:	81 3f 00 08 	lwz     r9,8(r31)
10005354:	81 29 00 08 	lwz     r9,8(r9)
10005358:	39 40 00 00 	li      r10,0
1000535c:	91 49 00 00 	stw     r10,0(r9)
	    ++httpd_conn_count;
10005360:	3d 20 10 03 	lis     r9,4099
10005364:	81 29 db 14 	lwz     r9,-9452(r9)
10005368:	39 49 00 01 	addi    r10,r9,1
1000536c:	3d 20 10 03 	lis     r9,4099
10005370:	91 49 db 14 	stw     r10,-9452(r9)
	    }

	/* Get the connection. */
	switch ( httpd_get_conn( hs, listen_fd, c->hc ) )
10005374:	3d 20 10 03 	lis     r9,4099
10005378:	81 49 db 18 	lwz     r10,-9448(r9)
1000537c:	81 3f 00 08 	lwz     r9,8(r31)
10005380:	81 29 00 08 	lwz     r9,8(r9)
10005384:	7d 43 53 78 	mr      r3,r10
10005388:	80 9f 00 1c 	lwz     r4,28(r31)
1000538c:	7d 25 4b 78 	mr      r5,r9
10005390:	48 00 53 1d 	bl      1000a6ac <httpd_get_conn>
10005394:	7c 69 1b 78 	mr      r9,r3
10005398:	2f 89 00 00 	cmpwi   cr7,r9,0
1000539c:	41 9e 00 10 	beq     cr7,100053ac <handle_newconnect+0x178>
100053a0:	2f 89 00 02 	cmpwi   cr7,r9,2
100053a4:	41 9e 00 18 	beq     cr7,100053bc <handle_newconnect+0x188>
100053a8:	48 00 00 1c 	b       100053c4 <handle_newconnect+0x190>
	    {
	    /* Some error happened.  Run the timers, then the
	    ** existing connections.  Maybe the error will clear.
	    */
	    case GC_FAIL:
	    tmr_run( tvP );
100053ac:	80 7f 00 18 	lwz     r3,24(r31)
100053b0:	48 00 e9 c5 	bl      10013d74 <tmr_run>
	    return 0;
100053b4:	39 20 00 00 	li      r9,0
100053b8:	48 00 01 04 	b       100054bc <handle_newconnect+0x288>

	    /* No more connections to accept for now. */
	    case GC_NO_MORE:
	    return 1;
100053bc:	39 20 00 01 	li      r9,1
100053c0:	48 00 00 fc 	b       100054bc <handle_newconnect+0x288>
	    }
	c->conn_state = CNST_READING;
100053c4:	81 3f 00 08 	lwz     r9,8(r31)
100053c8:	39 40 00 01 	li      r10,1
100053cc:	91 49 00 00 	stw     r10,0(r9)
	/* Pop it off the free list. */
	first_free_connect = c->next_free_connect;
100053d0:	81 3f 00 08 	lwz     r9,8(r31)
100053d4:	81 49 00 04 	lwz     r10,4(r9)
100053d8:	3d 20 10 03 	lis     r9,4099
100053dc:	91 49 db 10 	stw     r10,-9456(r9)
	c->next_free_connect = -1;
100053e0:	81 3f 00 08 	lwz     r9,8(r31)
100053e4:	39 40 ff ff 	li      r10,-1
100053e8:	91 49 00 04 	stw     r10,4(r9)
	++num_connects;
100053ec:	3d 20 10 03 	lis     r9,4099
100053f0:	81 29 db 08 	lwz     r9,-9464(r9)
100053f4:	39 49 00 01 	addi    r10,r9,1
100053f8:	3d 20 10 03 	lis     r9,4099
100053fc:	91 49 db 08 	stw     r10,-9464(r9)
	client_data.p = c;
10005400:	81 3f 00 08 	lwz     r9,8(r31)
10005404:	91 3f 00 0c 	stw     r9,12(r31)
	c->active_at = tvP->tv_sec;
10005408:	81 3f 00 18 	lwz     r9,24(r31)
1000540c:	81 49 00 00 	lwz     r10,0(r9)
10005410:	81 3f 00 08 	lwz     r9,8(r31)
10005414:	91 49 00 44 	stw     r10,68(r9)
	c->wakeup_timer = (Timer*) 0;
10005418:	81 3f 00 08 	lwz     r9,8(r31)
1000541c:	39 40 00 00 	li      r10,0
10005420:	91 49 00 48 	stw     r10,72(r9)
	c->linger_timer = (Timer*) 0;
10005424:	81 3f 00 08 	lwz     r9,8(r31)
10005428:	39 40 00 00 	li      r10,0
1000542c:	91 49 00 4c 	stw     r10,76(r9)
	c->next_byte_index = 0;
10005430:	81 3f 00 08 	lwz     r9,8(r31)
10005434:	39 40 00 00 	li      r10,0
10005438:	91 49 00 5c 	stw     r10,92(r9)
	c->numtnums = 0;
1000543c:	81 3f 00 08 	lwz     r9,8(r31)
10005440:	39 40 00 00 	li      r10,0
10005444:	91 49 00 34 	stw     r10,52(r9)

	/* Set the connection file descriptor to no-delay mode. */
	httpd_set_ndelay( c->hc->conn_fd );
10005448:	81 3f 00 08 	lwz     r9,8(r31)
1000544c:	81 29 00 08 	lwz     r9,8(r9)
10005450:	81 29 01 c0 	lwz     r9,448(r9)
10005454:	7d 23 4b 78 	mr      r3,r9
10005458:	48 00 28 51 	bl      10007ca8 <httpd_set_ndelay>

	fdwatch_add_fd( c->hc->conn_fd, c, FDW_READ );
1000545c:	81 3f 00 08 	lwz     r9,8(r31)
10005460:	81 29 00 08 	lwz     r9,8(r9)
10005464:	81 29 01 c0 	lwz     r9,448(r9)
10005468:	7d 23 4b 78 	mr      r3,r9
1000546c:	80 9f 00 08 	lwz     r4,8(r31)
10005470:	38 a0 00 00 	li      r5,0
10005474:	48 00 c6 15 	bl      10011a88 <fdwatch_add_fd>

	++stats_connections;
10005478:	3d 20 10 03 	lis     r9,4099
1000547c:	81 29 d3 68 	lwz     r9,-11416(r9)
10005480:	39 49 00 01 	addi    r10,r9,1
10005484:	3d 20 10 03 	lis     r9,4099
10005488:	91 49 d3 68 	stw     r10,-11416(r9)
	if ( num_connects > stats_simultaneous )
1000548c:	3d 20 10 03 	lis     r9,4099
10005490:	81 49 db 08 	lwz     r10,-9464(r9)
10005494:	3d 20 10 03 	lis     r9,4099
10005498:	81 29 d3 5c 	lwz     r9,-11428(r9)
1000549c:	7f 8a 48 00 	cmpw    cr7,r10,r9
100054a0:	40 9d 00 18 	ble     cr7,100054b8 <handle_newconnect+0x284>
	    stats_simultaneous = num_connects;
100054a4:	3d 20 10 03 	lis     r9,4099
100054a8:	81 49 db 08 	lwz     r10,-9464(r9)
100054ac:	3d 20 10 03 	lis     r9,4099
100054b0:	91 49 d3 5c 	stw     r10,-11428(r9)
	}
100054b4:	4b ff fd 9c 	b       10005250 <handle_newconnect+0x1c>
100054b8:	4b ff fd 98 	b       10005250 <handle_newconnect+0x1c>
    }
100054bc:	7d 23 4b 78 	mr      r3,r9
100054c0:	39 7f 00 30 	addi    r11,r31,48
100054c4:	80 0b 00 04 	lwz     r0,4(r11)
100054c8:	7c 08 03 a6 	mtlr    r0
100054cc:	83 eb ff fc 	lwz     r31,-4(r11)
100054d0:	7d 61 5b 78 	mr      r1,r11
100054d4:	4e 80 00 20 	blr

100054d8 <handle_read>:


static void
handle_read( connecttab* c, struct timeval* tvP )
    {
100054d8:	94 21 ff d0 	stwu    r1,-48(r1)
100054dc:	7c 08 02 a6 	mflr    r0
100054e0:	90 01 00 34 	stw     r0,52(r1)
100054e4:	93 e1 00 2c 	stw     r31,44(r1)
100054e8:	7c 3f 0b 78 	mr      r31,r1
100054ec:	90 7f 00 18 	stw     r3,24(r31)
100054f0:	90 9f 00 1c 	stw     r4,28(r31)
    int sz;
    ClientData client_data;
    httpd_conn* hc = c->hc;
100054f4:	81 3f 00 18 	lwz     r9,24(r31)
100054f8:	81 29 00 08 	lwz     r9,8(r9)
100054fc:	91 3f 00 0c 	stw     r9,12(r31)

    /* Is there room in our buffer to read more bytes? */
    if ( hc->read_idx >= hc->read_size )
10005500:	81 3f 00 0c 	lwz     r9,12(r31)
10005504:	81 49 00 90 	lwz     r10,144(r9)
10005508:	81 3f 00 0c 	lwz     r9,12(r31)
1000550c:	81 29 00 8c 	lwz     r9,140(r9)
10005510:	7f 8a 48 40 	cmplw   cr7,r10,r9
10005514:	41 9c 00 84 	blt     cr7,10005598 <handle_read+0xc0>
	{
	if ( hc->read_size > 5000 )
10005518:	81 3f 00 0c 	lwz     r9,12(r31)
1000551c:	81 29 00 8c 	lwz     r9,140(r9)
10005520:	2b 89 13 88 	cmplwi  cr7,r9,5000
10005524:	40 9d 00 48 	ble     cr7,1000556c <handle_read+0x94>
	    {
	    httpd_send_err( hc, 400, httpd_err400title, "", httpd_err400form, "" );
10005528:	3d 20 10 03 	lis     r9,4099
1000552c:	81 49 d3 38 	lwz     r10,-11464(r9)
10005530:	3d 20 10 03 	lis     r9,4099
10005534:	81 29 d3 3c 	lwz     r9,-11460(r9)
10005538:	80 7f 00 0c 	lwz     r3,12(r31)
1000553c:	38 80 01 90 	li      r4,400
10005540:	7d 45 53 78 	mr      r5,r10
10005544:	3d 40 10 02 	lis     r10,4098
10005548:	38 ca 81 20 	addi    r6,r10,-32480
1000554c:	7d 27 4b 78 	mr      r7,r9
10005550:	3d 20 10 02 	lis     r9,4098
10005554:	39 09 81 20 	addi    r8,r9,-32480
10005558:	48 00 32 9d 	bl      100087f4 <httpd_send_err>
	    finish_connection( c, tvP );
1000555c:	80 7f 00 18 	lwz     r3,24(r31)
10005560:	80 9f 00 1c 	lwz     r4,28(r31)
10005564:	48 00 12 e5 	bl      10006848 <finish_connection>
	    return;
10005568:	48 00 04 34 	b       1000599c <handle_read+0x4c4>
	    }
	httpd_realloc_str(
1000556c:	81 3f 00 0c 	lwz     r9,12(r31)
10005570:	39 09 00 88 	addi    r8,r9,136
10005574:	81 3f 00 0c 	lwz     r9,12(r31)
10005578:	39 49 00 8c 	addi    r10,r9,140
	    &hc->read_buf, &hc->read_size, hc->read_size + 1000 );
1000557c:	81 3f 00 0c 	lwz     r9,12(r31)
10005580:	81 29 00 8c 	lwz     r9,140(r9)
	    {
	    httpd_send_err( hc, 400, httpd_err400title, "", httpd_err400form, "" );
	    finish_connection( c, tvP );
	    return;
	    }
	httpd_realloc_str(
10005584:	39 29 03 e8 	addi    r9,r9,1000
10005588:	7d 03 43 78 	mr      r3,r8
1000558c:	7d 44 53 78 	mr      r4,r10
10005590:	7d 25 4b 78 	mr      r5,r9
10005594:	48 00 2d 85 	bl      10008318 <httpd_realloc_str>
	    &hc->read_buf, &hc->read_size, hc->read_size + 1000 );
	}

    /* Read some more bytes. */
    sz = read(
10005598:	81 3f 00 0c 	lwz     r9,12(r31)
1000559c:	81 09 01 c0 	lwz     r8,448(r9)
	hc->conn_fd, &(hc->read_buf[hc->read_idx]),
100055a0:	81 3f 00 0c 	lwz     r9,12(r31)
100055a4:	81 49 00 88 	lwz     r10,136(r9)
100055a8:	81 3f 00 0c 	lwz     r9,12(r31)
100055ac:	81 29 00 90 	lwz     r9,144(r9)
	httpd_realloc_str(
	    &hc->read_buf, &hc->read_size, hc->read_size + 1000 );
	}

    /* Read some more bytes. */
    sz = read(
100055b0:	7d 4a 4a 14 	add     r10,r10,r9
	hc->conn_fd, &(hc->read_buf[hc->read_idx]),
	hc->read_size - hc->read_idx );
100055b4:	81 3f 00 0c 	lwz     r9,12(r31)
100055b8:	80 e9 00 8c 	lwz     r7,140(r9)
100055bc:	81 3f 00 0c 	lwz     r9,12(r31)
100055c0:	81 29 00 90 	lwz     r9,144(r9)
	httpd_realloc_str(
	    &hc->read_buf, &hc->read_size, hc->read_size + 1000 );
	}

    /* Read some more bytes. */
    sz = read(
100055c4:	7d 29 38 50 	subf    r9,r9,r7
100055c8:	7d 03 43 78 	mr      r3,r8
100055cc:	7d 44 53 78 	mr      r4,r10
100055d0:	7d 25 4b 78 	mr      r5,r9
100055d4:	48 02 7e 11 	bl      1002d3e4 <read@plt>
100055d8:	90 7f 00 10 	stw     r3,16(r31)
	hc->conn_fd, &(hc->read_buf[hc->read_idx]),
	hc->read_size - hc->read_idx );
    if ( sz == 0 )
100055dc:	81 3f 00 10 	lwz     r9,16(r31)
100055e0:	2f 89 00 00 	cmpwi   cr7,r9,0
100055e4:	40 9e 00 48 	bne     cr7,1000562c <handle_read+0x154>
	{
	httpd_send_err( hc, 400, httpd_err400title, "", httpd_err400form, "" );
100055e8:	3d 20 10 03 	lis     r9,4099
100055ec:	81 49 d3 38 	lwz     r10,-11464(r9)
100055f0:	3d 20 10 03 	lis     r9,4099
100055f4:	81 29 d3 3c 	lwz     r9,-11460(r9)
100055f8:	80 7f 00 0c 	lwz     r3,12(r31)
100055fc:	38 80 01 90 	li      r4,400
10005600:	7d 45 53 78 	mr      r5,r10
10005604:	3d 40 10 02 	lis     r10,4098
10005608:	38 ca 81 20 	addi    r6,r10,-32480
1000560c:	7d 27 4b 78 	mr      r7,r9
10005610:	3d 20 10 02 	lis     r9,4098
10005614:	39 09 81 20 	addi    r8,r9,-32480
10005618:	48 00 31 dd 	bl      100087f4 <httpd_send_err>
	finish_connection( c, tvP );
1000561c:	80 7f 00 18 	lwz     r3,24(r31)
10005620:	80 9f 00 1c 	lwz     r4,28(r31)
10005624:	48 00 12 25 	bl      10006848 <finish_connection>
	return;
10005628:	48 00 03 74 	b       1000599c <handle_read+0x4c4>
	}
    if ( sz < 0 )
1000562c:	81 3f 00 10 	lwz     r9,16(r31)
10005630:	2f 89 00 00 	cmpwi   cr7,r9,0
10005634:	40 9c 00 88 	bge     cr7,100056bc <handle_read+0x1e4>
	/* Ignore EINTR and EAGAIN.  Also ignore EWOULDBLOCK.  At first glance
	** you would think that connections returned by fdwatch as readable
	** should never give an EWOULDBLOCK; however, this apparently can
	** happen if a packet gets garbled.
	*/
	if ( errno == EINTR || errno == EAGAIN || errno == EWOULDBLOCK )
10005638:	48 02 80 a5 	bl      1002d6dc <__errno_location@plt>
1000563c:	7c 69 1b 78 	mr      r9,r3
10005640:	81 29 00 00 	lwz     r9,0(r9)
10005644:	2f 89 00 04 	cmpwi   cr7,r9,4
10005648:	41 9e 00 2c 	beq     cr7,10005674 <handle_read+0x19c>
1000564c:	48 02 80 91 	bl      1002d6dc <__errno_location@plt>
10005650:	7c 69 1b 78 	mr      r9,r3
10005654:	81 29 00 00 	lwz     r9,0(r9)
10005658:	2f 89 00 0b 	cmpwi   cr7,r9,11
1000565c:	41 9e 00 18 	beq     cr7,10005674 <handle_read+0x19c>
10005660:	48 02 80 7d 	bl      1002d6dc <__errno_location@plt>
10005664:	7c 69 1b 78 	mr      r9,r3
10005668:	81 29 00 00 	lwz     r9,0(r9)
1000566c:	2f 89 00 0b 	cmpwi   cr7,r9,11
10005670:	40 9e 00 08 	bne     cr7,10005678 <handle_read+0x1a0>
	    return;
10005674:	48 00 03 28 	b       1000599c <handle_read+0x4c4>
	httpd_send_err(
10005678:	3d 20 10 03 	lis     r9,4099
1000567c:	81 49 d3 38 	lwz     r10,-11464(r9)
10005680:	3d 20 10 03 	lis     r9,4099
10005684:	81 29 d3 3c 	lwz     r9,-11460(r9)
10005688:	80 7f 00 0c 	lwz     r3,12(r31)
1000568c:	38 80 01 90 	li      r4,400
10005690:	7d 45 53 78 	mr      r5,r10
10005694:	3d 40 10 02 	lis     r10,4098
10005698:	38 ca 81 20 	addi    r6,r10,-32480
1000569c:	7d 27 4b 78 	mr      r7,r9
100056a0:	3d 20 10 02 	lis     r9,4098
100056a4:	39 09 81 20 	addi    r8,r9,-32480
100056a8:	48 00 31 4d 	bl      100087f4 <httpd_send_err>
	    hc, 400, httpd_err400title, "", httpd_err400form, "" );
	finish_connection( c, tvP );
100056ac:	80 7f 00 18 	lwz     r3,24(r31)
100056b0:	80 9f 00 1c 	lwz     r4,28(r31)
100056b4:	48 00 11 95 	bl      10006848 <finish_connection>
	return;
100056b8:	48 00 02 e4 	b       1000599c <handle_read+0x4c4>
	}
    hc->read_idx += sz;
100056bc:	81 3f 00 0c 	lwz     r9,12(r31)
100056c0:	81 49 00 90 	lwz     r10,144(r9)
100056c4:	81 3f 00 10 	lwz     r9,16(r31)
100056c8:	7d 4a 4a 14 	add     r10,r10,r9
100056cc:	81 3f 00 0c 	lwz     r9,12(r31)
100056d0:	91 49 00 90 	stw     r10,144(r9)
    c->active_at = tvP->tv_sec;
100056d4:	81 3f 00 1c 	lwz     r9,28(r31)
100056d8:	81 49 00 00 	lwz     r10,0(r9)
100056dc:	81 3f 00 18 	lwz     r9,24(r31)
100056e0:	91 49 00 44 	stw     r10,68(r9)

    /* Do we have a complete request yet? */
    switch ( httpd_got_request( hc ) )
100056e4:	80 7f 00 0c 	lwz     r3,12(r31)
100056e8:	48 00 56 31 	bl      1000ad18 <httpd_got_request>
100056ec:	7c 69 1b 78 	mr      r9,r3
100056f0:	2f 89 00 00 	cmpwi   cr7,r9,0
100056f4:	41 9e 02 a4 	beq     cr7,10005998 <handle_read+0x4c0>
100056f8:	2f 89 00 02 	cmpwi   cr7,r9,2
100056fc:	40 9e 00 48 	bne     cr7,10005744 <handle_read+0x26c>
	{
	case GR_NO_REQUEST:
	return;
	case GR_BAD_REQUEST:
	httpd_send_err( hc, 400, httpd_err400title, "", httpd_err400form, "" );
10005700:	3d 20 10 03 	lis     r9,4099
10005704:	81 49 d3 38 	lwz     r10,-11464(r9)
10005708:	3d 20 10 03 	lis     r9,4099
1000570c:	81 29 d3 3c 	lwz     r9,-11460(r9)
10005710:	80 7f 00 0c 	lwz     r3,12(r31)
10005714:	38 80 01 90 	li      r4,400
10005718:	7d 45 53 78 	mr      r5,r10
1000571c:	3d 40 10 02 	lis     r10,4098
10005720:	38 ca 81 20 	addi    r6,r10,-32480
10005724:	7d 27 4b 78 	mr      r7,r9
10005728:	3d 20 10 02 	lis     r9,4098
1000572c:	39 09 81 20 	addi    r8,r9,-32480
10005730:	48 00 30 c5 	bl      100087f4 <httpd_send_err>
	finish_connection( c, tvP );
10005734:	80 7f 00 18 	lwz     r3,24(r31)
10005738:	80 9f 00 1c 	lwz     r4,28(r31)
1000573c:	48 00 11 0d 	bl      10006848 <finish_connection>
	return;
10005740:	48 00 02 5c 	b       1000599c <handle_read+0x4c4>
	}

    /* Yes.  Try parsing and resolving it. */
    if ( httpd_parse_request( hc ) < 0 )
10005744:	80 7f 00 0c 	lwz     r3,12(r31)
10005748:	48 00 5a 2d 	bl      1000b174 <httpd_parse_request>
1000574c:	7c 69 1b 78 	mr      r9,r3
10005750:	2f 89 00 00 	cmpwi   cr7,r9,0
10005754:	40 9c 00 14 	bge     cr7,10005768 <handle_read+0x290>
	{
	finish_connection( c, tvP );
10005758:	80 7f 00 18 	lwz     r3,24(r31)
1000575c:	80 9f 00 1c 	lwz     r4,28(r31)
10005760:	48 00 10 e9 	bl      10006848 <finish_connection>
	return;
10005764:	48 00 02 38 	b       1000599c <handle_read+0x4c4>
	}

    /* Check the throttle table */
    if ( ! check_throttles( c ) )
10005768:	80 7f 00 18 	lwz     r3,24(r31)
1000576c:	48 00 08 f1 	bl      1000605c <check_throttles>
10005770:	7c 69 1b 78 	mr      r9,r3
10005774:	2f 89 00 00 	cmpwi   cr7,r9,0
10005778:	40 9e 00 4c 	bne     cr7,100057c4 <handle_read+0x2ec>
	{
	httpd_send_err(
1000577c:	3d 20 10 03 	lis     r9,4099
10005780:	81 09 d3 48 	lwz     r8,-11448(r9)
10005784:	3d 20 10 03 	lis     r9,4099
10005788:	81 49 d3 4c 	lwz     r10,-11444(r9)
1000578c:	81 3f 00 0c 	lwz     r9,12(r31)
10005790:	81 29 00 ac 	lwz     r9,172(r9)
10005794:	80 7f 00 0c 	lwz     r3,12(r31)
10005798:	38 80 01 f7 	li      r4,503
1000579c:	7d 05 43 78 	mr      r5,r8
100057a0:	3d 00 10 02 	lis     r8,4098
100057a4:	38 c8 81 20 	addi    r6,r8,-32480
100057a8:	7d 47 53 78 	mr      r7,r10
100057ac:	7d 28 4b 78 	mr      r8,r9
100057b0:	48 00 30 45 	bl      100087f4 <httpd_send_err>
	    hc, 503, httpd_err503title, "", httpd_err503form, hc->encodedurl );
	finish_connection( c, tvP );
100057b4:	80 7f 00 18 	lwz     r3,24(r31)
100057b8:	80 9f 00 1c 	lwz     r4,28(r31)
100057bc:	48 00 10 8d 	bl      10006848 <finish_connection>
	return;
100057c0:	48 00 01 dc 	b       1000599c <handle_read+0x4c4>
	}

    /* Start the connection going. */
    if ( httpd_start_request( hc, tvP ) < 0 )
100057c4:	80 7f 00 0c 	lwz     r3,12(r31)
100057c8:	80 9f 00 1c 	lwz     r4,28(r31)
100057cc:	48 00 b3 29 	bl      10010af4 <httpd_start_request>
100057d0:	7c 69 1b 78 	mr      r9,r3
100057d4:	2f 89 00 00 	cmpwi   cr7,r9,0
100057d8:	40 9c 00 14 	bge     cr7,100057ec <handle_read+0x314>
	{
	/* Something went wrong.  Close down the connection. */
	finish_connection( c, tvP );
100057dc:	80 7f 00 18 	lwz     r3,24(r31)
100057e0:	80 9f 00 1c 	lwz     r4,28(r31)
100057e4:	48 00 10 65 	bl      10006848 <finish_connection>
	return;
100057e8:	48 00 01 b4 	b       1000599c <handle_read+0x4c4>
	}

    /* Fill in end_byte_index. */
    if ( hc->got_range )
100057ec:	81 3f 00 0c 	lwz     r9,12(r31)
100057f0:	81 29 01 50 	lwz     r9,336(r9)
100057f4:	2f 89 00 00 	cmpwi   cr7,r9,0
100057f8:	41 9e 00 2c 	beq     cr7,10005824 <handle_read+0x34c>
	{
	c->next_byte_index = hc->first_byte_index;
100057fc:	81 3f 00 0c 	lwz     r9,12(r31)
10005800:	81 49 01 58 	lwz     r10,344(r9)
10005804:	81 3f 00 18 	lwz     r9,24(r31)
10005808:	91 49 00 5c 	stw     r10,92(r9)
	c->end_byte_index = hc->last_byte_index + 1;
1000580c:	81 3f 00 0c 	lwz     r9,12(r31)
10005810:	81 29 01 5c 	lwz     r9,348(r9)
10005814:	39 49 00 01 	addi    r10,r9,1
10005818:	81 3f 00 18 	lwz     r9,24(r31)
1000581c:	91 49 00 58 	stw     r10,88(r9)
10005820:	48 00 00 34 	b       10005854 <handle_read+0x37c>
	}
    else if ( hc->bytes_to_send < 0 )
10005824:	81 3f 00 0c 	lwz     r9,12(r31)
10005828:	81 29 00 a4 	lwz     r9,164(r9)
1000582c:	2f 89 00 00 	cmpwi   cr7,r9,0
10005830:	40 9c 00 14 	bge     cr7,10005844 <handle_read+0x36c>
	c->end_byte_index = 0;
10005834:	81 3f 00 18 	lwz     r9,24(r31)
10005838:	39 40 00 00 	li      r10,0
1000583c:	91 49 00 58 	stw     r10,88(r9)
10005840:	48 00 00 14 	b       10005854 <handle_read+0x37c>
    else
	c->end_byte_index = hc->bytes_to_send;
10005844:	81 3f 00 0c 	lwz     r9,12(r31)
10005848:	81 49 00 a4 	lwz     r10,164(r9)
1000584c:	81 3f 00 18 	lwz     r9,24(r31)
10005850:	91 49 00 58 	stw     r10,88(r9)

    /* Check if it's already handled. */
    if ( hc->file_address == (char*) 0 )
10005854:	81 3f 00 0c 	lwz     r9,12(r31)
10005858:	81 29 01 c4 	lwz     r9,452(r9)
1000585c:	2f 89 00 00 	cmpwi   cr7,r9,0
10005860:	40 9e 00 b4 	bne     cr7,10005914 <handle_read+0x43c>
	{
	/* No file address means someone else is handling it. */
	int tind;
	for ( tind = 0; tind < c->numtnums; ++tind )
10005864:	39 20 00 00 	li      r9,0
10005868:	91 3f 00 08 	stw     r9,8(r31)
1000586c:	48 00 00 74 	b       100058e0 <handle_read+0x408>
	    throttles[c->tnums[tind]].bytes_since_avg += hc->bytes_sent;
10005870:	3d 20 10 03 	lis     r9,4099
10005874:	81 49 da f8 	lwz     r10,-9480(r9)
10005878:	81 1f 00 18 	lwz     r8,24(r31)
1000587c:	81 3f 00 08 	lwz     r9,8(r31)
10005880:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10005884:	7d 28 4a 14 	add     r9,r8,r9
10005888:	39 29 00 0c 	addi    r9,r9,12
1000588c:	81 29 00 00 	lwz     r9,0(r9)
10005890:	1d 29 00 18 	mulli   r9,r9,24
10005894:	7d 2a 4a 14 	add     r9,r10,r9
10005898:	3d 40 10 03 	lis     r10,4099
1000589c:	81 0a da f8 	lwz     r8,-9480(r10)
100058a0:	80 ff 00 18 	lwz     r7,24(r31)
100058a4:	81 5f 00 08 	lwz     r10,8(r31)
100058a8:	55 4a 10 3a 	rlwinm  r10,r10,2,0,29
100058ac:	7d 47 52 14 	add     r10,r7,r10
100058b0:	39 4a 00 0c 	addi    r10,r10,12
100058b4:	81 4a 00 00 	lwz     r10,0(r10)
100058b8:	1d 4a 00 18 	mulli   r10,r10,24
100058bc:	7d 48 52 14 	add     r10,r8,r10
100058c0:	81 0a 00 10 	lwz     r8,16(r10)
100058c4:	81 5f 00 0c 	lwz     r10,12(r31)
100058c8:	81 4a 00 a8 	lwz     r10,168(r10)
100058cc:	7d 48 52 14 	add     r10,r8,r10
100058d0:	91 49 00 10 	stw     r10,16(r9)
    /* Check if it's already handled. */
    if ( hc->file_address == (char*) 0 )
	{
	/* No file address means someone else is handling it. */
	int tind;
	for ( tind = 0; tind < c->numtnums; ++tind )
100058d4:	81 3f 00 08 	lwz     r9,8(r31)
100058d8:	39 29 00 01 	addi    r9,r9,1
100058dc:	91 3f 00 08 	stw     r9,8(r31)
100058e0:	81 3f 00 18 	lwz     r9,24(r31)
100058e4:	81 49 00 34 	lwz     r10,52(r9)
100058e8:	81 3f 00 08 	lwz     r9,8(r31)
100058ec:	7f 8a 48 00 	cmpw    cr7,r10,r9
100058f0:	41 9d ff 80 	bgt     cr7,10005870 <handle_read+0x398>
	    throttles[c->tnums[tind]].bytes_since_avg += hc->bytes_sent;
	c->next_byte_index = hc->bytes_sent;
100058f4:	81 3f 00 0c 	lwz     r9,12(r31)
100058f8:	81 49 00 a8 	lwz     r10,168(r9)
100058fc:	81 3f 00 18 	lwz     r9,24(r31)
10005900:	91 49 00 5c 	stw     r10,92(r9)
	finish_connection( c, tvP );
10005904:	80 7f 00 18 	lwz     r3,24(r31)
10005908:	80 9f 00 1c 	lwz     r4,28(r31)
1000590c:	48 00 0f 3d 	bl      10006848 <finish_connection>
	return;
10005910:	48 00 00 8c 	b       1000599c <handle_read+0x4c4>
	}
    if ( c->next_byte_index >= c->end_byte_index )
10005914:	81 3f 00 18 	lwz     r9,24(r31)
10005918:	81 49 00 5c 	lwz     r10,92(r9)
1000591c:	81 3f 00 18 	lwz     r9,24(r31)
10005920:	81 29 00 58 	lwz     r9,88(r9)
10005924:	7f 8a 48 00 	cmpw    cr7,r10,r9
10005928:	41 9c 00 14 	blt     cr7,1000593c <handle_read+0x464>
	{
	/* There's nothing to send. */
	finish_connection( c, tvP );
1000592c:	80 7f 00 18 	lwz     r3,24(r31)
10005930:	80 9f 00 1c 	lwz     r4,28(r31)
10005934:	48 00 0f 15 	bl      10006848 <finish_connection>
	return;
10005938:	48 00 00 64 	b       1000599c <handle_read+0x4c4>
	}

    /* Cool, we have a valid connection and a file to send to it. */
    c->conn_state = CNST_SENDING;
1000593c:	81 3f 00 18 	lwz     r9,24(r31)
10005940:	39 40 00 02 	li      r10,2
10005944:	91 49 00 00 	stw     r10,0(r9)
    c->started_at = tvP->tv_sec;
10005948:	81 3f 00 1c 	lwz     r9,28(r31)
1000594c:	81 49 00 00 	lwz     r10,0(r9)
10005950:	81 3f 00 18 	lwz     r9,24(r31)
10005954:	91 49 00 40 	stw     r10,64(r9)
    c->wouldblock_delay = 0;
10005958:	81 3f 00 18 	lwz     r9,24(r31)
1000595c:	39 40 00 00 	li      r10,0
10005960:	91 49 00 50 	stw     r10,80(r9)
    client_data.p = c;
10005964:	81 3f 00 18 	lwz     r9,24(r31)
10005968:	91 3f 00 14 	stw     r9,20(r31)

    fdwatch_del_fd( hc->conn_fd );
1000596c:	81 3f 00 0c 	lwz     r9,12(r31)
10005970:	81 29 01 c0 	lwz     r9,448(r9)
10005974:	7d 23 4b 78 	mr      r3,r9
10005978:	48 00 c1 ed 	bl      10011b64 <fdwatch_del_fd>
    fdwatch_add_fd( hc->conn_fd, c, FDW_WRITE );
1000597c:	81 3f 00 0c 	lwz     r9,12(r31)
10005980:	81 29 01 c0 	lwz     r9,448(r9)
10005984:	7d 23 4b 78 	mr      r3,r9
10005988:	80 9f 00 18 	lwz     r4,24(r31)
1000598c:	38 a0 00 01 	li      r5,1
10005990:	48 00 c0 f9 	bl      10011a88 <fdwatch_add_fd>
10005994:	48 00 00 08 	b       1000599c <handle_read+0x4c4>

    /* Do we have a complete request yet? */
    switch ( httpd_got_request( hc ) )
	{
	case GR_NO_REQUEST:
	return;
10005998:	60 00 00 00 	nop
    c->wouldblock_delay = 0;
    client_data.p = c;

    fdwatch_del_fd( hc->conn_fd );
    fdwatch_add_fd( hc->conn_fd, c, FDW_WRITE );
    }
1000599c:	39 7f 00 30 	addi    r11,r31,48
100059a0:	80 0b 00 04 	lwz     r0,4(r11)
100059a4:	7c 08 03 a6 	mtlr    r0
100059a8:	83 eb ff fc 	lwz     r31,-4(r11)
100059ac:	7d 61 5b 78 	mr      r1,r11
100059b0:	4e 80 00 20 	blr

100059b4 <handle_send>:


static void
handle_send( connecttab* c, struct timeval* tvP )
    {
100059b4:	94 21 ff b0 	stwu    r1,-80(r1)
100059b8:	7c 08 02 a6 	mflr    r0
100059bc:	90 01 00 54 	stw     r0,84(r1)
100059c0:	93 e1 00 4c 	stw     r31,76(r1)
100059c4:	7c 3f 0b 78 	mr      r31,r1
100059c8:	90 7f 00 38 	stw     r3,56(r31)
100059cc:	90 9f 00 3c 	stw     r4,60(r31)
    size_t max_bytes;
    int sz, coast;
    ClientData client_data;
    time_t elapsed;
    httpd_conn* hc = c->hc;
100059d0:	81 3f 00 38 	lwz     r9,56(r31)
100059d4:	81 29 00 08 	lwz     r9,8(r9)
100059d8:	91 3f 00 18 	stw     r9,24(r31)
    int tind;

    if ( c->max_limit == THROTTLE_NOLIMIT )
100059dc:	81 3f 00 38 	lwz     r9,56(r31)
100059e0:	81 49 00 38 	lwz     r10,56(r9)
100059e4:	39 20 ff ff 	li      r9,-1
100059e8:	7f 8a 48 00 	cmpw    cr7,r10,r9
100059ec:	40 9e 00 14 	bne     cr7,10005a00 <handle_send+0x4c>
	max_bytes = 1000000000L;
100059f0:	3d 20 3b 9a 	lis     r9,15258
100059f4:	61 29 ca 00 	ori     r9,r9,51712
100059f8:	91 3f 00 08 	stw     r9,8(r31)
100059fc:	48 00 00 18 	b       10005a14 <handle_send+0x60>
    else
	max_bytes = c->max_limit / 4;	/* send at most 1/4 seconds worth */
10005a00:	81 3f 00 38 	lwz     r9,56(r31)
10005a04:	81 29 00 38 	lwz     r9,56(r9)
10005a08:	7d 29 16 70 	srawi   r9,r9,2
10005a0c:	7d 29 01 94 	addze   r9,r9
10005a10:	91 3f 00 08 	stw     r9,8(r31)

    /* Do we need to write the headers first? */
    if ( hc->responselen == 0 )
10005a14:	81 3f 00 18 	lwz     r9,24(r31)
10005a18:	81 29 01 30 	lwz     r9,304(r9)
10005a1c:	2f 89 00 00 	cmpwi   cr7,r9,0
10005a20:	40 9e 00 5c 	bne     cr7,10005a7c <handle_send+0xc8>
	{
	/* No, just write the file. */
	sz = write(
10005a24:	81 3f 00 18 	lwz     r9,24(r31)
10005a28:	80 e9 01 c0 	lwz     r7,448(r9)
	    hc->conn_fd, &(hc->file_address[c->next_byte_index]),
10005a2c:	81 3f 00 18 	lwz     r9,24(r31)
10005a30:	81 49 01 c4 	lwz     r10,452(r9)
10005a34:	81 3f 00 38 	lwz     r9,56(r31)
10005a38:	81 29 00 5c 	lwz     r9,92(r9)

    /* Do we need to write the headers first? */
    if ( hc->responselen == 0 )
	{
	/* No, just write the file. */
	sz = write(
10005a3c:	7d 0a 4a 14 	add     r8,r10,r9
	    hc->conn_fd, &(hc->file_address[c->next_byte_index]),
	    MIN( c->end_byte_index - c->next_byte_index, max_bytes ) );
10005a40:	81 3f 00 38 	lwz     r9,56(r31)
10005a44:	81 49 00 58 	lwz     r10,88(r9)
10005a48:	81 3f 00 38 	lwz     r9,56(r31)
10005a4c:	81 29 00 5c 	lwz     r9,92(r9)
10005a50:	7d 29 50 50 	subf    r9,r9,r10
10005a54:	81 5f 00 08 	lwz     r10,8(r31)
10005a58:	7f 89 50 40 	cmplw   cr7,r9,r10
10005a5c:	40 9d 00 08 	ble     cr7,10005a64 <handle_send+0xb0>
10005a60:	7d 49 53 78 	mr      r9,r10

    /* Do we need to write the headers first? */
    if ( hc->responselen == 0 )
	{
	/* No, just write the file. */
	sz = write(
10005a64:	7c e3 3b 78 	mr      r3,r7
10005a68:	7d 04 43 78 	mr      r4,r8
10005a6c:	7d 25 4b 78 	mr      r5,r9
10005a70:	48 02 7c 05 	bl      1002d674 <write@plt>
10005a74:	90 7f 00 0c 	stw     r3,12(r31)
10005a78:	48 00 00 7c 	b       10005af4 <handle_send+0x140>
	/* Yes.  We'll combine headers and file into a single writev(),
	** hoping that this generates a single packet.
	*/
	struct iovec iv[2];

	iv[0].iov_base = hc->response;
10005a7c:	81 3f 00 18 	lwz     r9,24(r31)
10005a80:	81 29 00 fc 	lwz     r9,252(r9)
10005a84:	91 3f 00 28 	stw     r9,40(r31)
	iv[0].iov_len = hc->responselen;
10005a88:	81 3f 00 18 	lwz     r9,24(r31)
10005a8c:	81 29 01 30 	lwz     r9,304(r9)
10005a90:	91 3f 00 2c 	stw     r9,44(r31)
	iv[1].iov_base = &(hc->file_address[c->next_byte_index]);
10005a94:	81 3f 00 18 	lwz     r9,24(r31)
10005a98:	81 49 01 c4 	lwz     r10,452(r9)
10005a9c:	81 3f 00 38 	lwz     r9,56(r31)
10005aa0:	81 29 00 5c 	lwz     r9,92(r9)
10005aa4:	7d 2a 4a 14 	add     r9,r10,r9
10005aa8:	91 3f 00 30 	stw     r9,48(r31)
	iv[1].iov_len = MIN( c->end_byte_index - c->next_byte_index, max_bytes );
10005aac:	81 3f 00 38 	lwz     r9,56(r31)
10005ab0:	81 49 00 58 	lwz     r10,88(r9)
10005ab4:	81 3f 00 38 	lwz     r9,56(r31)
10005ab8:	81 29 00 5c 	lwz     r9,92(r9)
10005abc:	7d 29 50 50 	subf    r9,r9,r10
10005ac0:	81 5f 00 08 	lwz     r10,8(r31)
10005ac4:	7f 89 50 40 	cmplw   cr7,r9,r10
10005ac8:	40 9d 00 08 	ble     cr7,10005ad0 <handle_send+0x11c>
10005acc:	7d 49 53 78 	mr      r9,r10
10005ad0:	91 3f 00 34 	stw     r9,52(r31)
	sz = writev( hc->conn_fd, iv, 2 );
10005ad4:	81 3f 00 18 	lwz     r9,24(r31)
10005ad8:	81 49 01 c0 	lwz     r10,448(r9)
10005adc:	39 3f 00 28 	addi    r9,r31,40
10005ae0:	7d 43 53 78 	mr      r3,r10
10005ae4:	7d 24 4b 78 	mr      r4,r9
10005ae8:	38 a0 00 02 	li      r5,2
10005aec:	48 02 7b e9 	bl      1002d6d4 <writev@plt>
10005af0:	90 7f 00 0c 	stw     r3,12(r31)
	}

    if ( sz < 0 && errno == EINTR )
10005af4:	81 3f 00 0c 	lwz     r9,12(r31)
10005af8:	2f 89 00 00 	cmpwi   cr7,r9,0
10005afc:	40 9c 00 1c 	bge     cr7,10005b18 <handle_send+0x164>
10005b00:	48 02 7b dd 	bl      1002d6dc <__errno_location@plt>
10005b04:	7c 69 1b 78 	mr      r9,r3
10005b08:	81 29 00 00 	lwz     r9,0(r9)
10005b0c:	2f 89 00 04 	cmpwi   cr7,r9,4
10005b10:	40 9e 00 08 	bne     cr7,10005b18 <handle_send+0x164>
	return;
10005b14:	48 00 04 8c 	b       10005fa0 <handle_send+0x5ec>

    if ( sz == 0 ||
10005b18:	81 3f 00 0c 	lwz     r9,12(r31)
10005b1c:	2f 89 00 00 	cmpwi   cr7,r9,0
10005b20:	41 9e 00 38 	beq     cr7,10005b58 <handle_send+0x1a4>
10005b24:	81 3f 00 0c 	lwz     r9,12(r31)
10005b28:	2f 89 00 00 	cmpwi   cr7,r9,0
10005b2c:	40 9c 00 f4 	bge     cr7,10005c20 <handle_send+0x26c>
	 ( sz < 0 && ( errno == EWOULDBLOCK || errno == EAGAIN ) ) )
10005b30:	48 02 7b ad 	bl      1002d6dc <__errno_location@plt>
10005b34:	7c 69 1b 78 	mr      r9,r3
10005b38:	81 29 00 00 	lwz     r9,0(r9)
10005b3c:	2f 89 00 0b 	cmpwi   cr7,r9,11
10005b40:	41 9e 00 18 	beq     cr7,10005b58 <handle_send+0x1a4>
10005b44:	48 02 7b 99 	bl      1002d6dc <__errno_location@plt>
10005b48:	7c 69 1b 78 	mr      r9,r3
10005b4c:	81 29 00 00 	lwz     r9,0(r9)
10005b50:	2f 89 00 0b 	cmpwi   cr7,r9,11
10005b54:	40 9e 00 cc 	bne     cr7,10005c20 <handle_send+0x26c>
	** Current workaround is to block sending on this
	** socket for a brief adaptively-tuned period.
	** Fortunately we already have all the necessary
	** blocking code, for use with throttling.
	*/
	c->wouldblock_delay += MIN_WOULDBLOCK_DELAY;
10005b58:	81 3f 00 38 	lwz     r9,56(r31)
10005b5c:	81 29 00 50 	lwz     r9,80(r9)
10005b60:	39 49 00 64 	addi    r10,r9,100
10005b64:	81 3f 00 38 	lwz     r9,56(r31)
10005b68:	91 49 00 50 	stw     r10,80(r9)
	c->conn_state = CNST_PAUSING;
10005b6c:	81 3f 00 38 	lwz     r9,56(r31)
10005b70:	39 40 00 03 	li      r10,3
10005b74:	91 49 00 00 	stw     r10,0(r9)
	fdwatch_del_fd( hc->conn_fd );
10005b78:	81 3f 00 18 	lwz     r9,24(r31)
10005b7c:	81 29 01 c0 	lwz     r9,448(r9)
10005b80:	7d 23 4b 78 	mr      r3,r9
10005b84:	48 00 bf e1 	bl      10011b64 <fdwatch_del_fd>
	client_data.p = c;
10005b88:	81 3f 00 38 	lwz     r9,56(r31)
10005b8c:	91 3f 00 24 	stw     r9,36(r31)
	if ( c->wakeup_timer != (Timer*) 0 )
10005b90:	81 3f 00 38 	lwz     r9,56(r31)
10005b94:	81 29 00 48 	lwz     r9,72(r9)
10005b98:	2f 89 00 00 	cmpwi   cr7,r9,0
10005b9c:	41 9e 00 18 	beq     cr7,10005bb4 <handle_send+0x200>
	    syslog( LOG_ERR, "replacing non-null wakeup_timer!" );
10005ba0:	38 60 00 03 	li      r3,3
10005ba4:	3d 20 10 02 	lis     r9,4098
10005ba8:	38 89 85 d8 	addi    r4,r9,-31272
10005bac:	4c c6 31 82 	crclr   4*cr1+eq
10005bb0:	48 02 7b d5 	bl      1002d784 <syslog@plt>
	c->wakeup_timer = tmr_create(
10005bb4:	81 3f 00 38 	lwz     r9,56(r31)
10005bb8:	81 29 00 50 	lwz     r9,80(r9)
10005bbc:	81 5f 00 24 	lwz     r10,36(r31)
10005bc0:	91 5f 00 40 	stw     r10,64(r31)
10005bc4:	39 5f 00 40 	addi    r10,r31,64
10005bc8:	80 7f 00 3c 	lwz     r3,60(r31)
10005bcc:	3d 00 10 00 	lis     r8,4096
10005bd0:	38 88 6c f8 	addi    r4,r8,27896
10005bd4:	7d 45 53 78 	mr      r5,r10
10005bd8:	7d 26 4b 78 	mr      r6,r9
10005bdc:	38 e0 00 00 	li      r7,0
10005be0:	48 00 dd 55 	bl      10013934 <tmr_create>
10005be4:	7c 6a 1b 78 	mr      r10,r3
10005be8:	81 3f 00 38 	lwz     r9,56(r31)
10005bec:	91 49 00 48 	stw     r10,72(r9)
	    tvP, wakeup_connection, client_data, c->wouldblock_delay, 0 );
	if ( c->wakeup_timer == (Timer*) 0 )
10005bf0:	81 3f 00 38 	lwz     r9,56(r31)
10005bf4:	81 29 00 48 	lwz     r9,72(r9)
10005bf8:	2f 89 00 00 	cmpwi   cr7,r9,0
10005bfc:	40 9e 00 20 	bne     cr7,10005c1c <handle_send+0x268>
	    {
	    syslog( LOG_CRIT, "tmr_create(wakeup_connection) failed" );
10005c00:	38 60 00 02 	li      r3,2
10005c04:	3d 20 10 02 	lis     r9,4098
10005c08:	38 89 85 fc 	addi    r4,r9,-31236
10005c0c:	4c c6 31 82 	crclr   4*cr1+eq
10005c10:	48 02 7b 75 	bl      1002d784 <syslog@plt>
	    exit( 1 );
10005c14:	38 60 00 01 	li      r3,1
10005c18:	48 02 79 bd 	bl      1002d5d4 <exit@plt>
	    }
	return;
10005c1c:	48 00 03 84 	b       10005fa0 <handle_send+0x5ec>
	}

    if ( sz < 0 )
10005c20:	81 3f 00 0c 	lwz     r9,12(r31)
10005c24:	2f 89 00 00 	cmpwi   cr7,r9,0
10005c28:	40 9c 00 70 	bge     cr7,10005c98 <handle_send+0x2e4>
	** Dunno why, something to do with the socket going
	** bad.  Anyway, we don't log those either.
	**
	** And ECONNRESET isn't interesting either.
	*/
	if ( errno != EPIPE && errno != EINVAL && errno != ECONNRESET )
10005c2c:	48 02 7a b1 	bl      1002d6dc <__errno_location@plt>
10005c30:	7c 69 1b 78 	mr      r9,r3
10005c34:	81 29 00 00 	lwz     r9,0(r9)
10005c38:	2f 89 00 20 	cmpwi   cr7,r9,32
10005c3c:	41 9e 00 4c 	beq     cr7,10005c88 <handle_send+0x2d4>
10005c40:	48 02 7a 9d 	bl      1002d6dc <__errno_location@plt>
10005c44:	7c 69 1b 78 	mr      r9,r3
10005c48:	81 29 00 00 	lwz     r9,0(r9)
10005c4c:	2f 89 00 16 	cmpwi   cr7,r9,22
10005c50:	41 9e 00 38 	beq     cr7,10005c88 <handle_send+0x2d4>
10005c54:	48 02 7a 89 	bl      1002d6dc <__errno_location@plt>
10005c58:	7c 69 1b 78 	mr      r9,r3
10005c5c:	81 29 00 00 	lwz     r9,0(r9)
10005c60:	2f 89 00 68 	cmpwi   cr7,r9,104
10005c64:	41 9e 00 24 	beq     cr7,10005c88 <handle_send+0x2d4>
	    syslog( LOG_ERR, "write - %m sending %.80s", hc->encodedurl );
10005c68:	81 3f 00 18 	lwz     r9,24(r31)
10005c6c:	81 29 00 ac 	lwz     r9,172(r9)
10005c70:	38 60 00 03 	li      r3,3
10005c74:	3d 40 10 02 	lis     r10,4098
10005c78:	38 8a 86 24 	addi    r4,r10,-31196
10005c7c:	7d 25 4b 78 	mr      r5,r9
10005c80:	4c c6 31 82 	crclr   4*cr1+eq
10005c84:	48 02 7b 01 	bl      1002d784 <syslog@plt>
	clear_connection( c, tvP );
10005c88:	80 7f 00 38 	lwz     r3,56(r31)
10005c8c:	80 9f 00 3c 	lwz     r4,60(r31)
10005c90:	48 00 0c 09 	bl      10006898 <clear_connection>
	return;
10005c94:	48 00 03 0c 	b       10005fa0 <handle_send+0x5ec>
	}

    /* Ok, we wrote something. */
    c->active_at = tvP->tv_sec;
10005c98:	81 3f 00 3c 	lwz     r9,60(r31)
10005c9c:	81 49 00 00 	lwz     r10,0(r9)
10005ca0:	81 3f 00 38 	lwz     r9,56(r31)
10005ca4:	91 49 00 44 	stw     r10,68(r9)
    /* Was this a headers + file writev()? */
    if ( hc->responselen > 0 )
10005ca8:	81 3f 00 18 	lwz     r9,24(r31)
10005cac:	81 29 01 30 	lwz     r9,304(r9)
10005cb0:	2f 89 00 00 	cmpwi   cr7,r9,0
10005cb4:	41 9e 00 90 	beq     cr7,10005d44 <handle_send+0x390>
	{
	/* Yes; did we write only part of the headers? */
	if ( sz < hc->responselen )
10005cb8:	81 5f 00 0c 	lwz     r10,12(r31)
10005cbc:	81 3f 00 18 	lwz     r9,24(r31)
10005cc0:	81 29 01 30 	lwz     r9,304(r9)
10005cc4:	7f 8a 48 40 	cmplw   cr7,r10,r9
10005cc8:	40 9c 00 5c 	bge     cr7,10005d24 <handle_send+0x370>
	    {
	    /* Yes; move the unwritten part to the front of the buffer. */
	    int newlen = hc->responselen - sz;
10005ccc:	81 3f 00 18 	lwz     r9,24(r31)
10005cd0:	81 49 01 30 	lwz     r10,304(r9)
10005cd4:	81 3f 00 0c 	lwz     r9,12(r31)
10005cd8:	7d 29 50 50 	subf    r9,r9,r10
10005cdc:	91 3f 00 1c 	stw     r9,28(r31)
	    (void) memmove( hc->response, &(hc->response[sz]), newlen );
10005ce0:	81 3f 00 18 	lwz     r9,24(r31)
10005ce4:	81 09 00 fc 	lwz     r8,252(r9)
10005ce8:	81 3f 00 18 	lwz     r9,24(r31)
10005cec:	81 49 00 fc 	lwz     r10,252(r9)
10005cf0:	81 3f 00 0c 	lwz     r9,12(r31)
10005cf4:	7d 4a 4a 14 	add     r10,r10,r9
10005cf8:	81 3f 00 1c 	lwz     r9,28(r31)
10005cfc:	7d 03 43 78 	mr      r3,r8
10005d00:	7d 44 53 78 	mr      r4,r10
10005d04:	7d 25 4b 78 	mr      r5,r9
10005d08:	48 02 77 1d 	bl      1002d424 <memmove@plt>
	    hc->responselen = newlen;
10005d0c:	81 5f 00 1c 	lwz     r10,28(r31)
10005d10:	81 3f 00 18 	lwz     r9,24(r31)
10005d14:	91 49 01 30 	stw     r10,304(r9)
	    sz = 0;
10005d18:	39 20 00 00 	li      r9,0
10005d1c:	91 3f 00 0c 	stw     r9,12(r31)
10005d20:	48 00 00 24 	b       10005d44 <handle_send+0x390>
	    }
	else
	    {
	    /* Nope, we wrote the full headers, so adjust accordingly. */
	    sz -= hc->responselen;
10005d24:	81 5f 00 0c 	lwz     r10,12(r31)
10005d28:	81 3f 00 18 	lwz     r9,24(r31)
10005d2c:	81 29 01 30 	lwz     r9,304(r9)
10005d30:	7d 29 50 50 	subf    r9,r9,r10
10005d34:	91 3f 00 0c 	stw     r9,12(r31)
	    hc->responselen = 0;
10005d38:	81 3f 00 18 	lwz     r9,24(r31)
10005d3c:	39 40 00 00 	li      r10,0
10005d40:	91 49 01 30 	stw     r10,304(r9)
	    }
	}
    /* And update how much of the file we wrote. */
    c->next_byte_index += sz;
10005d44:	81 3f 00 38 	lwz     r9,56(r31)
10005d48:	81 49 00 5c 	lwz     r10,92(r9)
10005d4c:	81 3f 00 0c 	lwz     r9,12(r31)
10005d50:	7d 4a 4a 14 	add     r10,r10,r9
10005d54:	81 3f 00 38 	lwz     r9,56(r31)
10005d58:	91 49 00 5c 	stw     r10,92(r9)
    c->hc->bytes_sent += sz;
10005d5c:	81 3f 00 38 	lwz     r9,56(r31)
10005d60:	81 29 00 08 	lwz     r9,8(r9)
10005d64:	81 5f 00 38 	lwz     r10,56(r31)
10005d68:	81 4a 00 08 	lwz     r10,8(r10)
10005d6c:	81 0a 00 a8 	lwz     r8,168(r10)
10005d70:	81 5f 00 0c 	lwz     r10,12(r31)
10005d74:	7d 48 52 14 	add     r10,r8,r10
10005d78:	91 49 00 a8 	stw     r10,168(r9)
    for ( tind = 0; tind < c->numtnums; ++tind )
10005d7c:	39 20 00 00 	li      r9,0
10005d80:	91 3f 00 14 	stw     r9,20(r31)
10005d84:	48 00 00 70 	b       10005df4 <handle_send+0x440>
	throttles[c->tnums[tind]].bytes_since_avg += sz;
10005d88:	3d 20 10 03 	lis     r9,4099
10005d8c:	81 49 da f8 	lwz     r10,-9480(r9)
10005d90:	81 1f 00 38 	lwz     r8,56(r31)
10005d94:	81 3f 00 14 	lwz     r9,20(r31)
10005d98:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10005d9c:	7d 28 4a 14 	add     r9,r8,r9
10005da0:	39 29 00 0c 	addi    r9,r9,12
10005da4:	81 29 00 00 	lwz     r9,0(r9)
10005da8:	1d 29 00 18 	mulli   r9,r9,24
10005dac:	7d 2a 4a 14 	add     r9,r10,r9
10005db0:	3d 40 10 03 	lis     r10,4099
10005db4:	81 0a da f8 	lwz     r8,-9480(r10)
10005db8:	80 ff 00 38 	lwz     r7,56(r31)
10005dbc:	81 5f 00 14 	lwz     r10,20(r31)
10005dc0:	55 4a 10 3a 	rlwinm  r10,r10,2,0,29
10005dc4:	7d 47 52 14 	add     r10,r7,r10
10005dc8:	39 4a 00 0c 	addi    r10,r10,12
10005dcc:	81 4a 00 00 	lwz     r10,0(r10)
10005dd0:	1d 4a 00 18 	mulli   r10,r10,24
10005dd4:	7d 48 52 14 	add     r10,r8,r10
10005dd8:	81 0a 00 10 	lwz     r8,16(r10)
10005ddc:	81 5f 00 0c 	lwz     r10,12(r31)
10005de0:	7d 48 52 14 	add     r10,r8,r10
10005de4:	91 49 00 10 	stw     r10,16(r9)
	    }
	}
    /* And update how much of the file we wrote. */
    c->next_byte_index += sz;
    c->hc->bytes_sent += sz;
    for ( tind = 0; tind < c->numtnums; ++tind )
10005de8:	81 3f 00 14 	lwz     r9,20(r31)
10005dec:	39 29 00 01 	addi    r9,r9,1
10005df0:	91 3f 00 14 	stw     r9,20(r31)
10005df4:	81 3f 00 38 	lwz     r9,56(r31)
10005df8:	81 49 00 34 	lwz     r10,52(r9)
10005dfc:	81 3f 00 14 	lwz     r9,20(r31)
10005e00:	7f 8a 48 00 	cmpw    cr7,r10,r9
10005e04:	41 9d ff 84 	bgt     cr7,10005d88 <handle_send+0x3d4>
	throttles[c->tnums[tind]].bytes_since_avg += sz;

    /* Are we done? */
    if ( c->next_byte_index >= c->end_byte_index )
10005e08:	81 3f 00 38 	lwz     r9,56(r31)
10005e0c:	81 49 00 5c 	lwz     r10,92(r9)
10005e10:	81 3f 00 38 	lwz     r9,56(r31)
10005e14:	81 29 00 58 	lwz     r9,88(r9)
10005e18:	7f 8a 48 00 	cmpw    cr7,r10,r9
10005e1c:	41 9c 00 14 	blt     cr7,10005e30 <handle_send+0x47c>
	{
	/* This connection is finished! */
	finish_connection( c, tvP );
10005e20:	80 7f 00 38 	lwz     r3,56(r31)
10005e24:	80 9f 00 3c 	lwz     r4,60(r31)
10005e28:	48 00 0a 21 	bl      10006848 <finish_connection>
	return;
10005e2c:	48 00 01 74 	b       10005fa0 <handle_send+0x5ec>
	}

    /* Tune the (blockheaded) wouldblock delay. */
    if ( c->wouldblock_delay > MIN_WOULDBLOCK_DELAY )
10005e30:	81 3f 00 38 	lwz     r9,56(r31)
10005e34:	81 29 00 50 	lwz     r9,80(r9)
10005e38:	2f 89 00 64 	cmpwi   cr7,r9,100
10005e3c:	40 9d 00 18 	ble     cr7,10005e54 <handle_send+0x4a0>
	c->wouldblock_delay -= MIN_WOULDBLOCK_DELAY;
10005e40:	81 3f 00 38 	lwz     r9,56(r31)
10005e44:	81 29 00 50 	lwz     r9,80(r9)
10005e48:	39 49 ff 9c 	addi    r10,r9,-100
10005e4c:	81 3f 00 38 	lwz     r9,56(r31)
10005e50:	91 49 00 50 	stw     r10,80(r9)

    /* If we're throttling, check if we're sending too fast. */
    if ( c->max_limit != THROTTLE_NOLIMIT )
10005e54:	81 3f 00 38 	lwz     r9,56(r31)
10005e58:	81 49 00 38 	lwz     r10,56(r9)
10005e5c:	39 20 ff ff 	li      r9,-1
10005e60:	7f 8a 48 00 	cmpw    cr7,r10,r9
10005e64:	41 9e 01 3c 	beq     cr7,10005fa0 <handle_send+0x5ec>
	{
	elapsed = tvP->tv_sec - c->started_at;
10005e68:	81 3f 00 3c 	lwz     r9,60(r31)
10005e6c:	81 49 00 00 	lwz     r10,0(r9)
10005e70:	81 3f 00 38 	lwz     r9,56(r31)
10005e74:	81 29 00 40 	lwz     r9,64(r9)
10005e78:	7d 29 50 50 	subf    r9,r9,r10
10005e7c:	91 3f 00 10 	stw     r9,16(r31)
	if ( elapsed == 0 )
10005e80:	81 3f 00 10 	lwz     r9,16(r31)
10005e84:	2f 89 00 00 	cmpwi   cr7,r9,0
10005e88:	40 9e 00 0c 	bne     cr7,10005e94 <handle_send+0x4e0>
	    elapsed = 1;	/* count at least one second */
10005e8c:	39 20 00 01 	li      r9,1
10005e90:	91 3f 00 10 	stw     r9,16(r31)
	if ( c->hc->bytes_sent / elapsed > c->max_limit )
10005e94:	81 3f 00 38 	lwz     r9,56(r31)
10005e98:	81 29 00 08 	lwz     r9,8(r9)
10005e9c:	81 49 00 a8 	lwz     r10,168(r9)
10005ea0:	81 3f 00 10 	lwz     r9,16(r31)
10005ea4:	7d 4a 4b d6 	divw    r10,r10,r9
10005ea8:	81 3f 00 38 	lwz     r9,56(r31)
10005eac:	81 29 00 38 	lwz     r9,56(r9)
10005eb0:	7f 8a 48 00 	cmpw    cr7,r10,r9
10005eb4:	40 9d 00 ec 	ble     cr7,10005fa0 <handle_send+0x5ec>
	    {
	    c->conn_state = CNST_PAUSING;
10005eb8:	81 3f 00 38 	lwz     r9,56(r31)
10005ebc:	39 40 00 03 	li      r10,3
10005ec0:	91 49 00 00 	stw     r10,0(r9)
	    fdwatch_del_fd( hc->conn_fd );
10005ec4:	81 3f 00 18 	lwz     r9,24(r31)
10005ec8:	81 29 01 c0 	lwz     r9,448(r9)
10005ecc:	7d 23 4b 78 	mr      r3,r9
10005ed0:	48 00 bc 95 	bl      10011b64 <fdwatch_del_fd>
	    /* How long should we wait to get back on schedule?  If less
	    ** than a second (integer math rounding), use 1/2 second.
	    */
	    coast = c->hc->bytes_sent / c->max_limit - elapsed;
10005ed4:	81 3f 00 38 	lwz     r9,56(r31)
10005ed8:	81 29 00 08 	lwz     r9,8(r9)
10005edc:	81 49 00 a8 	lwz     r10,168(r9)
10005ee0:	81 3f 00 38 	lwz     r9,56(r31)
10005ee4:	81 29 00 38 	lwz     r9,56(r9)
10005ee8:	7d 4a 4b d6 	divw    r10,r10,r9
10005eec:	81 3f 00 10 	lwz     r9,16(r31)
10005ef0:	7d 29 50 50 	subf    r9,r9,r10
10005ef4:	91 3f 00 20 	stw     r9,32(r31)
	    client_data.p = c;
10005ef8:	81 3f 00 38 	lwz     r9,56(r31)
10005efc:	91 3f 00 24 	stw     r9,36(r31)
	    if ( c->wakeup_timer != (Timer*) 0 )
10005f00:	81 3f 00 38 	lwz     r9,56(r31)
10005f04:	81 29 00 48 	lwz     r9,72(r9)
10005f08:	2f 89 00 00 	cmpwi   cr7,r9,0
10005f0c:	41 9e 00 18 	beq     cr7,10005f24 <handle_send+0x570>
		syslog( LOG_ERR, "replacing non-null wakeup_timer!" );
10005f10:	38 60 00 03 	li      r3,3
10005f14:	3d 20 10 02 	lis     r9,4098
10005f18:	38 89 85 d8 	addi    r4,r9,-31272
10005f1c:	4c c6 31 82 	crclr   4*cr1+eq
10005f20:	48 02 78 65 	bl      1002d784 <syslog@plt>
	    c->wakeup_timer = tmr_create(
10005f24:	81 3f 00 20 	lwz     r9,32(r31)
10005f28:	2f 89 00 00 	cmpwi   cr7,r9,0
10005f2c:	40 9d 00 10 	ble     cr7,10005f3c <handle_send+0x588>
10005f30:	81 3f 00 20 	lwz     r9,32(r31)
10005f34:	1d 29 03 e8 	mulli   r9,r9,1000
10005f38:	48 00 00 08 	b       10005f40 <handle_send+0x58c>
10005f3c:	39 20 01 f4 	li      r9,500
10005f40:	81 5f 00 24 	lwz     r10,36(r31)
10005f44:	91 5f 00 40 	stw     r10,64(r31)
10005f48:	39 5f 00 40 	addi    r10,r31,64
10005f4c:	80 7f 00 3c 	lwz     r3,60(r31)
10005f50:	3d 00 10 00 	lis     r8,4096
10005f54:	38 88 6c f8 	addi    r4,r8,27896
10005f58:	7d 45 53 78 	mr      r5,r10
10005f5c:	7d 26 4b 78 	mr      r6,r9
10005f60:	38 e0 00 00 	li      r7,0
10005f64:	48 00 d9 d1 	bl      10013934 <tmr_create>
10005f68:	7c 6a 1b 78 	mr      r10,r3
10005f6c:	81 3f 00 38 	lwz     r9,56(r31)
10005f70:	91 49 00 48 	stw     r10,72(r9)
		tvP, wakeup_connection, client_data,
		coast > 0 ? ( coast * 1000L ) : 500L, 0 );
	    if ( c->wakeup_timer == (Timer*) 0 )
10005f74:	81 3f 00 38 	lwz     r9,56(r31)
10005f78:	81 29 00 48 	lwz     r9,72(r9)
10005f7c:	2f 89 00 00 	cmpwi   cr7,r9,0
10005f80:	40 9e 00 20 	bne     cr7,10005fa0 <handle_send+0x5ec>
		{
		syslog( LOG_CRIT, "tmr_create(wakeup_connection) failed" );
10005f84:	38 60 00 02 	li      r3,2
10005f88:	3d 20 10 02 	lis     r9,4098
10005f8c:	38 89 85 fc 	addi    r4,r9,-31236
10005f90:	4c c6 31 82 	crclr   4*cr1+eq
10005f94:	48 02 77 f1 	bl      1002d784 <syslog@plt>
		exit( 1 );
10005f98:	38 60 00 01 	li      r3,1
10005f9c:	48 02 76 39 	bl      1002d5d4 <exit@plt>
		}
	    }
	}
    /* (No check on min_limit here, that only controls connection startups.) */
    }
10005fa0:	39 7f 00 50 	addi    r11,r31,80
10005fa4:	80 0b 00 04 	lwz     r0,4(r11)
10005fa8:	7c 08 03 a6 	mtlr    r0
10005fac:	83 eb ff fc 	lwz     r31,-4(r11)
10005fb0:	7d 61 5b 78 	mr      r1,r11
10005fb4:	4e 80 00 20 	blr

10005fb8 <handle_linger>:


static void
handle_linger( connecttab* c, struct timeval* tvP )
    {
10005fb8:	94 21 ef d0 	stwu    r1,-4144(r1)
10005fbc:	7c 08 02 a6 	mflr    r0
10005fc0:	90 01 10 34 	stw     r0,4148(r1)
10005fc4:	93 e1 10 2c 	stw     r31,4140(r1)
10005fc8:	7c 3f 0b 78 	mr      r31,r1
10005fcc:	90 7f 10 18 	stw     r3,4120(r31)
10005fd0:	90 9f 10 1c 	stw     r4,4124(r31)
    int r;

    /* In lingering-close mode we just read and ignore bytes.  An error
    ** or EOF ends things, otherwise we go until a timeout.
    */
    r = read( c->hc->conn_fd, buf, sizeof(buf) );
10005fd4:	81 3f 10 18 	lwz     r9,4120(r31)
10005fd8:	81 29 00 08 	lwz     r9,8(r9)
10005fdc:	81 49 01 c0 	lwz     r10,448(r9)
10005fe0:	39 3f 00 0c 	addi    r9,r31,12
10005fe4:	7d 43 53 78 	mr      r3,r10
10005fe8:	7d 24 4b 78 	mr      r4,r9
10005fec:	38 a0 10 00 	li      r5,4096
10005ff0:	48 02 73 f5 	bl      1002d3e4 <read@plt>
10005ff4:	90 7f 00 08 	stw     r3,8(r31)
    if ( r < 0 && ( errno == EINTR || errno == EAGAIN ) )
10005ff8:	81 3f 00 08 	lwz     r9,8(r31)
10005ffc:	2f 89 00 00 	cmpwi   cr7,r9,0
10006000:	40 9c 00 2c 	bge     cr7,1000602c <handle_linger+0x74>
10006004:	48 02 76 d9 	bl      1002d6dc <__errno_location@plt>
10006008:	7c 69 1b 78 	mr      r9,r3
1000600c:	81 29 00 00 	lwz     r9,0(r9)
10006010:	2f 89 00 04 	cmpwi   cr7,r9,4
10006014:	41 9e 00 30 	beq     cr7,10006044 <handle_linger+0x8c>
10006018:	48 02 76 c5 	bl      1002d6dc <__errno_location@plt>
1000601c:	7c 69 1b 78 	mr      r9,r3
10006020:	81 29 00 00 	lwz     r9,0(r9)
10006024:	2f 89 00 0b 	cmpwi   cr7,r9,11
10006028:	41 9e 00 1c 	beq     cr7,10006044 <handle_linger+0x8c>
	return;
    if ( r <= 0 )
1000602c:	81 3f 00 08 	lwz     r9,8(r31)
10006030:	2f 89 00 00 	cmpwi   cr7,r9,0
10006034:	41 9d 00 10 	bgt     cr7,10006044 <handle_linger+0x8c>
	really_clear_connection( c, tvP );
10006038:	80 7f 10 18 	lwz     r3,4120(r31)
1000603c:	80 9f 10 1c 	lwz     r4,4124(r31)
10006040:	48 00 0a 05 	bl      10006a44 <really_clear_connection>
    }
10006044:	39 7f 10 30 	addi    r11,r31,4144
10006048:	80 0b 00 04 	lwz     r0,4(r11)
1000604c:	7c 08 03 a6 	mtlr    r0
10006050:	83 eb ff fc 	lwz     r31,-4(r11)
10006054:	7d 61 5b 78 	mr      r1,r11
10006058:	4e 80 00 20 	blr

1000605c <check_throttles>:


static int
check_throttles( connecttab* c )
    {
1000605c:	94 21 ff d0 	stwu    r1,-48(r1)
10006060:	7c 08 02 a6 	mflr    r0
10006064:	90 01 00 34 	stw     r0,52(r1)
10006068:	93 e1 00 2c 	stw     r31,44(r1)
1000606c:	7c 3f 0b 78 	mr      r31,r1
10006070:	90 7f 00 18 	stw     r3,24(r31)
    int tnum;
    long l;

    c->numtnums = 0;
10006074:	81 3f 00 18 	lwz     r9,24(r31)
10006078:	39 40 00 00 	li      r10,0
1000607c:	91 49 00 34 	stw     r10,52(r9)
    c->max_limit = c->min_limit = THROTTLE_NOLIMIT;
10006080:	81 3f 00 18 	lwz     r9,24(r31)
10006084:	39 40 ff ff 	li      r10,-1
10006088:	91 49 00 3c 	stw     r10,60(r9)
1000608c:	81 3f 00 18 	lwz     r9,24(r31)
10006090:	81 49 00 3c 	lwz     r10,60(r9)
10006094:	81 3f 00 18 	lwz     r9,24(r31)
10006098:	91 49 00 38 	stw     r10,56(r9)
    for ( tnum = 0; tnum < numthrottles && c->numtnums < MAXTHROTTLENUMS;
1000609c:	39 20 00 00 	li      r9,0
100060a0:	91 3f 00 08 	stw     r9,8(r31)
100060a4:	48 00 02 48 	b       100062ec <check_throttles+0x290>
	  ++tnum )
	if ( match( throttles[tnum].pattern, c->hc->expnfilename ) )
100060a8:	3d 20 10 03 	lis     r9,4099
100060ac:	81 49 da f8 	lwz     r10,-9480(r9)
100060b0:	81 3f 00 08 	lwz     r9,8(r31)
100060b4:	1d 29 00 18 	mulli   r9,r9,24
100060b8:	7d 2a 4a 14 	add     r9,r10,r9
100060bc:	81 49 00 00 	lwz     r10,0(r9)
100060c0:	81 3f 00 18 	lwz     r9,24(r31)
100060c4:	81 29 00 08 	lwz     r9,8(r9)
100060c8:	81 29 00 bc 	lwz     r9,188(r9)
100060cc:	7d 43 53 78 	mr      r3,r10
100060d0:	7d 24 4b 78 	mr      r4,r9
100060d4:	48 00 e2 51 	bl      10014324 <match>
100060d8:	7c 69 1b 78 	mr      r9,r3
100060dc:	2f 89 00 00 	cmpwi   cr7,r9,0
100060e0:	41 9e 02 00 	beq     cr7,100062e0 <check_throttles+0x284>
	    {
	    /* If we're way over the limit, don't even start. */
	    if ( throttles[tnum].rate > throttles[tnum].max_limit * 2 )
100060e4:	3d 20 10 03 	lis     r9,4099
100060e8:	81 49 da f8 	lwz     r10,-9480(r9)
100060ec:	81 3f 00 08 	lwz     r9,8(r31)
100060f0:	1d 29 00 18 	mulli   r9,r9,24
100060f4:	7d 2a 4a 14 	add     r9,r10,r9
100060f8:	81 49 00 0c 	lwz     r10,12(r9)
100060fc:	3d 20 10 03 	lis     r9,4099
10006100:	81 09 da f8 	lwz     r8,-9480(r9)
10006104:	81 3f 00 08 	lwz     r9,8(r31)
10006108:	1d 29 00 18 	mulli   r9,r9,24
1000610c:	7d 28 4a 14 	add     r9,r8,r9
10006110:	81 29 00 04 	lwz     r9,4(r9)
10006114:	55 29 08 3c 	rlwinm  r9,r9,1,0,30
10006118:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000611c:	40 9d 00 0c 	ble     cr7,10006128 <check_throttles+0xcc>
		return 0;
10006120:	39 20 00 00 	li      r9,0
10006124:	48 00 01 f0 	b       10006314 <check_throttles+0x2b8>
	    /* Also don't start if we're under the minimum. */
	    if ( throttles[tnum].rate < throttles[tnum].min_limit )
10006128:	3d 20 10 03 	lis     r9,4099
1000612c:	81 49 da f8 	lwz     r10,-9480(r9)
10006130:	81 3f 00 08 	lwz     r9,8(r31)
10006134:	1d 29 00 18 	mulli   r9,r9,24
10006138:	7d 2a 4a 14 	add     r9,r10,r9
1000613c:	81 49 00 0c 	lwz     r10,12(r9)
10006140:	3d 20 10 03 	lis     r9,4099
10006144:	81 09 da f8 	lwz     r8,-9480(r9)
10006148:	81 3f 00 08 	lwz     r9,8(r31)
1000614c:	1d 29 00 18 	mulli   r9,r9,24
10006150:	7d 28 4a 14 	add     r9,r8,r9
10006154:	81 29 00 08 	lwz     r9,8(r9)
10006158:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000615c:	40 9c 00 0c 	bge     cr7,10006168 <check_throttles+0x10c>
		return 0;
10006160:	39 20 00 00 	li      r9,0
10006164:	48 00 01 b0 	b       10006314 <check_throttles+0x2b8>
	    if ( throttles[tnum].num_sending < 0 )
10006168:	3d 20 10 03 	lis     r9,4099
1000616c:	81 49 da f8 	lwz     r10,-9480(r9)
10006170:	81 3f 00 08 	lwz     r9,8(r31)
10006174:	1d 29 00 18 	mulli   r9,r9,24
10006178:	7d 2a 4a 14 	add     r9,r10,r9
1000617c:	81 29 00 14 	lwz     r9,20(r9)
10006180:	2f 89 00 00 	cmpwi   cr7,r9,0
10006184:	40 9c 00 34 	bge     cr7,100061b8 <check_throttles+0x15c>
		{
		syslog( LOG_ERR, "throttle sending count was negative - shouldn't happen!" );
10006188:	38 60 00 03 	li      r3,3
1000618c:	3d 20 10 02 	lis     r9,4098
10006190:	38 89 86 40 	addi    r4,r9,-31168
10006194:	4c c6 31 82 	crclr   4*cr1+eq
10006198:	48 02 75 ed 	bl      1002d784 <syslog@plt>
		throttles[tnum].num_sending = 0;
1000619c:	3d 20 10 03 	lis     r9,4099
100061a0:	81 49 da f8 	lwz     r10,-9480(r9)
100061a4:	81 3f 00 08 	lwz     r9,8(r31)
100061a8:	1d 29 00 18 	mulli   r9,r9,24
100061ac:	7d 2a 4a 14 	add     r9,r10,r9
100061b0:	39 40 00 00 	li      r10,0
100061b4:	91 49 00 14 	stw     r10,20(r9)
		}
	    c->tnums[c->numtnums++] = tnum;
100061b8:	81 3f 00 18 	lwz     r9,24(r31)
100061bc:	81 29 00 34 	lwz     r9,52(r9)
100061c0:	39 09 00 01 	addi    r8,r9,1
100061c4:	81 5f 00 18 	lwz     r10,24(r31)
100061c8:	91 0a 00 34 	stw     r8,52(r10)
100061cc:	81 5f 00 18 	lwz     r10,24(r31)
100061d0:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
100061d4:	7d 2a 4a 14 	add     r9,r10,r9
100061d8:	39 29 00 0c 	addi    r9,r9,12
100061dc:	81 5f 00 08 	lwz     r10,8(r31)
100061e0:	91 49 00 00 	stw     r10,0(r9)
	    ++throttles[tnum].num_sending;
100061e4:	3d 20 10 03 	lis     r9,4099
100061e8:	81 49 da f8 	lwz     r10,-9480(r9)
100061ec:	81 3f 00 08 	lwz     r9,8(r31)
100061f0:	1d 29 00 18 	mulli   r9,r9,24
100061f4:	7d 2a 4a 14 	add     r9,r10,r9
100061f8:	81 49 00 14 	lwz     r10,20(r9)
100061fc:	39 4a 00 01 	addi    r10,r10,1
10006200:	91 49 00 14 	stw     r10,20(r9)
	    l = throttles[tnum].max_limit / throttles[tnum].num_sending;
10006204:	3d 20 10 03 	lis     r9,4099
10006208:	81 49 da f8 	lwz     r10,-9480(r9)
1000620c:	81 3f 00 08 	lwz     r9,8(r31)
10006210:	1d 29 00 18 	mulli   r9,r9,24
10006214:	7d 2a 4a 14 	add     r9,r10,r9
10006218:	81 49 00 04 	lwz     r10,4(r9)
1000621c:	3d 20 10 03 	lis     r9,4099
10006220:	81 09 da f8 	lwz     r8,-9480(r9)
10006224:	81 3f 00 08 	lwz     r9,8(r31)
10006228:	1d 29 00 18 	mulli   r9,r9,24
1000622c:	7d 28 4a 14 	add     r9,r8,r9
10006230:	81 29 00 14 	lwz     r9,20(r9)
10006234:	7d 2a 4b d6 	divw    r9,r10,r9
10006238:	91 3f 00 0c 	stw     r9,12(r31)
	    if ( c->max_limit == THROTTLE_NOLIMIT )
1000623c:	81 3f 00 18 	lwz     r9,24(r31)
10006240:	81 49 00 38 	lwz     r10,56(r9)
10006244:	39 20 ff ff 	li      r9,-1
10006248:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000624c:	40 9e 00 14 	bne     cr7,10006260 <check_throttles+0x204>
		c->max_limit = l;
10006250:	81 3f 00 18 	lwz     r9,24(r31)
10006254:	81 5f 00 0c 	lwz     r10,12(r31)
10006258:	91 49 00 38 	stw     r10,56(r9)
1000625c:	48 00 00 24 	b       10006280 <check_throttles+0x224>
	    else
		c->max_limit = MIN( c->max_limit, l );
10006260:	81 3f 00 18 	lwz     r9,24(r31)
10006264:	81 29 00 38 	lwz     r9,56(r9)
10006268:	81 5f 00 0c 	lwz     r10,12(r31)
1000626c:	7f 89 50 00 	cmpw    cr7,r9,r10
10006270:	40 9d 00 08 	ble     cr7,10006278 <check_throttles+0x21c>
10006274:	7d 49 53 78 	mr      r9,r10
10006278:	81 5f 00 18 	lwz     r10,24(r31)
1000627c:	91 2a 00 38 	stw     r9,56(r10)
	    l = throttles[tnum].min_limit;
10006280:	3d 20 10 03 	lis     r9,4099
10006284:	81 49 da f8 	lwz     r10,-9480(r9)
10006288:	81 3f 00 08 	lwz     r9,8(r31)
1000628c:	1d 29 00 18 	mulli   r9,r9,24
10006290:	7d 2a 4a 14 	add     r9,r10,r9
10006294:	81 29 00 08 	lwz     r9,8(r9)
10006298:	91 3f 00 0c 	stw     r9,12(r31)
	    if ( c->min_limit == THROTTLE_NOLIMIT )
1000629c:	81 3f 00 18 	lwz     r9,24(r31)
100062a0:	81 49 00 3c 	lwz     r10,60(r9)
100062a4:	39 20 ff ff 	li      r9,-1
100062a8:	7f 8a 48 00 	cmpw    cr7,r10,r9
100062ac:	40 9e 00 14 	bne     cr7,100062c0 <check_throttles+0x264>
		c->min_limit = l;
100062b0:	81 3f 00 18 	lwz     r9,24(r31)
100062b4:	81 5f 00 0c 	lwz     r10,12(r31)
100062b8:	91 49 00 3c 	stw     r10,60(r9)
100062bc:	48 00 00 24 	b       100062e0 <check_throttles+0x284>
	    else
		c->min_limit = MAX( c->min_limit, l );
100062c0:	81 3f 00 18 	lwz     r9,24(r31)
100062c4:	81 29 00 3c 	lwz     r9,60(r9)
100062c8:	81 5f 00 0c 	lwz     r10,12(r31)
100062cc:	7f 89 50 00 	cmpw    cr7,r9,r10
100062d0:	40 9c 00 08 	bge     cr7,100062d8 <check_throttles+0x27c>
100062d4:	7d 49 53 78 	mr      r9,r10
100062d8:	81 5f 00 18 	lwz     r10,24(r31)
100062dc:	91 2a 00 3c 	stw     r9,60(r10)
    long l;

    c->numtnums = 0;
    c->max_limit = c->min_limit = THROTTLE_NOLIMIT;
    for ( tnum = 0; tnum < numthrottles && c->numtnums < MAXTHROTTLENUMS;
	  ++tnum )
100062e0:	81 3f 00 08 	lwz     r9,8(r31)
100062e4:	39 29 00 01 	addi    r9,r9,1
100062e8:	91 3f 00 08 	stw     r9,8(r31)
    int tnum;
    long l;

    c->numtnums = 0;
    c->max_limit = c->min_limit = THROTTLE_NOLIMIT;
    for ( tnum = 0; tnum < numthrottles && c->numtnums < MAXTHROTTLENUMS;
100062ec:	3d 20 10 03 	lis     r9,4099
100062f0:	81 29 da fc 	lwz     r9,-9476(r9)
100062f4:	81 5f 00 08 	lwz     r10,8(r31)
100062f8:	7f 8a 48 00 	cmpw    cr7,r10,r9
100062fc:	40 9c 00 14 	bge     cr7,10006310 <check_throttles+0x2b4>
10006300:	81 3f 00 18 	lwz     r9,24(r31)
10006304:	81 29 00 34 	lwz     r9,52(r9)
10006308:	2f 89 00 09 	cmpwi   cr7,r9,9
1000630c:	40 9d fd 9c 	ble     cr7,100060a8 <check_throttles+0x4c>
	    if ( c->min_limit == THROTTLE_NOLIMIT )
		c->min_limit = l;
	    else
		c->min_limit = MAX( c->min_limit, l );
	    }
    return 1;
10006310:	39 20 00 01 	li      r9,1
    }
10006314:	7d 23 4b 78 	mr      r3,r9
10006318:	39 7f 00 30 	addi    r11,r31,48
1000631c:	80 0b 00 04 	lwz     r0,4(r11)
10006320:	7c 08 03 a6 	mtlr    r0
10006324:	83 eb ff fc 	lwz     r31,-4(r11)
10006328:	7d 61 5b 78 	mr      r1,r11
1000632c:	4e 80 00 20 	blr

10006330 <clear_throttles>:


static void
clear_throttles( connecttab* c, struct timeval* tvP )
    {
10006330:	94 21 ff d0 	stwu    r1,-48(r1)
10006334:	93 e1 00 2c 	stw     r31,44(r1)
10006338:	7c 3f 0b 78 	mr      r31,r1
1000633c:	90 7f 00 18 	stw     r3,24(r31)
10006340:	90 9f 00 1c 	stw     r4,28(r31)
    int tind;

    for ( tind = 0; tind < c->numtnums; ++tind )
10006344:	39 20 00 00 	li      r9,0
10006348:	91 3f 00 08 	stw     r9,8(r31)
1000634c:	48 00 00 44 	b       10006390 <clear_throttles+0x60>
	--throttles[c->tnums[tind]].num_sending;
10006350:	3d 20 10 03 	lis     r9,4099
10006354:	81 49 da f8 	lwz     r10,-9480(r9)
10006358:	81 1f 00 18 	lwz     r8,24(r31)
1000635c:	81 3f 00 08 	lwz     r9,8(r31)
10006360:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10006364:	7d 28 4a 14 	add     r9,r8,r9
10006368:	39 29 00 0c 	addi    r9,r9,12
1000636c:	81 29 00 00 	lwz     r9,0(r9)
10006370:	1d 29 00 18 	mulli   r9,r9,24
10006374:	7d 2a 4a 14 	add     r9,r10,r9
10006378:	81 49 00 14 	lwz     r10,20(r9)
1000637c:	39 4a ff ff 	addi    r10,r10,-1
10006380:	91 49 00 14 	stw     r10,20(r9)
static void
clear_throttles( connecttab* c, struct timeval* tvP )
    {
    int tind;

    for ( tind = 0; tind < c->numtnums; ++tind )
10006384:	81 3f 00 08 	lwz     r9,8(r31)
10006388:	39 29 00 01 	addi    r9,r9,1
1000638c:	91 3f 00 08 	stw     r9,8(r31)
10006390:	81 3f 00 18 	lwz     r9,24(r31)
10006394:	81 49 00 34 	lwz     r10,52(r9)
10006398:	81 3f 00 08 	lwz     r9,8(r31)
1000639c:	7f 8a 48 00 	cmpw    cr7,r10,r9
100063a0:	41 9d ff b0 	bgt     cr7,10006350 <clear_throttles+0x20>
	--throttles[c->tnums[tind]].num_sending;
    }
100063a4:	39 7f 00 30 	addi    r11,r31,48
100063a8:	83 eb ff fc 	lwz     r31,-4(r11)
100063ac:	7d 61 5b 78 	mr      r1,r11
100063b0:	4e 80 00 20 	blr

100063b4 <update_throttles>:


static void
update_throttles( ClientData client_data, struct timeval* nowP )
    {
100063b4:	94 21 ff c0 	stwu    r1,-64(r1)
100063b8:	7c 08 02 a6 	mflr    r0
100063bc:	90 01 00 44 	stw     r0,68(r1)
100063c0:	93 e1 00 3c 	stw     r31,60(r1)
100063c4:	7c 3f 0b 78 	mr      r31,r1
100063c8:	90 9f 00 28 	stw     r4,40(r31)
    long l;

    /* Update the average sending rate for each throttle.  This is only used
    ** when new connections start up.
    */
    for ( tnum = 0; tnum < numthrottles; ++tnum )
100063cc:	39 20 00 00 	li      r9,0
100063d0:	91 3f 00 08 	stw     r9,8(r31)
100063d4:	48 00 03 14 	b       100066e8 <update_throttles+0x334>
	{
	throttles[tnum].rate = ( 2 * throttles[tnum].rate + throttles[tnum].bytes_since_avg / THROTTLE_TIME ) / 3;
100063d8:	3d 20 10 03 	lis     r9,4099
100063dc:	81 49 da f8 	lwz     r10,-9480(r9)
100063e0:	81 3f 00 08 	lwz     r9,8(r31)
100063e4:	1d 29 00 18 	mulli   r9,r9,24
100063e8:	7d 4a 4a 14 	add     r10,r10,r9
100063ec:	3d 20 10 03 	lis     r9,4099
100063f0:	81 09 da f8 	lwz     r8,-9480(r9)
100063f4:	81 3f 00 08 	lwz     r9,8(r31)
100063f8:	1d 29 00 18 	mulli   r9,r9,24
100063fc:	7d 28 4a 14 	add     r9,r8,r9
10006400:	81 29 00 0c 	lwz     r9,12(r9)
10006404:	55 28 08 3c 	rlwinm  r8,r9,1,0,30
10006408:	3d 20 10 03 	lis     r9,4099
1000640c:	80 e9 da f8 	lwz     r7,-9480(r9)
10006410:	81 3f 00 08 	lwz     r9,8(r31)
10006414:	1d 29 00 18 	mulli   r9,r9,24
10006418:	7d 27 4a 14 	add     r9,r7,r9
1000641c:	81 29 00 10 	lwz     r9,16(r9)
10006420:	7d 29 0e 70 	srawi   r9,r9,1
10006424:	7d 29 01 94 	addze   r9,r9
10006428:	7d 28 4a 14 	add     r9,r8,r9
1000642c:	3d 00 55 55 	lis     r8,21845
10006430:	61 08 55 56 	ori     r8,r8,21846
10006434:	7d 09 40 96 	mulhw   r8,r9,r8
10006438:	7d 29 fe 70 	srawi   r9,r9,31
1000643c:	7d 29 40 50 	subf    r9,r9,r8
10006440:	91 2a 00 0c 	stw     r9,12(r10)
	throttles[tnum].bytes_since_avg = 0;
10006444:	3d 20 10 03 	lis     r9,4099
10006448:	81 49 da f8 	lwz     r10,-9480(r9)
1000644c:	81 3f 00 08 	lwz     r9,8(r31)
10006450:	1d 29 00 18 	mulli   r9,r9,24
10006454:	7d 2a 4a 14 	add     r9,r10,r9
10006458:	39 40 00 00 	li      r10,0
1000645c:	91 49 00 10 	stw     r10,16(r9)
	/* Log a warning message if necessary. */
	if ( throttles[tnum].rate > throttles[tnum].max_limit && throttles[tnum].num_sending != 0 )
10006460:	3d 20 10 03 	lis     r9,4099
10006464:	81 49 da f8 	lwz     r10,-9480(r9)
10006468:	81 3f 00 08 	lwz     r9,8(r31)
1000646c:	1d 29 00 18 	mulli   r9,r9,24
10006470:	7d 2a 4a 14 	add     r9,r10,r9
10006474:	81 49 00 0c 	lwz     r10,12(r9)
10006478:	3d 20 10 03 	lis     r9,4099
1000647c:	81 09 da f8 	lwz     r8,-9480(r9)
10006480:	81 3f 00 08 	lwz     r9,8(r31)
10006484:	1d 29 00 18 	mulli   r9,r9,24
10006488:	7d 28 4a 14 	add     r9,r8,r9
1000648c:	81 29 00 04 	lwz     r9,4(r9)
10006490:	7f 8a 48 00 	cmpw    cr7,r10,r9
10006494:	40 9d 01 6c 	ble     cr7,10006600 <update_throttles+0x24c>
10006498:	3d 20 10 03 	lis     r9,4099
1000649c:	81 49 da f8 	lwz     r10,-9480(r9)
100064a0:	81 3f 00 08 	lwz     r9,8(r31)
100064a4:	1d 29 00 18 	mulli   r9,r9,24
100064a8:	7d 2a 4a 14 	add     r9,r10,r9
100064ac:	81 29 00 14 	lwz     r9,20(r9)
100064b0:	2f 89 00 00 	cmpwi   cr7,r9,0
100064b4:	41 9e 01 4c 	beq     cr7,10006600 <update_throttles+0x24c>
	    {
	    if ( throttles[tnum].rate > throttles[tnum].max_limit * 2 )
100064b8:	3d 20 10 03 	lis     r9,4099
100064bc:	81 49 da f8 	lwz     r10,-9480(r9)
100064c0:	81 3f 00 08 	lwz     r9,8(r31)
100064c4:	1d 29 00 18 	mulli   r9,r9,24
100064c8:	7d 2a 4a 14 	add     r9,r10,r9
100064cc:	81 49 00 0c 	lwz     r10,12(r9)
100064d0:	3d 20 10 03 	lis     r9,4099
100064d4:	81 09 da f8 	lwz     r8,-9480(r9)
100064d8:	81 3f 00 08 	lwz     r9,8(r31)
100064dc:	1d 29 00 18 	mulli   r9,r9,24
100064e0:	7d 28 4a 14 	add     r9,r8,r9
100064e4:	81 29 00 04 	lwz     r9,4(r9)
100064e8:	55 29 08 3c 	rlwinm  r9,r9,1,0,30
100064ec:	7f 8a 48 00 	cmpw    cr7,r10,r9
100064f0:	40 9d 00 8c 	ble     cr7,1000657c <update_throttles+0x1c8>
		syslog( LOG_NOTICE, "throttle #%d '%.80s' rate %ld greatly exceeding limit %ld; %d sending", tnum, throttles[tnum].pattern, throttles[tnum].rate, throttles[tnum].max_limit, throttles[tnum].num_sending );
100064f4:	3d 20 10 03 	lis     r9,4099
100064f8:	81 49 da f8 	lwz     r10,-9480(r9)
100064fc:	81 3f 00 08 	lwz     r9,8(r31)
10006500:	1d 29 00 18 	mulli   r9,r9,24
10006504:	7d 2a 4a 14 	add     r9,r10,r9
10006508:	80 e9 00 00 	lwz     r7,0(r9)
1000650c:	3d 20 10 03 	lis     r9,4099
10006510:	81 49 da f8 	lwz     r10,-9480(r9)
10006514:	81 3f 00 08 	lwz     r9,8(r31)
10006518:	1d 29 00 18 	mulli   r9,r9,24
1000651c:	7d 2a 4a 14 	add     r9,r10,r9
10006520:	81 09 00 0c 	lwz     r8,12(r9)
10006524:	3d 20 10 03 	lis     r9,4099
10006528:	81 49 da f8 	lwz     r10,-9480(r9)
1000652c:	81 3f 00 08 	lwz     r9,8(r31)
10006530:	1d 29 00 18 	mulli   r9,r9,24
10006534:	7d 2a 4a 14 	add     r9,r10,r9
10006538:	81 49 00 04 	lwz     r10,4(r9)
1000653c:	3d 20 10 03 	lis     r9,4099
10006540:	80 c9 da f8 	lwz     r6,-9480(r9)
10006544:	81 3f 00 08 	lwz     r9,8(r31)
10006548:	1d 29 00 18 	mulli   r9,r9,24
1000654c:	7d 26 4a 14 	add     r9,r6,r9
10006550:	81 29 00 14 	lwz     r9,20(r9)
10006554:	38 60 00 05 	li      r3,5
10006558:	3c c0 10 02 	lis     r6,4098
1000655c:	38 86 86 78 	addi    r4,r6,-31112
10006560:	80 bf 00 08 	lwz     r5,8(r31)
10006564:	7c e6 3b 78 	mr      r6,r7
10006568:	7d 07 43 78 	mr      r7,r8
1000656c:	7d 48 53 78 	mr      r8,r10
10006570:	4c c6 31 82 	crclr   4*cr1+eq
10006574:	48 02 72 11 	bl      1002d784 <syslog@plt>
10006578:	48 00 00 88 	b       10006600 <update_throttles+0x24c>
	    else
		syslog( LOG_INFO, "throttle #%d '%.80s' rate %ld exceeding limit %ld; %d sending", tnum, throttles[tnum].pattern, throttles[tnum].rate, throttles[tnum].max_limit, throttles[tnum].num_sending );
1000657c:	3d 20 10 03 	lis     r9,4099
10006580:	81 49 da f8 	lwz     r10,-9480(r9)
10006584:	81 3f 00 08 	lwz     r9,8(r31)
10006588:	1d 29 00 18 	mulli   r9,r9,24
1000658c:	7d 2a 4a 14 	add     r9,r10,r9
10006590:	80 e9 00 00 	lwz     r7,0(r9)
10006594:	3d 20 10 03 	lis     r9,4099
10006598:	81 49 da f8 	lwz     r10,-9480(r9)
1000659c:	81 3f 00 08 	lwz     r9,8(r31)
100065a0:	1d 29 00 18 	mulli   r9,r9,24
100065a4:	7d 2a 4a 14 	add     r9,r10,r9
100065a8:	81 09 00 0c 	lwz     r8,12(r9)
100065ac:	3d 20 10 03 	lis     r9,4099
100065b0:	81 49 da f8 	lwz     r10,-9480(r9)
100065b4:	81 3f 00 08 	lwz     r9,8(r31)
100065b8:	1d 29 00 18 	mulli   r9,r9,24
100065bc:	7d 2a 4a 14 	add     r9,r10,r9
100065c0:	81 49 00 04 	lwz     r10,4(r9)
100065c4:	3d 20 10 03 	lis     r9,4099
100065c8:	80 c9 da f8 	lwz     r6,-9480(r9)
100065cc:	81 3f 00 08 	lwz     r9,8(r31)
100065d0:	1d 29 00 18 	mulli   r9,r9,24
100065d4:	7d 26 4a 14 	add     r9,r6,r9
100065d8:	81 29 00 14 	lwz     r9,20(r9)
100065dc:	38 60 00 06 	li      r3,6
100065e0:	3c c0 10 02 	lis     r6,4098
100065e4:	38 86 86 c0 	addi    r4,r6,-31040
100065e8:	80 bf 00 08 	lwz     r5,8(r31)
100065ec:	7c e6 3b 78 	mr      r6,r7
100065f0:	7d 07 43 78 	mr      r7,r8
100065f4:	7d 48 53 78 	mr      r8,r10
100065f8:	4c c6 31 82 	crclr   4*cr1+eq
100065fc:	48 02 71 89 	bl      1002d784 <syslog@plt>
	    }
	if ( throttles[tnum].rate < throttles[tnum].min_limit && throttles[tnum].num_sending != 0 )
10006600:	3d 20 10 03 	lis     r9,4099
10006604:	81 49 da f8 	lwz     r10,-9480(r9)
10006608:	81 3f 00 08 	lwz     r9,8(r31)
1000660c:	1d 29 00 18 	mulli   r9,r9,24
10006610:	7d 2a 4a 14 	add     r9,r10,r9
10006614:	81 49 00 0c 	lwz     r10,12(r9)
10006618:	3d 20 10 03 	lis     r9,4099
1000661c:	81 09 da f8 	lwz     r8,-9480(r9)
10006620:	81 3f 00 08 	lwz     r9,8(r31)
10006624:	1d 29 00 18 	mulli   r9,r9,24
10006628:	7d 28 4a 14 	add     r9,r8,r9
1000662c:	81 29 00 08 	lwz     r9,8(r9)
10006630:	7f 8a 48 00 	cmpw    cr7,r10,r9
10006634:	40 9c 00 a8 	bge     cr7,100066dc <update_throttles+0x328>
10006638:	3d 20 10 03 	lis     r9,4099
1000663c:	81 49 da f8 	lwz     r10,-9480(r9)
10006640:	81 3f 00 08 	lwz     r9,8(r31)
10006644:	1d 29 00 18 	mulli   r9,r9,24
10006648:	7d 2a 4a 14 	add     r9,r10,r9
1000664c:	81 29 00 14 	lwz     r9,20(r9)
10006650:	2f 89 00 00 	cmpwi   cr7,r9,0
10006654:	41 9e 00 88 	beq     cr7,100066dc <update_throttles+0x328>
	    {
	    syslog( LOG_NOTICE, "throttle #%d '%.80s' rate %ld lower than minimum %ld; %d sending", tnum, throttles[tnum].pattern, throttles[tnum].rate, throttles[tnum].min_limit, throttles[tnum].num_sending );
10006658:	3d 20 10 03 	lis     r9,4099
1000665c:	81 49 da f8 	lwz     r10,-9480(r9)
10006660:	81 3f 00 08 	lwz     r9,8(r31)
10006664:	1d 29 00 18 	mulli   r9,r9,24
10006668:	7d 2a 4a 14 	add     r9,r10,r9
1000666c:	80 e9 00 00 	lwz     r7,0(r9)
10006670:	3d 20 10 03 	lis     r9,4099
10006674:	81 49 da f8 	lwz     r10,-9480(r9)
10006678:	81 3f 00 08 	lwz     r9,8(r31)
1000667c:	1d 29 00 18 	mulli   r9,r9,24
10006680:	7d 2a 4a 14 	add     r9,r10,r9
10006684:	81 09 00 0c 	lwz     r8,12(r9)
10006688:	3d 20 10 03 	lis     r9,4099
1000668c:	81 49 da f8 	lwz     r10,-9480(r9)
10006690:	81 3f 00 08 	lwz     r9,8(r31)
10006694:	1d 29 00 18 	mulli   r9,r9,24
10006698:	7d 2a 4a 14 	add     r9,r10,r9
1000669c:	81 49 00 08 	lwz     r10,8(r9)
100066a0:	3d 20 10 03 	lis     r9,4099
100066a4:	80 c9 da f8 	lwz     r6,-9480(r9)
100066a8:	81 3f 00 08 	lwz     r9,8(r31)
100066ac:	1d 29 00 18 	mulli   r9,r9,24
100066b0:	7d 26 4a 14 	add     r9,r6,r9
100066b4:	81 29 00 14 	lwz     r9,20(r9)
100066b8:	38 60 00 05 	li      r3,5
100066bc:	3c c0 10 02 	lis     r6,4098
100066c0:	38 86 87 00 	addi    r4,r6,-30976
100066c4:	80 bf 00 08 	lwz     r5,8(r31)
100066c8:	7c e6 3b 78 	mr      r6,r7
100066cc:	7d 07 43 78 	mr      r7,r8
100066d0:	7d 48 53 78 	mr      r8,r10
100066d4:	4c c6 31 82 	crclr   4*cr1+eq
100066d8:	48 02 70 ad 	bl      1002d784 <syslog@plt>
    long l;

    /* Update the average sending rate for each throttle.  This is only used
    ** when new connections start up.
    */
    for ( tnum = 0; tnum < numthrottles; ++tnum )
100066dc:	81 3f 00 08 	lwz     r9,8(r31)
100066e0:	39 29 00 01 	addi    r9,r9,1
100066e4:	91 3f 00 08 	stw     r9,8(r31)
100066e8:	3d 20 10 03 	lis     r9,4099
100066ec:	81 29 da fc 	lwz     r9,-9476(r9)
100066f0:	81 5f 00 08 	lwz     r10,8(r31)
100066f4:	7f 8a 48 00 	cmpw    cr7,r10,r9
100066f8:	41 9c fc e0 	blt     cr7,100063d8 <update_throttles+0x24>
	}

    /* Now update the sending rate on all the currently-sending connections,
    ** redistributing it evenly.
    */
    for ( cnum = 0; cnum < max_connects; ++cnum )
100066fc:	39 20 00 00 	li      r9,0
10006700:	91 3f 00 10 	stw     r9,16(r31)
10006704:	48 00 01 18 	b       1000681c <update_throttles+0x468>
	{
	c = &connects[cnum];
10006708:	3d 20 10 03 	lis     r9,4099
1000670c:	81 49 db 04 	lwz     r10,-9468(r9)
10006710:	81 3f 00 10 	lwz     r9,16(r31)
10006714:	1d 29 00 60 	mulli   r9,r9,96
10006718:	7d 2a 4a 14 	add     r9,r10,r9
1000671c:	91 3f 00 14 	stw     r9,20(r31)
	if ( c->conn_state == CNST_SENDING || c->conn_state == CNST_PAUSING )
10006720:	81 3f 00 14 	lwz     r9,20(r31)
10006724:	81 29 00 00 	lwz     r9,0(r9)
10006728:	2f 89 00 02 	cmpwi   cr7,r9,2
1000672c:	41 9e 00 14 	beq     cr7,10006740 <update_throttles+0x38c>
10006730:	81 3f 00 14 	lwz     r9,20(r31)
10006734:	81 29 00 00 	lwz     r9,0(r9)
10006738:	2f 89 00 03 	cmpwi   cr7,r9,3
1000673c:	40 9e 00 d4 	bne     cr7,10006810 <update_throttles+0x45c>
	    {
	    c->max_limit = THROTTLE_NOLIMIT;
10006740:	81 3f 00 14 	lwz     r9,20(r31)
10006744:	39 40 ff ff 	li      r10,-1
10006748:	91 49 00 38 	stw     r10,56(r9)
	    for ( tind = 0; tind < c->numtnums; ++tind )
1000674c:	39 20 00 00 	li      r9,0
10006750:	91 3f 00 0c 	stw     r9,12(r31)
10006754:	48 00 00 a8 	b       100067fc <update_throttles+0x448>
		{
		tnum = c->tnums[tind];
10006758:	81 5f 00 14 	lwz     r10,20(r31)
1000675c:	81 3f 00 0c 	lwz     r9,12(r31)
10006760:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10006764:	7d 2a 4a 14 	add     r9,r10,r9
10006768:	39 29 00 0c 	addi    r9,r9,12
1000676c:	81 29 00 00 	lwz     r9,0(r9)
10006770:	91 3f 00 08 	stw     r9,8(r31)
		l = throttles[tnum].max_limit / throttles[tnum].num_sending;
10006774:	3d 20 10 03 	lis     r9,4099
10006778:	81 49 da f8 	lwz     r10,-9480(r9)
1000677c:	81 3f 00 08 	lwz     r9,8(r31)
10006780:	1d 29 00 18 	mulli   r9,r9,24
10006784:	7d 2a 4a 14 	add     r9,r10,r9
10006788:	81 49 00 04 	lwz     r10,4(r9)
1000678c:	3d 20 10 03 	lis     r9,4099
10006790:	81 09 da f8 	lwz     r8,-9480(r9)
10006794:	81 3f 00 08 	lwz     r9,8(r31)
10006798:	1d 29 00 18 	mulli   r9,r9,24
1000679c:	7d 28 4a 14 	add     r9,r8,r9
100067a0:	81 29 00 14 	lwz     r9,20(r9)
100067a4:	7d 2a 4b d6 	divw    r9,r10,r9
100067a8:	91 3f 00 18 	stw     r9,24(r31)
		if ( c->max_limit == THROTTLE_NOLIMIT )
100067ac:	81 3f 00 14 	lwz     r9,20(r31)
100067b0:	81 49 00 38 	lwz     r10,56(r9)
100067b4:	39 20 ff ff 	li      r9,-1
100067b8:	7f 8a 48 00 	cmpw    cr7,r10,r9
100067bc:	40 9e 00 14 	bne     cr7,100067d0 <update_throttles+0x41c>
		    c->max_limit = l;
100067c0:	81 3f 00 14 	lwz     r9,20(r31)
100067c4:	81 5f 00 18 	lwz     r10,24(r31)
100067c8:	91 49 00 38 	stw     r10,56(r9)
100067cc:	48 00 00 24 	b       100067f0 <update_throttles+0x43c>
		else
		    c->max_limit = MIN( c->max_limit, l );
100067d0:	81 3f 00 14 	lwz     r9,20(r31)
100067d4:	81 29 00 38 	lwz     r9,56(r9)
100067d8:	81 5f 00 18 	lwz     r10,24(r31)
100067dc:	7f 89 50 00 	cmpw    cr7,r9,r10
100067e0:	40 9d 00 08 	ble     cr7,100067e8 <update_throttles+0x434>
100067e4:	7d 49 53 78 	mr      r9,r10
100067e8:	81 5f 00 14 	lwz     r10,20(r31)
100067ec:	91 2a 00 38 	stw     r9,56(r10)
	{
	c = &connects[cnum];
	if ( c->conn_state == CNST_SENDING || c->conn_state == CNST_PAUSING )
	    {
	    c->max_limit = THROTTLE_NOLIMIT;
	    for ( tind = 0; tind < c->numtnums; ++tind )
100067f0:	81 3f 00 0c 	lwz     r9,12(r31)
100067f4:	39 29 00 01 	addi    r9,r9,1
100067f8:	91 3f 00 0c 	stw     r9,12(r31)
100067fc:	81 3f 00 14 	lwz     r9,20(r31)
10006800:	81 49 00 34 	lwz     r10,52(r9)
10006804:	81 3f 00 0c 	lwz     r9,12(r31)
10006808:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000680c:	41 9d ff 4c 	bgt     cr7,10006758 <update_throttles+0x3a4>
	}

    /* Now update the sending rate on all the currently-sending connections,
    ** redistributing it evenly.
    */
    for ( cnum = 0; cnum < max_connects; ++cnum )
10006810:	81 3f 00 10 	lwz     r9,16(r31)
10006814:	39 29 00 01 	addi    r9,r9,1
10006818:	91 3f 00 10 	stw     r9,16(r31)
1000681c:	3d 20 10 03 	lis     r9,4099
10006820:	81 29 db 0c 	lwz     r9,-9460(r9)
10006824:	81 5f 00 10 	lwz     r10,16(r31)
10006828:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000682c:	41 9c fe dc 	blt     cr7,10006708 <update_throttles+0x354>
		else
		    c->max_limit = MIN( c->max_limit, l );
		}
	    }
	}
    }
10006830:	39 7f 00 40 	addi    r11,r31,64
10006834:	80 0b 00 04 	lwz     r0,4(r11)
10006838:	7c 08 03 a6 	mtlr    r0
1000683c:	83 eb ff fc 	lwz     r31,-4(r11)
10006840:	7d 61 5b 78 	mr      r1,r11
10006844:	4e 80 00 20 	blr

10006848 <finish_connection>:


static void
finish_connection( connecttab* c, struct timeval* tvP )
    {
10006848:	94 21 ff e0 	stwu    r1,-32(r1)
1000684c:	7c 08 02 a6 	mflr    r0
10006850:	90 01 00 24 	stw     r0,36(r1)
10006854:	93 e1 00 1c 	stw     r31,28(r1)
10006858:	7c 3f 0b 78 	mr      r31,r1
1000685c:	90 7f 00 08 	stw     r3,8(r31)
10006860:	90 9f 00 0c 	stw     r4,12(r31)
    /* If we haven't actually sent the buffered response yet, do so now. */
    httpd_write_response( c->hc );
10006864:	81 3f 00 08 	lwz     r9,8(r31)
10006868:	81 29 00 08 	lwz     r9,8(r9)
1000686c:	7d 23 4b 78 	mr      r3,r9
10006870:	48 00 13 a5 	bl      10007c14 <httpd_write_response>

    /* And clear. */
    clear_connection( c, tvP );
10006874:	80 7f 00 08 	lwz     r3,8(r31)
10006878:	80 9f 00 0c 	lwz     r4,12(r31)
1000687c:	48 00 00 1d 	bl      10006898 <clear_connection>
    }
10006880:	39 7f 00 20 	addi    r11,r31,32
10006884:	80 0b 00 04 	lwz     r0,4(r11)
10006888:	7c 08 03 a6 	mtlr    r0
1000688c:	83 eb ff fc 	lwz     r31,-4(r11)
10006890:	7d 61 5b 78 	mr      r1,r11
10006894:	4e 80 00 20 	blr

10006898 <clear_connection>:


static void
clear_connection( connecttab* c, struct timeval* tvP )
    {
10006898:	94 21 ff d0 	stwu    r1,-48(r1)
1000689c:	7c 08 02 a6 	mflr    r0
100068a0:	90 01 00 34 	stw     r0,52(r1)
100068a4:	93 e1 00 2c 	stw     r31,44(r1)
100068a8:	7c 3f 0b 78 	mr      r31,r1
100068ac:	90 7f 00 18 	stw     r3,24(r31)
100068b0:	90 9f 00 1c 	stw     r4,28(r31)
    ClientData client_data;

    if ( c->wakeup_timer != (Timer*) 0 )
100068b4:	81 3f 00 18 	lwz     r9,24(r31)
100068b8:	81 29 00 48 	lwz     r9,72(r9)
100068bc:	2f 89 00 00 	cmpwi   cr7,r9,0
100068c0:	41 9e 00 20 	beq     cr7,100068e0 <clear_connection+0x48>
	{
	tmr_cancel( c->wakeup_timer );
100068c4:	81 3f 00 18 	lwz     r9,24(r31)
100068c8:	81 29 00 48 	lwz     r9,72(r9)
100068cc:	7d 23 4b 78 	mr      r3,r9
100068d0:	48 00 d8 09 	bl      100140d8 <tmr_cancel>
	c->wakeup_timer = 0;
100068d4:	81 3f 00 18 	lwz     r9,24(r31)
100068d8:	39 40 00 00 	li      r10,0
100068dc:	91 49 00 48 	stw     r10,72(r9)
    ** file descriptor which means our maximum connection-handling rate
    ** is lower.  So, elsewhere we set a flag when we detect the few
    ** circumstances that make a lingering close necessary.  If the flag
    ** isn't set we do the real close now.
    */
    if ( c->conn_state == CNST_LINGERING )
100068e0:	81 3f 00 18 	lwz     r9,24(r31)
100068e4:	81 29 00 00 	lwz     r9,0(r9)
100068e8:	2f 89 00 04 	cmpwi   cr7,r9,4
100068ec:	40 9e 00 30 	bne     cr7,1000691c <clear_connection+0x84>
	{
	/* If we were already lingering, shut down for real. */
	tmr_cancel( c->linger_timer );
100068f0:	81 3f 00 18 	lwz     r9,24(r31)
100068f4:	81 29 00 4c 	lwz     r9,76(r9)
100068f8:	7d 23 4b 78 	mr      r3,r9
100068fc:	48 00 d7 dd 	bl      100140d8 <tmr_cancel>
	c->linger_timer = (Timer*) 0;
10006900:	81 3f 00 18 	lwz     r9,24(r31)
10006904:	39 40 00 00 	li      r10,0
10006908:	91 49 00 4c 	stw     r10,76(r9)
	c->hc->should_linger = 0;
1000690c:	81 3f 00 18 	lwz     r9,24(r31)
10006910:	81 29 00 08 	lwz     r9,8(r9)
10006914:	39 40 00 00 	li      r10,0
10006918:	91 49 01 64 	stw     r10,356(r9)
	}
    if ( c->hc->should_linger )
1000691c:	81 3f 00 18 	lwz     r9,24(r31)
10006920:	81 29 00 08 	lwz     r9,8(r9)
10006924:	81 29 01 64 	lwz     r9,356(r9)
10006928:	2f 89 00 00 	cmpwi   cr7,r9,0
1000692c:	41 9e 00 f4 	beq     cr7,10006a20 <clear_connection+0x188>
	{
	if ( c->conn_state != CNST_PAUSING )
10006930:	81 3f 00 18 	lwz     r9,24(r31)
10006934:	81 29 00 00 	lwz     r9,0(r9)
10006938:	2f 89 00 03 	cmpwi   cr7,r9,3
1000693c:	41 9e 00 18 	beq     cr7,10006954 <clear_connection+0xbc>
	    fdwatch_del_fd( c->hc->conn_fd );
10006940:	81 3f 00 18 	lwz     r9,24(r31)
10006944:	81 29 00 08 	lwz     r9,8(r9)
10006948:	81 29 01 c0 	lwz     r9,448(r9)
1000694c:	7d 23 4b 78 	mr      r3,r9
10006950:	48 00 b2 15 	bl      10011b64 <fdwatch_del_fd>
	c->conn_state = CNST_LINGERING;
10006954:	81 3f 00 18 	lwz     r9,24(r31)
10006958:	39 40 00 04 	li      r10,4
1000695c:	91 49 00 00 	stw     r10,0(r9)
	shutdown( c->hc->conn_fd, SHUT_WR );
10006960:	81 3f 00 18 	lwz     r9,24(r31)
10006964:	81 29 00 08 	lwz     r9,8(r9)
10006968:	81 29 01 c0 	lwz     r9,448(r9)
1000696c:	7d 23 4b 78 	mr      r3,r9
10006970:	38 80 00 01 	li      r4,1
10006974:	48 02 6e 91 	bl      1002d804 <shutdown@plt>
	fdwatch_add_fd( c->hc->conn_fd, c, FDW_READ );
10006978:	81 3f 00 18 	lwz     r9,24(r31)
1000697c:	81 29 00 08 	lwz     r9,8(r9)
10006980:	81 29 01 c0 	lwz     r9,448(r9)
10006984:	7d 23 4b 78 	mr      r3,r9
10006988:	80 9f 00 18 	lwz     r4,24(r31)
1000698c:	38 a0 00 00 	li      r5,0
10006990:	48 00 b0 f9 	bl      10011a88 <fdwatch_add_fd>
	client_data.p = c;
10006994:	81 3f 00 18 	lwz     r9,24(r31)
10006998:	91 3f 00 08 	stw     r9,8(r31)
	if ( c->linger_timer != (Timer*) 0 )
1000699c:	81 3f 00 18 	lwz     r9,24(r31)
100069a0:	81 29 00 4c 	lwz     r9,76(r9)
100069a4:	2f 89 00 00 	cmpwi   cr7,r9,0
100069a8:	41 9e 00 18 	beq     cr7,100069c0 <clear_connection+0x128>
	    syslog( LOG_ERR, "replacing non-null linger_timer!" );
100069ac:	38 60 00 03 	li      r3,3
100069b0:	3d 20 10 02 	lis     r9,4098
100069b4:	38 89 87 44 	addi    r4,r9,-30908
100069b8:	4c c6 31 82 	crclr   4*cr1+eq
100069bc:	48 02 6d c9 	bl      1002d784 <syslog@plt>
	c->linger_timer = tmr_create(
100069c0:	81 3f 00 08 	lwz     r9,8(r31)
100069c4:	91 3f 00 20 	stw     r9,32(r31)
100069c8:	39 3f 00 20 	addi    r9,r31,32
100069cc:	80 7f 00 1c 	lwz     r3,28(r31)
100069d0:	3d 40 10 00 	lis     r10,4096
100069d4:	38 8a 6d 80 	addi    r4,r10,28032
100069d8:	7d 25 4b 78 	mr      r5,r9
100069dc:	38 c0 01 f4 	li      r6,500
100069e0:	38 e0 00 00 	li      r7,0
100069e4:	48 00 cf 51 	bl      10013934 <tmr_create>
100069e8:	7c 6a 1b 78 	mr      r10,r3
100069ec:	81 3f 00 18 	lwz     r9,24(r31)
100069f0:	91 49 00 4c 	stw     r10,76(r9)
	    tvP, linger_clear_connection, client_data, LINGER_TIME, 0 );
	if ( c->linger_timer == (Timer*) 0 )
100069f4:	81 3f 00 18 	lwz     r9,24(r31)
100069f8:	81 29 00 4c 	lwz     r9,76(r9)
100069fc:	2f 89 00 00 	cmpwi   cr7,r9,0
10006a00:	40 9e 00 2c 	bne     cr7,10006a2c <clear_connection+0x194>
	    {
	    syslog( LOG_CRIT, "tmr_create(linger_clear_connection) failed" );
10006a04:	38 60 00 02 	li      r3,2
10006a08:	3d 20 10 02 	lis     r9,4098
10006a0c:	38 89 87 68 	addi    r4,r9,-30872
10006a10:	4c c6 31 82 	crclr   4*cr1+eq
10006a14:	48 02 6d 71 	bl      1002d784 <syslog@plt>
	    exit( 1 );
10006a18:	38 60 00 01 	li      r3,1
10006a1c:	48 02 6b b9 	bl      1002d5d4 <exit@plt>
	    }
	}
    else
	really_clear_connection( c, tvP );
10006a20:	80 7f 00 18 	lwz     r3,24(r31)
10006a24:	80 9f 00 1c 	lwz     r4,28(r31)
10006a28:	48 00 00 1d 	bl      10006a44 <really_clear_connection>
    }
10006a2c:	39 7f 00 30 	addi    r11,r31,48
10006a30:	80 0b 00 04 	lwz     r0,4(r11)
10006a34:	7c 08 03 a6 	mtlr    r0
10006a38:	83 eb ff fc 	lwz     r31,-4(r11)
10006a3c:	7d 61 5b 78 	mr      r1,r11
10006a40:	4e 80 00 20 	blr

10006a44 <really_clear_connection>:


static void
really_clear_connection( connecttab* c, struct timeval* tvP )
    {
10006a44:	94 21 ff e0 	stwu    r1,-32(r1)
10006a48:	7c 08 02 a6 	mflr    r0
10006a4c:	90 01 00 24 	stw     r0,36(r1)
10006a50:	93 e1 00 1c 	stw     r31,28(r1)
10006a54:	7c 3f 0b 78 	mr      r31,r1
10006a58:	90 7f 00 08 	stw     r3,8(r31)
10006a5c:	90 9f 00 0c 	stw     r4,12(r31)
    stats_bytes += c->hc->bytes_sent;
10006a60:	81 3f 00 08 	lwz     r9,8(r31)
10006a64:	81 29 00 08 	lwz     r9,8(r9)
10006a68:	81 49 00 a8 	lwz     r10,168(r9)
10006a6c:	3d 20 10 03 	lis     r9,4099
10006a70:	81 29 d3 58 	lwz     r9,-11432(r9)
10006a74:	7d 4a 4a 14 	add     r10,r10,r9
10006a78:	3d 20 10 03 	lis     r9,4099
10006a7c:	91 49 d3 58 	stw     r10,-11432(r9)
    if ( c->conn_state != CNST_PAUSING )
10006a80:	81 3f 00 08 	lwz     r9,8(r31)
10006a84:	81 29 00 00 	lwz     r9,0(r9)
10006a88:	2f 89 00 03 	cmpwi   cr7,r9,3
10006a8c:	41 9e 00 18 	beq     cr7,10006aa4 <really_clear_connection+0x60>
	fdwatch_del_fd( c->hc->conn_fd );
10006a90:	81 3f 00 08 	lwz     r9,8(r31)
10006a94:	81 29 00 08 	lwz     r9,8(r9)
10006a98:	81 29 01 c0 	lwz     r9,448(r9)
10006a9c:	7d 23 4b 78 	mr      r3,r9
10006aa0:	48 00 b0 c5 	bl      10011b64 <fdwatch_del_fd>
    httpd_close_conn( c->hc, tvP );
10006aa4:	81 3f 00 08 	lwz     r9,8(r31)
10006aa8:	81 29 00 08 	lwz     r9,8(r9)
10006aac:	7d 23 4b 78 	mr      r3,r9
10006ab0:	80 9f 00 0c 	lwz     r4,12(r31)
10006ab4:	48 00 60 a1 	bl      1000cb54 <httpd_close_conn>
    clear_throttles( c, tvP );
10006ab8:	80 7f 00 08 	lwz     r3,8(r31)
10006abc:	80 9f 00 0c 	lwz     r4,12(r31)
10006ac0:	4b ff f8 71 	bl      10006330 <clear_throttles>
    if ( c->linger_timer != (Timer*) 0 )
10006ac4:	81 3f 00 08 	lwz     r9,8(r31)
10006ac8:	81 29 00 4c 	lwz     r9,76(r9)
10006acc:	2f 89 00 00 	cmpwi   cr7,r9,0
10006ad0:	41 9e 00 20 	beq     cr7,10006af0 <really_clear_connection+0xac>
	{
	tmr_cancel( c->linger_timer );
10006ad4:	81 3f 00 08 	lwz     r9,8(r31)
10006ad8:	81 29 00 4c 	lwz     r9,76(r9)
10006adc:	7d 23 4b 78 	mr      r3,r9
10006ae0:	48 00 d5 f9 	bl      100140d8 <tmr_cancel>
	c->linger_timer = 0;
10006ae4:	81 3f 00 08 	lwz     r9,8(r31)
10006ae8:	39 40 00 00 	li      r10,0
10006aec:	91 49 00 4c 	stw     r10,76(r9)
	}
    c->conn_state = CNST_FREE;
10006af0:	81 3f 00 08 	lwz     r9,8(r31)
10006af4:	39 40 00 00 	li      r10,0
10006af8:	91 49 00 00 	stw     r10,0(r9)
    c->next_free_connect = first_free_connect;
10006afc:	3d 20 10 03 	lis     r9,4099
10006b00:	81 49 db 10 	lwz     r10,-9456(r9)
10006b04:	81 3f 00 08 	lwz     r9,8(r31)
10006b08:	91 49 00 04 	stw     r10,4(r9)
    first_free_connect = c - connects;	/* division by sizeof is implied */
10006b0c:	81 5f 00 08 	lwz     r10,8(r31)
10006b10:	3d 20 10 03 	lis     r9,4099
10006b14:	81 29 db 04 	lwz     r9,-9468(r9)
10006b18:	7d 29 50 50 	subf    r9,r9,r10
10006b1c:	7d 2a 2e 70 	srawi   r10,r9,5
10006b20:	3d 20 aa aa 	lis     r9,-21846
10006b24:	61 29 aa ab 	ori     r9,r9,43691
10006b28:	7d 2a 49 d6 	mullw   r9,r10,r9
10006b2c:	7d 2a 4b 78 	mr      r10,r9
10006b30:	3d 20 10 03 	lis     r9,4099
10006b34:	91 49 db 10 	stw     r10,-9456(r9)
    --num_connects;
10006b38:	3d 20 10 03 	lis     r9,4099
10006b3c:	81 29 db 08 	lwz     r9,-9464(r9)
10006b40:	39 49 ff ff 	addi    r10,r9,-1
10006b44:	3d 20 10 03 	lis     r9,4099
10006b48:	91 49 db 08 	stw     r10,-9464(r9)
    }
10006b4c:	39 7f 00 20 	addi    r11,r31,32
10006b50:	80 0b 00 04 	lwz     r0,4(r11)
10006b54:	7c 08 03 a6 	mtlr    r0
10006b58:	83 eb ff fc 	lwz     r31,-4(r11)
10006b5c:	7d 61 5b 78 	mr      r1,r11
10006b60:	4e 80 00 20 	blr

10006b64 <idle>:


static void
idle( ClientData client_data, struct timeval* nowP )
    {
10006b64:	94 21 ff d0 	stwu    r1,-48(r1)
10006b68:	7c 08 02 a6 	mflr    r0
10006b6c:	90 01 00 34 	stw     r0,52(r1)
10006b70:	93 e1 00 2c 	stw     r31,44(r1)
10006b74:	7c 3f 0b 78 	mr      r31,r1
10006b78:	90 9f 00 18 	stw     r4,24(r31)
    int cnum;
    connecttab* c;

    for ( cnum = 0; cnum < max_connects; ++cnum )
10006b7c:	39 20 00 00 	li      r9,0
10006b80:	91 3f 00 08 	stw     r9,8(r31)
10006b84:	48 00 01 48 	b       10006ccc <idle+0x168>
	{
	c = &connects[cnum];
10006b88:	3d 20 10 03 	lis     r9,4099
10006b8c:	81 49 db 04 	lwz     r10,-9468(r9)
10006b90:	81 3f 00 08 	lwz     r9,8(r31)
10006b94:	1d 29 00 60 	mulli   r9,r9,96
10006b98:	7d 2a 4a 14 	add     r9,r10,r9
10006b9c:	91 3f 00 0c 	stw     r9,12(r31)
	switch ( c->conn_state )
10006ba0:	81 3f 00 0c 	lwz     r9,12(r31)
10006ba4:	81 29 00 00 	lwz     r9,0(r9)
10006ba8:	2f 89 00 01 	cmpwi   cr7,r9,1
10006bac:	41 9e 00 18 	beq     cr7,10006bc4 <idle+0x60>
10006bb0:	2f 89 00 01 	cmpwi   cr7,r9,1
10006bb4:	41 9c 01 0c 	blt     cr7,10006cc0 <idle+0x15c>
10006bb8:	2f 89 00 03 	cmpwi   cr7,r9,3
10006bbc:	41 9d 01 04 	bgt     cr7,10006cc0 <idle+0x15c>
10006bc0:	48 00 00 a0 	b       10006c60 <idle+0xfc>
	    {
	    case CNST_READING:
	    if ( nowP->tv_sec - c->active_at >= IDLE_READ_TIMELIMIT )
10006bc4:	81 3f 00 18 	lwz     r9,24(r31)
10006bc8:	81 49 00 00 	lwz     r10,0(r9)
10006bcc:	81 3f 00 0c 	lwz     r9,12(r31)
10006bd0:	81 29 00 44 	lwz     r9,68(r9)
10006bd4:	7d 29 50 50 	subf    r9,r9,r10
10006bd8:	2f 89 00 3b 	cmpwi   cr7,r9,59
10006bdc:	40 9d 00 80 	ble     cr7,10006c5c <idle+0xf8>
		{
		syslog( LOG_INFO,
		    "%.80s connection timed out reading",
		    httpd_ntoa( &c->hc->client_addr ) );
10006be0:	81 3f 00 0c 	lwz     r9,12(r31)
10006be4:	81 29 00 08 	lwz     r9,8(r9)
	switch ( c->conn_state )
	    {
	    case CNST_READING:
	    if ( nowP->tv_sec - c->active_at >= IDLE_READ_TIMELIMIT )
		{
		syslog( LOG_INFO,
10006be8:	39 29 00 08 	addi    r9,r9,8
10006bec:	7d 23 4b 78 	mr      r3,r9
10006bf0:	48 00 a7 5d 	bl      1001134c <httpd_ntoa>
10006bf4:	7c 69 1b 78 	mr      r9,r3
10006bf8:	38 60 00 06 	li      r3,6
10006bfc:	3d 40 10 02 	lis     r10,4098
10006c00:	38 8a 87 94 	addi    r4,r10,-30828
10006c04:	7d 25 4b 78 	mr      r5,r9
10006c08:	4c c6 31 82 	crclr   4*cr1+eq
10006c0c:	48 02 6b 79 	bl      1002d784 <syslog@plt>
		    "%.80s connection timed out reading",
		    httpd_ntoa( &c->hc->client_addr ) );
		httpd_send_err(
10006c10:	81 3f 00 0c 	lwz     r9,12(r31)
10006c14:	81 09 00 08 	lwz     r8,8(r9)
10006c18:	3d 20 10 03 	lis     r9,4099
10006c1c:	81 49 d3 40 	lwz     r10,-11456(r9)
10006c20:	3d 20 10 03 	lis     r9,4099
10006c24:	81 29 d3 44 	lwz     r9,-11452(r9)
10006c28:	7d 03 43 78 	mr      r3,r8
10006c2c:	38 80 01 98 	li      r4,408
10006c30:	7d 45 53 78 	mr      r5,r10
10006c34:	3d 40 10 02 	lis     r10,4098
10006c38:	38 ca 81 20 	addi    r6,r10,-32480
10006c3c:	7d 27 4b 78 	mr      r7,r9
10006c40:	3d 20 10 02 	lis     r9,4098
10006c44:	39 09 81 20 	addi    r8,r9,-32480
10006c48:	48 00 1b ad 	bl      100087f4 <httpd_send_err>
		    c->hc, 408, httpd_err408title, "", httpd_err408form, "" );
		finish_connection( c, nowP );
10006c4c:	80 7f 00 0c 	lwz     r3,12(r31)
10006c50:	80 9f 00 18 	lwz     r4,24(r31)
10006c54:	4b ff fb f5 	bl      10006848 <finish_connection>
		}
	    break;
10006c58:	48 00 00 68 	b       10006cc0 <idle+0x15c>
10006c5c:	48 00 00 64 	b       10006cc0 <idle+0x15c>
	    case CNST_SENDING:
	    case CNST_PAUSING:
	    if ( nowP->tv_sec - c->active_at >= IDLE_SEND_TIMELIMIT )
10006c60:	81 3f 00 18 	lwz     r9,24(r31)
10006c64:	81 49 00 00 	lwz     r10,0(r9)
10006c68:	81 3f 00 0c 	lwz     r9,12(r31)
10006c6c:	81 29 00 44 	lwz     r9,68(r9)
10006c70:	7d 29 50 50 	subf    r9,r9,r10
10006c74:	2f 89 01 2b 	cmpwi   cr7,r9,299
10006c78:	40 9d 00 44 	ble     cr7,10006cbc <idle+0x158>
		{
		syslog( LOG_INFO,
		    "%.80s connection timed out sending",
		    httpd_ntoa( &c->hc->client_addr ) );
10006c7c:	81 3f 00 0c 	lwz     r9,12(r31)
10006c80:	81 29 00 08 	lwz     r9,8(r9)
	    break;
	    case CNST_SENDING:
	    case CNST_PAUSING:
	    if ( nowP->tv_sec - c->active_at >= IDLE_SEND_TIMELIMIT )
		{
		syslog( LOG_INFO,
10006c84:	39 29 00 08 	addi    r9,r9,8
10006c88:	7d 23 4b 78 	mr      r3,r9
10006c8c:	48 00 a6 c1 	bl      1001134c <httpd_ntoa>
10006c90:	7c 69 1b 78 	mr      r9,r3
10006c94:	38 60 00 06 	li      r3,6
10006c98:	3d 40 10 02 	lis     r10,4098
10006c9c:	38 8a 87 b8 	addi    r4,r10,-30792
10006ca0:	7d 25 4b 78 	mr      r5,r9
10006ca4:	4c c6 31 82 	crclr   4*cr1+eq
10006ca8:	48 02 6a dd 	bl      1002d784 <syslog@plt>
		    "%.80s connection timed out sending",
		    httpd_ntoa( &c->hc->client_addr ) );
		clear_connection( c, nowP );
10006cac:	80 7f 00 0c 	lwz     r3,12(r31)
10006cb0:	80 9f 00 18 	lwz     r4,24(r31)
10006cb4:	4b ff fb e5 	bl      10006898 <clear_connection>
		}
	    break;
10006cb8:	48 00 00 04 	b       10006cbc <idle+0x158>
10006cbc:	60 00 00 00 	nop
idle( ClientData client_data, struct timeval* nowP )
    {
    int cnum;
    connecttab* c;

    for ( cnum = 0; cnum < max_connects; ++cnum )
10006cc0:	81 3f 00 08 	lwz     r9,8(r31)
10006cc4:	39 29 00 01 	addi    r9,r9,1
10006cc8:	91 3f 00 08 	stw     r9,8(r31)
10006ccc:	3d 20 10 03 	lis     r9,4099
10006cd0:	81 29 db 0c 	lwz     r9,-9460(r9)
10006cd4:	81 5f 00 08 	lwz     r10,8(r31)
10006cd8:	7f 8a 48 00 	cmpw    cr7,r10,r9
10006cdc:	41 9c fe ac 	blt     cr7,10006b88 <idle+0x24>
		clear_connection( c, nowP );
		}
	    break;
	    }
	}
    }
10006ce0:	39 7f 00 30 	addi    r11,r31,48
10006ce4:	80 0b 00 04 	lwz     r0,4(r11)
10006ce8:	7c 08 03 a6 	mtlr    r0
10006cec:	83 eb ff fc 	lwz     r31,-4(r11)
10006cf0:	7d 61 5b 78 	mr      r1,r11
10006cf4:	4e 80 00 20 	blr

10006cf8 <wakeup_connection>:


static void
wakeup_connection( ClientData client_data, struct timeval* nowP )
    {
10006cf8:	94 21 ff d0 	stwu    r1,-48(r1)
10006cfc:	7c 08 02 a6 	mflr    r0
10006d00:	90 01 00 34 	stw     r0,52(r1)
10006d04:	93 c1 00 28 	stw     r30,40(r1)
10006d08:	93 e1 00 2c 	stw     r31,44(r1)
10006d0c:	7c 3f 0b 78 	mr      r31,r1
10006d10:	7c 7e 1b 78 	mr      r30,r3
10006d14:	90 9f 00 18 	stw     r4,24(r31)
    connecttab* c;

    c = (connecttab*) client_data.p;
10006d18:	81 3e 00 00 	lwz     r9,0(r30)
10006d1c:	91 3f 00 08 	stw     r9,8(r31)
    c->wakeup_timer = (Timer*) 0;
10006d20:	81 3f 00 08 	lwz     r9,8(r31)
10006d24:	39 40 00 00 	li      r10,0
10006d28:	91 49 00 48 	stw     r10,72(r9)
    if ( c->conn_state == CNST_PAUSING )
10006d2c:	81 3f 00 08 	lwz     r9,8(r31)
10006d30:	81 29 00 00 	lwz     r9,0(r9)
10006d34:	2f 89 00 03 	cmpwi   cr7,r9,3
10006d38:	40 9e 00 2c 	bne     cr7,10006d64 <wakeup_connection+0x6c>
	{
	c->conn_state = CNST_SENDING;
10006d3c:	81 3f 00 08 	lwz     r9,8(r31)
10006d40:	39 40 00 02 	li      r10,2
10006d44:	91 49 00 00 	stw     r10,0(r9)
	fdwatch_add_fd( c->hc->conn_fd, c, FDW_WRITE );
10006d48:	81 3f 00 08 	lwz     r9,8(r31)
10006d4c:	81 29 00 08 	lwz     r9,8(r9)
10006d50:	81 29 01 c0 	lwz     r9,448(r9)
10006d54:	7d 23 4b 78 	mr      r3,r9
10006d58:	80 9f 00 08 	lwz     r4,8(r31)
10006d5c:	38 a0 00 01 	li      r5,1
10006d60:	48 00 ad 29 	bl      10011a88 <fdwatch_add_fd>
	}
    }
10006d64:	39 7f 00 30 	addi    r11,r31,48
10006d68:	80 0b 00 04 	lwz     r0,4(r11)
10006d6c:	7c 08 03 a6 	mtlr    r0
10006d70:	83 cb ff f8 	lwz     r30,-8(r11)
10006d74:	83 eb ff fc 	lwz     r31,-4(r11)
10006d78:	7d 61 5b 78 	mr      r1,r11
10006d7c:	4e 80 00 20 	blr

10006d80 <linger_clear_connection>:

static void
linger_clear_connection( ClientData client_data, struct timeval* nowP )
    {
10006d80:	94 21 ff d0 	stwu    r1,-48(r1)
10006d84:	7c 08 02 a6 	mflr    r0
10006d88:	90 01 00 34 	stw     r0,52(r1)
10006d8c:	93 c1 00 28 	stw     r30,40(r1)
10006d90:	93 e1 00 2c 	stw     r31,44(r1)
10006d94:	7c 3f 0b 78 	mr      r31,r1
10006d98:	7c 7e 1b 78 	mr      r30,r3
10006d9c:	90 9f 00 18 	stw     r4,24(r31)
    connecttab* c;

    c = (connecttab*) client_data.p;
10006da0:	81 3e 00 00 	lwz     r9,0(r30)
10006da4:	91 3f 00 08 	stw     r9,8(r31)
    c->linger_timer = (Timer*) 0;
10006da8:	81 3f 00 08 	lwz     r9,8(r31)
10006dac:	39 40 00 00 	li      r10,0
10006db0:	91 49 00 4c 	stw     r10,76(r9)
    really_clear_connection( c, nowP );
10006db4:	80 7f 00 08 	lwz     r3,8(r31)
10006db8:	80 9f 00 18 	lwz     r4,24(r31)
10006dbc:	4b ff fc 89 	bl      10006a44 <really_clear_connection>
    }
10006dc0:	39 7f 00 30 	addi    r11,r31,48
10006dc4:	80 0b 00 04 	lwz     r0,4(r11)
10006dc8:	7c 08 03 a6 	mtlr    r0
10006dcc:	83 cb ff f8 	lwz     r30,-8(r11)
10006dd0:	83 eb ff fc 	lwz     r31,-4(r11)
10006dd4:	7d 61 5b 78 	mr      r1,r11
10006dd8:	4e 80 00 20 	blr

10006ddc <occasional>:


static void
occasional( ClientData client_data, struct timeval* nowP )
    {
10006ddc:	94 21 ff e0 	stwu    r1,-32(r1)
10006de0:	7c 08 02 a6 	mflr    r0
10006de4:	90 01 00 24 	stw     r0,36(r1)
10006de8:	93 e1 00 1c 	stw     r31,28(r1)
10006dec:	7c 3f 0b 78 	mr      r31,r1
10006df0:	90 9f 00 08 	stw     r4,8(r31)
    mmc_cleanup( nowP );
10006df4:	80 7f 00 08 	lwz     r3,8(r31)
10006df8:	48 00 bc e1 	bl      10012ad8 <mmc_cleanup>
    tmr_cleanup();
10006dfc:	48 00 d3 65 	bl      10014160 <tmr_cleanup>
    watchdog_flag = 1;		/* let the watchdog know that we are alive */
10006e00:	3d 20 10 03 	lis     r9,4099
10006e04:	39 40 00 01 	li      r10,1
10006e08:	91 49 db 24 	stw     r10,-9436(r9)
    }
10006e0c:	39 7f 00 20 	addi    r11,r31,32
10006e10:	80 0b 00 04 	lwz     r0,4(r11)
10006e14:	7c 08 03 a6 	mtlr    r0
10006e18:	83 eb ff fc 	lwz     r31,-4(r11)
10006e1c:	7d 61 5b 78 	mr      r1,r11
10006e20:	4e 80 00 20 	blr

10006e24 <show_stats>:


#ifdef STATS_TIME
static void
show_stats( ClientData client_data, struct timeval* nowP )
    {
10006e24:	94 21 ff e0 	stwu    r1,-32(r1)
10006e28:	7c 08 02 a6 	mflr    r0
10006e2c:	90 01 00 24 	stw     r0,36(r1)
10006e30:	93 e1 00 1c 	stw     r31,28(r1)
10006e34:	7c 3f 0b 78 	mr      r31,r1
10006e38:	90 9f 00 08 	stw     r4,8(r31)
    logstats( nowP );
10006e3c:	80 7f 00 08 	lwz     r3,8(r31)
10006e40:	48 00 00 1d 	bl      10006e5c <logstats>
    }
10006e44:	39 7f 00 20 	addi    r11,r31,32
10006e48:	80 0b 00 04 	lwz     r0,4(r11)
10006e4c:	7c 08 03 a6 	mtlr    r0
10006e50:	83 eb ff fc 	lwz     r31,-4(r11)
10006e54:	7d 61 5b 78 	mr      r1,r11
10006e58:	4e 80 00 20 	blr

10006e5c <logstats>:


/* Generate debugging statistics syslog messages for all packages. */
static void
logstats( struct timeval* nowP )
    {
10006e5c:	94 21 ff c0 	stwu    r1,-64(r1)
10006e60:	7c 08 02 a6 	mflr    r0
10006e64:	90 01 00 44 	stw     r0,68(r1)
10006e68:	93 e1 00 3c 	stw     r31,60(r1)
10006e6c:	7c 3f 0b 78 	mr      r31,r1
10006e70:	90 7f 00 28 	stw     r3,40(r31)
    struct timeval tv;
    time_t now;
    long up_secs, stats_secs;

    if ( nowP == (struct timeval*) 0 )
10006e74:	81 3f 00 28 	lwz     r9,40(r31)
10006e78:	2f 89 00 00 	cmpwi   cr7,r9,0
10006e7c:	40 9e 00 1c 	bne     cr7,10006e98 <logstats+0x3c>
	{
	(void) gettimeofday( &tv, (struct timezone*) 0 );
10006e80:	39 3f 00 14 	addi    r9,r31,20
10006e84:	7d 23 4b 78 	mr      r3,r9
10006e88:	38 80 00 00 	li      r4,0
10006e8c:	48 02 66 09 	bl      1002d494 <gettimeofday@plt>
	nowP = &tv;
10006e90:	39 3f 00 14 	addi    r9,r31,20
10006e94:	91 3f 00 28 	stw     r9,40(r31)
	}
    now = nowP->tv_sec;
10006e98:	81 3f 00 28 	lwz     r9,40(r31)
10006e9c:	81 29 00 00 	lwz     r9,0(r9)
10006ea0:	91 3f 00 0c 	stw     r9,12(r31)
    up_secs = now - start_time;
10006ea4:	3d 20 10 03 	lis     r9,4099
10006ea8:	81 29 d3 60 	lwz     r9,-11424(r9)
10006eac:	81 5f 00 0c 	lwz     r10,12(r31)
10006eb0:	7d 29 50 50 	subf    r9,r9,r10
10006eb4:	91 3f 00 10 	stw     r9,16(r31)
    stats_secs = now - stats_time;
10006eb8:	3d 20 10 03 	lis     r9,4099
10006ebc:	81 29 d3 64 	lwz     r9,-11420(r9)
10006ec0:	81 5f 00 0c 	lwz     r10,12(r31)
10006ec4:	7d 29 50 50 	subf    r9,r9,r10
10006ec8:	91 3f 00 08 	stw     r9,8(r31)
    if ( stats_secs == 0 )
10006ecc:	81 3f 00 08 	lwz     r9,8(r31)
10006ed0:	2f 89 00 00 	cmpwi   cr7,r9,0
10006ed4:	40 9e 00 0c 	bne     cr7,10006ee0 <logstats+0x84>
	stats_secs = 1;	/* fudge */
10006ed8:	39 20 00 01 	li      r9,1
10006edc:	91 3f 00 08 	stw     r9,8(r31)
    stats_time = now;
10006ee0:	3d 20 10 03 	lis     r9,4099
10006ee4:	81 5f 00 0c 	lwz     r10,12(r31)
10006ee8:	91 49 d3 64 	stw     r10,-11420(r9)
    syslog( LOG_NOTICE,
10006eec:	38 60 00 05 	li      r3,5
10006ef0:	3d 20 10 02 	lis     r9,4098
10006ef4:	38 89 87 dc 	addi    r4,r9,-30756
10006ef8:	80 bf 00 10 	lwz     r5,16(r31)
10006efc:	80 df 00 08 	lwz     r6,8(r31)
10006f00:	4c c6 31 82 	crclr   4*cr1+eq
10006f04:	48 02 68 81 	bl      1002d784 <syslog@plt>
	"up %ld seconds, stats for %ld seconds:", up_secs, stats_secs );

    thttpd_logstats( stats_secs );
10006f08:	80 7f 00 08 	lwz     r3,8(r31)
10006f0c:	48 00 00 3d 	bl      10006f48 <thttpd_logstats>
    httpd_logstats( stats_secs );
10006f10:	80 7f 00 08 	lwz     r3,8(r31)
10006f14:	48 00 a8 ed 	bl      10011800 <httpd_logstats>
    mmc_logstats( stats_secs );
10006f18:	80 7f 00 08 	lwz     r3,8(r31)
10006f1c:	48 00 c5 65 	bl      10013480 <mmc_logstats>
    fdwatch_logstats( stats_secs );
10006f20:	80 7f 00 08 	lwz     r3,8(r31)
10006f24:	48 00 ae d5 	bl      10011df8 <fdwatch_logstats>
    tmr_logstats( stats_secs );
10006f28:	80 7f 00 08 	lwz     r3,8(r31)
10006f2c:	48 00 d3 59 	bl      10014284 <tmr_logstats>
    }
10006f30:	39 7f 00 40 	addi    r11,r31,64
10006f34:	80 0b 00 04 	lwz     r0,4(r11)
10006f38:	7c 08 03 a6 	mtlr    r0
10006f3c:	83 eb ff fc 	lwz     r31,-4(r11)
10006f40:	7d 61 5b 78 	mr      r1,r11
10006f44:	4e 80 00 20 	blr

10006f48 <thttpd_logstats>:


/* Generate debugging statistics syslog message. */
static void
thttpd_logstats( long secs )
    {
10006f48:	94 21 ff c0 	stwu    r1,-64(r1)
10006f4c:	7c 08 02 a6 	mflr    r0
10006f50:	90 01 00 44 	stw     r0,68(r1)
10006f54:	93 e1 00 3c 	stw     r31,60(r1)
10006f58:	7c 3f 0b 78 	mr      r31,r1
10006f5c:	90 7f 00 08 	stw     r3,8(r31)
    if ( secs > 0 )
10006f60:	81 1f 00 08 	lwz     r8,8(r31)
10006f64:	2f 88 00 00 	cmpwi   cr7,r8,0
10006f68:	40 9d 01 14 	ble     cr7,1000707c <thttpd_logstats+0x134>
	syslog( LOG_NOTICE,
10006f6c:	3d 00 10 03 	lis     r8,4099
10006f70:	80 c8 d3 68 	lwz     r6,-11416(r8)
	    "  thttpd - %ld connections (%g/sec), %d max simultaneous, %lld bytes (%g/sec), %d httpd_conns allocated",
	    stats_connections, (float) stats_connections / secs,
10006f74:	3d 00 10 03 	lis     r8,4099
10006f78:	80 e8 d3 68 	lwz     r7,-11416(r8)
10006f7c:	3d 00 43 30 	lis     r8,17200
10006f80:	3c a0 10 02 	lis     r5,4098
10006f84:	c8 05 88 70 	lfd     f0,-30608(r5)
10006f88:	6c e7 80 00 	xoris   r7,r7,32768
10006f8c:	90 ff 00 14 	stw     r7,20(r31)
10006f90:	91 1f 00 10 	stw     r8,16(r31)
10006f94:	c9 bf 00 10 	lfd     f13,16(r31)
10006f98:	fc 0d 00 28 	fsub    f0,f13,f0
10006f9c:	fd a0 00 18 	frsp    f13,f0
10006fa0:	80 ff 00 08 	lwz     r7,8(r31)
10006fa4:	3d 00 43 30 	lis     r8,17200
10006fa8:	3c a0 10 02 	lis     r5,4098
10006fac:	c8 05 88 70 	lfd     f0,-30608(r5)
10006fb0:	6c e7 80 00 	xoris   r7,r7,32768
10006fb4:	90 ff 00 1c 	stw     r7,28(r31)
10006fb8:	91 1f 00 18 	stw     r8,24(r31)
10006fbc:	c9 9f 00 18 	lfd     f12,24(r31)
10006fc0:	fc 0c 00 28 	fsub    f0,f12,f0
10006fc4:	fc 00 00 18 	frsp    f0,f0
10006fc8:	ec 0d 00 24 	fdivs   f0,f13,f0
/* Generate debugging statistics syslog message. */
static void
thttpd_logstats( long secs )
    {
    if ( secs > 0 )
	syslog( LOG_NOTICE,
10006fcc:	fd a0 00 90 	fmr     f13,f0
10006fd0:	3d 00 10 03 	lis     r8,4099
10006fd4:	80 e8 d3 5c 	lwz     r7,-11428(r8)
10006fd8:	3d 00 10 03 	lis     r8,4099
10006fdc:	81 08 d3 58 	lwz     r8,-11432(r8)
10006fe0:	7d 0a 43 78 	mr      r10,r8
10006fe4:	7d 08 fe 70 	srawi   r8,r8,31
10006fe8:	7d 09 43 78 	mr      r9,r8
	    "  thttpd - %ld connections (%g/sec), %d max simultaneous, %lld bytes (%g/sec), %d httpd_conns allocated",
	    stats_connections, (float) stats_connections / secs,
	    stats_simultaneous, (long long) stats_bytes,
	    (float) stats_bytes / secs, httpd_conn_count );
10006fec:	3d 00 10 03 	lis     r8,4099
10006ff0:	80 a8 d3 58 	lwz     r5,-11432(r8)
10006ff4:	3d 00 43 30 	lis     r8,17200
10006ff8:	3c 80 10 02 	lis     r4,4098
10006ffc:	c8 04 88 70 	lfd     f0,-30608(r4)
10007000:	6c a5 80 00 	xoris   r5,r5,32768
10007004:	90 bf 00 24 	stw     r5,36(r31)
10007008:	91 1f 00 20 	stw     r8,32(r31)
1000700c:	c9 9f 00 20 	lfd     f12,32(r31)
10007010:	fc 0c 00 28 	fsub    f0,f12,f0
10007014:	fd 80 00 18 	frsp    f12,f0
10007018:	80 bf 00 08 	lwz     r5,8(r31)
1000701c:	3d 00 43 30 	lis     r8,17200
10007020:	3c 80 10 02 	lis     r4,4098
10007024:	c8 04 88 70 	lfd     f0,-30608(r4)
10007028:	6c a5 80 00 	xoris   r5,r5,32768
1000702c:	90 bf 00 2c 	stw     r5,44(r31)
10007030:	91 1f 00 28 	stw     r8,40(r31)
10007034:	c9 7f 00 28 	lfd     f11,40(r31)
10007038:	fc 0b 00 28 	fsub    f0,f11,f0
1000703c:	fc 00 00 18 	frsp    f0,f0
10007040:	ec 0c 00 24 	fdivs   f0,f12,f0
/* Generate debugging statistics syslog message. */
static void
thttpd_logstats( long secs )
    {
    if ( secs > 0 )
	syslog( LOG_NOTICE,
10007044:	3d 00 10 03 	lis     r8,4099
10007048:	81 68 db 14 	lwz     r11,-9452(r8)
1000704c:	38 60 00 05 	li      r3,5
10007050:	3d 00 10 02 	lis     r8,4098
10007054:	38 88 88 04 	addi    r4,r8,-30716
10007058:	7c c5 33 78 	mr      r5,r6
1000705c:	fc 20 68 90 	fmr     f1,f13
10007060:	7c e6 3b 78 	mr      r6,r7
10007064:	7d 27 4b 78 	mr      r7,r9
10007068:	7d 48 53 78 	mr      r8,r10
1000706c:	fc 40 00 90 	fmr     f2,f0
10007070:	7d 69 5b 78 	mr      r9,r11
10007074:	4c c6 32 42 	crset   4*cr1+eq
10007078:	48 02 67 0d 	bl      1002d784 <syslog@plt>
	    "  thttpd - %ld connections (%g/sec), %d max simultaneous, %lld bytes (%g/sec), %d httpd_conns allocated",
	    stats_connections, (float) stats_connections / secs,
	    stats_simultaneous, (long long) stats_bytes,
	    (float) stats_bytes / secs, httpd_conn_count );
    stats_connections = 0;
1000707c:	3d 20 10 03 	lis     r9,4099
10007080:	39 40 00 00 	li      r10,0
10007084:	91 49 d3 68 	stw     r10,-11416(r9)
    stats_bytes = 0;
10007088:	3d 20 10 03 	lis     r9,4099
1000708c:	39 40 00 00 	li      r10,0
10007090:	91 49 d3 58 	stw     r10,-11432(r9)
    stats_simultaneous = 0;
10007094:	3d 20 10 03 	lis     r9,4099
10007098:	39 40 00 00 	li      r10,0
1000709c:	91 49 d3 5c 	stw     r10,-11428(r9)
    }
100070a0:	39 7f 00 40 	addi    r11,r31,64
100070a4:	80 0b 00 04 	lwz     r0,4(r11)
100070a8:	7c 08 03 a6 	mtlr    r0
100070ac:	83 eb ff fc 	lwz     r31,-4(r11)
100070b0:	7d 61 5b 78 	mr      r1,r11
100070b4:	4e 80 00 20 	blr

100070b8 <json_decref>:
/* do not call json_delete directly */
void json_delete(json_t *json);

static JSON_INLINE
void json_decref(json_t *json)
{
100070b8:	94 21 ff e0 	stwu    r1,-32(r1)
100070bc:	7c 08 02 a6 	mflr    r0
100070c0:	90 01 00 24 	stw     r0,36(r1)
100070c4:	93 e1 00 1c 	stw     r31,28(r1)
100070c8:	7c 3f 0b 78 	mr      r31,r1
100070cc:	90 7f 00 08 	stw     r3,8(r31)
    if(json && json->refcount != (size_t)-1 && JSON_INTERNAL_DECREF(json) == 0)
100070d0:	81 3f 00 08 	lwz     r9,8(r31)
100070d4:	2f 89 00 00 	cmpwi   cr7,r9,0
100070d8:	41 9e 00 4c 	beq     cr7,10007124 <json_decref+0x6c>
100070dc:	81 3f 00 08 	lwz     r9,8(r31)
100070e0:	81 49 00 04 	lwz     r10,4(r9)
100070e4:	39 20 ff ff 	li      r9,-1
100070e8:	7f 8a 48 00 	cmpw    cr7,r10,r9
100070ec:	41 9e 00 38 	beq     cr7,10007124 <json_decref+0x6c>
100070f0:	81 3f 00 08 	lwz     r9,8(r31)
100070f4:	39 49 00 04 	addi    r10,r9,4
100070f8:	39 00 00 01 	li      r8,1
100070fc:	7c 20 04 ac 	lwsync
10007100:	7d 20 50 28 	lwarx   r9,0,r10
10007104:	7d 28 48 50 	subf    r9,r8,r9
10007108:	7d 20 51 2d 	stwcx.  r9,0,r10
1000710c:	4f 80 00 00 	mcrf    cr7,cr0
10007110:	40 9e ff f0 	bne     cr7,10007100 <json_decref+0x48>
10007114:	2f 89 00 00 	cmpwi   cr7,r9,0
10007118:	40 9e 00 0c 	bne     cr7,10007124 <json_decref+0x6c>
        json_delete(json);
1000711c:	80 7f 00 08 	lwz     r3,8(r31)
10007120:	48 02 63 8d 	bl      1002d4ac <json_delete@plt>
}
10007124:	39 7f 00 20 	addi    r11,r31,32
10007128:	80 0b 00 04 	lwz     r0,4(r11)
1000712c:	7c 08 03 a6 	mtlr    r0
10007130:	83 eb ff fc 	lwz     r31,-4(r11)
10007134:	7d 61 5b 78 	mr      r1,r11
10007138:	4e 80 00 20 	blr

1000713c <check_options>:
static int sub_process = 0;


static void
check_options( void )
    {
1000713c:	94 21 ff f0 	stwu    r1,-16(r1)
10007140:	93 e1 00 0c 	stw     r31,12(r1)
10007144:	7c 3f 0b 78 	mr      r31,r1
#if defined(TILDE_MAP_1) && defined(TILDE_MAP_2)
    syslog( LOG_CRIT, "both TILDE_MAP_1 and TILDE_MAP_2 are defined" );
    exit( 1 );
#endif /* both */
    }
10007148:	39 7f 00 10 	addi    r11,r31,16
1000714c:	83 eb ff fc 	lwz     r31,-4(r11)
10007150:	7d 61 5b 78 	mr      r1,r11
10007154:	4e 80 00 20 	blr

10007158 <free_httpd_server>:


static void
free_httpd_server( httpd_server* hs )
    {
10007158:	94 21 ff e0 	stwu    r1,-32(r1)
1000715c:	7c 08 02 a6 	mflr    r0
10007160:	90 01 00 24 	stw     r0,36(r1)
10007164:	93 e1 00 1c 	stw     r31,28(r1)
10007168:	7c 3f 0b 78 	mr      r31,r1
1000716c:	90 7f 00 08 	stw     r3,8(r31)
    if ( hs->binding_hostname != (char*) 0 )
10007170:	81 3f 00 08 	lwz     r9,8(r31)
10007174:	81 29 00 00 	lwz     r9,0(r9)
10007178:	2f 89 00 00 	cmpwi   cr7,r9,0
1000717c:	41 9e 00 14 	beq     cr7,10007190 <free_httpd_server+0x38>
	free( (void*) hs->binding_hostname );
10007180:	81 3f 00 08 	lwz     r9,8(r31)
10007184:	81 29 00 00 	lwz     r9,0(r9)
10007188:	7d 23 4b 78 	mr      r3,r9
1000718c:	48 02 62 a9 	bl      1002d434 <free@plt>
    if ( hs->cwd != (char*) 0 )
10007190:	81 3f 00 08 	lwz     r9,8(r31)
10007194:	81 29 00 24 	lwz     r9,36(r9)
10007198:	2f 89 00 00 	cmpwi   cr7,r9,0
1000719c:	41 9e 00 14 	beq     cr7,100071b0 <free_httpd_server+0x58>
	free( (void*) hs->cwd );
100071a0:	81 3f 00 08 	lwz     r9,8(r31)
100071a4:	81 29 00 24 	lwz     r9,36(r9)
100071a8:	7d 23 4b 78 	mr      r3,r9
100071ac:	48 02 62 89 	bl      1002d434 <free@plt>
    if ( hs->cgi_pattern != (char*) 0 )
100071b0:	81 3f 00 08 	lwz     r9,8(r31)
100071b4:	81 29 00 0c 	lwz     r9,12(r9)
100071b8:	2f 89 00 00 	cmpwi   cr7,r9,0
100071bc:	41 9e 00 14 	beq     cr7,100071d0 <free_httpd_server+0x78>
	free( (void*) hs->cgi_pattern );
100071c0:	81 3f 00 08 	lwz     r9,8(r31)
100071c4:	81 29 00 0c 	lwz     r9,12(r9)
100071c8:	7d 23 4b 78 	mr      r3,r9
100071cc:	48 02 62 69 	bl      1002d434 <free@plt>
    if ( hs->charset != (char*) 0 )
100071d0:	81 3f 00 08 	lwz     r9,8(r31)
100071d4:	81 29 00 18 	lwz     r9,24(r9)
100071d8:	2f 89 00 00 	cmpwi   cr7,r9,0
100071dc:	41 9e 00 14 	beq     cr7,100071f0 <free_httpd_server+0x98>
	free( (void*) hs->charset );
100071e0:	81 3f 00 08 	lwz     r9,8(r31)
100071e4:	81 29 00 18 	lwz     r9,24(r9)
100071e8:	7d 23 4b 78 	mr      r3,r9
100071ec:	48 02 62 49 	bl      1002d434 <free@plt>
    if ( hs->p3p != (char*) 0 )
100071f0:	81 3f 00 08 	lwz     r9,8(r31)
100071f4:	81 29 00 1c 	lwz     r9,28(r9)
100071f8:	2f 89 00 00 	cmpwi   cr7,r9,0
100071fc:	41 9e 00 14 	beq     cr7,10007210 <free_httpd_server+0xb8>
	free( (void*) hs->p3p );
10007200:	81 3f 00 08 	lwz     r9,8(r31)
10007204:	81 29 00 1c 	lwz     r9,28(r9)
10007208:	7d 23 4b 78 	mr      r3,r9
1000720c:	48 02 62 29 	bl      1002d434 <free@plt>
    if ( hs->url_pattern != (char*) 0 )
10007210:	81 3f 00 08 	lwz     r9,8(r31)
10007214:	81 29 00 44 	lwz     r9,68(r9)
10007218:	2f 89 00 00 	cmpwi   cr7,r9,0
1000721c:	41 9e 00 14 	beq     cr7,10007230 <free_httpd_server+0xd8>
	free( (void*) hs->url_pattern );
10007220:	81 3f 00 08 	lwz     r9,8(r31)
10007224:	81 29 00 44 	lwz     r9,68(r9)
10007228:	7d 23 4b 78 	mr      r3,r9
1000722c:	48 02 62 09 	bl      1002d434 <free@plt>
    if ( hs->local_pattern != (char*) 0 )
10007230:	81 3f 00 08 	lwz     r9,8(r31)
10007234:	81 29 00 48 	lwz     r9,72(r9)
10007238:	2f 89 00 00 	cmpwi   cr7,r9,0
1000723c:	41 9e 00 14 	beq     cr7,10007250 <free_httpd_server+0xf8>
	free( (void*) hs->local_pattern );
10007240:	81 3f 00 08 	lwz     r9,8(r31)
10007244:	81 29 00 48 	lwz     r9,72(r9)
10007248:	7d 23 4b 78 	mr      r3,r9
1000724c:	48 02 61 e9 	bl      1002d434 <free@plt>
    free( (void*) hs );
10007250:	80 7f 00 08 	lwz     r3,8(r31)
10007254:	48 02 61 e1 	bl      1002d434 <free@plt>
    }
10007258:	39 7f 00 20 	addi    r11,r31,32
1000725c:	80 0b 00 04 	lwz     r0,4(r11)
10007260:	7c 08 03 a6 	mtlr    r0
10007264:	83 eb ff fc 	lwz     r31,-4(r11)
10007268:	7d 61 5b 78 	mr      r1,r11
1000726c:	4e 80 00 20 	blr

10007270 <httpd_initialize>:
    char* hostname, httpd_sockaddr* sa4P, httpd_sockaddr* sa6P,
    unsigned short port, char* cgi_pattern, int cgi_limit, char* charset,
    char* p3p, int max_age, char* cwd, int no_log, FILE* logfp,
    int no_symlink_check, int vhost, int global_passwd, char* url_pattern,
    char* local_pattern, int no_empty_referrers )
    {
10007270:	94 21 ff b0 	stwu    r1,-80(r1)
10007274:	7c 08 02 a6 	mflr    r0
10007278:	90 01 00 54 	stw     r0,84(r1)
1000727c:	93 a1 00 44 	stw     r29,68(r1)
10007280:	93 c1 00 48 	stw     r30,72(r1)
10007284:	93 e1 00 4c 	stw     r31,76(r1)
10007288:	7c 3f 0b 78 	mr      r31,r1
1000728c:	90 7f 00 18 	stw     r3,24(r31)
10007290:	90 9f 00 1c 	stw     r4,28(r31)
10007294:	90 bf 00 20 	stw     r5,32(r31)
10007298:	90 ff 00 28 	stw     r7,40(r31)
1000729c:	91 1f 00 2c 	stw     r8,44(r31)
100072a0:	91 3f 00 30 	stw     r9,48(r31)
100072a4:	91 5f 00 34 	stw     r10,52(r31)
100072a8:	b0 df 00 24 	sth     r6,36(r31)
    httpd_server* hs;
    static char ghnbuf[256];
    char* cp;

    check_options();
100072ac:	4b ff fe 91 	bl      1000713c <check_options>

    hs = NEW( httpd_server, 1 );
100072b0:	38 60 00 50 	li      r3,80
100072b4:	48 02 62 f1 	bl      1002d5a4 <malloc@plt>
100072b8:	7c 69 1b 78 	mr      r9,r3
100072bc:	91 3f 00 08 	stw     r9,8(r31)
    if ( hs == (httpd_server*) 0 )
100072c0:	81 3f 00 08 	lwz     r9,8(r31)
100072c4:	2f 89 00 00 	cmpwi   cr7,r9,0
100072c8:	40 9e 00 20 	bne     cr7,100072e8 <httpd_initialize+0x78>
	{
	syslog( LOG_CRIT, "out of memory allocating an httpd_server" );
100072cc:	38 60 00 02 	li      r3,2
100072d0:	3d 20 10 02 	lis     r9,4098
100072d4:	38 89 88 78 	addi    r4,r9,-30600
100072d8:	4c c6 31 82 	crclr   4*cr1+eq
100072dc:	48 02 64 a9 	bl      1002d784 <syslog@plt>
	return (httpd_server*) 0;
100072e0:	39 20 00 00 	li      r9,0
100072e4:	48 00 04 bc 	b       100077a0 <httpd_initialize+0x530>
	}

    if ( hostname != (char*) 0 )
100072e8:	81 3f 00 18 	lwz     r9,24(r31)
100072ec:	2f 89 00 00 	cmpwi   cr7,r9,0
100072f0:	41 9e 00 5c 	beq     cr7,1000734c <httpd_initialize+0xdc>
	{
	hs->binding_hostname = strdup( hostname );
100072f4:	80 7f 00 18 	lwz     r3,24(r31)
100072f8:	48 02 61 45 	bl      1002d43c <strdup@plt>
100072fc:	7c 69 1b 78 	mr      r9,r3
10007300:	7d 2a 4b 78 	mr      r10,r9
10007304:	81 3f 00 08 	lwz     r9,8(r31)
10007308:	91 49 00 00 	stw     r10,0(r9)
	if ( hs->binding_hostname == (char*) 0 )
1000730c:	81 3f 00 08 	lwz     r9,8(r31)
10007310:	81 29 00 00 	lwz     r9,0(r9)
10007314:	2f 89 00 00 	cmpwi   cr7,r9,0
10007318:	40 9e 00 20 	bne     cr7,10007338 <httpd_initialize+0xc8>
	    {
	    syslog( LOG_CRIT, "out of memory copying hostname" );
1000731c:	38 60 00 02 	li      r3,2
10007320:	3d 20 10 02 	lis     r9,4098
10007324:	38 89 88 a4 	addi    r4,r9,-30556
10007328:	4c c6 31 82 	crclr   4*cr1+eq
1000732c:	48 02 64 59 	bl      1002d784 <syslog@plt>
	    return (httpd_server*) 0;
10007330:	39 20 00 00 	li      r9,0
10007334:	48 00 04 6c 	b       100077a0 <httpd_initialize+0x530>
	    }
	hs->server_hostname = hs->binding_hostname;
10007338:	81 3f 00 08 	lwz     r9,8(r31)
1000733c:	81 49 00 00 	lwz     r10,0(r9)
10007340:	81 3f 00 08 	lwz     r9,8(r31)
10007344:	91 49 00 04 	stw     r10,4(r9)
10007348:	48 00 00 80 	b       100073c8 <httpd_initialize+0x158>
	}
    else
	{
	hs->binding_hostname = (char*) 0;
1000734c:	81 3f 00 08 	lwz     r9,8(r31)
10007350:	39 40 00 00 	li      r10,0
10007354:	91 49 00 00 	stw     r10,0(r9)
	hs->server_hostname = (char*) 0;
10007358:	81 3f 00 08 	lwz     r9,8(r31)
1000735c:	39 40 00 00 	li      r10,0
10007360:	91 49 00 04 	stw     r10,4(r9)
	if ( gethostname( ghnbuf, sizeof(ghnbuf) ) < 0 )
10007364:	3d 20 10 03 	lis     r9,4099
10007368:	38 69 db 34 	addi    r3,r9,-9420
1000736c:	38 80 01 00 	li      r4,256
10007370:	48 02 62 0d 	bl      1002d57c <gethostname@plt>
10007374:	7c 69 1b 78 	mr      r9,r3
10007378:	2f 89 00 00 	cmpwi   cr7,r9,0
1000737c:	40 9c 00 14 	bge     cr7,10007390 <httpd_initialize+0x120>
	    ghnbuf[0] = '\0';
10007380:	3d 20 10 03 	lis     r9,4099
10007384:	39 29 db 34 	addi    r9,r9,-9420
10007388:	39 40 00 00 	li      r10,0
1000738c:	99 49 00 00 	stb     r10,0(r9)
#ifdef SERVER_NAME_LIST
	if ( ghnbuf[0] != '\0' )
	    hs->server_hostname = hostname_map( ghnbuf );
#endif /* SERVER_NAME_LIST */
	if ( hs->server_hostname == (char*) 0 )
10007390:	81 3f 00 08 	lwz     r9,8(r31)
10007394:	81 29 00 04 	lwz     r9,4(r9)
10007398:	2f 89 00 00 	cmpwi   cr7,r9,0
1000739c:	40 9e 00 2c 	bne     cr7,100073c8 <httpd_initialize+0x158>
	    {
#ifdef SERVER_NAME
	    hs->server_hostname = SERVER_NAME;
#else /* SERVER_NAME */
	    if ( ghnbuf[0] != '\0' )
100073a0:	3d 20 10 03 	lis     r9,4099
100073a4:	39 29 db 34 	addi    r9,r9,-9420
100073a8:	89 29 00 00 	lbz     r9,0(r9)
100073ac:	55 29 06 3e 	clrlwi  r9,r9,24
100073b0:	2f 89 00 00 	cmpwi   cr7,r9,0
100073b4:	41 9e 00 14 	beq     cr7,100073c8 <httpd_initialize+0x158>
		hs->server_hostname = ghnbuf;
100073b8:	81 3f 00 08 	lwz     r9,8(r31)
100073bc:	3d 40 10 03 	lis     r10,4099
100073c0:	39 4a db 34 	addi    r10,r10,-9420
100073c4:	91 49 00 04 	stw     r10,4(r9)
#endif /* SERVER_NAME */
	    }
	}

    hs->port = port;
100073c8:	81 3f 00 08 	lwz     r9,8(r31)
100073cc:	a1 5f 00 24 	lhz     r10,36(r31)
100073d0:	b1 49 00 08 	sth     r10,8(r9)
    if ( cgi_pattern == (char*) 0 )
100073d4:	81 3f 00 28 	lwz     r9,40(r31)
100073d8:	2f 89 00 00 	cmpwi   cr7,r9,0
100073dc:	40 9e 00 14 	bne     cr7,100073f0 <httpd_initialize+0x180>
	hs->cgi_pattern = (char*) 0;
100073e0:	81 3f 00 08 	lwz     r9,8(r31)
100073e4:	39 40 00 00 	li      r10,0
100073e8:	91 49 00 0c 	stw     r10,12(r9)
100073ec:	48 00 00 cc 	b       100074b8 <httpd_initialize+0x248>
    else
	{
	/* Nuke any leading slashes. */
	if ( cgi_pattern[0] == '/' )
100073f0:	81 3f 00 28 	lwz     r9,40(r31)
100073f4:	89 29 00 00 	lbz     r9,0(r9)
100073f8:	55 29 06 3e 	clrlwi  r9,r9,24
100073fc:	2b 89 00 2f 	cmplwi  cr7,r9,47
10007400:	40 9e 00 10 	bne     cr7,10007410 <httpd_initialize+0x1a0>
	    ++cgi_pattern;
10007404:	81 3f 00 28 	lwz     r9,40(r31)
10007408:	39 29 00 01 	addi    r9,r9,1
1000740c:	91 3f 00 28 	stw     r9,40(r31)
	hs->cgi_pattern = strdup( cgi_pattern );
10007410:	80 7f 00 28 	lwz     r3,40(r31)
10007414:	48 02 60 29 	bl      1002d43c <strdup@plt>
10007418:	7c 69 1b 78 	mr      r9,r3
1000741c:	7d 2a 4b 78 	mr      r10,r9
10007420:	81 3f 00 08 	lwz     r9,8(r31)
10007424:	91 49 00 0c 	stw     r10,12(r9)
	if ( hs->cgi_pattern == (char*) 0 )
10007428:	81 3f 00 08 	lwz     r9,8(r31)
1000742c:	81 29 00 0c 	lwz     r9,12(r9)
10007430:	2f 89 00 00 	cmpwi   cr7,r9,0
10007434:	40 9e 00 20 	bne     cr7,10007454 <httpd_initialize+0x1e4>
	    {
	    syslog( LOG_CRIT, "out of memory copying cgi_pattern" );
10007438:	38 60 00 02 	li      r3,2
1000743c:	3d 20 10 02 	lis     r9,4098
10007440:	38 89 88 c4 	addi    r4,r9,-30524
10007444:	4c c6 31 82 	crclr   4*cr1+eq
10007448:	48 02 63 3d 	bl      1002d784 <syslog@plt>
	    return (httpd_server*) 0;
1000744c:	39 20 00 00 	li      r9,0
10007450:	48 00 03 50 	b       100077a0 <httpd_initialize+0x530>
	    }
	/* Nuke any leading slashes in the cgi pattern. */
	while ( ( cp = strstr( hs->cgi_pattern, "|/" ) ) != (char*) 0 )
10007454:	48 00 00 3c 	b       10007490 <httpd_initialize+0x220>
	    (void) ol_strcpy( cp + 1, cp + 2 );
10007458:	81 3f 00 0c 	lwz     r9,12(r31)
1000745c:	3b a9 00 01 	addi    r29,r9,1
10007460:	81 3f 00 0c 	lwz     r9,12(r31)
10007464:	3b c9 00 02 	addi    r30,r9,2
10007468:	81 3f 00 0c 	lwz     r9,12(r31)
1000746c:	39 29 00 02 	addi    r9,r9,2
10007470:	7d 23 4b 78 	mr      r3,r9
10007474:	48 02 61 e1 	bl      1002d654 <strlen@plt>
10007478:	7c 69 1b 78 	mr      r9,r3
1000747c:	39 29 00 01 	addi    r9,r9,1
10007480:	7f a3 eb 78 	mr      r3,r29
10007484:	7f c4 f3 78 	mr      r4,r30
10007488:	7d 25 4b 78 	mr      r5,r9
1000748c:	48 02 5f 99 	bl      1002d424 <memmove@plt>
	    {
	    syslog( LOG_CRIT, "out of memory copying cgi_pattern" );
	    return (httpd_server*) 0;
	    }
	/* Nuke any leading slashes in the cgi pattern. */
	while ( ( cp = strstr( hs->cgi_pattern, "|/" ) ) != (char*) 0 )
10007490:	81 3f 00 08 	lwz     r9,8(r31)
10007494:	81 29 00 0c 	lwz     r9,12(r9)
10007498:	7d 23 4b 78 	mr      r3,r9
1000749c:	3d 20 10 02 	lis     r9,4098
100074a0:	38 89 88 e8 	addi    r4,r9,-30488
100074a4:	48 02 5f 31 	bl      1002d3d4 <strstr@plt>
100074a8:	90 7f 00 0c 	stw     r3,12(r31)
100074ac:	81 3f 00 0c 	lwz     r9,12(r31)
100074b0:	2f 89 00 00 	cmpwi   cr7,r9,0
100074b4:	40 9e ff a4 	bne     cr7,10007458 <httpd_initialize+0x1e8>
	    (void) ol_strcpy( cp + 1, cp + 2 );
	}
    hs->cgi_limit = cgi_limit;
100074b8:	81 3f 00 08 	lwz     r9,8(r31)
100074bc:	81 5f 00 2c 	lwz     r10,44(r31)
100074c0:	91 49 00 10 	stw     r10,16(r9)
    hs->cgi_count = 0;
100074c4:	81 3f 00 08 	lwz     r9,8(r31)
100074c8:	39 40 00 00 	li      r10,0
100074cc:	91 49 00 14 	stw     r10,20(r9)
    hs->charset = strdup( charset );
100074d0:	80 7f 00 30 	lwz     r3,48(r31)
100074d4:	48 02 5f 69 	bl      1002d43c <strdup@plt>
100074d8:	7c 69 1b 78 	mr      r9,r3
100074dc:	7d 2a 4b 78 	mr      r10,r9
100074e0:	81 3f 00 08 	lwz     r9,8(r31)
100074e4:	91 49 00 18 	stw     r10,24(r9)
    hs->p3p = strdup( p3p );
100074e8:	80 7f 00 34 	lwz     r3,52(r31)
100074ec:	48 02 5f 51 	bl      1002d43c <strdup@plt>
100074f0:	7c 69 1b 78 	mr      r9,r3
100074f4:	7d 2a 4b 78 	mr      r10,r9
100074f8:	81 3f 00 08 	lwz     r9,8(r31)
100074fc:	91 49 00 1c 	stw     r10,28(r9)
    hs->max_age = max_age;
10007500:	81 3f 00 08 	lwz     r9,8(r31)
10007504:	81 5f 00 58 	lwz     r10,88(r31)
10007508:	91 49 00 20 	stw     r10,32(r9)
    hs->cwd = strdup( cwd );
1000750c:	80 7f 00 5c 	lwz     r3,92(r31)
10007510:	48 02 5f 2d 	bl      1002d43c <strdup@plt>
10007514:	7c 69 1b 78 	mr      r9,r3
10007518:	7d 2a 4b 78 	mr      r10,r9
1000751c:	81 3f 00 08 	lwz     r9,8(r31)
10007520:	91 49 00 24 	stw     r10,36(r9)
    if ( hs->cwd == (char*) 0 )
10007524:	81 3f 00 08 	lwz     r9,8(r31)
10007528:	81 29 00 24 	lwz     r9,36(r9)
1000752c:	2f 89 00 00 	cmpwi   cr7,r9,0
10007530:	40 9e 00 20 	bne     cr7,10007550 <httpd_initialize+0x2e0>
	{
	syslog( LOG_CRIT, "out of memory copying cwd" );
10007534:	38 60 00 02 	li      r3,2
10007538:	3d 20 10 02 	lis     r9,4098
1000753c:	38 89 88 ec 	addi    r4,r9,-30484
10007540:	4c c6 31 82 	crclr   4*cr1+eq
10007544:	48 02 62 41 	bl      1002d784 <syslog@plt>
	return (httpd_server*) 0;
10007548:	39 20 00 00 	li      r9,0
1000754c:	48 00 02 54 	b       100077a0 <httpd_initialize+0x530>
	}
    if ( url_pattern == (char*) 0 )
10007550:	81 3f 00 74 	lwz     r9,116(r31)
10007554:	2f 89 00 00 	cmpwi   cr7,r9,0
10007558:	40 9e 00 14 	bne     cr7,1000756c <httpd_initialize+0x2fc>
	hs->url_pattern = (char*) 0;
1000755c:	81 3f 00 08 	lwz     r9,8(r31)
10007560:	39 40 00 00 	li      r10,0
10007564:	91 49 00 44 	stw     r10,68(r9)
10007568:	48 00 00 48 	b       100075b0 <httpd_initialize+0x340>
    else
	{
	hs->url_pattern = strdup( url_pattern );
1000756c:	80 7f 00 74 	lwz     r3,116(r31)
10007570:	48 02 5e cd 	bl      1002d43c <strdup@plt>
10007574:	7c 69 1b 78 	mr      r9,r3
10007578:	7d 2a 4b 78 	mr      r10,r9
1000757c:	81 3f 00 08 	lwz     r9,8(r31)
10007580:	91 49 00 44 	stw     r10,68(r9)
	if ( hs->url_pattern == (char*) 0 )
10007584:	81 3f 00 08 	lwz     r9,8(r31)
10007588:	81 29 00 44 	lwz     r9,68(r9)
1000758c:	2f 89 00 00 	cmpwi   cr7,r9,0
10007590:	40 9e 00 20 	bne     cr7,100075b0 <httpd_initialize+0x340>
	    {
	    syslog( LOG_CRIT, "out of memory copying url_pattern" );
10007594:	38 60 00 02 	li      r3,2
10007598:	3d 20 10 02 	lis     r9,4098
1000759c:	38 89 89 08 	addi    r4,r9,-30456
100075a0:	4c c6 31 82 	crclr   4*cr1+eq
100075a4:	48 02 61 e1 	bl      1002d784 <syslog@plt>
	    return (httpd_server*) 0;
100075a8:	39 20 00 00 	li      r9,0
100075ac:	48 00 01 f4 	b       100077a0 <httpd_initialize+0x530>
	    }
	}
    if ( local_pattern == (char*) 0 )
100075b0:	81 3f 00 78 	lwz     r9,120(r31)
100075b4:	2f 89 00 00 	cmpwi   cr7,r9,0
100075b8:	40 9e 00 14 	bne     cr7,100075cc <httpd_initialize+0x35c>
	hs->local_pattern = (char*) 0;
100075bc:	81 3f 00 08 	lwz     r9,8(r31)
100075c0:	39 40 00 00 	li      r10,0
100075c4:	91 49 00 48 	stw     r10,72(r9)
100075c8:	48 00 00 48 	b       10007610 <httpd_initialize+0x3a0>
    else
	{
	hs->local_pattern = strdup( local_pattern );
100075cc:	80 7f 00 78 	lwz     r3,120(r31)
100075d0:	48 02 5e 6d 	bl      1002d43c <strdup@plt>
100075d4:	7c 69 1b 78 	mr      r9,r3
100075d8:	7d 2a 4b 78 	mr      r10,r9
100075dc:	81 3f 00 08 	lwz     r9,8(r31)
100075e0:	91 49 00 48 	stw     r10,72(r9)
	if ( hs->local_pattern == (char*) 0 )
100075e4:	81 3f 00 08 	lwz     r9,8(r31)
100075e8:	81 29 00 48 	lwz     r9,72(r9)
100075ec:	2f 89 00 00 	cmpwi   cr7,r9,0
100075f0:	40 9e 00 20 	bne     cr7,10007610 <httpd_initialize+0x3a0>
	    {
	    syslog( LOG_CRIT, "out of memory copying local_pattern" );
100075f4:	38 60 00 02 	li      r3,2
100075f8:	3d 20 10 02 	lis     r9,4098
100075fc:	38 89 89 2c 	addi    r4,r9,-30420
10007600:	4c c6 31 82 	crclr   4*cr1+eq
10007604:	48 02 61 81 	bl      1002d784 <syslog@plt>
	    return (httpd_server*) 0;
10007608:	39 20 00 00 	li      r9,0
1000760c:	48 00 01 94 	b       100077a0 <httpd_initialize+0x530>
	    }
	}
    hs->no_log = no_log;
10007610:	81 3f 00 08 	lwz     r9,8(r31)
10007614:	81 5f 00 60 	lwz     r10,96(r31)
10007618:	91 49 00 30 	stw     r10,48(r9)
    hs->logfp = (FILE*) 0;
1000761c:	81 3f 00 08 	lwz     r9,8(r31)
10007620:	39 40 00 00 	li      r10,0
10007624:	91 49 00 34 	stw     r10,52(r9)
    httpd_set_logfp( hs, logfp );
10007628:	80 7f 00 08 	lwz     r3,8(r31)
1000762c:	80 9f 00 64 	lwz     r4,100(r31)
10007630:	48 00 03 e9 	bl      10007a18 <httpd_set_logfp>
    hs->no_symlink_check = no_symlink_check;
10007634:	81 3f 00 08 	lwz     r9,8(r31)
10007638:	81 5f 00 68 	lwz     r10,104(r31)
1000763c:	91 49 00 38 	stw     r10,56(r9)
    hs->vhost = vhost;
10007640:	81 3f 00 08 	lwz     r9,8(r31)
10007644:	81 5f 00 6c 	lwz     r10,108(r31)
10007648:	91 49 00 3c 	stw     r10,60(r9)
    hs->global_passwd = global_passwd;
1000764c:	81 3f 00 08 	lwz     r9,8(r31)
10007650:	81 5f 00 70 	lwz     r10,112(r31)
10007654:	91 49 00 40 	stw     r10,64(r9)
    hs->no_empty_referrers = no_empty_referrers;
10007658:	81 3f 00 08 	lwz     r9,8(r31)
1000765c:	81 5f 00 7c 	lwz     r10,124(r31)
10007660:	91 49 00 4c 	stw     r10,76(r9)

    /* Initialize listen sockets.  Try v6 first because of a Linux peculiarity;
    ** like some other systems, it has magical v6 sockets that also listen for
    ** v4, but in Linux if you bind a v4 socket first then the v6 bind fails.
    */
    if ( sa6P == (httpd_sockaddr*) 0 )
10007664:	81 3f 00 20 	lwz     r9,32(r31)
10007668:	2f 89 00 00 	cmpwi   cr7,r9,0
1000766c:	40 9e 00 14 	bne     cr7,10007680 <httpd_initialize+0x410>
	hs->listen6_fd = -1;
10007670:	81 3f 00 08 	lwz     r9,8(r31)
10007674:	39 40 ff ff 	li      r10,-1
10007678:	91 49 00 2c 	stw     r10,44(r9)
1000767c:	48 00 00 18 	b       10007694 <httpd_initialize+0x424>
    else
	hs->listen6_fd = initialize_listen_socket( sa6P );
10007680:	80 7f 00 20 	lwz     r3,32(r31)
10007684:	48 00 01 41 	bl      100077c4 <initialize_listen_socket>
10007688:	7c 6a 1b 78 	mr      r10,r3
1000768c:	81 3f 00 08 	lwz     r9,8(r31)
10007690:	91 49 00 2c 	stw     r10,44(r9)
    if ( sa4P == (httpd_sockaddr*) 0 )
10007694:	81 3f 00 1c 	lwz     r9,28(r31)
10007698:	2f 89 00 00 	cmpwi   cr7,r9,0
1000769c:	40 9e 00 14 	bne     cr7,100076b0 <httpd_initialize+0x440>
	hs->listen4_fd = -1;
100076a0:	81 3f 00 08 	lwz     r9,8(r31)
100076a4:	39 40 ff ff 	li      r10,-1
100076a8:	91 49 00 28 	stw     r10,40(r9)
100076ac:	48 00 00 18 	b       100076c4 <httpd_initialize+0x454>
    else
	hs->listen4_fd = initialize_listen_socket( sa4P );
100076b0:	80 7f 00 1c 	lwz     r3,28(r31)
100076b4:	48 00 01 11 	bl      100077c4 <initialize_listen_socket>
100076b8:	7c 6a 1b 78 	mr      r10,r3
100076bc:	81 3f 00 08 	lwz     r9,8(r31)
100076c0:	91 49 00 28 	stw     r10,40(r9)
    /* If we didn't get any valid sockets, fail. */
    if ( hs->listen4_fd == -1 && hs->listen6_fd == -1 )
100076c4:	81 3f 00 08 	lwz     r9,8(r31)
100076c8:	81 49 00 28 	lwz     r10,40(r9)
100076cc:	39 20 ff ff 	li      r9,-1
100076d0:	7f 8a 48 00 	cmpw    cr7,r10,r9
100076d4:	40 9e 00 28 	bne     cr7,100076fc <httpd_initialize+0x48c>
100076d8:	81 3f 00 08 	lwz     r9,8(r31)
100076dc:	81 49 00 2c 	lwz     r10,44(r9)
100076e0:	39 20 ff ff 	li      r9,-1
100076e4:	7f 8a 48 00 	cmpw    cr7,r10,r9
100076e8:	40 9e 00 14 	bne     cr7,100076fc <httpd_initialize+0x48c>
	{
	free_httpd_server( hs );
100076ec:	80 7f 00 08 	lwz     r3,8(r31)
100076f0:	4b ff fa 69 	bl      10007158 <free_httpd_server>
	return (httpd_server*) 0;
100076f4:	39 20 00 00 	li      r9,0
100076f8:	48 00 00 a8 	b       100077a0 <httpd_initialize+0x530>
	}

    init_mime();
100076fc:	48 00 56 85 	bl      1000cd80 <init_mime>

    /* Done initializing. */
    if ( hs->binding_hostname == (char*) 0 )
10007700:	81 3f 00 08 	lwz     r9,8(r31)
10007704:	81 29 00 00 	lwz     r9,0(r9)
10007708:	2f 89 00 00 	cmpwi   cr7,r9,0
1000770c:	40 9e 00 34 	bne     cr7,10007740 <httpd_initialize+0x4d0>
	syslog(
	    LOG_NOTICE, "%.80s starting on port %d", SERVER_SOFTWARE,
	    (int) hs->port );
10007710:	81 3f 00 08 	lwz     r9,8(r31)
10007714:	a1 29 00 08 	lhz     r9,8(r9)
10007718:	55 29 04 3e 	clrlwi  r9,r9,16

    init_mime();

    /* Done initializing. */
    if ( hs->binding_hostname == (char*) 0 )
	syslog(
1000771c:	38 60 00 05 	li      r3,5
10007720:	3d 40 10 02 	lis     r10,4098
10007724:	38 8a 89 50 	addi    r4,r10,-30384
10007728:	3d 40 10 02 	lis     r10,4098
1000772c:	38 aa 89 6c 	addi    r5,r10,-30356
10007730:	7d 26 4b 78 	mr      r6,r9
10007734:	4c c6 31 82 	crclr   4*cr1+eq
10007738:	48 02 60 4d 	bl      1002d784 <syslog@plt>
1000773c:	48 00 00 60 	b       1000779c <httpd_initialize+0x52c>
	    LOG_NOTICE, "%.80s starting on port %d", SERVER_SOFTWARE,
	    (int) hs->port );
    else
	syslog(
	    LOG_NOTICE, "%.80s starting on %.80s, port %d", SERVER_SOFTWARE,
	    httpd_ntoa( hs->listen4_fd != -1 ? sa4P : sa6P ),
10007740:	81 3f 00 08 	lwz     r9,8(r31)
10007744:	81 49 00 28 	lwz     r10,40(r9)
    if ( hs->binding_hostname == (char*) 0 )
	syslog(
	    LOG_NOTICE, "%.80s starting on port %d", SERVER_SOFTWARE,
	    (int) hs->port );
    else
	syslog(
10007748:	39 20 ff ff 	li      r9,-1
1000774c:	7f 8a 48 00 	cmpw    cr7,r10,r9
10007750:	41 9e 00 0c 	beq     cr7,1000775c <httpd_initialize+0x4ec>
10007754:	81 3f 00 1c 	lwz     r9,28(r31)
10007758:	48 00 00 08 	b       10007760 <httpd_initialize+0x4f0>
1000775c:	81 3f 00 20 	lwz     r9,32(r31)
10007760:	7d 23 4b 78 	mr      r3,r9
10007764:	48 00 9b e9 	bl      1001134c <httpd_ntoa>
10007768:	7c 6a 1b 78 	mr      r10,r3
	    LOG_NOTICE, "%.80s starting on %.80s, port %d", SERVER_SOFTWARE,
	    httpd_ntoa( hs->listen4_fd != -1 ? sa4P : sa6P ),
	    (int) hs->port );
1000776c:	81 3f 00 08 	lwz     r9,8(r31)
10007770:	a1 29 00 08 	lhz     r9,8(r9)
10007774:	55 29 04 3e 	clrlwi  r9,r9,16
    if ( hs->binding_hostname == (char*) 0 )
	syslog(
	    LOG_NOTICE, "%.80s starting on port %d", SERVER_SOFTWARE,
	    (int) hs->port );
    else
	syslog(
10007778:	38 60 00 05 	li      r3,5
1000777c:	3d 00 10 02 	lis     r8,4098
10007780:	38 88 89 84 	addi    r4,r8,-30332
10007784:	3d 00 10 02 	lis     r8,4098
10007788:	38 a8 89 6c 	addi    r5,r8,-30356
1000778c:	7d 46 53 78 	mr      r6,r10
10007790:	7d 27 4b 78 	mr      r7,r9
10007794:	4c c6 31 82 	crclr   4*cr1+eq
10007798:	48 02 5f ed 	bl      1002d784 <syslog@plt>
	    LOG_NOTICE, "%.80s starting on %.80s, port %d", SERVER_SOFTWARE,
	    httpd_ntoa( hs->listen4_fd != -1 ? sa4P : sa6P ),
	    (int) hs->port );
    return hs;
1000779c:	81 3f 00 08 	lwz     r9,8(r31)
    }
100077a0:	7d 23 4b 78 	mr      r3,r9
100077a4:	39 7f 00 50 	addi    r11,r31,80
100077a8:	80 0b 00 04 	lwz     r0,4(r11)
100077ac:	7c 08 03 a6 	mtlr    r0
100077b0:	83 ab ff f4 	lwz     r29,-12(r11)
100077b4:	83 cb ff f8 	lwz     r30,-8(r11)
100077b8:	83 eb ff fc 	lwz     r31,-4(r11)
100077bc:	7d 61 5b 78 	mr      r1,r11
100077c0:	4e 80 00 20 	blr

100077c4 <initialize_listen_socket>:


static int
initialize_listen_socket( httpd_sockaddr* saP )
    {
100077c4:	94 21 ff d0 	stwu    r1,-48(r1)
100077c8:	7c 08 02 a6 	mflr    r0
100077cc:	90 01 00 34 	stw     r0,52(r1)
100077d0:	93 c1 00 28 	stw     r30,40(r1)
100077d4:	93 e1 00 2c 	stw     r31,44(r1)
100077d8:	7c 3f 0b 78 	mr      r31,r1
100077dc:	90 7f 00 18 	stw     r3,24(r31)
    int listen_fd;
    int on, flags;

    /* Check sockaddr. */
    if ( ! sockaddr_check( saP ) )
100077e0:	80 7f 00 18 	lwz     r3,24(r31)
100077e4:	48 00 9c c1 	bl      100114a4 <sockaddr_check>
100077e8:	7c 69 1b 78 	mr      r9,r3
100077ec:	2f 89 00 00 	cmpwi   cr7,r9,0
100077f0:	40 9e 00 20 	bne     cr7,10007810 <initialize_listen_socket+0x4c>
	{
	syslog( LOG_CRIT, "unknown sockaddr family on listen socket" );
100077f4:	38 60 00 02 	li      r3,2
100077f8:	3d 20 10 02 	lis     r9,4098
100077fc:	38 89 89 a8 	addi    r4,r9,-30296
10007800:	4c c6 31 82 	crclr   4*cr1+eq
10007804:	48 02 5f 81 	bl      1002d784 <syslog@plt>
	return -1;
10007808:	39 20 ff ff 	li      r9,-1
1000780c:	48 00 01 ec 	b       100079f8 <initialize_listen_socket+0x234>
	}

    /* Create socket. */
    listen_fd = socket( saP->sa.sa_family, SOCK_STREAM, 0 );
10007810:	81 3f 00 18 	lwz     r9,24(r31)
10007814:	a1 29 00 00 	lhz     r9,0(r9)
10007818:	55 29 04 3e 	clrlwi  r9,r9,16
1000781c:	7d 23 4b 78 	mr      r3,r9
10007820:	38 80 00 01 	li      r4,1
10007824:	38 a0 00 00 	li      r5,0
10007828:	48 02 5f b5 	bl      1002d7dc <socket@plt>
1000782c:	90 7f 00 08 	stw     r3,8(r31)
    if ( listen_fd < 0 )
10007830:	81 3f 00 08 	lwz     r9,8(r31)
10007834:	2f 89 00 00 	cmpwi   cr7,r9,0
10007838:	40 9c 00 30 	bge     cr7,10007868 <initialize_listen_socket+0xa4>
	{
	syslog( LOG_CRIT, "socket %.80s - %m", httpd_ntoa( saP ) );
1000783c:	80 7f 00 18 	lwz     r3,24(r31)
10007840:	48 00 9b 0d 	bl      1001134c <httpd_ntoa>
10007844:	7c 69 1b 78 	mr      r9,r3
10007848:	38 60 00 02 	li      r3,2
1000784c:	3d 40 10 02 	lis     r10,4098
10007850:	38 8a 89 d4 	addi    r4,r10,-30252
10007854:	7d 25 4b 78 	mr      r5,r9
10007858:	4c c6 31 82 	crclr   4*cr1+eq
1000785c:	48 02 5f 29 	bl      1002d784 <syslog@plt>
	return -1;
10007860:	39 20 ff ff 	li      r9,-1
10007864:	48 00 01 94 	b       100079f8 <initialize_listen_socket+0x234>
	}
    (void) fcntl( listen_fd, F_SETFD, 1 );
10007868:	80 7f 00 08 	lwz     r3,8(r31)
1000786c:	38 80 00 02 	li      r4,2
10007870:	38 a0 00 01 	li      r5,1
10007874:	4c c6 31 82 	crclr   4*cr1+eq
10007878:	48 02 5e 1d 	bl      1002d694 <fcntl@plt>

    /* Allow reuse of local addresses. */
    on = 1;
1000787c:	39 20 00 01 	li      r9,1
10007880:	91 3f 00 10 	stw     r9,16(r31)
    if ( setsockopt(
10007884:	39 3f 00 10 	addi    r9,r31,16
10007888:	80 7f 00 08 	lwz     r3,8(r31)
1000788c:	38 80 00 01 	li      r4,1
10007890:	38 a0 00 02 	li      r5,2
10007894:	7d 26 4b 78 	mr      r6,r9
10007898:	38 e0 00 04 	li      r7,4
1000789c:	48 02 5b 21 	bl      1002d3bc <setsockopt@plt>
100078a0:	7c 69 1b 78 	mr      r9,r3
100078a4:	2f 89 00 00 	cmpwi   cr7,r9,0
100078a8:	40 9c 00 18 	bge     cr7,100078c0 <initialize_listen_socket+0xfc>
	     listen_fd, SOL_SOCKET, SO_REUSEADDR, (char*) &on,
	     sizeof(on) ) < 0 )
	syslog( LOG_CRIT, "setsockopt SO_REUSEADDR - %m" );
100078ac:	38 60 00 02 	li      r3,2
100078b0:	3d 20 10 02 	lis     r9,4098
100078b4:	38 89 89 e8 	addi    r4,r9,-30232
100078b8:	4c c6 31 82 	crclr   4*cr1+eq
100078bc:	48 02 5e c9 	bl      1002d784 <syslog@plt>

    /* Bind to it. */
    if ( bind( listen_fd, &saP->sa, sockaddr_len( saP ) ) < 0 )
100078c0:	83 df 00 18 	lwz     r30,24(r31)
100078c4:	80 7f 00 18 	lwz     r3,24(r31)
100078c8:	48 00 9c 35 	bl      100114fc <sockaddr_len>
100078cc:	7c 69 1b 78 	mr      r9,r3
100078d0:	80 7f 00 08 	lwz     r3,8(r31)
100078d4:	7f c4 f3 78 	mr      r4,r30
100078d8:	7d 25 4b 78 	mr      r5,r9
100078dc:	48 02 5d c1 	bl      1002d69c <bind@plt>
100078e0:	7c 69 1b 78 	mr      r9,r3
100078e4:	2f 89 00 00 	cmpwi   cr7,r9,0
100078e8:	40 9c 00 38 	bge     cr7,10007920 <initialize_listen_socket+0x15c>
	{
	syslog(
100078ec:	80 7f 00 18 	lwz     r3,24(r31)
100078f0:	48 00 9a 5d 	bl      1001134c <httpd_ntoa>
100078f4:	7c 69 1b 78 	mr      r9,r3
100078f8:	38 60 00 02 	li      r3,2
100078fc:	3d 40 10 02 	lis     r10,4098
10007900:	38 8a 8a 08 	addi    r4,r10,-30200
10007904:	7d 25 4b 78 	mr      r5,r9
10007908:	4c c6 31 82 	crclr   4*cr1+eq
1000790c:	48 02 5e 79 	bl      1002d784 <syslog@plt>
	    LOG_CRIT, "bind %.80s - %m", httpd_ntoa( saP ) );
	(void) close( listen_fd );
10007910:	80 7f 00 08 	lwz     r3,8(r31)
10007914:	48 02 5e f9 	bl      1002d80c <close@plt>
	return -1;
10007918:	39 20 ff ff 	li      r9,-1
1000791c:	48 00 00 dc 	b       100079f8 <initialize_listen_socket+0x234>
	}

    /* Set the listen file descriptor to no-delay / non-blocking mode. */
    flags = fcntl( listen_fd, F_GETFL, 0 );
10007920:	80 7f 00 08 	lwz     r3,8(r31)
10007924:	38 80 00 03 	li      r4,3
10007928:	38 a0 00 00 	li      r5,0
1000792c:	4c c6 31 82 	crclr   4*cr1+eq
10007930:	48 02 5d 65 	bl      1002d694 <fcntl@plt>
10007934:	90 7f 00 0c 	stw     r3,12(r31)
    if ( flags == -1 )
10007938:	81 5f 00 0c 	lwz     r10,12(r31)
1000793c:	39 20 ff ff 	li      r9,-1
10007940:	7f 8a 48 00 	cmpw    cr7,r10,r9
10007944:	40 9e 00 28 	bne     cr7,1000796c <initialize_listen_socket+0x1a8>
	{
	syslog( LOG_CRIT, "fcntl F_GETFL - %m" );
10007948:	38 60 00 02 	li      r3,2
1000794c:	3d 20 10 02 	lis     r9,4098
10007950:	38 89 8a 18 	addi    r4,r9,-30184
10007954:	4c c6 31 82 	crclr   4*cr1+eq
10007958:	48 02 5e 2d 	bl      1002d784 <syslog@plt>
	(void) close( listen_fd );
1000795c:	80 7f 00 08 	lwz     r3,8(r31)
10007960:	48 02 5e ad 	bl      1002d80c <close@plt>
	return -1;
10007964:	39 20 ff ff 	li      r9,-1
10007968:	48 00 00 90 	b       100079f8 <initialize_listen_socket+0x234>
	}
    if ( fcntl( listen_fd, F_SETFL, flags | O_NDELAY ) < 0 )
1000796c:	81 3f 00 0c 	lwz     r9,12(r31)
10007970:	61 29 08 00 	ori     r9,r9,2048
10007974:	80 7f 00 08 	lwz     r3,8(r31)
10007978:	38 80 00 04 	li      r4,4
1000797c:	7d 25 4b 78 	mr      r5,r9
10007980:	4c c6 31 82 	crclr   4*cr1+eq
10007984:	48 02 5d 11 	bl      1002d694 <fcntl@plt>
10007988:	7c 69 1b 78 	mr      r9,r3
1000798c:	2f 89 00 00 	cmpwi   cr7,r9,0
10007990:	40 9c 00 28 	bge     cr7,100079b8 <initialize_listen_socket+0x1f4>
	{
	syslog( LOG_CRIT, "fcntl O_NDELAY - %m" );
10007994:	38 60 00 02 	li      r3,2
10007998:	3d 20 10 02 	lis     r9,4098
1000799c:	38 89 8a 2c 	addi    r4,r9,-30164
100079a0:	4c c6 31 82 	crclr   4*cr1+eq
100079a4:	48 02 5d e1 	bl      1002d784 <syslog@plt>
	(void) close( listen_fd );
100079a8:	80 7f 00 08 	lwz     r3,8(r31)
100079ac:	48 02 5e 61 	bl      1002d80c <close@plt>
	return -1;
100079b0:	39 20 ff ff 	li      r9,-1
100079b4:	48 00 00 44 	b       100079f8 <initialize_listen_socket+0x234>
	}

    /* Start a listen going. */
    if ( listen( listen_fd, LISTEN_BACKLOG ) < 0 )
100079b8:	80 7f 00 08 	lwz     r3,8(r31)
100079bc:	38 80 04 00 	li      r4,1024
100079c0:	48 02 5d ad 	bl      1002d76c <listen@plt>
100079c4:	7c 69 1b 78 	mr      r9,r3
100079c8:	2f 89 00 00 	cmpwi   cr7,r9,0
100079cc:	40 9c 00 28 	bge     cr7,100079f4 <initialize_listen_socket+0x230>
	{
	syslog( LOG_CRIT, "listen - %m" );
100079d0:	38 60 00 02 	li      r3,2
100079d4:	3d 20 10 02 	lis     r9,4098
100079d8:	38 89 8a 40 	addi    r4,r9,-30144
100079dc:	4c c6 31 82 	crclr   4*cr1+eq
100079e0:	48 02 5d a5 	bl      1002d784 <syslog@plt>
	(void) close( listen_fd );
100079e4:	80 7f 00 08 	lwz     r3,8(r31)
100079e8:	48 02 5e 25 	bl      1002d80c <close@plt>
	return -1;
100079ec:	39 20 ff ff 	li      r9,-1
100079f0:	48 00 00 08 	b       100079f8 <initialize_listen_socket+0x234>
    (void) setsockopt(
	listen_fd, SOL_SOCKET, SO_ACCEPTFILTER, (char*) &af, sizeof(af) );
    }
#endif /* SO_ACCEPTFILTER */

    return listen_fd;
100079f4:	81 3f 00 08 	lwz     r9,8(r31)
    }
100079f8:	7d 23 4b 78 	mr      r3,r9
100079fc:	39 7f 00 30 	addi    r11,r31,48
10007a00:	80 0b 00 04 	lwz     r0,4(r11)
10007a04:	7c 08 03 a6 	mtlr    r0
10007a08:	83 cb ff f8 	lwz     r30,-8(r11)
10007a0c:	83 eb ff fc 	lwz     r31,-4(r11)
10007a10:	7d 61 5b 78 	mr      r1,r11
10007a14:	4e 80 00 20 	blr

10007a18 <httpd_set_logfp>:


void
httpd_set_logfp( httpd_server* hs, FILE* logfp )
    {
10007a18:	94 21 ff e0 	stwu    r1,-32(r1)
10007a1c:	7c 08 02 a6 	mflr    r0
10007a20:	90 01 00 24 	stw     r0,36(r1)
10007a24:	93 e1 00 1c 	stw     r31,28(r1)
10007a28:	7c 3f 0b 78 	mr      r31,r1
10007a2c:	90 7f 00 08 	stw     r3,8(r31)
10007a30:	90 9f 00 0c 	stw     r4,12(r31)
    if ( hs->logfp != (FILE*) 0 )
10007a34:	81 3f 00 08 	lwz     r9,8(r31)
10007a38:	81 29 00 34 	lwz     r9,52(r9)
10007a3c:	2f 89 00 00 	cmpwi   cr7,r9,0
10007a40:	41 9e 00 14 	beq     cr7,10007a54 <httpd_set_logfp+0x3c>
	(void) fclose( hs->logfp );
10007a44:	81 3f 00 08 	lwz     r9,8(r31)
10007a48:	81 29 00 34 	lwz     r9,52(r9)
10007a4c:	7d 23 4b 78 	mr      r3,r9
10007a50:	48 02 5a 1d 	bl      1002d46c <fclose@plt>
    hs->logfp = logfp;
10007a54:	81 3f 00 08 	lwz     r9,8(r31)
10007a58:	81 5f 00 0c 	lwz     r10,12(r31)
10007a5c:	91 49 00 34 	stw     r10,52(r9)
    }
10007a60:	39 7f 00 20 	addi    r11,r31,32
10007a64:	80 0b 00 04 	lwz     r0,4(r11)
10007a68:	7c 08 03 a6 	mtlr    r0
10007a6c:	83 eb ff fc 	lwz     r31,-4(r11)
10007a70:	7d 61 5b 78 	mr      r1,r11
10007a74:	4e 80 00 20 	blr

10007a78 <httpd_terminate>:


void
httpd_terminate( httpd_server* hs )
    {
10007a78:	94 21 ff e0 	stwu    r1,-32(r1)
10007a7c:	7c 08 02 a6 	mflr    r0
10007a80:	90 01 00 24 	stw     r0,36(r1)
10007a84:	93 e1 00 1c 	stw     r31,28(r1)
10007a88:	7c 3f 0b 78 	mr      r31,r1
10007a8c:	90 7f 00 08 	stw     r3,8(r31)
    httpd_unlisten( hs );
10007a90:	80 7f 00 08 	lwz     r3,8(r31)
10007a94:	48 00 00 45 	bl      10007ad8 <httpd_unlisten>
    if ( hs->logfp != (FILE*) 0 )
10007a98:	81 3f 00 08 	lwz     r9,8(r31)
10007a9c:	81 29 00 34 	lwz     r9,52(r9)
10007aa0:	2f 89 00 00 	cmpwi   cr7,r9,0
10007aa4:	41 9e 00 14 	beq     cr7,10007ab8 <httpd_terminate+0x40>
	(void) fclose( hs->logfp );
10007aa8:	81 3f 00 08 	lwz     r9,8(r31)
10007aac:	81 29 00 34 	lwz     r9,52(r9)
10007ab0:	7d 23 4b 78 	mr      r3,r9
10007ab4:	48 02 59 b9 	bl      1002d46c <fclose@plt>
    free_httpd_server( hs );
10007ab8:	80 7f 00 08 	lwz     r3,8(r31)
10007abc:	4b ff f6 9d 	bl      10007158 <free_httpd_server>
    }
10007ac0:	39 7f 00 20 	addi    r11,r31,32
10007ac4:	80 0b 00 04 	lwz     r0,4(r11)
10007ac8:	7c 08 03 a6 	mtlr    r0
10007acc:	83 eb ff fc 	lwz     r31,-4(r11)
10007ad0:	7d 61 5b 78 	mr      r1,r11
10007ad4:	4e 80 00 20 	blr

10007ad8 <httpd_unlisten>:


void
httpd_unlisten( httpd_server* hs )
    {
10007ad8:	94 21 ff e0 	stwu    r1,-32(r1)
10007adc:	7c 08 02 a6 	mflr    r0
10007ae0:	90 01 00 24 	stw     r0,36(r1)
10007ae4:	93 e1 00 1c 	stw     r31,28(r1)
10007ae8:	7c 3f 0b 78 	mr      r31,r1
10007aec:	90 7f 00 08 	stw     r3,8(r31)
    if ( hs->listen4_fd != -1 )
10007af0:	81 3f 00 08 	lwz     r9,8(r31)
10007af4:	81 49 00 28 	lwz     r10,40(r9)
10007af8:	39 20 ff ff 	li      r9,-1
10007afc:	7f 8a 48 00 	cmpw    cr7,r10,r9
10007b00:	41 9e 00 20 	beq     cr7,10007b20 <httpd_unlisten+0x48>
	{
	(void) close( hs->listen4_fd );
10007b04:	81 3f 00 08 	lwz     r9,8(r31)
10007b08:	81 29 00 28 	lwz     r9,40(r9)
10007b0c:	7d 23 4b 78 	mr      r3,r9
10007b10:	48 02 5c fd 	bl      1002d80c <close@plt>
	hs->listen4_fd = -1;
10007b14:	81 3f 00 08 	lwz     r9,8(r31)
10007b18:	39 40 ff ff 	li      r10,-1
10007b1c:	91 49 00 28 	stw     r10,40(r9)
	}
    if ( hs->listen6_fd != -1 )
10007b20:	81 3f 00 08 	lwz     r9,8(r31)
10007b24:	81 49 00 2c 	lwz     r10,44(r9)
10007b28:	39 20 ff ff 	li      r9,-1
10007b2c:	7f 8a 48 00 	cmpw    cr7,r10,r9
10007b30:	41 9e 00 20 	beq     cr7,10007b50 <httpd_unlisten+0x78>
	{
	(void) close( hs->listen6_fd );
10007b34:	81 3f 00 08 	lwz     r9,8(r31)
10007b38:	81 29 00 2c 	lwz     r9,44(r9)
10007b3c:	7d 23 4b 78 	mr      r3,r9
10007b40:	48 02 5c cd 	bl      1002d80c <close@plt>
	hs->listen6_fd = -1;
10007b44:	81 3f 00 08 	lwz     r9,8(r31)
10007b48:	39 40 ff ff 	li      r10,-1
10007b4c:	91 49 00 2c 	stw     r10,44(r9)
	}
    }
10007b50:	39 7f 00 20 	addi    r11,r31,32
10007b54:	80 0b 00 04 	lwz     r0,4(r11)
10007b58:	7c 08 03 a6 	mtlr    r0
10007b5c:	83 eb ff fc 	lwz     r31,-4(r11)
10007b60:	7d 61 5b 78 	mr      r1,r11
10007b64:	4e 80 00 20 	blr

10007b68 <add_response>:


/* Append a string to the buffer waiting to be sent as response. */
static void
add_response( httpd_conn* hc, char* str )
    {
10007b68:	94 21 ff d0 	stwu    r1,-48(r1)
10007b6c:	7c 08 02 a6 	mflr    r0
10007b70:	90 01 00 34 	stw     r0,52(r1)
10007b74:	93 e1 00 2c 	stw     r31,44(r1)
10007b78:	7c 3f 0b 78 	mr      r31,r1
10007b7c:	90 7f 00 18 	stw     r3,24(r31)
10007b80:	90 9f 00 1c 	stw     r4,28(r31)
    size_t len;

    len = strlen( str );
10007b84:	80 7f 00 1c 	lwz     r3,28(r31)
10007b88:	48 02 5a cd 	bl      1002d654 <strlen@plt>
10007b8c:	90 7f 00 08 	stw     r3,8(r31)
    httpd_realloc_str( &hc->response, &hc->maxresponse, hc->responselen + len );
10007b90:	81 3f 00 18 	lwz     r9,24(r31)
10007b94:	39 09 00 fc 	addi    r8,r9,252
10007b98:	81 3f 00 18 	lwz     r9,24(r31)
10007b9c:	39 49 01 2c 	addi    r10,r9,300
10007ba0:	81 3f 00 18 	lwz     r9,24(r31)
10007ba4:	80 e9 01 30 	lwz     r7,304(r9)
10007ba8:	81 3f 00 08 	lwz     r9,8(r31)
10007bac:	7d 27 4a 14 	add     r9,r7,r9
10007bb0:	7d 03 43 78 	mr      r3,r8
10007bb4:	7d 44 53 78 	mr      r4,r10
10007bb8:	7d 25 4b 78 	mr      r5,r9
10007bbc:	48 00 07 5d 	bl      10008318 <httpd_realloc_str>
    (void) memmove( &(hc->response[hc->responselen]), str, len );
10007bc0:	81 3f 00 18 	lwz     r9,24(r31)
10007bc4:	81 49 00 fc 	lwz     r10,252(r9)
10007bc8:	81 3f 00 18 	lwz     r9,24(r31)
10007bcc:	81 29 01 30 	lwz     r9,304(r9)
10007bd0:	7d 2a 4a 14 	add     r9,r10,r9
10007bd4:	7d 23 4b 78 	mr      r3,r9
10007bd8:	80 9f 00 1c 	lwz     r4,28(r31)
10007bdc:	80 bf 00 08 	lwz     r5,8(r31)
10007be0:	48 02 58 45 	bl      1002d424 <memmove@plt>
    hc->responselen += len;
10007be4:	81 3f 00 18 	lwz     r9,24(r31)
10007be8:	81 49 01 30 	lwz     r10,304(r9)
10007bec:	81 3f 00 08 	lwz     r9,8(r31)
10007bf0:	7d 4a 4a 14 	add     r10,r10,r9
10007bf4:	81 3f 00 18 	lwz     r9,24(r31)
10007bf8:	91 49 01 30 	stw     r10,304(r9)
    }
10007bfc:	39 7f 00 30 	addi    r11,r31,48
10007c00:	80 0b 00 04 	lwz     r0,4(r11)
10007c04:	7c 08 03 a6 	mtlr    r0
10007c08:	83 eb ff fc 	lwz     r31,-4(r11)
10007c0c:	7d 61 5b 78 	mr      r1,r11
10007c10:	4e 80 00 20 	blr

10007c14 <httpd_write_response>:

/* Send the buffered response. */
void
httpd_write_response( httpd_conn* hc )
    {
10007c14:	94 21 ff e0 	stwu    r1,-32(r1)
10007c18:	7c 08 02 a6 	mflr    r0
10007c1c:	90 01 00 24 	stw     r0,36(r1)
10007c20:	93 e1 00 1c 	stw     r31,28(r1)
10007c24:	7c 3f 0b 78 	mr      r31,r1
10007c28:	90 7f 00 08 	stw     r3,8(r31)
    /* If we are in a sub-process, turn off no-delay mode. */
    if ( sub_process )
10007c2c:	3d 20 10 03 	lis     r9,4099
10007c30:	81 29 db 28 	lwz     r9,-9432(r9)
10007c34:	2f 89 00 00 	cmpwi   cr7,r9,0
10007c38:	41 9e 00 14 	beq     cr7,10007c4c <httpd_write_response+0x38>
	httpd_clear_ndelay( hc->conn_fd );
10007c3c:	81 3f 00 08 	lwz     r9,8(r31)
10007c40:	81 29 01 c0 	lwz     r9,448(r9)
10007c44:	7d 23 4b 78 	mr      r3,r9
10007c48:	48 00 00 e9 	bl      10007d30 <httpd_clear_ndelay>
    /* Send the response, if necessary. */
    if ( hc->responselen > 0 )
10007c4c:	81 3f 00 08 	lwz     r9,8(r31)
10007c50:	81 29 01 30 	lwz     r9,304(r9)
10007c54:	2f 89 00 00 	cmpwi   cr7,r9,0
10007c58:	41 9e 00 38 	beq     cr7,10007c90 <httpd_write_response+0x7c>
	{
	(void) httpd_write_fully( hc->conn_fd, hc->response, hc->responselen );
10007c5c:	81 3f 00 08 	lwz     r9,8(r31)
10007c60:	81 09 01 c0 	lwz     r8,448(r9)
10007c64:	81 3f 00 08 	lwz     r9,8(r31)
10007c68:	81 49 00 fc 	lwz     r10,252(r9)
10007c6c:	81 3f 00 08 	lwz     r9,8(r31)
10007c70:	81 29 01 30 	lwz     r9,304(r9)
10007c74:	7d 03 43 78 	mr      r3,r8
10007c78:	7d 44 53 78 	mr      r4,r10
10007c7c:	7d 25 4b 78 	mr      r5,r9
10007c80:	48 00 9a 85 	bl      10011704 <httpd_write_fully>
	hc->responselen = 0;
10007c84:	81 3f 00 08 	lwz     r9,8(r31)
10007c88:	39 40 00 00 	li      r10,0
10007c8c:	91 49 01 30 	stw     r10,304(r9)
	}
    }
10007c90:	39 7f 00 20 	addi    r11,r31,32
10007c94:	80 0b 00 04 	lwz     r0,4(r11)
10007c98:	7c 08 03 a6 	mtlr    r0
10007c9c:	83 eb ff fc 	lwz     r31,-4(r11)
10007ca0:	7d 61 5b 78 	mr      r1,r11
10007ca4:	4e 80 00 20 	blr

10007ca8 <httpd_set_ndelay>:


/* Set no-delay / non-blocking mode on a socket. */
void
httpd_set_ndelay( int fd )
    {
10007ca8:	94 21 ff d0 	stwu    r1,-48(r1)
10007cac:	7c 08 02 a6 	mflr    r0
10007cb0:	90 01 00 34 	stw     r0,52(r1)
10007cb4:	93 e1 00 2c 	stw     r31,44(r1)
10007cb8:	7c 3f 0b 78 	mr      r31,r1
10007cbc:	90 7f 00 18 	stw     r3,24(r31)
    int flags, newflags;

    flags = fcntl( fd, F_GETFL, 0 );
10007cc0:	80 7f 00 18 	lwz     r3,24(r31)
10007cc4:	38 80 00 03 	li      r4,3
10007cc8:	38 a0 00 00 	li      r5,0
10007ccc:	4c c6 31 82 	crclr   4*cr1+eq
10007cd0:	48 02 59 c5 	bl      1002d694 <fcntl@plt>
10007cd4:	90 7f 00 08 	stw     r3,8(r31)
    if ( flags != -1 )
10007cd8:	81 5f 00 08 	lwz     r10,8(r31)
10007cdc:	39 20 ff ff 	li      r9,-1
10007ce0:	7f 8a 48 00 	cmpw    cr7,r10,r9
10007ce4:	41 9e 00 34 	beq     cr7,10007d18 <httpd_set_ndelay+0x70>
	{
	newflags = flags | (int) O_NDELAY;
10007ce8:	81 3f 00 08 	lwz     r9,8(r31)
10007cec:	61 29 08 00 	ori     r9,r9,2048
10007cf0:	91 3f 00 0c 	stw     r9,12(r31)
	if ( newflags != flags )
10007cf4:	81 5f 00 0c 	lwz     r10,12(r31)
10007cf8:	81 3f 00 08 	lwz     r9,8(r31)
10007cfc:	7f 8a 48 00 	cmpw    cr7,r10,r9
10007d00:	41 9e 00 18 	beq     cr7,10007d18 <httpd_set_ndelay+0x70>
	    (void) fcntl( fd, F_SETFL, newflags );
10007d04:	80 7f 00 18 	lwz     r3,24(r31)
10007d08:	38 80 00 04 	li      r4,4
10007d0c:	80 bf 00 0c 	lwz     r5,12(r31)
10007d10:	4c c6 31 82 	crclr   4*cr1+eq
10007d14:	48 02 59 81 	bl      1002d694 <fcntl@plt>
	}
    }
10007d18:	39 7f 00 30 	addi    r11,r31,48
10007d1c:	80 0b 00 04 	lwz     r0,4(r11)
10007d20:	7c 08 03 a6 	mtlr    r0
10007d24:	83 eb ff fc 	lwz     r31,-4(r11)
10007d28:	7d 61 5b 78 	mr      r1,r11
10007d2c:	4e 80 00 20 	blr

10007d30 <httpd_clear_ndelay>:


/* Clear no-delay / non-blocking mode on a socket. */
void
httpd_clear_ndelay( int fd )
    {
10007d30:	94 21 ff d0 	stwu    r1,-48(r1)
10007d34:	7c 08 02 a6 	mflr    r0
10007d38:	90 01 00 34 	stw     r0,52(r1)
10007d3c:	93 e1 00 2c 	stw     r31,44(r1)
10007d40:	7c 3f 0b 78 	mr      r31,r1
10007d44:	90 7f 00 18 	stw     r3,24(r31)
    int flags, newflags;

    flags = fcntl( fd, F_GETFL, 0 );
10007d48:	80 7f 00 18 	lwz     r3,24(r31)
10007d4c:	38 80 00 03 	li      r4,3
10007d50:	38 a0 00 00 	li      r5,0
10007d54:	4c c6 31 82 	crclr   4*cr1+eq
10007d58:	48 02 59 3d 	bl      1002d694 <fcntl@plt>
10007d5c:	90 7f 00 08 	stw     r3,8(r31)
    if ( flags != -1 )
10007d60:	81 5f 00 08 	lwz     r10,8(r31)
10007d64:	39 20 ff ff 	li      r9,-1
10007d68:	7f 8a 48 00 	cmpw    cr7,r10,r9
10007d6c:	41 9e 00 34 	beq     cr7,10007da0 <httpd_clear_ndelay+0x70>
	{
	newflags = flags & ~ (int) O_NDELAY;
10007d70:	81 3f 00 08 	lwz     r9,8(r31)
10007d74:	55 29 05 66 	rlwinm  r9,r9,0,21,19
10007d78:	91 3f 00 0c 	stw     r9,12(r31)
	if ( newflags != flags )
10007d7c:	81 5f 00 0c 	lwz     r10,12(r31)
10007d80:	81 3f 00 08 	lwz     r9,8(r31)
10007d84:	7f 8a 48 00 	cmpw    cr7,r10,r9
10007d88:	41 9e 00 18 	beq     cr7,10007da0 <httpd_clear_ndelay+0x70>
	    (void) fcntl( fd, F_SETFL, newflags );
10007d8c:	80 7f 00 18 	lwz     r3,24(r31)
10007d90:	38 80 00 04 	li      r4,4
10007d94:	80 bf 00 0c 	lwz     r5,12(r31)
10007d98:	4c c6 31 82 	crclr   4*cr1+eq
10007d9c:	48 02 58 f9 	bl      1002d694 <fcntl@plt>
	}
    }
10007da0:	39 7f 00 30 	addi    r11,r31,48
10007da4:	80 0b 00 04 	lwz     r0,4(r11)
10007da8:	7c 08 03 a6 	mtlr    r0
10007dac:	83 eb ff fc 	lwz     r31,-4(r11)
10007db0:	7d 61 5b 78 	mr      r1,r11
10007db4:	4e 80 00 20 	blr

10007db8 <send_mime>:


static void
send_mime( httpd_conn* hc, int status, char* title, char* encodings, char* extraheads, char* type, off_t length, time_t mod )
    {
10007db8:	94 21 f8 70 	stwu    r1,-1936(r1)
10007dbc:	7c 08 02 a6 	mflr    r0
10007dc0:	90 01 07 94 	stw     r0,1940(r1)
10007dc4:	92 a1 07 64 	stw     r21,1892(r1)
10007dc8:	92 c1 07 68 	stw     r22,1896(r1)
10007dcc:	92 e1 07 6c 	stw     r23,1900(r1)
10007dd0:	93 01 07 70 	stw     r24,1904(r1)
10007dd4:	93 21 07 74 	stw     r25,1908(r1)
10007dd8:	93 41 07 78 	stw     r26,1912(r1)
10007ddc:	93 61 07 7c 	stw     r27,1916(r1)
10007de0:	93 81 07 80 	stw     r28,1920(r1)
10007de4:	93 a1 07 84 	stw     r29,1924(r1)
10007de8:	93 c1 07 88 	stw     r30,1928(r1)
10007dec:	93 e1 07 8c 	stw     r31,1932(r1)
10007df0:	7c 3f 0b 78 	mr      r31,r1
10007df4:	90 7f 07 38 	stw     r3,1848(r31)
10007df8:	90 9f 07 3c 	stw     r4,1852(r31)
10007dfc:	90 bf 07 40 	stw     r5,1856(r31)
10007e00:	90 df 07 44 	stw     r6,1860(r31)
10007e04:	90 ff 07 48 	stw     r7,1864(r31)
10007e08:	91 1f 07 4c 	stw     r8,1868(r31)
10007e0c:	91 3f 07 50 	stw     r9,1872(r31)
10007e10:	91 5f 07 54 	stw     r10,1876(r31)
    time_t now, expires;
    const char* rfc1123fmt = "%a, %d %b %Y %H:%M:%S GMT";
10007e14:	3d 20 10 02 	lis     r9,4098
10007e18:	39 29 8d 44 	addi    r9,r9,-29372
10007e1c:	91 3f 00 1c 	stw     r9,28(r31)
    char fixed_type[500];
    char buf[1000];
    int partial_content;
    int s100;

    hc->status = status;
10007e20:	81 3f 07 38 	lwz     r9,1848(r31)
10007e24:	81 5f 07 3c 	lwz     r10,1852(r31)
10007e28:	91 49 00 a0 	stw     r10,160(r9)
    hc->bytes_to_send = length;
10007e2c:	81 3f 07 38 	lwz     r9,1848(r31)
10007e30:	81 5f 07 50 	lwz     r10,1872(r31)
10007e34:	91 49 00 a4 	stw     r10,164(r9)
    if ( hc->mime_flag )
10007e38:	81 3f 07 38 	lwz     r9,1848(r31)
10007e3c:	81 29 01 48 	lwz     r9,328(r9)
10007e40:	2f 89 00 00 	cmpwi   cr7,r9,0
10007e44:	41 9e 04 94 	beq     cr7,100082d8 <send_mime+0x520>
	{
	if ( status == 200 && hc->got_range &&
10007e48:	81 3f 07 3c 	lwz     r9,1852(r31)
10007e4c:	2f 89 00 c8 	cmpwi   cr7,r9,200
10007e50:	40 9e 00 ac 	bne     cr7,10007efc <send_mime+0x144>
10007e54:	81 3f 07 38 	lwz     r9,1848(r31)
10007e58:	81 29 01 50 	lwz     r9,336(r9)
10007e5c:	2f 89 00 00 	cmpwi   cr7,r9,0
10007e60:	41 9e 00 9c 	beq     cr7,10007efc <send_mime+0x144>
	     ( hc->last_byte_index >= hc->first_byte_index ) &&
10007e64:	81 3f 07 38 	lwz     r9,1848(r31)
10007e68:	81 49 01 5c 	lwz     r10,348(r9)
10007e6c:	81 3f 07 38 	lwz     r9,1848(r31)
10007e70:	81 29 01 58 	lwz     r9,344(r9)

    hc->status = status;
    hc->bytes_to_send = length;
    if ( hc->mime_flag )
	{
	if ( status == 200 && hc->got_range &&
10007e74:	7f 8a 48 00 	cmpw    cr7,r10,r9
10007e78:	41 9c 00 84 	blt     cr7,10007efc <send_mime+0x144>
	     ( hc->last_byte_index >= hc->first_byte_index ) &&
	     ( ( hc->last_byte_index != length - 1 ) ||
10007e7c:	81 3f 07 38 	lwz     r9,1848(r31)
10007e80:	81 49 01 5c 	lwz     r10,348(r9)
10007e84:	81 3f 07 50 	lwz     r9,1872(r31)
10007e88:	39 29 ff ff 	addi    r9,r9,-1
    hc->status = status;
    hc->bytes_to_send = length;
    if ( hc->mime_flag )
	{
	if ( status == 200 && hc->got_range &&
	     ( hc->last_byte_index >= hc->first_byte_index ) &&
10007e8c:	7f 8a 48 00 	cmpw    cr7,r10,r9
10007e90:	40 9e 00 14 	bne     cr7,10007ea4 <send_mime+0xec>
	     ( ( hc->last_byte_index != length - 1 ) ||
	       ( hc->first_byte_index != 0 ) ) &&
10007e94:	81 3f 07 38 	lwz     r9,1848(r31)
10007e98:	81 29 01 58 	lwz     r9,344(r9)
    hc->bytes_to_send = length;
    if ( hc->mime_flag )
	{
	if ( status == 200 && hc->got_range &&
	     ( hc->last_byte_index >= hc->first_byte_index ) &&
	     ( ( hc->last_byte_index != length - 1 ) ||
10007e9c:	2f 89 00 00 	cmpwi   cr7,r9,0
10007ea0:	41 9e 00 5c 	beq     cr7,10007efc <send_mime+0x144>
	       ( hc->first_byte_index != 0 ) ) &&
	     ( hc->range_if == (time_t) -1 ||
10007ea4:	81 3f 07 38 	lwz     r9,1848(r31)
10007ea8:	81 49 01 38 	lwz     r10,312(r9)
    if ( hc->mime_flag )
	{
	if ( status == 200 && hc->got_range &&
	     ( hc->last_byte_index >= hc->first_byte_index ) &&
	     ( ( hc->last_byte_index != length - 1 ) ||
	       ( hc->first_byte_index != 0 ) ) &&
10007eac:	39 20 ff ff 	li      r9,-1
10007eb0:	7f 8a 48 00 	cmpw    cr7,r10,r9
10007eb4:	41 9e 00 1c 	beq     cr7,10007ed0 <send_mime+0x118>
	     ( hc->range_if == (time_t) -1 ||
	       hc->range_if == hc->sb.st_mtime ) )
10007eb8:	81 3f 07 38 	lwz     r9,1848(r31)
10007ebc:	81 49 01 38 	lwz     r10,312(r9)
10007ec0:	81 3f 07 38 	lwz     r9,1848(r31)
10007ec4:	81 29 01 a8 	lwz     r9,424(r9)
	{
	if ( status == 200 && hc->got_range &&
	     ( hc->last_byte_index >= hc->first_byte_index ) &&
	     ( ( hc->last_byte_index != length - 1 ) ||
	       ( hc->first_byte_index != 0 ) ) &&
	     ( hc->range_if == (time_t) -1 ||
10007ec8:	7f 8a 48 00 	cmpw    cr7,r10,r9
10007ecc:	40 9e 00 30 	bne     cr7,10007efc <send_mime+0x144>
	       hc->range_if == hc->sb.st_mtime ) )
	    {
	    partial_content = 1;
10007ed0:	39 20 00 01 	li      r9,1
10007ed4:	91 3f 00 18 	stw     r9,24(r31)
	    hc->status = status = 206;
10007ed8:	39 20 00 ce 	li      r9,206
10007edc:	91 3f 07 3c 	stw     r9,1852(r31)
10007ee0:	81 3f 07 38 	lwz     r9,1848(r31)
10007ee4:	81 5f 07 3c 	lwz     r10,1852(r31)
10007ee8:	91 49 00 a0 	stw     r10,160(r9)
	    title = ok206title;
10007eec:	3d 20 10 03 	lis     r9,4099
10007ef0:	81 29 c1 08 	lwz     r9,-16120(r9)
10007ef4:	91 3f 07 40 	stw     r9,1856(r31)
10007ef8:	48 00 00 18 	b       10007f10 <send_mime+0x158>
	    }
	else
	    {
	    partial_content = 0;
10007efc:	39 20 00 00 	li      r9,0
10007f00:	91 3f 00 18 	stw     r9,24(r31)
	    hc->got_range = 0;
10007f04:	81 3f 07 38 	lwz     r9,1848(r31)
10007f08:	39 40 00 00 	li      r10,0
10007f0c:	91 49 01 50 	stw     r10,336(r9)
	    }

	now = time( (time_t*) 0 );
10007f10:	38 60 00 00 	li      r3,0
10007f14:	48 02 55 61 	bl      1002d474 <time@plt>
10007f18:	7c 69 1b 78 	mr      r9,r3
10007f1c:	91 3f 00 24 	stw     r9,36(r31)
	if ( mod == (time_t) 0 )
10007f20:	81 3f 07 54 	lwz     r9,1876(r31)
10007f24:	2f 89 00 00 	cmpwi   cr7,r9,0
10007f28:	40 9e 00 0c 	bne     cr7,10007f34 <send_mime+0x17c>
	    mod = now;
10007f2c:	81 3f 00 24 	lwz     r9,36(r31)
10007f30:	91 3f 07 54 	stw     r9,1876(r31)
	(void) strftime( nowbuf, sizeof(nowbuf), rfc1123fmt, gmtime( &now ) );
10007f34:	39 3f 00 24 	addi    r9,r31,36
10007f38:	7d 23 4b 78 	mr      r3,r9
10007f3c:	48 02 57 81 	bl      1002d6bc <gmtime@plt>
10007f40:	7c 69 1b 78 	mr      r9,r3
10007f44:	39 5f 00 2c 	addi    r10,r31,44
10007f48:	7d 43 53 78 	mr      r3,r10
10007f4c:	38 80 00 64 	li      r4,100
10007f50:	80 bf 00 1c 	lwz     r5,28(r31)
10007f54:	7d 26 4b 78 	mr      r6,r9
10007f58:	48 02 56 cd 	bl      1002d624 <strftime@plt>
	(void) strftime( modbuf, sizeof(modbuf), rfc1123fmt, gmtime( &mod ) );
10007f5c:	39 3f 07 54 	addi    r9,r31,1876
10007f60:	7d 23 4b 78 	mr      r3,r9
10007f64:	48 02 57 59 	bl      1002d6bc <gmtime@plt>
10007f68:	7c 69 1b 78 	mr      r9,r3
10007f6c:	39 5f 00 90 	addi    r10,r31,144
10007f70:	7d 43 53 78 	mr      r3,r10
10007f74:	38 80 00 64 	li      r4,100
10007f78:	80 bf 00 1c 	lwz     r5,28(r31)
10007f7c:	7d 26 4b 78 	mr      r6,r9
10007f80:	48 02 56 a5 	bl      1002d624 <strftime@plt>
	(void) my_snprintf(
	    fixed_type, sizeof(fixed_type), type, hc->hs->charset );
10007f84:	81 3f 07 38 	lwz     r9,1848(r31)
10007f88:	81 29 00 04 	lwz     r9,4(r9)
	now = time( (time_t*) 0 );
	if ( mod == (time_t) 0 )
	    mod = now;
	(void) strftime( nowbuf, sizeof(nowbuf), rfc1123fmt, gmtime( &now ) );
	(void) strftime( modbuf, sizeof(modbuf), rfc1123fmt, gmtime( &mod ) );
	(void) my_snprintf(
10007f8c:	81 29 00 18 	lwz     r9,24(r9)
10007f90:	39 5f 01 58 	addi    r10,r31,344
10007f94:	7d 43 53 78 	mr      r3,r10
10007f98:	38 80 01 f4 	li      r4,500
10007f9c:	80 bf 07 4c 	lwz     r5,1868(r31)
10007fa0:	7d 26 4b 78 	mr      r6,r9
10007fa4:	4c c6 31 82 	crclr   4*cr1+eq
10007fa8:	48 00 95 ad 	bl      10011554 <my_snprintf>
	    fixed_type, sizeof(fixed_type), type, hc->hs->charset );
	(void) my_snprintf( buf, sizeof(buf),
10007fac:	81 3f 07 38 	lwz     r9,1848(r31)
10007fb0:	81 29 00 b4 	lwz     r9,180(r9)
10007fb4:	39 1f 03 4c 	addi    r8,r31,844
10007fb8:	39 5f 01 58 	addi    r10,r31,344
10007fbc:	38 ff 00 2c 	addi    r7,r31,44
10007fc0:	90 e1 00 08 	stw     r7,8(r1)
10007fc4:	38 ff 00 90 	addi    r7,r31,144
10007fc8:	90 e1 00 0c 	stw     r7,12(r1)
10007fcc:	7d 03 43 78 	mr      r3,r8
10007fd0:	38 80 03 e8 	li      r4,1000
10007fd4:	3d 00 10 02 	lis     r8,4098
10007fd8:	38 a8 8d 60 	addi    r5,r8,-29344
10007fdc:	7d 26 4b 78 	mr      r6,r9
10007fe0:	80 ff 07 3c 	lwz     r7,1852(r31)
10007fe4:	81 1f 07 40 	lwz     r8,1856(r31)
10007fe8:	3d 20 10 02 	lis     r9,4098
10007fec:	39 29 89 6c 	addi    r9,r9,-30356
10007ff0:	4c c6 31 82 	crclr   4*cr1+eq
10007ff4:	48 00 95 61 	bl      10011554 <my_snprintf>
	    "%.20s %d %s\015\012Server: %s\015\012Content-Type: %s\015\012Date: %s\015\012Last-Modified: %s\015\012Accept-Ranges: bytes\015\012Connection: close\015\012",
	    hc->protocol, status, title, EXPOSED_SERVER_SOFTWARE, fixed_type,
	    nowbuf, modbuf );
	add_response( hc, buf );
10007ff8:	39 3f 03 4c 	addi    r9,r31,844
10007ffc:	80 7f 07 38 	lwz     r3,1848(r31)
10008000:	7d 24 4b 78 	mr      r4,r9
10008004:	4b ff fb 65 	bl      10007b68 <add_response>
	s100 = status / 100;
10008008:	81 3f 07 3c 	lwz     r9,1852(r31)
1000800c:	3d 40 51 eb 	lis     r10,20971
10008010:	61 4a 85 1f 	ori     r10,r10,34079
10008014:	7d 49 50 96 	mulhw   r10,r9,r10
10008018:	7d 4a 2e 70 	srawi   r10,r10,5
1000801c:	7d 29 fe 70 	srawi   r9,r9,31
10008020:	7d 29 50 50 	subf    r9,r9,r10
10008024:	91 3f 00 20 	stw     r9,32(r31)
	if ( s100 != 2 && s100 != 3 )
10008028:	81 3f 00 20 	lwz     r9,32(r31)
1000802c:	2f 89 00 02 	cmpwi   cr7,r9,2
10008030:	41 9e 00 3c 	beq     cr7,1000806c <send_mime+0x2b4>
10008034:	81 3f 00 20 	lwz     r9,32(r31)
10008038:	2f 89 00 03 	cmpwi   cr7,r9,3
1000803c:	41 9e 00 30 	beq     cr7,1000806c <send_mime+0x2b4>
	    {
	    (void) my_snprintf( buf, sizeof(buf),
10008040:	39 3f 03 4c 	addi    r9,r31,844
10008044:	7d 23 4b 78 	mr      r3,r9
10008048:	38 80 03 e8 	li      r4,1000
1000804c:	3d 20 10 02 	lis     r9,4098
10008050:	38 a9 8d d4 	addi    r5,r9,-29228
10008054:	4c c6 31 82 	crclr   4*cr1+eq
10008058:	48 00 94 fd 	bl      10011554 <my_snprintf>
		"Cache-Control: no-cache,no-store\015\012" );
	    add_response( hc, buf );
1000805c:	39 3f 03 4c 	addi    r9,r31,844
10008060:	80 7f 07 38 	lwz     r3,1848(r31)
10008064:	7d 24 4b 78 	mr      r4,r9
10008068:	4b ff fb 01 	bl      10007b68 <add_response>
	    }
	if ( encodings[0] != '\0' )
1000806c:	81 3f 07 44 	lwz     r9,1860(r31)
10008070:	89 29 00 00 	lbz     r9,0(r9)
10008074:	55 29 06 3e 	clrlwi  r9,r9,24
10008078:	2f 89 00 00 	cmpwi   cr7,r9,0
1000807c:	41 9e 00 34 	beq     cr7,100080b0 <send_mime+0x2f8>
	    {
	    (void) my_snprintf( buf, sizeof(buf),
10008080:	39 3f 03 4c 	addi    r9,r31,844
10008084:	7d 23 4b 78 	mr      r3,r9
10008088:	38 80 03 e8 	li      r4,1000
1000808c:	3d 20 10 02 	lis     r9,4098
10008090:	38 a9 8d f8 	addi    r5,r9,-29192
10008094:	80 df 07 44 	lwz     r6,1860(r31)
10008098:	4c c6 31 82 	crclr   4*cr1+eq
1000809c:	48 00 94 b9 	bl      10011554 <my_snprintf>
		"Content-Encoding: %s\015\012", encodings );
	    add_response( hc, buf );
100080a0:	39 3f 03 4c 	addi    r9,r31,844
100080a4:	80 7f 07 38 	lwz     r3,1848(r31)
100080a8:	7d 24 4b 78 	mr      r4,r9
100080ac:	4b ff fa bd 	bl      10007b68 <add_response>
	    }
	if ( partial_content )
100080b0:	81 3f 00 18 	lwz     r9,24(r31)
100080b4:	2f 89 00 00 	cmpwi   cr7,r9,0
100080b8:	41 9e 00 b0 	beq     cr7,10008168 <send_mime+0x3b0>
	    {
	    (void) my_snprintf( buf, sizeof(buf),
		"Content-Range: bytes %lld-%lld/%lld\015\012Content-Length: %lld\015\012",
		(long long) hc->first_byte_index,
100080bc:	81 3f 07 38 	lwz     r9,1848(r31)
100080c0:	81 29 01 58 	lwz     r9,344(r9)
		"Content-Encoding: %s\015\012", encodings );
	    add_response( hc, buf );
	    }
	if ( partial_content )
	    {
	    (void) my_snprintf( buf, sizeof(buf),
100080c4:	7d 3a 4b 78 	mr      r26,r9
100080c8:	7d 29 fe 70 	srawi   r9,r9,31
100080cc:	7d 39 4b 78 	mr      r25,r9
		"Content-Range: bytes %lld-%lld/%lld\015\012Content-Length: %lld\015\012",
		(long long) hc->first_byte_index,
		(long long) hc->last_byte_index,
100080d0:	81 3f 07 38 	lwz     r9,1848(r31)
100080d4:	81 29 01 5c 	lwz     r9,348(r9)
		"Content-Encoding: %s\015\012", encodings );
	    add_response( hc, buf );
	    }
	if ( partial_content )
	    {
	    (void) my_snprintf( buf, sizeof(buf),
100080d8:	7d 3c 4b 78 	mr      r28,r9
100080dc:	7d 29 fe 70 	srawi   r9,r9,31
100080e0:	7d 3b 4b 78 	mr      r27,r9
100080e4:	81 3f 07 50 	lwz     r9,1872(r31)
100080e8:	7d 36 4b 78 	mr      r22,r9
100080ec:	7d 29 fe 70 	srawi   r9,r9,31
100080f0:	7d 35 4b 78 	mr      r21,r9
		"Content-Range: bytes %lld-%lld/%lld\015\012Content-Length: %lld\015\012",
		(long long) hc->first_byte_index,
		(long long) hc->last_byte_index,
		(long long) length,
		(long long) ( hc->last_byte_index - hc->first_byte_index + 1 ) );
100080f4:	81 3f 07 38 	lwz     r9,1848(r31)
100080f8:	81 49 01 5c 	lwz     r10,348(r9)
100080fc:	81 3f 07 38 	lwz     r9,1848(r31)
10008100:	81 29 01 58 	lwz     r9,344(r9)
10008104:	7d 29 50 50 	subf    r9,r9,r10
10008108:	39 29 00 01 	addi    r9,r9,1
		"Content-Encoding: %s\015\012", encodings );
	    add_response( hc, buf );
	    }
	if ( partial_content )
	    {
	    (void) my_snprintf( buf, sizeof(buf),
1000810c:	7d 38 4b 78 	mr      r24,r9
10008110:	7d 29 fe 70 	srawi   r9,r9,31
10008114:	7d 37 4b 78 	mr      r23,r9
10008118:	39 3f 03 4c 	addi    r9,r31,844
1000811c:	92 a1 00 08 	stw     r21,8(r1)
10008120:	92 c1 00 0c 	stw     r22,12(r1)
10008124:	92 e1 00 10 	stw     r23,16(r1)
10008128:	93 01 00 14 	stw     r24,20(r1)
1000812c:	7d 23 4b 78 	mr      r3,r9
10008130:	38 80 03 e8 	li      r4,1000
10008134:	3d 20 10 02 	lis     r9,4098
10008138:	38 a9 8e 10 	addi    r5,r9,-29168
1000813c:	7f 27 cb 78 	mr      r7,r25
10008140:	7f 48 d3 78 	mr      r8,r26
10008144:	7f 69 db 78 	mr      r9,r27
10008148:	7f 8a e3 78 	mr      r10,r28
1000814c:	4c c6 31 82 	crclr   4*cr1+eq
10008150:	48 00 94 05 	bl      10011554 <my_snprintf>
		"Content-Range: bytes %lld-%lld/%lld\015\012Content-Length: %lld\015\012",
		(long long) hc->first_byte_index,
		(long long) hc->last_byte_index,
		(long long) length,
		(long long) ( hc->last_byte_index - hc->first_byte_index + 1 ) );
	    add_response( hc, buf );
10008154:	39 3f 03 4c 	addi    r9,r31,844
10008158:	80 7f 07 38 	lwz     r3,1848(r31)
1000815c:	7d 24 4b 78 	mr      r4,r9
10008160:	4b ff fa 09 	bl      10007b68 <add_response>
10008164:	48 00 00 54 	b       100081b8 <send_mime+0x400>
	    }
	else if ( length >= 0 )
10008168:	81 3f 07 50 	lwz     r9,1872(r31)
1000816c:	2f 89 00 00 	cmpwi   cr7,r9,0
10008170:	41 9c 00 48 	blt     cr7,100081b8 <send_mime+0x400>
	    {
	    (void) my_snprintf( buf, sizeof(buf),
10008174:	81 3f 07 50 	lwz     r9,1872(r31)
10008178:	7d 3e 4b 78 	mr      r30,r9
1000817c:	7d 29 fe 70 	srawi   r9,r9,31
10008180:	7d 3d 4b 78 	mr      r29,r9
10008184:	39 3f 03 4c 	addi    r9,r31,844
10008188:	7d 23 4b 78 	mr      r3,r9
1000818c:	38 80 03 e8 	li      r4,1000
10008190:	3d 20 10 02 	lis     r9,4098
10008194:	38 a9 8e 4c 	addi    r5,r9,-29108
10008198:	7f a7 eb 78 	mr      r7,r29
1000819c:	7f c8 f3 78 	mr      r8,r30
100081a0:	4c c6 31 82 	crclr   4*cr1+eq
100081a4:	48 00 93 b1 	bl      10011554 <my_snprintf>
		"Content-Length: %lld\015\012", (long long) length );
	    add_response( hc, buf );
100081a8:	39 3f 03 4c 	addi    r9,r31,844
100081ac:	80 7f 07 38 	lwz     r3,1848(r31)
100081b0:	7d 24 4b 78 	mr      r4,r9
100081b4:	4b ff f9 b5 	bl      10007b68 <add_response>
	    }
	if ( hc->hs->p3p[0] != '\0' )
100081b8:	81 3f 07 38 	lwz     r9,1848(r31)
100081bc:	81 29 00 04 	lwz     r9,4(r9)
100081c0:	81 29 00 1c 	lwz     r9,28(r9)
100081c4:	89 29 00 00 	lbz     r9,0(r9)
100081c8:	55 29 06 3e 	clrlwi  r9,r9,24
100081cc:	2f 89 00 00 	cmpwi   cr7,r9,0
100081d0:	41 9e 00 40 	beq     cr7,10008210 <send_mime+0x458>
	    {
	    (void) my_snprintf( buf, sizeof(buf), "P3P: %s\015\012", hc->hs->p3p );
100081d4:	81 3f 07 38 	lwz     r9,1848(r31)
100081d8:	81 29 00 04 	lwz     r9,4(r9)
100081dc:	81 29 00 1c 	lwz     r9,28(r9)
100081e0:	39 5f 03 4c 	addi    r10,r31,844
100081e4:	7d 43 53 78 	mr      r3,r10
100081e8:	38 80 03 e8 	li      r4,1000
100081ec:	3d 40 10 02 	lis     r10,4098
100081f0:	38 aa 8e 64 	addi    r5,r10,-29084
100081f4:	7d 26 4b 78 	mr      r6,r9
100081f8:	4c c6 31 82 	crclr   4*cr1+eq
100081fc:	48 00 93 59 	bl      10011554 <my_snprintf>
	    add_response( hc, buf );
10008200:	39 3f 03 4c 	addi    r9,r31,844
10008204:	80 7f 07 38 	lwz     r3,1848(r31)
10008208:	7d 24 4b 78 	mr      r4,r9
1000820c:	4b ff f9 5d 	bl      10007b68 <add_response>
	    }
	if ( hc->hs->max_age >= 0 )
10008210:	81 3f 07 38 	lwz     r9,1848(r31)
10008214:	81 29 00 04 	lwz     r9,4(r9)
10008218:	81 29 00 20 	lwz     r9,32(r9)
1000821c:	2f 89 00 00 	cmpwi   cr7,r9,0
10008220:	41 9c 00 88 	blt     cr7,100082a8 <send_mime+0x4f0>
	    {
	    expires = now + hc->hs->max_age;
10008224:	81 3f 07 38 	lwz     r9,1848(r31)
10008228:	81 29 00 04 	lwz     r9,4(r9)
1000822c:	81 49 00 20 	lwz     r10,32(r9)
10008230:	81 3f 00 24 	lwz     r9,36(r31)
10008234:	7d 2a 4a 14 	add     r9,r10,r9
10008238:	91 3f 00 28 	stw     r9,40(r31)
	    (void) strftime(
		expbuf, sizeof(expbuf), rfc1123fmt, gmtime( &expires ) );
1000823c:	39 3f 00 28 	addi    r9,r31,40
10008240:	7d 23 4b 78 	mr      r3,r9
10008244:	48 02 54 79 	bl      1002d6bc <gmtime@plt>
10008248:	7c 69 1b 78 	mr      r9,r3
	    add_response( hc, buf );
	    }
	if ( hc->hs->max_age >= 0 )
	    {
	    expires = now + hc->hs->max_age;
	    (void) strftime(
1000824c:	39 5f 00 f4 	addi    r10,r31,244
10008250:	7d 43 53 78 	mr      r3,r10
10008254:	38 80 00 64 	li      r4,100
10008258:	80 bf 00 1c 	lwz     r5,28(r31)
1000825c:	7d 26 4b 78 	mr      r6,r9
10008260:	48 02 53 c5 	bl      1002d624 <strftime@plt>
		expbuf, sizeof(expbuf), rfc1123fmt, gmtime( &expires ) );
	    (void) my_snprintf( buf, sizeof(buf),
		"Cache-Control: max-age=%d\015\012Expires: %s\015\012",
		hc->hs->max_age, expbuf );
10008264:	81 3f 07 38 	lwz     r9,1848(r31)
10008268:	81 29 00 04 	lwz     r9,4(r9)
	if ( hc->hs->max_age >= 0 )
	    {
	    expires = now + hc->hs->max_age;
	    (void) strftime(
		expbuf, sizeof(expbuf), rfc1123fmt, gmtime( &expires ) );
	    (void) my_snprintf( buf, sizeof(buf),
1000826c:	81 49 00 20 	lwz     r10,32(r9)
10008270:	39 1f 03 4c 	addi    r8,r31,844
10008274:	39 3f 00 f4 	addi    r9,r31,244
10008278:	7d 03 43 78 	mr      r3,r8
1000827c:	38 80 03 e8 	li      r4,1000
10008280:	3d 00 10 02 	lis     r8,4098
10008284:	38 a8 8e 70 	addi    r5,r8,-29072
10008288:	7d 46 53 78 	mr      r6,r10
1000828c:	7d 27 4b 78 	mr      r7,r9
10008290:	4c c6 31 82 	crclr   4*cr1+eq
10008294:	48 00 92 c1 	bl      10011554 <my_snprintf>
		"Cache-Control: max-age=%d\015\012Expires: %s\015\012",
		hc->hs->max_age, expbuf );
	    add_response( hc, buf );
10008298:	39 3f 03 4c 	addi    r9,r31,844
1000829c:	80 7f 07 38 	lwz     r3,1848(r31)
100082a0:	7d 24 4b 78 	mr      r4,r9
100082a4:	4b ff f8 c5 	bl      10007b68 <add_response>
	    }
	if ( extraheads[0] != '\0' )
100082a8:	81 3f 07 48 	lwz     r9,1864(r31)
100082ac:	89 29 00 00 	lbz     r9,0(r9)
100082b0:	55 29 06 3e 	clrlwi  r9,r9,24
100082b4:	2f 89 00 00 	cmpwi   cr7,r9,0
100082b8:	41 9e 00 10 	beq     cr7,100082c8 <send_mime+0x510>
	    add_response( hc, extraheads );
100082bc:	80 7f 07 38 	lwz     r3,1848(r31)
100082c0:	80 9f 07 48 	lwz     r4,1864(r31)
100082c4:	4b ff f8 a5 	bl      10007b68 <add_response>
	add_response( hc, "\015\012" );
100082c8:	80 7f 07 38 	lwz     r3,1848(r31)
100082cc:	3d 20 10 02 	lis     r9,4098
100082d0:	38 89 8e 9c 	addi    r4,r9,-29028
100082d4:	4b ff f8 95 	bl      10007b68 <add_response>
	}
    }
100082d8:	39 7f 07 90 	addi    r11,r31,1936
100082dc:	80 0b 00 04 	lwz     r0,4(r11)
100082e0:	7c 08 03 a6 	mtlr    r0
100082e4:	82 ab ff d4 	lwz     r21,-44(r11)
100082e8:	82 cb ff d8 	lwz     r22,-40(r11)
100082ec:	82 eb ff dc 	lwz     r23,-36(r11)
100082f0:	83 0b ff e0 	lwz     r24,-32(r11)
100082f4:	83 2b ff e4 	lwz     r25,-28(r11)
100082f8:	83 4b ff e8 	lwz     r26,-24(r11)
100082fc:	83 6b ff ec 	lwz     r27,-20(r11)
10008300:	83 8b ff f0 	lwz     r28,-16(r11)
10008304:	83 ab ff f4 	lwz     r29,-12(r11)
10008308:	83 cb ff f8 	lwz     r30,-8(r11)
1000830c:	83 eb ff fc 	lwz     r31,-4(r11)
10008310:	7d 61 5b 78 	mr      r1,r11
10008314:	4e 80 00 20 	blr

10008318 <httpd_realloc_str>:
static int str_alloc_count = 0;
static size_t str_alloc_size = 0;

void
httpd_realloc_str( char** strP, size_t* maxsizeP, size_t size )
    {
10008318:	94 21 ff e0 	stwu    r1,-32(r1)
1000831c:	7c 08 02 a6 	mflr    r0
10008320:	90 01 00 24 	stw     r0,36(r1)
10008324:	93 e1 00 1c 	stw     r31,28(r1)
10008328:	7c 3f 0b 78 	mr      r31,r1
1000832c:	90 7f 00 08 	stw     r3,8(r31)
10008330:	90 9f 00 0c 	stw     r4,12(r31)
10008334:	90 bf 00 10 	stw     r5,16(r31)
    if ( *maxsizeP == 0 )
10008338:	81 3f 00 0c 	lwz     r9,12(r31)
1000833c:	81 29 00 00 	lwz     r9,0(r9)
10008340:	2f 89 00 00 	cmpwi   cr7,r9,0
10008344:	40 9e 00 78 	bne     cr7,100083bc <httpd_realloc_str+0xa4>
	{
	*maxsizeP = MAX( 200, size + 100 );
10008348:	81 3f 00 10 	lwz     r9,16(r31)
1000834c:	39 29 00 64 	addi    r9,r9,100
10008350:	2b 89 00 c8 	cmplwi  cr7,r9,200
10008354:	40 9c 00 08 	bge     cr7,1000835c <httpd_realloc_str+0x44>
10008358:	39 20 00 c8 	li      r9,200
1000835c:	81 5f 00 0c 	lwz     r10,12(r31)
10008360:	91 2a 00 00 	stw     r9,0(r10)
	*strP = NEW( char, *maxsizeP + 1 );
10008364:	81 3f 00 0c 	lwz     r9,12(r31)
10008368:	81 29 00 00 	lwz     r9,0(r9)
1000836c:	39 29 00 01 	addi    r9,r9,1
10008370:	7d 23 4b 78 	mr      r3,r9
10008374:	48 02 52 31 	bl      1002d5a4 <malloc@plt>
10008378:	7c 69 1b 78 	mr      r9,r3
1000837c:	7d 2a 4b 78 	mr      r10,r9
10008380:	81 3f 00 08 	lwz     r9,8(r31)
10008384:	91 49 00 00 	stw     r10,0(r9)
	++str_alloc_count;
10008388:	3d 20 10 03 	lis     r9,4099
1000838c:	81 29 db 2c 	lwz     r9,-9428(r9)
10008390:	39 49 00 01 	addi    r10,r9,1
10008394:	3d 20 10 03 	lis     r9,4099
10008398:	91 49 db 2c 	stw     r10,-9428(r9)
	str_alloc_size += *maxsizeP;
1000839c:	81 3f 00 0c 	lwz     r9,12(r31)
100083a0:	81 49 00 00 	lwz     r10,0(r9)
100083a4:	3d 20 10 03 	lis     r9,4099
100083a8:	81 29 db 30 	lwz     r9,-9424(r9)
100083ac:	7d 4a 4a 14 	add     r10,r10,r9
100083b0:	3d 20 10 03 	lis     r9,4099
100083b4:	91 49 db 30 	stw     r10,-9424(r9)
100083b8:	48 00 00 b0 	b       10008468 <httpd_realloc_str+0x150>
	}
    else if ( size > *maxsizeP )
100083bc:	81 3f 00 0c 	lwz     r9,12(r31)
100083c0:	81 49 00 00 	lwz     r10,0(r9)
100083c4:	81 3f 00 10 	lwz     r9,16(r31)
100083c8:	7f 8a 48 40 	cmplw   cr7,r10,r9
100083cc:	40 9c 00 98 	bge     cr7,10008464 <httpd_realloc_str+0x14c>
	{
	str_alloc_size -= *maxsizeP;
100083d0:	3d 20 10 03 	lis     r9,4099
100083d4:	81 49 db 30 	lwz     r10,-9424(r9)
100083d8:	81 3f 00 0c 	lwz     r9,12(r31)
100083dc:	81 29 00 00 	lwz     r9,0(r9)
100083e0:	7d 49 50 50 	subf    r10,r9,r10
100083e4:	3d 20 10 03 	lis     r9,4099
100083e8:	91 49 db 30 	stw     r10,-9424(r9)
	*maxsizeP = MAX( *maxsizeP * 2, size * 5 / 4 );
100083ec:	81 3f 00 10 	lwz     r9,16(r31)
100083f0:	1d 29 00 05 	mulli   r9,r9,5
100083f4:	55 29 f0 be 	rlwinm  r9,r9,30,2,31
100083f8:	81 5f 00 0c 	lwz     r10,12(r31)
100083fc:	81 4a 00 00 	lwz     r10,0(r10)
10008400:	55 4a 08 3c 	rlwinm  r10,r10,1,0,30
10008404:	7f 89 50 40 	cmplw   cr7,r9,r10
10008408:	40 9c 00 08 	bge     cr7,10008410 <httpd_realloc_str+0xf8>
1000840c:	7d 49 53 78 	mr      r9,r10
10008410:	81 5f 00 0c 	lwz     r10,12(r31)
10008414:	91 2a 00 00 	stw     r9,0(r10)
	*strP = RENEW( *strP, char, *maxsizeP + 1 );
10008418:	81 3f 00 08 	lwz     r9,8(r31)
1000841c:	81 49 00 00 	lwz     r10,0(r9)
10008420:	81 3f 00 0c 	lwz     r9,12(r31)
10008424:	81 29 00 00 	lwz     r9,0(r9)
10008428:	39 29 00 01 	addi    r9,r9,1
1000842c:	7d 43 53 78 	mr      r3,r10
10008430:	7d 24 4b 78 	mr      r4,r9
10008434:	48 02 51 69 	bl      1002d59c <realloc@plt>
10008438:	7c 6a 1b 78 	mr      r10,r3
1000843c:	81 3f 00 08 	lwz     r9,8(r31)
10008440:	91 49 00 00 	stw     r10,0(r9)
	str_alloc_size += *maxsizeP;
10008444:	81 3f 00 0c 	lwz     r9,12(r31)
10008448:	81 49 00 00 	lwz     r10,0(r9)
1000844c:	3d 20 10 03 	lis     r9,4099
10008450:	81 29 db 30 	lwz     r9,-9424(r9)
10008454:	7d 4a 4a 14 	add     r10,r10,r9
10008458:	3d 20 10 03 	lis     r9,4099
1000845c:	91 49 db 30 	stw     r10,-9424(r9)
10008460:	48 00 00 08 	b       10008468 <httpd_realloc_str+0x150>
	}
    else
	return;
10008464:	48 00 00 3c 	b       100084a0 <httpd_realloc_str+0x188>
    if ( *strP == (char*) 0 )
10008468:	81 3f 00 08 	lwz     r9,8(r31)
1000846c:	81 29 00 00 	lwz     r9,0(r9)
10008470:	2f 89 00 00 	cmpwi   cr7,r9,0
10008474:	40 9e 00 2c 	bne     cr7,100084a0 <httpd_realloc_str+0x188>
	{
	syslog(
	    LOG_ERR, "out of memory reallocating a string to %ld bytes",
	    (long) *maxsizeP );
10008478:	81 3f 00 0c 	lwz     r9,12(r31)
1000847c:	81 29 00 00 	lwz     r9,0(r9)
	}
    else
	return;
    if ( *strP == (char*) 0 )
	{
	syslog(
10008480:	38 60 00 03 	li      r3,3
10008484:	3d 40 10 02 	lis     r10,4098
10008488:	38 8a 8e a0 	addi    r4,r10,-29024
1000848c:	7d 25 4b 78 	mr      r5,r9
10008490:	4c c6 31 82 	crclr   4*cr1+eq
10008494:	48 02 52 f1 	bl      1002d784 <syslog@plt>
	    LOG_ERR, "out of memory reallocating a string to %ld bytes",
	    (long) *maxsizeP );
	exit( 1 );
10008498:	38 60 00 01 	li      r3,1
1000849c:	48 02 51 39 	bl      1002d5d4 <exit@plt>
	}
    }
100084a0:	39 7f 00 20 	addi    r11,r31,32
100084a4:	80 0b 00 04 	lwz     r0,4(r11)
100084a8:	7c 08 03 a6 	mtlr    r0
100084ac:	83 eb ff fc 	lwz     r31,-4(r11)
100084b0:	7d 61 5b 78 	mr      r1,r11
100084b4:	4e 80 00 20 	blr

100084b8 <send_response>:


static void
send_response( httpd_conn* hc, int status, char* title, char* extraheads, char* form, char* arg )
    {
100084b8:	94 21 f4 10 	stwu    r1,-3056(r1)
100084bc:	7c 08 02 a6 	mflr    r0
100084c0:	90 01 0b f4 	stw     r0,3060(r1)
100084c4:	93 e1 0b ec 	stw     r31,3052(r1)
100084c8:	7c 3f 0b 78 	mr      r31,r1
100084cc:	90 7f 0b c8 	stw     r3,3016(r31)
100084d0:	90 9f 0b cc 	stw     r4,3020(r31)
100084d4:	90 bf 0b d0 	stw     r5,3024(r31)
100084d8:	90 df 0b d4 	stw     r6,3028(r31)
100084dc:	90 ff 0b d8 	stw     r7,3032(r31)
100084e0:	91 1f 0b dc 	stw     r8,3036(r31)
    char defanged_arg[1000], buf[2000];

    send_mime(
100084e4:	80 7f 0b c8 	lwz     r3,3016(r31)
100084e8:	80 9f 0b cc 	lwz     r4,3020(r31)
100084ec:	80 bf 0b d0 	lwz     r5,3024(r31)
100084f0:	3d 20 10 02 	lis     r9,4098
100084f4:	38 c9 8e d4 	addi    r6,r9,-28972
100084f8:	80 ff 0b d4 	lwz     r7,3028(r31)
100084fc:	3d 20 10 02 	lis     r9,4098
10008500:	39 09 8e d8 	addi    r8,r9,-28968
10008504:	39 20 ff ff 	li      r9,-1
10008508:	39 40 00 00 	li      r10,0
1000850c:	4b ff f8 ad 	bl      10007db8 <send_mime>
	hc, status, title, "", extraheads, "text/html; charset=%s", (off_t) -1,
	(time_t) 0 );
    (void) my_snprintf( buf, sizeof(buf), "\
10008510:	39 3f 03 f4 	addi    r9,r31,1012
10008514:	7d 23 4b 78 	mr      r3,r9
10008518:	38 80 07 d0 	li      r4,2000
1000851c:	3d 20 10 02 	lis     r9,4098
10008520:	38 a9 8e f0 	addi    r5,r9,-28944
10008524:	80 df 0b cc 	lwz     r6,3020(r31)
10008528:	80 ff 0b d0 	lwz     r7,3024(r31)
1000852c:	81 1f 0b cc 	lwz     r8,3020(r31)
10008530:	81 3f 0b d0 	lwz     r9,3024(r31)
10008534:	4c c6 31 82 	crclr   4*cr1+eq
10008538:	48 00 90 1d 	bl      10011554 <my_snprintf>
\n\
  <body bgcolor=\"#cc9999\" text=\"#000000\" link=\"#2020ff\" vlink=\"#4040cc\">\n\
\n\
    <h2>%d %s</h2>\n",
	status, title, status, title );
    add_response( hc, buf );
1000853c:	39 3f 03 f4 	addi    r9,r31,1012
10008540:	80 7f 0b c8 	lwz     r3,3016(r31)
10008544:	7d 24 4b 78 	mr      r4,r9
10008548:	4b ff f6 21 	bl      10007b68 <add_response>
    defang( arg, defanged_arg, sizeof(defanged_arg) );
1000854c:	39 3f 00 0c 	addi    r9,r31,12
10008550:	80 7f 0b dc 	lwz     r3,3036(r31)
10008554:	7d 24 4b 78 	mr      r4,r9
10008558:	38 a0 03 e8 	li      r5,1000
1000855c:	48 00 01 39 	bl      10008694 <defang>
    (void) my_snprintf( buf, sizeof(buf), form, defanged_arg );
10008560:	39 5f 03 f4 	addi    r10,r31,1012
10008564:	39 3f 00 0c 	addi    r9,r31,12
10008568:	7d 43 53 78 	mr      r3,r10
1000856c:	38 80 07 d0 	li      r4,2000
10008570:	80 bf 0b d8 	lwz     r5,3032(r31)
10008574:	7d 26 4b 78 	mr      r6,r9
10008578:	4c c6 31 82 	crclr   4*cr1+eq
1000857c:	48 00 8f d9 	bl      10011554 <my_snprintf>
    add_response( hc, buf );
10008580:	39 3f 03 f4 	addi    r9,r31,1012
10008584:	80 7f 0b c8 	lwz     r3,3016(r31)
10008588:	7d 24 4b 78 	mr      r4,r9
1000858c:	4b ff f5 dd 	bl      10007b68 <add_response>
    if ( match( "**MSIE**", hc->useragent ) )
10008590:	81 3f 0b c8 	lwz     r9,3016(r31)
10008594:	81 29 00 d0 	lwz     r9,208(r9)
10008598:	3d 40 10 02 	lis     r10,4098
1000859c:	38 6a 90 34 	addi    r3,r10,-28620
100085a0:	7d 24 4b 78 	mr      r4,r9
100085a4:	48 00 bd 81 	bl      10014324 <match>
100085a8:	7c 69 1b 78 	mr      r9,r3
100085ac:	2f 89 00 00 	cmpwi   cr7,r9,0
100085b0:	41 9e 00 58 	beq     cr7,10008608 <send_response+0x150>
	{
	int n;
	add_response( hc, "<!--\n" );
100085b4:	80 7f 0b c8 	lwz     r3,3016(r31)
100085b8:	3d 20 10 02 	lis     r9,4098
100085bc:	38 89 90 40 	addi    r4,r9,-28608
100085c0:	4b ff f5 a9 	bl      10007b68 <add_response>
	for ( n = 0; n < 6; ++n )
100085c4:	39 20 00 00 	li      r9,0
100085c8:	91 3f 00 08 	stw     r9,8(r31)
100085cc:	48 00 00 20 	b       100085ec <send_response+0x134>
	    add_response( hc, "Padding so that MSIE deigns to show this error instead of its own canned one.\n");
100085d0:	80 7f 0b c8 	lwz     r3,3016(r31)
100085d4:	3d 20 10 02 	lis     r9,4098
100085d8:	38 89 90 48 	addi    r4,r9,-28600
100085dc:	4b ff f5 8d 	bl      10007b68 <add_response>
    add_response( hc, buf );
    if ( match( "**MSIE**", hc->useragent ) )
	{
	int n;
	add_response( hc, "<!--\n" );
	for ( n = 0; n < 6; ++n )
100085e0:	81 3f 00 08 	lwz     r9,8(r31)
100085e4:	39 29 00 01 	addi    r9,r9,1
100085e8:	91 3f 00 08 	stw     r9,8(r31)
100085ec:	81 3f 00 08 	lwz     r9,8(r31)
100085f0:	2f 89 00 05 	cmpwi   cr7,r9,5
100085f4:	40 9d ff dc 	ble     cr7,100085d0 <send_response+0x118>
	    add_response( hc, "Padding so that MSIE deigns to show this error instead of its own canned one.\n");
	add_response( hc, "-->\n" );
100085f8:	80 7f 0b c8 	lwz     r3,3016(r31)
100085fc:	3d 20 10 02 	lis     r9,4098
10008600:	38 89 90 98 	addi    r4,r9,-28520
10008604:	4b ff f5 65 	bl      10007b68 <add_response>
	}
    send_response_tail( hc );
10008608:	80 7f 0b c8 	lwz     r3,3016(r31)
1000860c:	48 00 00 1d 	bl      10008628 <send_response_tail>
    }
10008610:	39 7f 0b f0 	addi    r11,r31,3056
10008614:	80 0b 00 04 	lwz     r0,4(r11)
10008618:	7c 08 03 a6 	mtlr    r0
1000861c:	83 eb ff fc 	lwz     r31,-4(r11)
10008620:	7d 61 5b 78 	mr      r1,r11
10008624:	4e 80 00 20 	blr

10008628 <send_response_tail>:


static void
send_response_tail( httpd_conn* hc )
    {
10008628:	94 21 fb f0 	stwu    r1,-1040(r1)
1000862c:	7c 08 02 a6 	mflr    r0
10008630:	90 01 04 14 	stw     r0,1044(r1)
10008634:	93 e1 04 0c 	stw     r31,1036(r1)
10008638:	7c 3f 0b 78 	mr      r31,r1
1000863c:	90 7f 03 f8 	stw     r3,1016(r31)
    char buf[1000];

    (void) my_snprintf( buf, sizeof(buf), "\
10008640:	39 3f 00 08 	addi    r9,r31,8
10008644:	7d 23 4b 78 	mr      r3,r9
10008648:	38 80 03 e8 	li      r4,1000
1000864c:	3d 20 10 02 	lis     r9,4098
10008650:	38 a9 90 a0 	addi    r5,r9,-28512
10008654:	3d 20 10 02 	lis     r9,4098
10008658:	38 c9 90 ec 	addi    r6,r9,-28436
1000865c:	3d 20 10 02 	lis     r9,4098
10008660:	38 e9 89 6c 	addi    r7,r9,-30356
10008664:	4c c6 31 82 	crclr   4*cr1+eq
10008668:	48 00 8e ed 	bl      10011554 <my_snprintf>
\n\
  </body>\n\
\n\
</html>\n",
	SERVER_ADDRESS, EXPOSED_SERVER_SOFTWARE );
    add_response( hc, buf );
1000866c:	80 7f 03 f8 	lwz     r3,1016(r31)
10008670:	39 3f 00 08 	addi    r9,r31,8
10008674:	7d 24 4b 78 	mr      r4,r9
10008678:	4b ff f4 f1 	bl      10007b68 <add_response>
    }
1000867c:	39 7f 04 10 	addi    r11,r31,1040
10008680:	80 0b 00 04 	lwz     r0,4(r11)
10008684:	7c 08 03 a6 	mtlr    r0
10008688:	83 eb ff fc 	lwz     r31,-4(r11)
1000868c:	7d 61 5b 78 	mr      r1,r11
10008690:	4e 80 00 20 	blr

10008694 <defang>:


static void
defang( char* str, char* dfstr, int dfsize )
    {
10008694:	94 21 ff d0 	stwu    r1,-48(r1)
10008698:	93 e1 00 2c 	stw     r31,44(r1)
1000869c:	7c 3f 0b 78 	mr      r31,r1
100086a0:	90 7f 00 18 	stw     r3,24(r31)
100086a4:	90 9f 00 1c 	stw     r4,28(r31)
100086a8:	90 bf 00 20 	stw     r5,32(r31)
    char* cp1;
    char* cp2;

    for ( cp1 = str, cp2 = dfstr;
100086ac:	81 3f 00 18 	lwz     r9,24(r31)
100086b0:	91 3f 00 08 	stw     r9,8(r31)
100086b4:	81 3f 00 1c 	lwz     r9,28(r31)
100086b8:	91 3f 00 0c 	stw     r9,12(r31)
100086bc:	48 00 00 ec 	b       100087a8 <defang+0x114>
	  *cp1 != '\0' && cp2 - dfstr < dfsize - 5;
	  ++cp1, ++cp2 )
	{
	switch ( *cp1 )
100086c0:	81 3f 00 08 	lwz     r9,8(r31)
100086c4:	89 29 00 00 	lbz     r9,0(r9)
100086c8:	55 29 06 3e 	clrlwi  r9,r9,24
100086cc:	2f 89 00 3c 	cmpwi   cr7,r9,60
100086d0:	41 9e 00 10 	beq     cr7,100086e0 <defang+0x4c>
100086d4:	2f 89 00 3e 	cmpwi   cr7,r9,62
100086d8:	41 9e 00 54 	beq     cr7,1000872c <defang+0x98>
100086dc:	48 00 00 9c 	b       10008778 <defang+0xe4>
	    {
	    case '<':
	    *cp2++ = '&';
100086e0:	81 3f 00 0c 	lwz     r9,12(r31)
100086e4:	39 49 00 01 	addi    r10,r9,1
100086e8:	91 5f 00 0c 	stw     r10,12(r31)
100086ec:	39 40 00 26 	li      r10,38
100086f0:	99 49 00 00 	stb     r10,0(r9)
	    *cp2++ = 'l';
100086f4:	81 3f 00 0c 	lwz     r9,12(r31)
100086f8:	39 49 00 01 	addi    r10,r9,1
100086fc:	91 5f 00 0c 	stw     r10,12(r31)
10008700:	39 40 00 6c 	li      r10,108
10008704:	99 49 00 00 	stb     r10,0(r9)
	    *cp2++ = 't';
10008708:	81 3f 00 0c 	lwz     r9,12(r31)
1000870c:	39 49 00 01 	addi    r10,r9,1
10008710:	91 5f 00 0c 	stw     r10,12(r31)
10008714:	39 40 00 74 	li      r10,116
10008718:	99 49 00 00 	stb     r10,0(r9)
	    *cp2 = ';';
1000871c:	81 3f 00 0c 	lwz     r9,12(r31)
10008720:	39 40 00 3b 	li      r10,59
10008724:	99 49 00 00 	stb     r10,0(r9)
	    break;
10008728:	48 00 00 68 	b       10008790 <defang+0xfc>
	    case '>':
	    *cp2++ = '&';
1000872c:	81 3f 00 0c 	lwz     r9,12(r31)
10008730:	39 49 00 01 	addi    r10,r9,1
10008734:	91 5f 00 0c 	stw     r10,12(r31)
10008738:	39 40 00 26 	li      r10,38
1000873c:	99 49 00 00 	stb     r10,0(r9)
	    *cp2++ = 'g';
10008740:	81 3f 00 0c 	lwz     r9,12(r31)
10008744:	39 49 00 01 	addi    r10,r9,1
10008748:	91 5f 00 0c 	stw     r10,12(r31)
1000874c:	39 40 00 67 	li      r10,103
10008750:	99 49 00 00 	stb     r10,0(r9)
	    *cp2++ = 't';
10008754:	81 3f 00 0c 	lwz     r9,12(r31)
10008758:	39 49 00 01 	addi    r10,r9,1
1000875c:	91 5f 00 0c 	stw     r10,12(r31)
10008760:	39 40 00 74 	li      r10,116
10008764:	99 49 00 00 	stb     r10,0(r9)
	    *cp2 = ';';
10008768:	81 3f 00 0c 	lwz     r9,12(r31)
1000876c:	39 40 00 3b 	li      r10,59
10008770:	99 49 00 00 	stb     r10,0(r9)
	    break;
10008774:	48 00 00 1c 	b       10008790 <defang+0xfc>
	    default:
	    *cp2 = *cp1;
10008778:	81 3f 00 08 	lwz     r9,8(r31)
1000877c:	89 29 00 00 	lbz     r9,0(r9)
10008780:	55 2a 06 3e 	clrlwi  r10,r9,24
10008784:	81 3f 00 0c 	lwz     r9,12(r31)
10008788:	99 49 00 00 	stb     r10,0(r9)
	    break;
1000878c:	60 00 00 00 	nop
    char* cp1;
    char* cp2;

    for ( cp1 = str, cp2 = dfstr;
	  *cp1 != '\0' && cp2 - dfstr < dfsize - 5;
	  ++cp1, ++cp2 )
10008790:	81 3f 00 08 	lwz     r9,8(r31)
10008794:	39 29 00 01 	addi    r9,r9,1
10008798:	91 3f 00 08 	stw     r9,8(r31)
1000879c:	81 3f 00 0c 	lwz     r9,12(r31)
100087a0:	39 29 00 01 	addi    r9,r9,1
100087a4:	91 3f 00 0c 	stw     r9,12(r31)
    {
    char* cp1;
    char* cp2;

    for ( cp1 = str, cp2 = dfstr;
	  *cp1 != '\0' && cp2 - dfstr < dfsize - 5;
100087a8:	81 3f 00 08 	lwz     r9,8(r31)
100087ac:	89 29 00 00 	lbz     r9,0(r9)
100087b0:	55 29 06 3e 	clrlwi  r9,r9,24
defang( char* str, char* dfstr, int dfsize )
    {
    char* cp1;
    char* cp2;

    for ( cp1 = str, cp2 = dfstr;
100087b4:	2f 89 00 00 	cmpwi   cr7,r9,0
100087b8:	41 9e 00 20 	beq     cr7,100087d8 <defang+0x144>
	  *cp1 != '\0' && cp2 - dfstr < dfsize - 5;
100087bc:	81 5f 00 0c 	lwz     r10,12(r31)
100087c0:	81 3f 00 1c 	lwz     r9,28(r31)
100087c4:	7d 49 50 50 	subf    r10,r9,r10
100087c8:	81 3f 00 20 	lwz     r9,32(r31)
100087cc:	39 29 ff fb 	addi    r9,r9,-5
100087d0:	7f 8a 48 00 	cmpw    cr7,r10,r9
100087d4:	41 9c fe ec 	blt     cr7,100086c0 <defang+0x2c>
	    default:
	    *cp2 = *cp1;
	    break;
	    }
	}
    *cp2 = '\0';
100087d8:	81 3f 00 0c 	lwz     r9,12(r31)
100087dc:	39 40 00 00 	li      r10,0
100087e0:	99 49 00 00 	stb     r10,0(r9)
    }
100087e4:	39 7f 00 30 	addi    r11,r31,48
100087e8:	83 eb ff fc 	lwz     r31,-4(r11)
100087ec:	7d 61 5b 78 	mr      r1,r11
100087f0:	4e 80 00 20 	blr

100087f4 <httpd_send_err>:


void
httpd_send_err( httpd_conn* hc, int status, char* title, char* extraheads, char* form, char* arg )
    {
100087f4:	94 21 fb e0 	stwu    r1,-1056(r1)
100087f8:	7c 08 02 a6 	mflr    r0
100087fc:	90 01 04 24 	stw     r0,1060(r1)
10008800:	93 e1 04 1c 	stw     r31,1052(r1)
10008804:	7c 3f 0b 78 	mr      r31,r1
10008808:	90 7f 03 f8 	stw     r3,1016(r31)
1000880c:	90 9f 03 fc 	stw     r4,1020(r31)
10008810:	90 bf 04 00 	stw     r5,1024(r31)
10008814:	90 df 04 04 	stw     r6,1028(r31)
10008818:	90 ff 04 08 	stw     r7,1032(r31)
1000881c:	91 1f 04 0c 	stw     r8,1036(r31)
#ifdef ERR_DIR

    char filename[1000];

    /* Try virtual host error page. */
    if ( hc->hs->vhost && hc->hostdir[0] != '\0' )
10008820:	81 3f 03 f8 	lwz     r9,1016(r31)
10008824:	81 29 00 04 	lwz     r9,4(r9)
10008828:	81 29 00 3c 	lwz     r9,60(r9)
1000882c:	2f 89 00 00 	cmpwi   cr7,r9,0
10008830:	41 9e 00 7c 	beq     cr7,100088ac <httpd_send_err+0xb8>
10008834:	81 3f 03 f8 	lwz     r9,1016(r31)
10008838:	81 29 00 f0 	lwz     r9,240(r9)
1000883c:	89 29 00 00 	lbz     r9,0(r9)
10008840:	55 29 06 3e 	clrlwi  r9,r9,24
10008844:	2f 89 00 00 	cmpwi   cr7,r9,0
10008848:	41 9e 00 64 	beq     cr7,100088ac <httpd_send_err+0xb8>
	{
	(void) my_snprintf( filename, sizeof(filename),
1000884c:	81 3f 03 f8 	lwz     r9,1016(r31)
10008850:	81 29 00 f0 	lwz     r9,240(r9)
10008854:	39 5f 00 08 	addi    r10,r31,8
10008858:	7d 43 53 78 	mr      r3,r10
1000885c:	38 80 03 e8 	li      r4,1000
10008860:	3d 40 10 02 	lis     r10,4098
10008864:	38 aa 91 14 	addi    r5,r10,-28396
10008868:	7d 26 4b 78 	mr      r6,r9
1000886c:	3d 20 10 02 	lis     r9,4098
10008870:	38 e9 91 28 	addi    r7,r9,-28376
10008874:	81 1f 03 fc 	lwz     r8,1020(r31)
10008878:	4c c6 31 82 	crclr   4*cr1+eq
1000887c:	48 00 8c d9 	bl      10011554 <my_snprintf>
	    "%s/%s/err%d.html", hc->hostdir, ERR_DIR, status );
	if ( send_err_file( hc, status, title, extraheads, filename ) )
10008880:	80 7f 03 f8 	lwz     r3,1016(r31)
10008884:	80 9f 03 fc 	lwz     r4,1020(r31)
10008888:	80 bf 04 00 	lwz     r5,1024(r31)
1000888c:	80 df 04 04 	lwz     r6,1028(r31)
10008890:	39 3f 00 08 	addi    r9,r31,8
10008894:	7d 27 4b 78 	mr      r7,r9
10008898:	48 00 00 9d 	bl      10008934 <send_err_file>
1000889c:	7c 69 1b 78 	mr      r9,r3
100088a0:	2f 89 00 00 	cmpwi   cr7,r9,0
100088a4:	41 9e 00 08 	beq     cr7,100088ac <httpd_send_err+0xb8>
	    return;
100088a8:	48 00 00 74 	b       1000891c <httpd_send_err+0x128>
	}

    /* Try server-wide error page. */
    (void) my_snprintf( filename, sizeof(filename),
100088ac:	39 3f 00 08 	addi    r9,r31,8
100088b0:	7d 23 4b 78 	mr      r3,r9
100088b4:	38 80 03 e8 	li      r4,1000
100088b8:	3d 20 10 02 	lis     r9,4098
100088bc:	38 a9 91 30 	addi    r5,r9,-28368
100088c0:	3d 20 10 02 	lis     r9,4098
100088c4:	38 c9 91 28 	addi    r6,r9,-28376
100088c8:	80 ff 03 fc 	lwz     r7,1020(r31)
100088cc:	4c c6 31 82 	crclr   4*cr1+eq
100088d0:	48 00 8c 85 	bl      10011554 <my_snprintf>
	"%s/err%d.html", ERR_DIR, status );
    if ( send_err_file( hc, status, title, extraheads, filename ) )
100088d4:	80 7f 03 f8 	lwz     r3,1016(r31)
100088d8:	80 9f 03 fc 	lwz     r4,1020(r31)
100088dc:	80 bf 04 00 	lwz     r5,1024(r31)
100088e0:	80 df 04 04 	lwz     r6,1028(r31)
100088e4:	39 3f 00 08 	addi    r9,r31,8
100088e8:	7d 27 4b 78 	mr      r7,r9
100088ec:	48 00 00 49 	bl      10008934 <send_err_file>
100088f0:	7c 69 1b 78 	mr      r9,r3
100088f4:	2f 89 00 00 	cmpwi   cr7,r9,0
100088f8:	41 9e 00 08 	beq     cr7,10008900 <httpd_send_err+0x10c>
	return;
100088fc:	48 00 00 20 	b       1000891c <httpd_send_err+0x128>

    /* Fall back on built-in error page. */
    send_response( hc, status, title, extraheads, form, arg );
10008900:	80 7f 03 f8 	lwz     r3,1016(r31)
10008904:	80 9f 03 fc 	lwz     r4,1020(r31)
10008908:	80 bf 04 00 	lwz     r5,1024(r31)
1000890c:	80 df 04 04 	lwz     r6,1028(r31)
10008910:	80 ff 04 08 	lwz     r7,1032(r31)
10008914:	81 1f 04 0c 	lwz     r8,1036(r31)
10008918:	4b ff fb a1 	bl      100084b8 <send_response>
#else /* ERR_DIR */

    send_response( hc, status, title, extraheads, form, arg );

#endif /* ERR_DIR */
    }
1000891c:	39 7f 04 20 	addi    r11,r31,1056
10008920:	80 0b 00 04 	lwz     r0,4(r11)
10008924:	7c 08 03 a6 	mtlr    r0
10008928:	83 eb ff fc 	lwz     r31,-4(r11)
1000892c:	7d 61 5b 78 	mr      r1,r11
10008930:	4e 80 00 20 	blr

10008934 <send_err_file>:


#ifdef ERR_DIR
static int
send_err_file( httpd_conn* hc, int status, char* title, char* extraheads, char* filename )
    {
10008934:	94 21 fb e0 	stwu    r1,-1056(r1)
10008938:	7c 08 02 a6 	mflr    r0
1000893c:	90 01 04 24 	stw     r0,1060(r1)
10008940:	93 e1 04 1c 	stw     r31,1052(r1)
10008944:	7c 3f 0b 78 	mr      r31,r1
10008948:	90 7f 03 f8 	stw     r3,1016(r31)
1000894c:	90 9f 03 fc 	stw     r4,1020(r31)
10008950:	90 bf 04 00 	stw     r5,1024(r31)
10008954:	90 df 04 04 	stw     r6,1028(r31)
10008958:	90 ff 04 08 	stw     r7,1032(r31)
    FILE* fp;
    char buf[1000];
    size_t r;

    fp = fopen( filename, "r" );
1000895c:	80 7f 04 08 	lwz     r3,1032(r31)
10008960:	3d 20 10 02 	lis     r9,4098
10008964:	38 89 91 40 	addi    r4,r9,-28352
10008968:	48 02 4d 4d 	bl      1002d6b4 <fopen@plt>
1000896c:	90 7f 00 08 	stw     r3,8(r31)
    if ( fp == (FILE*) 0 )
10008970:	81 3f 00 08 	lwz     r9,8(r31)
10008974:	2f 89 00 00 	cmpwi   cr7,r9,0
10008978:	40 9e 00 0c 	bne     cr7,10008984 <send_err_file+0x50>
	return 0;
1000897c:	39 20 00 00 	li      r9,0
10008980:	48 00 00 9c 	b       10008a1c <send_err_file+0xe8>
    send_mime(
10008984:	80 7f 03 f8 	lwz     r3,1016(r31)
10008988:	80 9f 03 fc 	lwz     r4,1020(r31)
1000898c:	80 bf 04 00 	lwz     r5,1024(r31)
10008990:	3d 20 10 02 	lis     r9,4098
10008994:	38 c9 8e d4 	addi    r6,r9,-28972
10008998:	80 ff 04 04 	lwz     r7,1028(r31)
1000899c:	3d 20 10 02 	lis     r9,4098
100089a0:	39 09 8e d8 	addi    r8,r9,-28968
100089a4:	39 20 ff ff 	li      r9,-1
100089a8:	39 40 00 00 	li      r10,0
100089ac:	4b ff f4 0d 	bl      10007db8 <send_mime>
	hc, status, title, "", extraheads, "text/html; charset=%s", (off_t) -1,
	(time_t) 0 );
    for (;;)
	{
	r = fread( buf, 1, sizeof(buf) - 1, fp );
100089b0:	39 3f 00 10 	addi    r9,r31,16
100089b4:	7d 23 4b 78 	mr      r3,r9
100089b8:	38 80 00 01 	li      r4,1
100089bc:	38 a0 03 e7 	li      r5,999
100089c0:	80 df 00 08 	lwz     r6,8(r31)
100089c4:	48 02 4b 99 	bl      1002d55c <fread@plt>
100089c8:	90 7f 00 0c 	stw     r3,12(r31)
	if ( r == 0 )
100089cc:	81 3f 00 0c 	lwz     r9,12(r31)
100089d0:	2f 89 00 00 	cmpwi   cr7,r9,0
100089d4:	40 9e 00 20 	bne     cr7,100089f4 <send_err_file+0xc0>
	    break;
100089d8:	60 00 00 00 	nop
	buf[r] = '\0';
	add_response( hc, buf );
	}
    (void) fclose( fp );
100089dc:	80 7f 00 08 	lwz     r3,8(r31)
100089e0:	48 02 4a 8d 	bl      1002d46c <fclose@plt>

#ifdef ERR_APPEND_SERVER_INFO
    send_response_tail( hc );
100089e4:	80 7f 03 f8 	lwz     r3,1016(r31)
100089e8:	4b ff fc 41 	bl      10008628 <send_response_tail>
#endif /* ERR_APPEND_SERVER_INFO */

    return 1;
100089ec:	39 20 00 01 	li      r9,1
100089f0:	48 00 00 2c 	b       10008a1c <send_err_file+0xe8>
    for (;;)
	{
	r = fread( buf, 1, sizeof(buf) - 1, fp );
	if ( r == 0 )
	    break;
	buf[r] = '\0';
100089f4:	39 5f 00 10 	addi    r10,r31,16
100089f8:	81 3f 00 0c 	lwz     r9,12(r31)
100089fc:	7d 2a 4a 14 	add     r9,r10,r9
10008a00:	39 40 00 00 	li      r10,0
10008a04:	99 49 00 00 	stb     r10,0(r9)
	add_response( hc, buf );
10008a08:	39 3f 00 10 	addi    r9,r31,16
10008a0c:	80 7f 03 f8 	lwz     r3,1016(r31)
10008a10:	7d 24 4b 78 	mr      r4,r9
10008a14:	4b ff f1 55 	bl      10007b68 <add_response>
	}
10008a18:	4b ff ff 98 	b       100089b0 <send_err_file+0x7c>
#ifdef ERR_APPEND_SERVER_INFO
    send_response_tail( hc );
#endif /* ERR_APPEND_SERVER_INFO */

    return 1;
    }
10008a1c:	7d 23 4b 78 	mr      r3,r9
10008a20:	39 7f 04 20 	addi    r11,r31,1056
10008a24:	80 0b 00 04 	lwz     r0,4(r11)
10008a28:	7c 08 03 a6 	mtlr    r0
10008a2c:	83 eb ff fc 	lwz     r31,-4(r11)
10008a30:	7d 61 5b 78 	mr      r1,r11
10008a34:	4e 80 00 20 	blr

10008a38 <send_authenticate>:

#ifdef AUTH_FILE

static void
send_authenticate( httpd_conn* hc, char* realm )
    {
10008a38:	94 21 ff e0 	stwu    r1,-32(r1)
10008a3c:	7c 08 02 a6 	mflr    r0
10008a40:	90 01 00 24 	stw     r0,36(r1)
10008a44:	93 e1 00 1c 	stw     r31,28(r1)
10008a48:	7c 3f 0b 78 	mr      r31,r1
10008a4c:	90 7f 00 08 	stw     r3,8(r31)
10008a50:	90 9f 00 0c 	stw     r4,12(r31)
    static char* header;
    static size_t maxheader = 0;
    static char headstr[] = "WWW-Authenticate: Basic realm=\"";

    httpd_realloc_str(
	&header, &maxheader, sizeof(headstr) + strlen( realm ) + 3 );
10008a54:	80 7f 00 0c 	lwz     r3,12(r31)
10008a58:	48 02 4b fd 	bl      1002d654 <strlen@plt>
10008a5c:	7c 69 1b 78 	mr      r9,r3
    {
    static char* header;
    static size_t maxheader = 0;
    static char headstr[] = "WWW-Authenticate: Basic realm=\"";

    httpd_realloc_str(
10008a60:	39 29 00 23 	addi    r9,r9,35
10008a64:	3d 40 10 03 	lis     r10,4099
10008a68:	38 6a dc 34 	addi    r3,r10,-9164
10008a6c:	3d 40 10 03 	lis     r10,4099
10008a70:	38 8a dc 38 	addi    r4,r10,-9160
10008a74:	7d 25 4b 78 	mr      r5,r9
10008a78:	4b ff f8 a1 	bl      10008318 <httpd_realloc_str>
	&header, &maxheader, sizeof(headstr) + strlen( realm ) + 3 );
    (void) my_snprintf( header, maxheader, "%s%s\"\015\012", headstr, realm );
10008a7c:	3d 20 10 03 	lis     r9,4099
10008a80:	81 49 dc 34 	lwz     r10,-9164(r9)
10008a84:	3d 20 10 03 	lis     r9,4099
10008a88:	81 29 dc 38 	lwz     r9,-9160(r9)
10008a8c:	7d 43 53 78 	mr      r3,r10
10008a90:	7d 24 4b 78 	mr      r4,r9
10008a94:	3d 20 10 02 	lis     r9,4098
10008a98:	38 a9 91 44 	addi    r5,r9,-28348
10008a9c:	3d 20 10 03 	lis     r9,4099
10008aa0:	38 c9 d1 84 	addi    r6,r9,-11900
10008aa4:	80 ff 00 0c 	lwz     r7,12(r31)
10008aa8:	4c c6 31 82 	crclr   4*cr1+eq
10008aac:	48 00 8a a9 	bl      10011554 <my_snprintf>
    httpd_send_err( hc, 401, err401title, header, err401form, hc->encodedurl );
10008ab0:	3d 20 10 03 	lis     r9,4099
10008ab4:	80 e9 c1 18 	lwz     r7,-16104(r9)
10008ab8:	3d 20 10 03 	lis     r9,4099
10008abc:	81 09 dc 34 	lwz     r8,-9164(r9)
10008ac0:	3d 20 10 03 	lis     r9,4099
10008ac4:	81 49 c1 1c 	lwz     r10,-16100(r9)
10008ac8:	81 3f 00 08 	lwz     r9,8(r31)
10008acc:	81 29 00 ac 	lwz     r9,172(r9)
10008ad0:	80 7f 00 08 	lwz     r3,8(r31)
10008ad4:	38 80 01 91 	li      r4,401
10008ad8:	7c e5 3b 78 	mr      r5,r7
10008adc:	7d 06 43 78 	mr      r6,r8
10008ae0:	7d 47 53 78 	mr      r7,r10
10008ae4:	7d 28 4b 78 	mr      r8,r9
10008ae8:	4b ff fd 0d 	bl      100087f4 <httpd_send_err>
    /* If the request was a POST then there might still be data to be read,
    ** so we need to do a lingering close.
    */
    if ( hc->method == METHOD_POST )
10008aec:	81 3f 00 08 	lwz     r9,8(r31)
10008af0:	81 29 00 9c 	lwz     r9,156(r9)
10008af4:	2f 89 00 03 	cmpwi   cr7,r9,3
10008af8:	40 9e 00 10 	bne     cr7,10008b08 <send_authenticate+0xd0>
	hc->should_linger = 1;
10008afc:	81 3f 00 08 	lwz     r9,8(r31)
10008b00:	39 40 00 01 	li      r10,1
10008b04:	91 49 01 64 	stw     r10,356(r9)
    }
10008b08:	39 7f 00 20 	addi    r11,r31,32
10008b0c:	80 0b 00 04 	lwz     r0,4(r11)
10008b10:	7c 08 03 a6 	mtlr    r0
10008b14:	83 eb ff fc 	lwz     r31,-4(r11)
10008b18:	7d 61 5b 78 	mr      r1,r11
10008b1c:	4e 80 00 20 	blr

10008b20 <b64_decode>:
** be at most 3/4 the size of the encoded, and may be smaller if there
** are padding characters (blanks, newlines).
*/
static int
b64_decode( const char* str, unsigned char* space, int size )
    {
10008b20:	94 21 ff c0 	stwu    r1,-64(r1)
10008b24:	93 e1 00 3c 	stw     r31,60(r1)
10008b28:	7c 3f 0b 78 	mr      r31,r1
10008b2c:	90 7f 00 28 	stw     r3,40(r31)
10008b30:	90 9f 00 2c 	stw     r4,44(r31)
10008b34:	90 bf 00 30 	stw     r5,48(r31)
    const char* cp;
    int space_idx, phase;
    int d, prev_d = 0;
10008b38:	39 20 00 00 	li      r9,0
10008b3c:	91 3f 00 14 	stw     r9,20(r31)
    unsigned char c;

    space_idx = 0;
10008b40:	39 20 00 00 	li      r9,0
10008b44:	91 3f 00 0c 	stw     r9,12(r31)
    phase = 0;
10008b48:	39 20 00 00 	li      r9,0
10008b4c:	91 3f 00 10 	stw     r9,16(r31)
    for ( cp = str; *cp != '\0'; ++cp )
10008b50:	81 3f 00 28 	lwz     r9,40(r31)
10008b54:	91 3f 00 08 	stw     r9,8(r31)
10008b58:	48 00 01 b0 	b       10008d08 <b64_decode+0x1e8>
	{
	d = b64_decode_table[(int) ((unsigned char) *cp)];
10008b5c:	81 3f 00 08 	lwz     r9,8(r31)
10008b60:	89 29 00 00 	lbz     r9,0(r9)
10008b64:	55 29 06 3e 	clrlwi  r9,r9,24
10008b68:	3d 40 10 03 	lis     r10,4099
10008b6c:	39 4a c1 44 	addi    r10,r10,-16060
10008b70:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10008b74:	7d 2a 4a 14 	add     r9,r10,r9
10008b78:	81 29 00 00 	lwz     r9,0(r9)
10008b7c:	91 3f 00 18 	stw     r9,24(r31)
	if ( d != -1 )
10008b80:	81 5f 00 18 	lwz     r10,24(r31)
10008b84:	39 20 ff ff 	li      r9,-1
10008b88:	7f 8a 48 00 	cmpw    cr7,r10,r9
10008b8c:	41 9e 01 70 	beq     cr7,10008cfc <b64_decode+0x1dc>
	    {
	    switch ( phase )
10008b90:	81 3f 00 10 	lwz     r9,16(r31)
10008b94:	2f 89 00 01 	cmpwi   cr7,r9,1
10008b98:	41 9e 00 3c 	beq     cr7,10008bd4 <b64_decode+0xb4>
10008b9c:	2f 89 00 01 	cmpwi   cr7,r9,1
10008ba0:	41 9d 00 10 	bgt     cr7,10008bb0 <b64_decode+0x90>
10008ba4:	2f 89 00 00 	cmpwi   cr7,r9,0
10008ba8:	41 9e 00 1c 	beq     cr7,10008bc4 <b64_decode+0xa4>
10008bac:	48 00 01 48 	b       10008cf4 <b64_decode+0x1d4>
10008bb0:	2f 89 00 02 	cmpwi   cr7,r9,2
10008bb4:	41 9e 00 84 	beq     cr7,10008c38 <b64_decode+0x118>
10008bb8:	2f 89 00 03 	cmpwi   cr7,r9,3
10008bbc:	41 9e 00 e0 	beq     cr7,10008c9c <b64_decode+0x17c>
10008bc0:	48 00 01 34 	b       10008cf4 <b64_decode+0x1d4>
		{
		case 0:
		++phase;
10008bc4:	81 3f 00 10 	lwz     r9,16(r31)
10008bc8:	39 29 00 01 	addi    r9,r9,1
10008bcc:	91 3f 00 10 	stw     r9,16(r31)
		break;
10008bd0:	48 00 01 24 	b       10008cf4 <b64_decode+0x1d4>
		case 1:
		c = ( ( prev_d << 2 ) | ( ( d & 0x30 ) >> 4 ) );
10008bd4:	81 3f 00 14 	lwz     r9,20(r31)
10008bd8:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10008bdc:	7d 2a 07 74 	extsb   r10,r9
10008be0:	81 3f 00 18 	lwz     r9,24(r31)
10008be4:	55 29 06 b6 	rlwinm  r9,r9,0,26,27
10008be8:	7d 29 26 70 	srawi   r9,r9,4
10008bec:	7d 29 07 74 	extsb   r9,r9
10008bf0:	7d 49 4b 78 	or      r9,r10,r9
10008bf4:	7d 29 07 74 	extsb   r9,r9
10008bf8:	99 3f 00 1c 	stb     r9,28(r31)
		if ( space_idx < size )
10008bfc:	81 5f 00 0c 	lwz     r10,12(r31)
10008c00:	81 3f 00 30 	lwz     r9,48(r31)
10008c04:	7f 8a 48 00 	cmpw    cr7,r10,r9
10008c08:	40 9c 00 20 	bge     cr7,10008c28 <b64_decode+0x108>
		    space[space_idx++] = c;
10008c0c:	81 3f 00 0c 	lwz     r9,12(r31)
10008c10:	39 49 00 01 	addi    r10,r9,1
10008c14:	91 5f 00 0c 	stw     r10,12(r31)
10008c18:	81 5f 00 2c 	lwz     r10,44(r31)
10008c1c:	7d 2a 4a 14 	add     r9,r10,r9
10008c20:	89 5f 00 1c 	lbz     r10,28(r31)
10008c24:	99 49 00 00 	stb     r10,0(r9)
		++phase;
10008c28:	81 3f 00 10 	lwz     r9,16(r31)
10008c2c:	39 29 00 01 	addi    r9,r9,1
10008c30:	91 3f 00 10 	stw     r9,16(r31)
		break;
10008c34:	48 00 00 c0 	b       10008cf4 <b64_decode+0x1d4>
		case 2:
		c = ( ( ( prev_d & 0xf ) << 4 ) | ( ( d & 0x3c ) >> 2 ) );
10008c38:	81 3f 00 14 	lwz     r9,20(r31)
10008c3c:	55 29 20 36 	rlwinm  r9,r9,4,0,27
10008c40:	7d 2a 07 74 	extsb   r10,r9
10008c44:	81 3f 00 18 	lwz     r9,24(r31)
10008c48:	55 29 06 ba 	rlwinm  r9,r9,0,26,29
10008c4c:	7d 29 16 70 	srawi   r9,r9,2
10008c50:	7d 29 07 74 	extsb   r9,r9
10008c54:	7d 49 4b 78 	or      r9,r10,r9
10008c58:	7d 29 07 74 	extsb   r9,r9
10008c5c:	99 3f 00 1c 	stb     r9,28(r31)
		if ( space_idx < size )
10008c60:	81 5f 00 0c 	lwz     r10,12(r31)
10008c64:	81 3f 00 30 	lwz     r9,48(r31)
10008c68:	7f 8a 48 00 	cmpw    cr7,r10,r9
10008c6c:	40 9c 00 20 	bge     cr7,10008c8c <b64_decode+0x16c>
		    space[space_idx++] = c;
10008c70:	81 3f 00 0c 	lwz     r9,12(r31)
10008c74:	39 49 00 01 	addi    r10,r9,1
10008c78:	91 5f 00 0c 	stw     r10,12(r31)
10008c7c:	81 5f 00 2c 	lwz     r10,44(r31)
10008c80:	7d 2a 4a 14 	add     r9,r10,r9
10008c84:	89 5f 00 1c 	lbz     r10,28(r31)
10008c88:	99 49 00 00 	stb     r10,0(r9)
		++phase;
10008c8c:	81 3f 00 10 	lwz     r9,16(r31)
10008c90:	39 29 00 01 	addi    r9,r9,1
10008c94:	91 3f 00 10 	stw     r9,16(r31)
		break;
10008c98:	48 00 00 5c 	b       10008cf4 <b64_decode+0x1d4>
		case 3:
		c = ( ( ( prev_d & 0x03 ) << 6 ) | d );
10008c9c:	81 3f 00 14 	lwz     r9,20(r31)
10008ca0:	55 29 30 32 	rlwinm  r9,r9,6,0,25
10008ca4:	7d 2a 07 74 	extsb   r10,r9
10008ca8:	81 3f 00 18 	lwz     r9,24(r31)
10008cac:	7d 29 07 74 	extsb   r9,r9
10008cb0:	7d 49 4b 78 	or      r9,r10,r9
10008cb4:	7d 29 07 74 	extsb   r9,r9
10008cb8:	99 3f 00 1c 	stb     r9,28(r31)
		if ( space_idx < size )
10008cbc:	81 5f 00 0c 	lwz     r10,12(r31)
10008cc0:	81 3f 00 30 	lwz     r9,48(r31)
10008cc4:	7f 8a 48 00 	cmpw    cr7,r10,r9
10008cc8:	40 9c 00 20 	bge     cr7,10008ce8 <b64_decode+0x1c8>
		    space[space_idx++] = c;
10008ccc:	81 3f 00 0c 	lwz     r9,12(r31)
10008cd0:	39 49 00 01 	addi    r10,r9,1
10008cd4:	91 5f 00 0c 	stw     r10,12(r31)
10008cd8:	81 5f 00 2c 	lwz     r10,44(r31)
10008cdc:	7d 2a 4a 14 	add     r9,r10,r9
10008ce0:	89 5f 00 1c 	lbz     r10,28(r31)
10008ce4:	99 49 00 00 	stb     r10,0(r9)
		phase = 0;
10008ce8:	39 20 00 00 	li      r9,0
10008cec:	91 3f 00 10 	stw     r9,16(r31)
		break;
10008cf0:	60 00 00 00 	nop
		}
	    prev_d = d;
10008cf4:	81 3f 00 18 	lwz     r9,24(r31)
10008cf8:	91 3f 00 14 	stw     r9,20(r31)
    int d, prev_d = 0;
    unsigned char c;

    space_idx = 0;
    phase = 0;
    for ( cp = str; *cp != '\0'; ++cp )
10008cfc:	81 3f 00 08 	lwz     r9,8(r31)
10008d00:	39 29 00 01 	addi    r9,r9,1
10008d04:	91 3f 00 08 	stw     r9,8(r31)
10008d08:	81 3f 00 08 	lwz     r9,8(r31)
10008d0c:	89 29 00 00 	lbz     r9,0(r9)
10008d10:	55 29 06 3e 	clrlwi  r9,r9,24
10008d14:	2f 89 00 00 	cmpwi   cr7,r9,0
10008d18:	40 9e fe 44 	bne     cr7,10008b5c <b64_decode+0x3c>
		break;
		}
	    prev_d = d;
	    }
	}
    return space_idx;
10008d1c:	81 3f 00 0c 	lwz     r9,12(r31)
    }
10008d20:	7d 23 4b 78 	mr      r3,r9
10008d24:	39 7f 00 40 	addi    r11,r31,64
10008d28:	83 eb ff fc 	lwz     r31,-4(r11)
10008d2c:	7d 61 5b 78 	mr      r1,r11
10008d30:	4e 80 00 20 	blr

10008d34 <auth_check>:


/* Returns -1 == unauthorized, 0 == no auth file, 1 = authorized. */
static int
auth_check( httpd_conn* hc, char* dirname  )
    {
10008d34:	94 21 ff d0 	stwu    r1,-48(r1)
10008d38:	7c 08 02 a6 	mflr    r0
10008d3c:	90 01 00 34 	stw     r0,52(r1)
10008d40:	93 e1 00 2c 	stw     r31,44(r1)
10008d44:	7c 3f 0b 78 	mr      r31,r1
10008d48:	90 7f 00 18 	stw     r3,24(r31)
10008d4c:	90 9f 00 1c 	stw     r4,28(r31)
    if ( hc->hs->global_passwd )
10008d50:	81 3f 00 18 	lwz     r9,24(r31)
10008d54:	81 29 00 04 	lwz     r9,4(r9)
10008d58:	81 29 00 40 	lwz     r9,64(r9)
10008d5c:	2f 89 00 00 	cmpwi   cr7,r9,0
10008d60:	41 9e 00 84 	beq     cr7,10008de4 <auth_check+0xb0>
	{
	char* topdir;
	if ( hc->hs->vhost && hc->hostdir[0] != '\0' )
10008d64:	81 3f 00 18 	lwz     r9,24(r31)
10008d68:	81 29 00 04 	lwz     r9,4(r9)
10008d6c:	81 29 00 3c 	lwz     r9,60(r9)
10008d70:	2f 89 00 00 	cmpwi   cr7,r9,0
10008d74:	41 9e 00 2c 	beq     cr7,10008da0 <auth_check+0x6c>
10008d78:	81 3f 00 18 	lwz     r9,24(r31)
10008d7c:	81 29 00 f0 	lwz     r9,240(r9)
10008d80:	89 29 00 00 	lbz     r9,0(r9)
10008d84:	55 29 06 3e 	clrlwi  r9,r9,24
10008d88:	2f 89 00 00 	cmpwi   cr7,r9,0
10008d8c:	41 9e 00 14 	beq     cr7,10008da0 <auth_check+0x6c>
	    topdir = hc->hostdir;
10008d90:	81 3f 00 18 	lwz     r9,24(r31)
10008d94:	81 29 00 f0 	lwz     r9,240(r9)
10008d98:	91 3f 00 08 	stw     r9,8(r31)
10008d9c:	48 00 00 10 	b       10008dac <auth_check+0x78>
	else
	    topdir = ".";
10008da0:	3d 20 10 02 	lis     r9,4098
10008da4:	39 29 91 4c 	addi    r9,r9,-28340
10008da8:	91 3f 00 08 	stw     r9,8(r31)
	switch ( auth_check2( hc, topdir ) )
10008dac:	80 7f 00 18 	lwz     r3,24(r31)
10008db0:	80 9f 00 08 	lwz     r4,8(r31)
10008db4:	48 00 00 5d 	bl      10008e10 <auth_check2>
10008db8:	7c 69 1b 78 	mr      r9,r3
10008dbc:	39 40 ff ff 	li      r10,-1
10008dc0:	7f 89 50 00 	cmpw    cr7,r9,r10
10008dc4:	41 9e 00 10 	beq     cr7,10008dd4 <auth_check+0xa0>
10008dc8:	2f 89 00 01 	cmpwi   cr7,r9,1
10008dcc:	41 9e 00 10 	beq     cr7,10008ddc <auth_check+0xa8>
10008dd0:	48 00 00 14 	b       10008de4 <auth_check+0xb0>
	    {
	    case -1:
	    return -1;
10008dd4:	39 20 ff ff 	li      r9,-1
10008dd8:	48 00 00 1c 	b       10008df4 <auth_check+0xc0>
	    case 1:
	    return 1;
10008ddc:	39 20 00 01 	li      r9,1
10008de0:	48 00 00 14 	b       10008df4 <auth_check+0xc0>
	    }
	}
    return auth_check2( hc, dirname );
10008de4:	80 7f 00 18 	lwz     r3,24(r31)
10008de8:	80 9f 00 1c 	lwz     r4,28(r31)
10008dec:	48 00 00 25 	bl      10008e10 <auth_check2>
10008df0:	7c 69 1b 78 	mr      r9,r3
    }
10008df4:	7d 23 4b 78 	mr      r3,r9
10008df8:	39 7f 00 30 	addi    r11,r31,48
10008dfc:	80 0b 00 04 	lwz     r0,4(r11)
10008e00:	7c 08 03 a6 	mtlr    r0
10008e04:	83 eb ff fc 	lwz     r31,-4(r11)
10008e08:	7d 61 5b 78 	mr      r1,r11
10008e0c:	4e 80 00 20 	blr

10008e10 <auth_check2>:


/* Returns -1 == unauthorized, 0 == no auth file, 1 = authorized. */
static int
auth_check2( httpd_conn* hc, char* dirname  )
    {
10008e10:	94 21 fb 80 	stwu    r1,-1152(r1)
10008e14:	7c 08 02 a6 	mflr    r0
10008e18:	90 01 04 84 	stw     r0,1156(r1)
10008e1c:	93 a1 04 74 	stw     r29,1140(r1)
10008e20:	93 c1 04 78 	stw     r30,1144(r1)
10008e24:	93 e1 04 7c 	stw     r31,1148(r1)
10008e28:	7c 3f 0b 78 	mr      r31,r1
10008e2c:	90 7f 04 68 	stw     r3,1128(r31)
10008e30:	90 9f 04 6c 	stw     r4,1132(r31)
    static char* prevcryp;
    static size_t maxprevcryp = 0;

    /* Construct auth filename. */
    httpd_realloc_str(
	&authpath, &maxauthpath, strlen( dirname ) + 1 + sizeof(AUTH_FILE) );
10008e34:	80 7f 04 6c 	lwz     r3,1132(r31)
10008e38:	48 02 48 1d 	bl      1002d654 <strlen@plt>
10008e3c:	7c 69 1b 78 	mr      r9,r3
    static size_t maxprevuser = 0;
    static char* prevcryp;
    static size_t maxprevcryp = 0;

    /* Construct auth filename. */
    httpd_realloc_str(
10008e40:	39 29 00 0b 	addi    r9,r9,11
10008e44:	3d 40 10 03 	lis     r10,4099
10008e48:	38 6a dc 3c 	addi    r3,r10,-9156
10008e4c:	3d 40 10 03 	lis     r10,4099
10008e50:	38 8a dc 40 	addi    r4,r10,-9152
10008e54:	7d 25 4b 78 	mr      r5,r9
10008e58:	4b ff f4 c1 	bl      10008318 <httpd_realloc_str>
	&authpath, &maxauthpath, strlen( dirname ) + 1 + sizeof(AUTH_FILE) );
    (void) my_snprintf( authpath, maxauthpath, "%s/%s", dirname, AUTH_FILE );
10008e5c:	3d 20 10 03 	lis     r9,4099
10008e60:	81 49 dc 3c 	lwz     r10,-9156(r9)
10008e64:	3d 20 10 03 	lis     r9,4099
10008e68:	81 29 dc 40 	lwz     r9,-9152(r9)
10008e6c:	7d 43 53 78 	mr      r3,r10
10008e70:	7d 24 4b 78 	mr      r4,r9
10008e74:	3d 20 10 02 	lis     r9,4098
10008e78:	38 a9 91 50 	addi    r5,r9,-28336
10008e7c:	80 df 04 6c 	lwz     r6,1132(r31)
10008e80:	3d 20 10 02 	lis     r9,4098
10008e84:	38 e9 91 58 	addi    r7,r9,-28328
10008e88:	4c c6 31 82 	crclr   4*cr1+eq
10008e8c:	48 00 86 c9 	bl      10011554 <my_snprintf>

    /* Does this directory have an auth file? */
    if ( stat( authpath, &sb ) < 0 )
10008e90:	3d 20 10 03 	lis     r9,4099
10008e94:	81 49 dc 3c 	lwz     r10,-9156(r9)
10008e98:	39 3f 00 20 	addi    r9,r31,32
10008e9c:	7d 43 53 78 	mr      r3,r10
10008ea0:	7d 24 4b 78 	mr      r4,r9
10008ea4:	48 00 ed 51 	bl      10017bf4 <__stat>
10008ea8:	7c 69 1b 78 	mr      r9,r3
10008eac:	2f 89 00 00 	cmpwi   cr7,r9,0
10008eb0:	40 9c 00 0c 	bge     cr7,10008ebc <auth_check2+0xac>
	/* Nope, let the request go through. */
	return 0;
10008eb4:	39 20 00 00 	li      r9,0
10008eb8:	48 00 04 f4 	b       100093ac <auth_check2+0x59c>

    /* Does this request contain basic authorization info? */
    if ( hc->authorization[0] == '\0' ||
10008ebc:	81 3f 04 68 	lwz     r9,1128(r31)
10008ec0:	81 29 00 f4 	lwz     r9,244(r9)
10008ec4:	89 29 00 00 	lbz     r9,0(r9)
10008ec8:	55 29 06 3e 	clrlwi  r9,r9,24
10008ecc:	2f 89 00 00 	cmpwi   cr7,r9,0
10008ed0:	41 9e 00 2c 	beq     cr7,10008efc <auth_check2+0xec>
	 strncmp( hc->authorization, "Basic ", 6 ) != 0 )
10008ed4:	81 3f 04 68 	lwz     r9,1128(r31)
10008ed8:	81 29 00 f4 	lwz     r9,244(r9)
10008edc:	7d 23 4b 78 	mr      r3,r9
10008ee0:	3d 20 10 02 	lis     r9,4098
10008ee4:	38 89 91 64 	addi    r4,r9,-28316
10008ee8:	38 a0 00 06 	li      r5,6
10008eec:	48 02 49 09 	bl      1002d7f4 <strncmp@plt>
10008ef0:	7c 69 1b 78 	mr      r9,r3
    if ( stat( authpath, &sb ) < 0 )
	/* Nope, let the request go through. */
	return 0;

    /* Does this request contain basic authorization info? */
    if ( hc->authorization[0] == '\0' ||
10008ef4:	2f 89 00 00 	cmpwi   cr7,r9,0
10008ef8:	41 9e 00 18 	beq     cr7,10008f10 <auth_check2+0x100>
	 strncmp( hc->authorization, "Basic ", 6 ) != 0 )
	{
	/* Nope, return a 401 Unauthorized. */
	send_authenticate( hc, dirname );
10008efc:	80 7f 04 68 	lwz     r3,1128(r31)
10008f00:	80 9f 04 6c 	lwz     r4,1132(r31)
10008f04:	4b ff fb 35 	bl      10008a38 <send_authenticate>
	return -1;
10008f08:	39 20 ff ff 	li      r9,-1
10008f0c:	48 00 04 a0 	b       100093ac <auth_check2+0x59c>
	}

    /* Decode it. */
    l = b64_decode(
	&(hc->authorization[6]), (unsigned char*) authinfo,
10008f10:	81 3f 04 68 	lwz     r9,1128(r31)
10008f14:	81 29 00 f4 	lwz     r9,244(r9)
	send_authenticate( hc, dirname );
	return -1;
	}

    /* Decode it. */
    l = b64_decode(
10008f18:	39 49 00 06 	addi    r10,r9,6
10008f1c:	39 3f 00 78 	addi    r9,r31,120
10008f20:	7d 43 53 78 	mr      r3,r10
10008f24:	7d 24 4b 78 	mr      r4,r9
10008f28:	38 a0 01 f3 	li      r5,499
10008f2c:	4b ff fb f5 	bl      10008b20 <b64_decode>
10008f30:	90 7f 00 08 	stw     r3,8(r31)
	&(hc->authorization[6]), (unsigned char*) authinfo,
	sizeof(authinfo) - 1 );
    authinfo[l] = '\0';
10008f34:	39 5f 00 78 	addi    r10,r31,120
10008f38:	81 3f 00 08 	lwz     r9,8(r31)
10008f3c:	7d 2a 4a 14 	add     r9,r10,r9
10008f40:	39 40 00 00 	li      r10,0
10008f44:	99 49 00 00 	stb     r10,0(r9)
    /* Split into user and password. */
    authpass = strchr( authinfo, ':' );
10008f48:	39 3f 00 78 	addi    r9,r31,120
10008f4c:	7d 23 4b 78 	mr      r3,r9
10008f50:	38 80 00 3a 	li      r4,58
10008f54:	48 02 46 f1 	bl      1002d644 <strchr@plt>
10008f58:	90 7f 00 0c 	stw     r3,12(r31)
    if ( authpass == (char*) 0 )
10008f5c:	81 3f 00 0c 	lwz     r9,12(r31)
10008f60:	2f 89 00 00 	cmpwi   cr7,r9,0
10008f64:	40 9e 00 18 	bne     cr7,10008f7c <auth_check2+0x16c>
	{
	/* No colon?  Bogus auth info. */
	send_authenticate( hc, dirname );
10008f68:	80 7f 04 68 	lwz     r3,1128(r31)
10008f6c:	80 9f 04 6c 	lwz     r4,1132(r31)
10008f70:	4b ff fa c9 	bl      10008a38 <send_authenticate>
	return -1;
10008f74:	39 20 ff ff 	li      r9,-1
10008f78:	48 00 04 34 	b       100093ac <auth_check2+0x59c>
	}
    *authpass++ = '\0';
10008f7c:	81 3f 00 0c 	lwz     r9,12(r31)
10008f80:	39 49 00 01 	addi    r10,r9,1
10008f84:	91 5f 00 0c 	stw     r10,12(r31)
10008f88:	39 40 00 00 	li      r10,0
10008f8c:	99 49 00 00 	stb     r10,0(r9)
    /* If there are more fields, cut them off. */
    colon = strchr( authpass, ':' );
10008f90:	80 7f 00 0c 	lwz     r3,12(r31)
10008f94:	38 80 00 3a 	li      r4,58
10008f98:	48 02 46 ad 	bl      1002d644 <strchr@plt>
10008f9c:	90 7f 00 10 	stw     r3,16(r31)
    if ( colon != (char*) 0 )
10008fa0:	81 3f 00 10 	lwz     r9,16(r31)
10008fa4:	2f 89 00 00 	cmpwi   cr7,r9,0
10008fa8:	41 9e 00 10 	beq     cr7,10008fb8 <auth_check2+0x1a8>
	*colon = '\0';
10008fac:	81 3f 00 10 	lwz     r9,16(r31)
10008fb0:	39 40 00 00 	li      r10,0
10008fb4:	99 49 00 00 	stb     r10,0(r9)

    /* See if we have a cached entry and can use it. */
    if ( maxprevauthpath != 0 &&
10008fb8:	3d 20 10 03 	lis     r9,4099
10008fbc:	81 29 dc 44 	lwz     r9,-9148(r9)
10008fc0:	2f 89 00 00 	cmpwi   cr7,r9,0
10008fc4:	41 9e 01 08 	beq     cr7,100090cc <auth_check2+0x2bc>
	 strcmp( authpath, prevauthpath ) == 0 &&
10008fc8:	3d 20 10 03 	lis     r9,4099
10008fcc:	81 49 dc 3c 	lwz     r10,-9156(r9)
10008fd0:	3d 20 10 03 	lis     r9,4099
10008fd4:	81 29 dc 48 	lwz     r9,-9144(r9)
10008fd8:	7d 43 53 78 	mr      r3,r10
10008fdc:	7d 24 4b 78 	mr      r4,r9
10008fe0:	48 02 43 fd 	bl      1002d3dc <strcmp@plt>
10008fe4:	7c 69 1b 78 	mr      r9,r3
    colon = strchr( authpass, ':' );
    if ( colon != (char*) 0 )
	*colon = '\0';

    /* See if we have a cached entry and can use it. */
    if ( maxprevauthpath != 0 &&
10008fe8:	2f 89 00 00 	cmpwi   cr7,r9,0
10008fec:	40 9e 00 e0 	bne     cr7,100090cc <auth_check2+0x2bc>
	 strcmp( authpath, prevauthpath ) == 0 &&
	 sb.st_mtime == prevmtime &&
10008ff0:	81 5f 00 60 	lwz     r10,96(r31)
10008ff4:	3d 20 10 03 	lis     r9,4099
10008ff8:	81 29 dc 4c 	lwz     r9,-9140(r9)
    if ( colon != (char*) 0 )
	*colon = '\0';

    /* See if we have a cached entry and can use it. */
    if ( maxprevauthpath != 0 &&
	 strcmp( authpath, prevauthpath ) == 0 &&
10008ffc:	7f 8a 48 00 	cmpw    cr7,r10,r9
10009000:	40 9e 00 cc 	bne     cr7,100090cc <auth_check2+0x2bc>
	 sb.st_mtime == prevmtime &&
	 strcmp( authinfo, prevuser ) == 0 )
10009004:	3d 20 10 03 	lis     r9,4099
10009008:	81 29 dc 50 	lwz     r9,-9136(r9)
1000900c:	39 5f 00 78 	addi    r10,r31,120
10009010:	7d 43 53 78 	mr      r3,r10
10009014:	7d 24 4b 78 	mr      r4,r9
10009018:	48 02 43 c5 	bl      1002d3dc <strcmp@plt>
1000901c:	7c 69 1b 78 	mr      r9,r3
	*colon = '\0';

    /* See if we have a cached entry and can use it. */
    if ( maxprevauthpath != 0 &&
	 strcmp( authpath, prevauthpath ) == 0 &&
	 sb.st_mtime == prevmtime &&
10009020:	2f 89 00 00 	cmpwi   cr7,r9,0
10009024:	40 9e 00 a8 	bne     cr7,100090cc <auth_check2+0x2bc>
	 strcmp( authinfo, prevuser ) == 0 )
	{
	/* Yes.  Check against the cached encrypted password. */
	if ( strcmp( crypt( authpass, prevcryp ), prevcryp ) == 0 )
10009028:	3d 20 10 03 	lis     r9,4099
1000902c:	81 29 dc 54 	lwz     r9,-9132(r9)
10009030:	80 7f 00 0c 	lwz     r3,12(r31)
10009034:	7d 24 4b 78 	mr      r4,r9
10009038:	4c c6 31 82 	crclr   4*cr1+eq
1000903c:	48 02 47 39 	bl      1002d774 <crypt@plt>
10009040:	7c 69 1b 78 	mr      r9,r3
10009044:	7d 2a 4b 78 	mr      r10,r9
10009048:	3d 20 10 03 	lis     r9,4099
1000904c:	81 29 dc 54 	lwz     r9,-9132(r9)
10009050:	7d 43 53 78 	mr      r3,r10
10009054:	7d 24 4b 78 	mr      r4,r9
10009058:	48 02 43 85 	bl      1002d3dc <strcmp@plt>
1000905c:	7c 69 1b 78 	mr      r9,r3
10009060:	2f 89 00 00 	cmpwi   cr7,r9,0
10009064:	40 9e 00 54 	bne     cr7,100090b8 <auth_check2+0x2a8>
	    {
	    /* Ok! */
	    httpd_realloc_str(
10009068:	81 3f 04 68 	lwz     r9,1128(r31)
1000906c:	3b a9 00 f8 	addi    r29,r9,248
10009070:	81 3f 04 68 	lwz     r9,1128(r31)
10009074:	3b c9 01 28 	addi    r30,r9,296
10009078:	39 3f 00 78 	addi    r9,r31,120
1000907c:	7d 23 4b 78 	mr      r3,r9
10009080:	48 02 45 d5 	bl      1002d654 <strlen@plt>
10009084:	7c 69 1b 78 	mr      r9,r3
10009088:	7f a3 eb 78 	mr      r3,r29
1000908c:	7f c4 f3 78 	mr      r4,r30
10009090:	7d 25 4b 78 	mr      r5,r9
10009094:	4b ff f2 85 	bl      10008318 <httpd_realloc_str>
		&hc->remoteuser, &hc->maxremoteuser, strlen( authinfo ) );
	    (void) strcpy( hc->remoteuser, authinfo );
10009098:	81 3f 04 68 	lwz     r9,1128(r31)
1000909c:	81 49 00 f8 	lwz     r10,248(r9)
100090a0:	39 3f 00 78 	addi    r9,r31,120
100090a4:	7d 43 53 78 	mr      r3,r10
100090a8:	7d 24 4b 78 	mr      r4,r9
100090ac:	48 02 44 b9 	bl      1002d564 <strcpy@plt>
	    return 1;
100090b0:	39 20 00 01 	li      r9,1
100090b4:	48 00 02 f8 	b       100093ac <auth_check2+0x59c>
	    }
	else
	    {
	    /* No. */
	    send_authenticate( hc, dirname );
100090b8:	80 7f 04 68 	lwz     r3,1128(r31)
100090bc:	80 9f 04 6c 	lwz     r4,1132(r31)
100090c0:	4b ff f9 79 	bl      10008a38 <send_authenticate>
	    return -1;
100090c4:	39 20 ff ff 	li      r9,-1
100090c8:	48 00 02 e4 	b       100093ac <auth_check2+0x59c>
	    }
	}

    /* Open the password file. */
    fp = fopen( authpath, "r" );
100090cc:	3d 20 10 03 	lis     r9,4099
100090d0:	81 29 dc 3c 	lwz     r9,-9156(r9)
100090d4:	7d 23 4b 78 	mr      r3,r9
100090d8:	3d 20 10 02 	lis     r9,4098
100090dc:	38 89 91 40 	addi    r4,r9,-28352
100090e0:	48 02 45 d5 	bl      1002d6b4 <fopen@plt>
100090e4:	90 7f 00 14 	stw     r3,20(r31)
    if ( fp == (FILE*) 0 )
100090e8:	81 3f 00 14 	lwz     r9,20(r31)
100090ec:	2f 89 00 00 	cmpwi   cr7,r9,0
100090f0:	40 9e 00 78 	bne     cr7,10009168 <auth_check2+0x358>
	{
	/* The file exists but we can't open it?  Disallow access. */
	syslog(
100090f4:	81 3f 04 68 	lwz     r9,1128(r31)
100090f8:	39 29 00 08 	addi    r9,r9,8
100090fc:	7d 23 4b 78 	mr      r3,r9
10009100:	48 00 82 4d 	bl      1001134c <httpd_ntoa>
10009104:	7c 6a 1b 78 	mr      r10,r3
10009108:	3d 20 10 03 	lis     r9,4099
1000910c:	81 29 dc 3c 	lwz     r9,-9156(r9)
10009110:	38 60 00 03 	li      r3,3
10009114:	3d 00 10 02 	lis     r8,4098
10009118:	38 88 91 6c 	addi    r4,r8,-28308
1000911c:	7d 45 53 78 	mr      r5,r10
10009120:	7d 26 4b 78 	mr      r6,r9
10009124:	4c c6 31 82 	crclr   4*cr1+eq
10009128:	48 02 46 5d 	bl      1002d784 <syslog@plt>
	    LOG_ERR, "%.80s auth file %.80s could not be opened - %m",
	    httpd_ntoa( &hc->client_addr ), authpath );
	httpd_send_err(
1000912c:	3d 20 10 03 	lis     r9,4099
10009130:	81 49 c1 20 	lwz     r10,-16096(r9)
10009134:	81 3f 04 68 	lwz     r9,1128(r31)
10009138:	81 29 00 ac 	lwz     r9,172(r9)
1000913c:	80 7f 04 68 	lwz     r3,1128(r31)
10009140:	38 80 01 93 	li      r4,403
10009144:	7d 45 53 78 	mr      r5,r10
10009148:	3d 40 10 02 	lis     r10,4098
1000914c:	38 ca 8e d4 	addi    r6,r10,-28972
10009150:	3d 40 10 02 	lis     r10,4098
10009154:	38 ea 91 9c 	addi    r7,r10,-28260
10009158:	7d 28 4b 78 	mr      r8,r9
1000915c:	4b ff f6 99 	bl      100087f4 <httpd_send_err>
	    hc, 403, err403title, "",
	    ERROR_FORM( err403form, "The requested URL '%.80s' is protected by an authentication file, but the authentication file cannot be opened.\n" ),
	    hc->encodedurl );
	return -1;
10009160:	39 20 ff ff 	li      r9,-1
10009164:	48 00 02 48 	b       100093ac <auth_check2+0x59c>
	}

    /* Read it. */
    while ( fgets( line, sizeof(line), fp ) != (char*) 0 )
10009168:	48 00 02 0c 	b       10009374 <auth_check2+0x564>
	{
	/* Nuke newline. */
	l = strlen( line );
1000916c:	39 3f 02 6c 	addi    r9,r31,620
10009170:	7d 23 4b 78 	mr      r3,r9
10009174:	48 02 44 e1 	bl      1002d654 <strlen@plt>
10009178:	7c 69 1b 78 	mr      r9,r3
1000917c:	91 3f 00 08 	stw     r9,8(r31)
	if ( line[l - 1] == '\n' )
10009180:	81 3f 00 08 	lwz     r9,8(r31)
10009184:	39 29 ff ff 	addi    r9,r9,-1
10009188:	39 5f 00 08 	addi    r10,r31,8
1000918c:	7d 2a 4a 14 	add     r9,r10,r9
10009190:	89 29 02 64 	lbz     r9,612(r9)
10009194:	55 29 06 3e 	clrlwi  r9,r9,24
10009198:	2b 89 00 0a 	cmplwi  cr7,r9,10
1000919c:	40 9e 00 1c 	bne     cr7,100091b8 <auth_check2+0x3a8>
	    line[l - 1] = '\0';
100091a0:	81 3f 00 08 	lwz     r9,8(r31)
100091a4:	39 29 ff ff 	addi    r9,r9,-1
100091a8:	39 5f 00 08 	addi    r10,r31,8
100091ac:	7d 2a 4a 14 	add     r9,r10,r9
100091b0:	39 40 00 00 	li      r10,0
100091b4:	99 49 02 64 	stb     r10,612(r9)
	/* Split into user and encrypted password. */
	cryp = strchr( line, ':' );
100091b8:	39 3f 02 6c 	addi    r9,r31,620
100091bc:	7d 23 4b 78 	mr      r3,r9
100091c0:	38 80 00 3a 	li      r4,58
100091c4:	48 02 44 81 	bl      1002d644 <strchr@plt>
100091c8:	90 7f 00 18 	stw     r3,24(r31)
	if ( cryp == (char*) 0 )
100091cc:	81 3f 00 18 	lwz     r9,24(r31)
100091d0:	2f 89 00 00 	cmpwi   cr7,r9,0
100091d4:	40 9e 00 08 	bne     cr7,100091dc <auth_check2+0x3cc>
	    continue;
100091d8:	48 00 01 9c 	b       10009374 <auth_check2+0x564>
	*cryp++ = '\0';
100091dc:	81 3f 00 18 	lwz     r9,24(r31)
100091e0:	39 49 00 01 	addi    r10,r9,1
100091e4:	91 5f 00 18 	stw     r10,24(r31)
100091e8:	39 40 00 00 	li      r10,0
100091ec:	99 49 00 00 	stb     r10,0(r9)
	/* Is this the right user? */
	if ( strcmp( line, authinfo ) == 0 )
100091f0:	39 5f 02 6c 	addi    r10,r31,620
100091f4:	39 3f 00 78 	addi    r9,r31,120
100091f8:	7d 43 53 78 	mr      r3,r10
100091fc:	7d 24 4b 78 	mr      r4,r9
10009200:	48 02 41 dd 	bl      1002d3dc <strcmp@plt>
10009204:	7c 69 1b 78 	mr      r9,r3
10009208:	2f 89 00 00 	cmpwi   cr7,r9,0
1000920c:	40 9e 01 68 	bne     cr7,10009374 <auth_check2+0x564>
	    {
	    /* Yes. */
	    (void) fclose( fp );
10009210:	80 7f 00 14 	lwz     r3,20(r31)
10009214:	48 02 42 59 	bl      1002d46c <fclose@plt>
	    /* So is the password right? */
	    if ( strcmp( crypt( authpass, cryp ), cryp ) == 0 )
10009218:	80 7f 00 0c 	lwz     r3,12(r31)
1000921c:	80 9f 00 18 	lwz     r4,24(r31)
10009220:	4c c6 31 82 	crclr   4*cr1+eq
10009224:	48 02 45 51 	bl      1002d774 <crypt@plt>
10009228:	7c 69 1b 78 	mr      r9,r3
1000922c:	7d 23 4b 78 	mr      r3,r9
10009230:	80 9f 00 18 	lwz     r4,24(r31)
10009234:	48 02 41 a9 	bl      1002d3dc <strcmp@plt>
10009238:	7c 69 1b 78 	mr      r9,r3
1000923c:	2f 89 00 00 	cmpwi   cr7,r9,0
10009240:	40 9e 01 20 	bne     cr7,10009360 <auth_check2+0x550>
		{
		/* Ok! */
		httpd_realloc_str(
10009244:	81 3f 04 68 	lwz     r9,1128(r31)
10009248:	3b a9 00 f8 	addi    r29,r9,248
1000924c:	81 3f 04 68 	lwz     r9,1128(r31)
10009250:	3b c9 01 28 	addi    r30,r9,296
10009254:	39 3f 02 6c 	addi    r9,r31,620
10009258:	7d 23 4b 78 	mr      r3,r9
1000925c:	48 02 43 f9 	bl      1002d654 <strlen@plt>
10009260:	7c 69 1b 78 	mr      r9,r3
10009264:	7f a3 eb 78 	mr      r3,r29
10009268:	7f c4 f3 78 	mr      r4,r30
1000926c:	7d 25 4b 78 	mr      r5,r9
10009270:	4b ff f0 a9 	bl      10008318 <httpd_realloc_str>
		    &hc->remoteuser, &hc->maxremoteuser, strlen( line ) );
		(void) strcpy( hc->remoteuser, line );
10009274:	81 3f 04 68 	lwz     r9,1128(r31)
10009278:	81 49 00 f8 	lwz     r10,248(r9)
1000927c:	39 3f 02 6c 	addi    r9,r31,620
10009280:	7d 43 53 78 	mr      r3,r10
10009284:	7d 24 4b 78 	mr      r4,r9
10009288:	48 02 42 dd 	bl      1002d564 <strcpy@plt>
		/* And cache this user's info for next time. */
		httpd_realloc_str(
1000928c:	3d 20 10 03 	lis     r9,4099
10009290:	81 29 dc 3c 	lwz     r9,-9156(r9)
10009294:	7d 23 4b 78 	mr      r3,r9
10009298:	48 02 43 bd 	bl      1002d654 <strlen@plt>
1000929c:	7c 69 1b 78 	mr      r9,r3
100092a0:	3d 40 10 03 	lis     r10,4099
100092a4:	38 6a dc 48 	addi    r3,r10,-9144
100092a8:	3d 40 10 03 	lis     r10,4099
100092ac:	38 8a dc 44 	addi    r4,r10,-9148
100092b0:	7d 25 4b 78 	mr      r5,r9
100092b4:	4b ff f0 65 	bl      10008318 <httpd_realloc_str>
		    &prevauthpath, &maxprevauthpath, strlen( authpath ) );
		(void) strcpy( prevauthpath, authpath );
100092b8:	3d 20 10 03 	lis     r9,4099
100092bc:	81 49 dc 48 	lwz     r10,-9144(r9)
100092c0:	3d 20 10 03 	lis     r9,4099
100092c4:	81 29 dc 3c 	lwz     r9,-9156(r9)
100092c8:	7d 43 53 78 	mr      r3,r10
100092cc:	7d 24 4b 78 	mr      r4,r9
100092d0:	48 02 42 95 	bl      1002d564 <strcpy@plt>
		prevmtime = sb.st_mtime;
100092d4:	81 5f 00 60 	lwz     r10,96(r31)
100092d8:	3d 20 10 03 	lis     r9,4099
100092dc:	91 49 dc 4c 	stw     r10,-9140(r9)
		httpd_realloc_str(
100092e0:	39 3f 00 78 	addi    r9,r31,120
100092e4:	7d 23 4b 78 	mr      r3,r9
100092e8:	48 02 43 6d 	bl      1002d654 <strlen@plt>
100092ec:	7c 69 1b 78 	mr      r9,r3
100092f0:	3d 40 10 03 	lis     r10,4099
100092f4:	38 6a dc 50 	addi    r3,r10,-9136
100092f8:	3d 40 10 03 	lis     r10,4099
100092fc:	38 8a dc 58 	addi    r4,r10,-9128
10009300:	7d 25 4b 78 	mr      r5,r9
10009304:	4b ff f0 15 	bl      10008318 <httpd_realloc_str>
		    &prevuser, &maxprevuser, strlen( authinfo ) );
		(void) strcpy( prevuser, authinfo );
10009308:	3d 20 10 03 	lis     r9,4099
1000930c:	81 49 dc 50 	lwz     r10,-9136(r9)
10009310:	39 3f 00 78 	addi    r9,r31,120
10009314:	7d 43 53 78 	mr      r3,r10
10009318:	7d 24 4b 78 	mr      r4,r9
1000931c:	48 02 42 49 	bl      1002d564 <strcpy@plt>
		httpd_realloc_str( &prevcryp, &maxprevcryp, strlen( cryp ) );
10009320:	80 7f 00 18 	lwz     r3,24(r31)
10009324:	48 02 43 31 	bl      1002d654 <strlen@plt>
10009328:	7c 69 1b 78 	mr      r9,r3
1000932c:	3d 40 10 03 	lis     r10,4099
10009330:	38 6a dc 54 	addi    r3,r10,-9132
10009334:	3d 40 10 03 	lis     r10,4099
10009338:	38 8a dc 5c 	addi    r4,r10,-9124
1000933c:	7d 25 4b 78 	mr      r5,r9
10009340:	4b ff ef d9 	bl      10008318 <httpd_realloc_str>
		(void) strcpy( prevcryp, cryp );
10009344:	3d 20 10 03 	lis     r9,4099
10009348:	81 29 dc 54 	lwz     r9,-9132(r9)
1000934c:	7d 23 4b 78 	mr      r3,r9
10009350:	80 9f 00 18 	lwz     r4,24(r31)
10009354:	48 02 42 11 	bl      1002d564 <strcpy@plt>
		return 1;
10009358:	39 20 00 01 	li      r9,1
1000935c:	48 00 00 50 	b       100093ac <auth_check2+0x59c>
		}
	    else
		{
		/* No. */
		send_authenticate( hc, dirname );
10009360:	80 7f 04 68 	lwz     r3,1128(r31)
10009364:	80 9f 04 6c 	lwz     r4,1132(r31)
10009368:	4b ff f6 d1 	bl      10008a38 <send_authenticate>
		return -1;
1000936c:	39 20 ff ff 	li      r9,-1
10009370:	48 00 00 3c 	b       100093ac <auth_check2+0x59c>
	    hc->encodedurl );
	return -1;
	}

    /* Read it. */
    while ( fgets( line, sizeof(line), fp ) != (char*) 0 )
10009374:	39 3f 02 6c 	addi    r9,r31,620
10009378:	7d 23 4b 78 	mr      r3,r9
1000937c:	38 80 01 f4 	li      r4,500
10009380:	80 bf 00 14 	lwz     r5,20(r31)
10009384:	48 02 40 d9 	bl      1002d45c <fgets@plt>
10009388:	7c 69 1b 78 	mr      r9,r3
1000938c:	2f 89 00 00 	cmpwi   cr7,r9,0
10009390:	40 9e fd dc 	bne     cr7,1000916c <auth_check2+0x35c>
		}
	    }
	}

    /* Didn't find that user.  Access denied. */
    (void) fclose( fp );
10009394:	80 7f 00 14 	lwz     r3,20(r31)
10009398:	48 02 40 d5 	bl      1002d46c <fclose@plt>
    send_authenticate( hc, dirname );
1000939c:	80 7f 04 68 	lwz     r3,1128(r31)
100093a0:	80 9f 04 6c 	lwz     r4,1132(r31)
100093a4:	4b ff f6 95 	bl      10008a38 <send_authenticate>
    return -1;
100093a8:	39 20 ff ff 	li      r9,-1
    }
100093ac:	7d 23 4b 78 	mr      r3,r9
100093b0:	39 7f 04 80 	addi    r11,r31,1152
100093b4:	80 0b 00 04 	lwz     r0,4(r11)
100093b8:	7c 08 03 a6 	mtlr    r0
100093bc:	83 ab ff f4 	lwz     r29,-12(r11)
100093c0:	83 cb ff f8 	lwz     r30,-8(r11)
100093c4:	83 eb ff fc 	lwz     r31,-4(r11)
100093c8:	7d 61 5b 78 	mr      r1,r11
100093cc:	4e 80 00 20 	blr

100093d0 <send_dirredirect>:
#endif /* AUTH_FILE */


static void
send_dirredirect( httpd_conn* hc )
    {
100093d0:	94 21 ff d0 	stwu    r1,-48(r1)
100093d4:	7c 08 02 a6 	mflr    r0
100093d8:	90 01 00 34 	stw     r0,52(r1)
100093dc:	93 c1 00 28 	stw     r30,40(r1)
100093e0:	93 e1 00 2c 	stw     r31,44(r1)
100093e4:	7c 3f 0b 78 	mr      r31,r1
100093e8:	90 7f 00 18 	stw     r3,24(r31)
    static char* location;
    static char* header;
    static size_t maxlocation = 0, maxheader = 0;
    static char headstr[] = "Location: ";

    if ( hc->query[0] != '\0')
100093ec:	81 3f 00 18 	lwz     r9,24(r31)
100093f0:	81 29 00 c8 	lwz     r9,200(r9)
100093f4:	89 29 00 00 	lbz     r9,0(r9)
100093f8:	55 29 06 3e 	clrlwi  r9,r9,24
100093fc:	2f 89 00 00 	cmpwi   cr7,r9,0
10009400:	41 9e 00 c0 	beq     cr7,100094c0 <send_dirredirect+0xf0>
	{
	char* cp = strchr( hc->encodedurl, '?' );
10009404:	81 3f 00 18 	lwz     r9,24(r31)
10009408:	81 29 00 ac 	lwz     r9,172(r9)
1000940c:	7d 23 4b 78 	mr      r3,r9
10009410:	38 80 00 3f 	li      r4,63
10009414:	48 02 42 31 	bl      1002d644 <strchr@plt>
10009418:	90 7f 00 08 	stw     r3,8(r31)
	if ( cp != (char*) 0 )	/* should always find it */
1000941c:	81 3f 00 08 	lwz     r9,8(r31)
10009420:	2f 89 00 00 	cmpwi   cr7,r9,0
10009424:	41 9e 00 10 	beq     cr7,10009434 <send_dirredirect+0x64>
	    *cp = '\0';
10009428:	81 3f 00 08 	lwz     r9,8(r31)
1000942c:	39 40 00 00 	li      r10,0
10009430:	99 49 00 00 	stb     r10,0(r9)
	httpd_realloc_str(
	    &location, &maxlocation,
	    strlen( hc->encodedurl ) + 2 + strlen( hc->query ) );
10009434:	81 3f 00 18 	lwz     r9,24(r31)
10009438:	81 29 00 ac 	lwz     r9,172(r9)
1000943c:	7d 23 4b 78 	mr      r3,r9
10009440:	48 02 42 15 	bl      1002d654 <strlen@plt>
10009444:	7c 7e 1b 78 	mr      r30,r3
10009448:	81 3f 00 18 	lwz     r9,24(r31)
1000944c:	81 29 00 c8 	lwz     r9,200(r9)
10009450:	7d 23 4b 78 	mr      r3,r9
10009454:	48 02 42 01 	bl      1002d654 <strlen@plt>
10009458:	7c 69 1b 78 	mr      r9,r3
1000945c:	7d 3e 4a 14 	add     r9,r30,r9
    if ( hc->query[0] != '\0')
	{
	char* cp = strchr( hc->encodedurl, '?' );
	if ( cp != (char*) 0 )	/* should always find it */
	    *cp = '\0';
	httpd_realloc_str(
10009460:	39 29 00 02 	addi    r9,r9,2
10009464:	3d 40 10 03 	lis     r10,4099
10009468:	38 6a dc 60 	addi    r3,r10,-9120
1000946c:	3d 40 10 03 	lis     r10,4099
10009470:	38 8a dc 64 	addi    r4,r10,-9116
10009474:	7d 25 4b 78 	mr      r5,r9
10009478:	4b ff ee a1 	bl      10008318 <httpd_realloc_str>
	    &location, &maxlocation,
	    strlen( hc->encodedurl ) + 2 + strlen( hc->query ) );
	(void) my_snprintf( location, maxlocation,
1000947c:	3d 20 10 03 	lis     r9,4099
10009480:	80 e9 dc 60 	lwz     r7,-9120(r9)
10009484:	3d 20 10 03 	lis     r9,4099
10009488:	81 09 dc 64 	lwz     r8,-9116(r9)
1000948c:	81 3f 00 18 	lwz     r9,24(r31)
10009490:	81 49 00 ac 	lwz     r10,172(r9)
10009494:	81 3f 00 18 	lwz     r9,24(r31)
10009498:	81 29 00 c8 	lwz     r9,200(r9)
1000949c:	7c e3 3b 78 	mr      r3,r7
100094a0:	7d 04 43 78 	mr      r4,r8
100094a4:	3d 00 10 02 	lis     r8,4098
100094a8:	38 a8 92 10 	addi    r5,r8,-28144
100094ac:	7d 46 53 78 	mr      r6,r10
100094b0:	7d 27 4b 78 	mr      r7,r9
100094b4:	4c c6 31 82 	crclr   4*cr1+eq
100094b8:	48 00 80 9d 	bl      10011554 <my_snprintf>
100094bc:	48 00 00 68 	b       10009524 <send_dirredirect+0x154>
	    "%s/?%s", hc->encodedurl, hc->query );
	}
    else
	{
	httpd_realloc_str(
	    &location, &maxlocation, strlen( hc->encodedurl ) + 1 );
100094c0:	81 3f 00 18 	lwz     r9,24(r31)
100094c4:	81 29 00 ac 	lwz     r9,172(r9)
100094c8:	7d 23 4b 78 	mr      r3,r9
100094cc:	48 02 41 89 	bl      1002d654 <strlen@plt>
100094d0:	7c 69 1b 78 	mr      r9,r3
	(void) my_snprintf( location, maxlocation,
	    "%s/?%s", hc->encodedurl, hc->query );
	}
    else
	{
	httpd_realloc_str(
100094d4:	39 29 00 01 	addi    r9,r9,1
100094d8:	3d 40 10 03 	lis     r10,4099
100094dc:	38 6a dc 60 	addi    r3,r10,-9120
100094e0:	3d 40 10 03 	lis     r10,4099
100094e4:	38 8a dc 64 	addi    r4,r10,-9116
100094e8:	7d 25 4b 78 	mr      r5,r9
100094ec:	4b ff ee 2d 	bl      10008318 <httpd_realloc_str>
	    &location, &maxlocation, strlen( hc->encodedurl ) + 1 );
	(void) my_snprintf( location, maxlocation,
100094f0:	3d 20 10 03 	lis     r9,4099
100094f4:	81 09 dc 60 	lwz     r8,-9120(r9)
100094f8:	3d 20 10 03 	lis     r9,4099
100094fc:	81 49 dc 64 	lwz     r10,-9116(r9)
10009500:	81 3f 00 18 	lwz     r9,24(r31)
10009504:	81 29 00 ac 	lwz     r9,172(r9)
10009508:	7d 03 43 78 	mr      r3,r8
1000950c:	7d 44 53 78 	mr      r4,r10
10009510:	3d 40 10 02 	lis     r10,4098
10009514:	38 aa 92 18 	addi    r5,r10,-28136
10009518:	7d 26 4b 78 	mr      r6,r9
1000951c:	4c c6 31 82 	crclr   4*cr1+eq
10009520:	48 00 80 35 	bl      10011554 <my_snprintf>
	    "%s/", hc->encodedurl );
	}
    httpd_realloc_str(
	&header, &maxheader, sizeof(headstr) + strlen( location ) );
10009524:	3d 20 10 03 	lis     r9,4099
10009528:	81 29 dc 60 	lwz     r9,-9120(r9)
1000952c:	7d 23 4b 78 	mr      r3,r9
10009530:	48 02 41 25 	bl      1002d654 <strlen@plt>
10009534:	7c 69 1b 78 	mr      r9,r3
	httpd_realloc_str(
	    &location, &maxlocation, strlen( hc->encodedurl ) + 1 );
	(void) my_snprintf( location, maxlocation,
	    "%s/", hc->encodedurl );
	}
    httpd_realloc_str(
10009538:	39 29 00 0b 	addi    r9,r9,11
1000953c:	3d 40 10 03 	lis     r10,4099
10009540:	38 6a dc 68 	addi    r3,r10,-9112
10009544:	3d 40 10 03 	lis     r10,4099
10009548:	38 8a dc 6c 	addi    r4,r10,-9108
1000954c:	7d 25 4b 78 	mr      r5,r9
10009550:	4b ff ed c9 	bl      10008318 <httpd_realloc_str>
	&header, &maxheader, sizeof(headstr) + strlen( location ) );
    (void) my_snprintf( header, maxheader,
10009554:	3d 20 10 03 	lis     r9,4099
10009558:	81 09 dc 68 	lwz     r8,-9112(r9)
1000955c:	3d 20 10 03 	lis     r9,4099
10009560:	81 49 dc 6c 	lwz     r10,-9108(r9)
10009564:	3d 20 10 03 	lis     r9,4099
10009568:	81 29 dc 60 	lwz     r9,-9120(r9)
1000956c:	7d 03 43 78 	mr      r3,r8
10009570:	7d 44 53 78 	mr      r4,r10
10009574:	3d 40 10 02 	lis     r10,4098
10009578:	38 aa 92 1c 	addi    r5,r10,-28132
1000957c:	3d 40 10 03 	lis     r10,4099
10009580:	38 ca d1 a4 	addi    r6,r10,-11868
10009584:	7d 27 4b 78 	mr      r7,r9
10009588:	4c c6 31 82 	crclr   4*cr1+eq
1000958c:	48 00 7f c9 	bl      10011554 <my_snprintf>
	"%s%s\015\012", headstr, location );
    send_response( hc, 302, err302title, header, err302form, location );
10009590:	3d 20 10 03 	lis     r9,4099
10009594:	80 e9 c1 0c 	lwz     r7,-16116(r9)
10009598:	3d 20 10 03 	lis     r9,4099
1000959c:	81 09 dc 68 	lwz     r8,-9112(r9)
100095a0:	3d 20 10 03 	lis     r9,4099
100095a4:	81 49 c1 10 	lwz     r10,-16112(r9)
100095a8:	3d 20 10 03 	lis     r9,4099
100095ac:	81 29 dc 60 	lwz     r9,-9120(r9)
100095b0:	80 7f 00 18 	lwz     r3,24(r31)
100095b4:	38 80 01 2e 	li      r4,302
100095b8:	7c e5 3b 78 	mr      r5,r7
100095bc:	7d 06 43 78 	mr      r6,r8
100095c0:	7d 47 53 78 	mr      r7,r10
100095c4:	7d 28 4b 78 	mr      r8,r9
100095c8:	4b ff ee f1 	bl      100084b8 <send_response>
    }
100095cc:	39 7f 00 30 	addi    r11,r31,48
100095d0:	80 0b 00 04 	lwz     r0,4(r11)
100095d4:	7c 08 03 a6 	mtlr    r0
100095d8:	83 cb ff f8 	lwz     r30,-8(r11)
100095dc:	83 eb ff fc 	lwz     r31,-4(r11)
100095e0:	7d 61 5b 78 	mr      r1,r11
100095e4:	4e 80 00 20 	blr

100095e8 <httpd_method_str>:


char*
httpd_method_str( int method )
    {
100095e8:	94 21 ff e0 	stwu    r1,-32(r1)
100095ec:	93 e1 00 1c 	stw     r31,28(r1)
100095f0:	7c 3f 0b 78 	mr      r31,r1
100095f4:	90 7f 00 08 	stw     r3,8(r31)
    switch ( method )
100095f8:	81 3f 00 08 	lwz     r9,8(r31)
100095fc:	2b 89 00 06 	cmplwi  cr7,r9,6
10009600:	41 9d 00 78 	bgt     cr7,10009678 <httpd_method_str+0x90>
10009604:	81 3f 00 08 	lwz     r9,8(r31)
10009608:	55 2a 10 3a 	rlwinm  r10,r9,2,0,29
1000960c:	3d 20 10 02 	lis     r9,4098
10009610:	39 29 92 54 	addi    r9,r9,-28076
10009614:	7d 2a 4a 14 	add     r9,r10,r9
10009618:	81 49 00 00 	lwz     r10,0(r9)
1000961c:	3d 20 10 02 	lis     r9,4098
10009620:	39 29 92 54 	addi    r9,r9,-28076
10009624:	7d 2a 4a 14 	add     r9,r10,r9
10009628:	7d 29 03 a6 	mtctr   r9
1000962c:	4e 80 04 20 	bctr
	{
	case METHOD_GET: return "GET";
10009630:	3d 20 10 02 	lis     r9,4098
10009634:	39 29 92 24 	addi    r9,r9,-28124
10009638:	48 00 00 48 	b       10009680 <httpd_method_str+0x98>
	case METHOD_HEAD: return "HEAD";
1000963c:	3d 20 10 02 	lis     r9,4098
10009640:	39 29 92 28 	addi    r9,r9,-28120
10009644:	48 00 00 3c 	b       10009680 <httpd_method_str+0x98>
	case METHOD_POST: return "POST";
10009648:	3d 20 10 02 	lis     r9,4098
1000964c:	39 29 92 30 	addi    r9,r9,-28112
10009650:	48 00 00 30 	b       10009680 <httpd_method_str+0x98>
	case METHOD_PUT: return "PUT";
10009654:	3d 20 10 02 	lis     r9,4098
10009658:	39 29 92 38 	addi    r9,r9,-28104
1000965c:	48 00 00 24 	b       10009680 <httpd_method_str+0x98>
	case METHOD_DELETE: return "DELETE";
10009660:	3d 20 10 02 	lis     r9,4098
10009664:	39 29 92 3c 	addi    r9,r9,-28100
10009668:	48 00 00 18 	b       10009680 <httpd_method_str+0x98>
	case METHOD_TRACE: return "TRACE";
1000966c:	3d 20 10 02 	lis     r9,4098
10009670:	39 29 92 44 	addi    r9,r9,-28092
10009674:	48 00 00 0c 	b       10009680 <httpd_method_str+0x98>
	default: return "UNKNOWN";
10009678:	3d 20 10 02 	lis     r9,4098
1000967c:	39 29 92 4c 	addi    r9,r9,-28084
	}
    }
10009680:	7d 23 4b 78 	mr      r3,r9
10009684:	39 7f 00 20 	addi    r11,r31,32
10009688:	83 eb ff fc 	lwz     r31,-4(r11)
1000968c:	7d 61 5b 78 	mr      r1,r11
10009690:	4e 80 00 20 	blr

10009694 <hexit>:


static int
hexit( char c )
    {
10009694:	94 21 ff e0 	stwu    r1,-32(r1)
10009698:	93 e1 00 1c 	stw     r31,28(r1)
1000969c:	7c 3f 0b 78 	mr      r31,r1
100096a0:	7c 69 1b 78 	mr      r9,r3
100096a4:	99 3f 00 08 	stb     r9,8(r31)
    if ( c >= '0' && c <= '9' )
100096a8:	89 3f 00 08 	lbz     r9,8(r31)
100096ac:	55 29 06 3e 	clrlwi  r9,r9,24
100096b0:	2b 89 00 2f 	cmplwi  cr7,r9,47
100096b4:	40 9d 00 24 	ble     cr7,100096d8 <hexit+0x44>
100096b8:	89 3f 00 08 	lbz     r9,8(r31)
100096bc:	55 29 06 3e 	clrlwi  r9,r9,24
100096c0:	2b 89 00 39 	cmplwi  cr7,r9,57
100096c4:	41 9d 00 14 	bgt     cr7,100096d8 <hexit+0x44>
	return c - '0';
100096c8:	89 3f 00 08 	lbz     r9,8(r31)
100096cc:	55 29 06 3e 	clrlwi  r9,r9,24
100096d0:	39 29 ff d0 	addi    r9,r9,-48
100096d4:	48 00 00 68 	b       1000973c <hexit+0xa8>
    if ( c >= 'a' && c <= 'f' )
100096d8:	89 3f 00 08 	lbz     r9,8(r31)
100096dc:	55 29 06 3e 	clrlwi  r9,r9,24
100096e0:	2b 89 00 60 	cmplwi  cr7,r9,96
100096e4:	40 9d 00 24 	ble     cr7,10009708 <hexit+0x74>
100096e8:	89 3f 00 08 	lbz     r9,8(r31)
100096ec:	55 29 06 3e 	clrlwi  r9,r9,24
100096f0:	2b 89 00 66 	cmplwi  cr7,r9,102
100096f4:	41 9d 00 14 	bgt     cr7,10009708 <hexit+0x74>
	return c - 'a' + 10;
100096f8:	89 3f 00 08 	lbz     r9,8(r31)
100096fc:	55 29 06 3e 	clrlwi  r9,r9,24
10009700:	39 29 ff a9 	addi    r9,r9,-87
10009704:	48 00 00 38 	b       1000973c <hexit+0xa8>
    if ( c >= 'A' && c <= 'F' )
10009708:	89 3f 00 08 	lbz     r9,8(r31)
1000970c:	55 29 06 3e 	clrlwi  r9,r9,24
10009710:	2b 89 00 40 	cmplwi  cr7,r9,64
10009714:	40 9d 00 24 	ble     cr7,10009738 <hexit+0xa4>
10009718:	89 3f 00 08 	lbz     r9,8(r31)
1000971c:	55 29 06 3e 	clrlwi  r9,r9,24
10009720:	2b 89 00 46 	cmplwi  cr7,r9,70
10009724:	41 9d 00 14 	bgt     cr7,10009738 <hexit+0xa4>
	return c - 'A' + 10;
10009728:	89 3f 00 08 	lbz     r9,8(r31)
1000972c:	55 29 06 3e 	clrlwi  r9,r9,24
10009730:	39 29 ff c9 	addi    r9,r9,-55
10009734:	48 00 00 08 	b       1000973c <hexit+0xa8>
    return 0;           /* shouldn't happen, we're guarded by isxdigit() */
10009738:	39 20 00 00 	li      r9,0
    }
1000973c:	7d 23 4b 78 	mr      r3,r9
10009740:	39 7f 00 20 	addi    r11,r31,32
10009744:	83 eb ff fc 	lwz     r31,-4(r11)
10009748:	7d 61 5b 78 	mr      r1,r11
1000974c:	4e 80 00 20 	blr

10009750 <strdecode>:
/* Copies and decodes a string.  It's ok for from and to to be the
** same string.
*/
static void
strdecode( char* to, char* from )
    {
10009750:	94 21 ff e0 	stwu    r1,-32(r1)
10009754:	7c 08 02 a6 	mflr    r0
10009758:	90 01 00 24 	stw     r0,36(r1)
1000975c:	93 c1 00 18 	stw     r30,24(r1)
10009760:	93 e1 00 1c 	stw     r31,28(r1)
10009764:	7c 3f 0b 78 	mr      r31,r1
10009768:	90 7f 00 08 	stw     r3,8(r31)
1000976c:	90 9f 00 0c 	stw     r4,12(r31)
    for ( ; *from != '\0'; ++to, ++from )
10009770:	48 00 01 1c 	b       1000988c <strdecode+0x13c>
	{
	if ( from[0] == '%' && isxdigit( from[1] ) && isxdigit( from[2] ) )
10009774:	81 3f 00 0c 	lwz     r9,12(r31)
10009778:	89 29 00 00 	lbz     r9,0(r9)
1000977c:	55 29 06 3e 	clrlwi  r9,r9,24
10009780:	2b 89 00 25 	cmplwi  cr7,r9,37
10009784:	40 9e 00 dc 	bne     cr7,10009860 <strdecode+0x110>
10009788:	48 02 40 a5 	bl      1002d82c <__ctype_b_loc@plt>
1000978c:	7c 69 1b 78 	mr      r9,r3
10009790:	81 49 00 00 	lwz     r10,0(r9)
10009794:	81 3f 00 0c 	lwz     r9,12(r31)
10009798:	39 29 00 01 	addi    r9,r9,1
1000979c:	89 29 00 00 	lbz     r9,0(r9)
100097a0:	55 29 06 3e 	clrlwi  r9,r9,24
100097a4:	55 29 08 3c 	rlwinm  r9,r9,1,0,30
100097a8:	7d 2a 4a 14 	add     r9,r10,r9
100097ac:	a1 29 00 00 	lhz     r9,0(r9)
100097b0:	55 29 04 3e 	clrlwi  r9,r9,16
100097b4:	55 29 06 f6 	rlwinm  r9,r9,0,27,27
100097b8:	2f 89 00 00 	cmpwi   cr7,r9,0
100097bc:	41 9e 00 a4 	beq     cr7,10009860 <strdecode+0x110>
100097c0:	48 02 40 6d 	bl      1002d82c <__ctype_b_loc@plt>
100097c4:	7c 69 1b 78 	mr      r9,r3
100097c8:	81 49 00 00 	lwz     r10,0(r9)
100097cc:	81 3f 00 0c 	lwz     r9,12(r31)
100097d0:	39 29 00 02 	addi    r9,r9,2
100097d4:	89 29 00 00 	lbz     r9,0(r9)
100097d8:	55 29 06 3e 	clrlwi  r9,r9,24
100097dc:	55 29 08 3c 	rlwinm  r9,r9,1,0,30
100097e0:	7d 2a 4a 14 	add     r9,r10,r9
100097e4:	a1 29 00 00 	lhz     r9,0(r9)
100097e8:	55 29 04 3e 	clrlwi  r9,r9,16
100097ec:	55 29 06 f6 	rlwinm  r9,r9,0,27,27
100097f0:	2f 89 00 00 	cmpwi   cr7,r9,0
100097f4:	41 9e 00 6c 	beq     cr7,10009860 <strdecode+0x110>
	    {
	    *to = hexit( from[1] ) * 16 + hexit( from[2] );
100097f8:	81 3f 00 0c 	lwz     r9,12(r31)
100097fc:	39 29 00 01 	addi    r9,r9,1
10009800:	89 29 00 00 	lbz     r9,0(r9)
10009804:	55 29 06 3e 	clrlwi  r9,r9,24
10009808:	7d 23 4b 78 	mr      r3,r9
1000980c:	4b ff fe 89 	bl      10009694 <hexit>
10009810:	7c 69 1b 78 	mr      r9,r3
10009814:	55 29 06 3e 	clrlwi  r9,r9,24
10009818:	55 29 20 36 	rlwinm  r9,r9,4,0,27
1000981c:	55 3e 06 3e 	clrlwi  r30,r9,24
10009820:	81 3f 00 0c 	lwz     r9,12(r31)
10009824:	39 29 00 02 	addi    r9,r9,2
10009828:	89 29 00 00 	lbz     r9,0(r9)
1000982c:	55 29 06 3e 	clrlwi  r9,r9,24
10009830:	7d 23 4b 78 	mr      r3,r9
10009834:	4b ff fe 61 	bl      10009694 <hexit>
10009838:	7c 69 1b 78 	mr      r9,r3
1000983c:	55 29 06 3e 	clrlwi  r9,r9,24
10009840:	7d 3e 4a 14 	add     r9,r30,r9
10009844:	55 2a 06 3e 	clrlwi  r10,r9,24
10009848:	81 3f 00 08 	lwz     r9,8(r31)
1000984c:	99 49 00 00 	stb     r10,0(r9)
	    from += 2;
10009850:	81 3f 00 0c 	lwz     r9,12(r31)
10009854:	39 29 00 02 	addi    r9,r9,2
10009858:	91 3f 00 0c 	stw     r9,12(r31)
1000985c:	48 00 00 18 	b       10009874 <strdecode+0x124>
	    }
	else
	    *to = *from;
10009860:	81 3f 00 0c 	lwz     r9,12(r31)
10009864:	89 29 00 00 	lbz     r9,0(r9)
10009868:	55 2a 06 3e 	clrlwi  r10,r9,24
1000986c:	81 3f 00 08 	lwz     r9,8(r31)
10009870:	99 49 00 00 	stb     r10,0(r9)
** same string.
*/
static void
strdecode( char* to, char* from )
    {
    for ( ; *from != '\0'; ++to, ++from )
10009874:	81 3f 00 08 	lwz     r9,8(r31)
10009878:	39 29 00 01 	addi    r9,r9,1
1000987c:	91 3f 00 08 	stw     r9,8(r31)
10009880:	81 3f 00 0c 	lwz     r9,12(r31)
10009884:	39 29 00 01 	addi    r9,r9,1
10009888:	91 3f 00 0c 	stw     r9,12(r31)
1000988c:	81 3f 00 0c 	lwz     r9,12(r31)
10009890:	89 29 00 00 	lbz     r9,0(r9)
10009894:	55 29 06 3e 	clrlwi  r9,r9,24
10009898:	2f 89 00 00 	cmpwi   cr7,r9,0
1000989c:	40 9e fe d8 	bne     cr7,10009774 <strdecode+0x24>
	    from += 2;
	    }
	else
	    *to = *from;
	}
    *to = '\0';
100098a0:	81 3f 00 08 	lwz     r9,8(r31)
100098a4:	39 40 00 00 	li      r10,0
100098a8:	99 49 00 00 	stb     r10,0(r9)
    }
100098ac:	39 7f 00 20 	addi    r11,r31,32
100098b0:	80 0b 00 04 	lwz     r0,4(r11)
100098b4:	7c 08 03 a6 	mtlr    r0
100098b8:	83 cb ff f8 	lwz     r30,-8(r11)
100098bc:	83 eb ff fc 	lwz     r31,-4(r11)
100098c0:	7d 61 5b 78 	mr      r1,r11
100098c4:	4e 80 00 20 	blr

100098c8 <strencode>:

#ifdef GENERATE_INDEXES
/* Copies and encodes a string. */
static void
strencode( char* to, int tosize, char* from )
    {
100098c8:	94 21 ff d0 	stwu    r1,-48(r1)
100098cc:	7c 08 02 a6 	mflr    r0
100098d0:	90 01 00 34 	stw     r0,52(r1)
100098d4:	93 e1 00 2c 	stw     r31,44(r1)
100098d8:	7c 3f 0b 78 	mr      r31,r1
100098dc:	90 7f 00 18 	stw     r3,24(r31)
100098e0:	90 9f 00 1c 	stw     r4,28(r31)
100098e4:	90 bf 00 20 	stw     r5,32(r31)
    int tolen;

    for ( tolen = 0; *from != '\0' && tolen + 4 < tosize; ++from )
100098e8:	39 20 00 00 	li      r9,0
100098ec:	91 3f 00 08 	stw     r9,8(r31)
100098f0:	48 00 00 d8 	b       100099c8 <strencode+0x100>
	{
	if ( isalnum(*from) || strchr( "/_.-~", *from ) != (char*) 0 )
100098f4:	48 02 3f 39 	bl      1002d82c <__ctype_b_loc@plt>
100098f8:	7c 69 1b 78 	mr      r9,r3
100098fc:	81 49 00 00 	lwz     r10,0(r9)
10009900:	81 3f 00 20 	lwz     r9,32(r31)
10009904:	89 29 00 00 	lbz     r9,0(r9)
10009908:	55 29 06 3e 	clrlwi  r9,r9,24
1000990c:	55 29 08 3c 	rlwinm  r9,r9,1,0,30
10009910:	7d 2a 4a 14 	add     r9,r10,r9
10009914:	a1 29 00 00 	lhz     r9,0(r9)
10009918:	55 29 04 3e 	clrlwi  r9,r9,16
1000991c:	55 29 05 28 	rlwinm  r9,r9,0,20,20
10009920:	2f 89 00 00 	cmpwi   cr7,r9,0
10009924:	40 9e 00 2c 	bne     cr7,10009950 <strencode+0x88>
10009928:	81 3f 00 20 	lwz     r9,32(r31)
1000992c:	89 29 00 00 	lbz     r9,0(r9)
10009930:	55 29 06 3e 	clrlwi  r9,r9,24
10009934:	3d 40 10 02 	lis     r10,4098
10009938:	38 6a 92 70 	addi    r3,r10,-28048
1000993c:	7d 24 4b 78 	mr      r4,r9
10009940:	48 02 3d 05 	bl      1002d644 <strchr@plt>
10009944:	7c 69 1b 78 	mr      r9,r3
10009948:	2f 89 00 00 	cmpwi   cr7,r9,0
1000994c:	41 9e 00 34 	beq     cr7,10009980 <strencode+0xb8>
	    {
	    *to = *from;
10009950:	81 3f 00 20 	lwz     r9,32(r31)
10009954:	89 29 00 00 	lbz     r9,0(r9)
10009958:	55 2a 06 3e 	clrlwi  r10,r9,24
1000995c:	81 3f 00 18 	lwz     r9,24(r31)
10009960:	99 49 00 00 	stb     r10,0(r9)
	    ++to;
10009964:	81 3f 00 18 	lwz     r9,24(r31)
10009968:	39 29 00 01 	addi    r9,r9,1
1000996c:	91 3f 00 18 	stw     r9,24(r31)
	    ++tolen;
10009970:	81 3f 00 08 	lwz     r9,8(r31)
10009974:	39 29 00 01 	addi    r9,r9,1
10009978:	91 3f 00 08 	stw     r9,8(r31)
1000997c:	48 00 00 40 	b       100099bc <strencode+0xf4>
	    }
	else
	    {
	    (void) sprintf( to, "%%%02x", (int) *from & 0xff );
10009980:	81 3f 00 20 	lwz     r9,32(r31)
10009984:	89 29 00 00 	lbz     r9,0(r9)
10009988:	55 29 06 3e 	clrlwi  r9,r9,24
1000998c:	80 7f 00 18 	lwz     r3,24(r31)
10009990:	3d 40 10 02 	lis     r10,4098
10009994:	38 8a 92 78 	addi    r4,r10,-28040
10009998:	7d 25 4b 78 	mr      r5,r9
1000999c:	4c c6 31 82 	crclr   4*cr1+eq
100099a0:	48 02 3e 05 	bl      1002d7a4 <sprintf@plt>
	    to += 3;
100099a4:	81 3f 00 18 	lwz     r9,24(r31)
100099a8:	39 29 00 03 	addi    r9,r9,3
100099ac:	91 3f 00 18 	stw     r9,24(r31)
	    tolen += 3;
100099b0:	81 3f 00 08 	lwz     r9,8(r31)
100099b4:	39 29 00 03 	addi    r9,r9,3
100099b8:	91 3f 00 08 	stw     r9,8(r31)
static void
strencode( char* to, int tosize, char* from )
    {
    int tolen;

    for ( tolen = 0; *from != '\0' && tolen + 4 < tosize; ++from )
100099bc:	81 3f 00 20 	lwz     r9,32(r31)
100099c0:	39 29 00 01 	addi    r9,r9,1
100099c4:	91 3f 00 20 	stw     r9,32(r31)
100099c8:	81 3f 00 20 	lwz     r9,32(r31)
100099cc:	89 29 00 00 	lbz     r9,0(r9)
100099d0:	55 29 06 3e 	clrlwi  r9,r9,24
100099d4:	2f 89 00 00 	cmpwi   cr7,r9,0
100099d8:	41 9e 00 18 	beq     cr7,100099f0 <strencode+0x128>
100099dc:	81 3f 00 08 	lwz     r9,8(r31)
100099e0:	39 49 00 04 	addi    r10,r9,4
100099e4:	81 3f 00 1c 	lwz     r9,28(r31)
100099e8:	7f 8a 48 00 	cmpw    cr7,r10,r9
100099ec:	41 9c ff 08 	blt     cr7,100098f4 <strencode+0x2c>
	    (void) sprintf( to, "%%%02x", (int) *from & 0xff );
	    to += 3;
	    tolen += 3;
	    }
	}
    *to = '\0';
100099f0:	81 3f 00 18 	lwz     r9,24(r31)
100099f4:	39 40 00 00 	li      r10,0
100099f8:	99 49 00 00 	stb     r10,0(r9)
    }
100099fc:	39 7f 00 30 	addi    r11,r31,48
10009a00:	80 0b 00 04 	lwz     r0,4(r11)
10009a04:	7c 08 03 a6 	mtlr    r0
10009a08:	83 eb ff fc 	lwz     r31,-4(r11)
10009a0c:	7d 61 5b 78 	mr      r1,r11
10009a10:	4e 80 00 20 	blr

10009a14 <vhost_map>:


/* Virtual host mapping. */
static int
vhost_map( httpd_conn* hc )
    {
10009a14:	94 21 ff 50 	stwu    r1,-176(r1)
10009a18:	7c 08 02 a6 	mflr    r0
10009a1c:	90 01 00 b4 	stw     r0,180(r1)
10009a20:	93 a1 00 a4 	stw     r29,164(r1)
10009a24:	93 c1 00 a8 	stw     r30,168(r1)
10009a28:	93 e1 00 ac 	stw     r31,172(r1)
10009a2c:	7c 3f 0b 78 	mr      r31,r1
10009a30:	90 7f 00 98 	stw     r3,152(r31)
    int i;
    char* cp2;
#endif /* VHOST_DIRLEVELS */

    /* Figure out the virtual hostname. */
    if ( hc->reqhost[0] != '\0' )
10009a34:	81 3f 00 98 	lwz     r9,152(r31)
10009a38:	81 29 00 e8 	lwz     r9,232(r9)
10009a3c:	89 29 00 00 	lbz     r9,0(r9)
10009a40:	55 29 06 3e 	clrlwi  r9,r9,24
10009a44:	2f 89 00 00 	cmpwi   cr7,r9,0
10009a48:	41 9e 00 18 	beq     cr7,10009a60 <vhost_map+0x4c>
	hc->hostname = hc->reqhost;
10009a4c:	81 3f 00 98 	lwz     r9,152(r31)
10009a50:	81 49 00 e8 	lwz     r10,232(r9)
10009a54:	81 3f 00 98 	lwz     r9,152(r31)
10009a58:	91 49 01 44 	stw     r10,324(r9)
10009a5c:	48 00 00 98 	b       10009af4 <vhost_map+0xe0>
    else if ( hc->hdrhost[0] != '\0' )
10009a60:	81 3f 00 98 	lwz     r9,152(r31)
10009a64:	81 29 00 ec 	lwz     r9,236(r9)
10009a68:	89 29 00 00 	lbz     r9,0(r9)
10009a6c:	55 29 06 3e 	clrlwi  r9,r9,24
10009a70:	2f 89 00 00 	cmpwi   cr7,r9,0
10009a74:	41 9e 00 18 	beq     cr7,10009a8c <vhost_map+0x78>
	hc->hostname = hc->hdrhost;
10009a78:	81 3f 00 98 	lwz     r9,152(r31)
10009a7c:	81 49 00 ec 	lwz     r10,236(r9)
10009a80:	81 3f 00 98 	lwz     r9,152(r31)
10009a84:	91 49 01 44 	stw     r10,324(r9)
10009a88:	48 00 00 6c 	b       10009af4 <vhost_map+0xe0>
    else
	{
	sz = sizeof(sa);
10009a8c:	39 20 00 80 	li      r9,128
10009a90:	91 3f 00 90 	stw     r9,144(r31)
	if ( getsockname( hc->conn_fd, &sa.sa, &sz ) < 0 )
10009a94:	81 3f 00 98 	lwz     r9,152(r31)
10009a98:	81 09 01 c0 	lwz     r8,448(r9)
10009a9c:	39 5f 00 10 	addi    r10,r31,16
10009aa0:	39 3f 00 90 	addi    r9,r31,144
10009aa4:	7d 03 43 78 	mr      r3,r8
10009aa8:	7d 44 53 78 	mr      r4,r10
10009aac:	7d 25 4b 78 	mr      r5,r9
10009ab0:	48 02 3c fd 	bl      1002d7ac <getsockname@plt>
10009ab4:	7c 69 1b 78 	mr      r9,r3
10009ab8:	2f 89 00 00 	cmpwi   cr7,r9,0
10009abc:	40 9c 00 20 	bge     cr7,10009adc <vhost_map+0xc8>
	    {
	    syslog( LOG_ERR, "getsockname - %m" );
10009ac0:	38 60 00 03 	li      r3,3
10009ac4:	3d 20 10 02 	lis     r9,4098
10009ac8:	38 89 92 80 	addi    r4,r9,-28032
10009acc:	4c c6 31 82 	crclr   4*cr1+eq
10009ad0:	48 02 3c b5 	bl      1002d784 <syslog@plt>
	    return 0;
10009ad4:	39 20 00 00 	li      r9,0
10009ad8:	48 00 01 f8 	b       10009cd0 <vhost_map+0x2bc>
	    }
	hc->hostname = httpd_ntoa( &sa );
10009adc:	39 3f 00 10 	addi    r9,r31,16
10009ae0:	7d 23 4b 78 	mr      r3,r9
10009ae4:	48 00 78 69 	bl      1001134c <httpd_ntoa>
10009ae8:	7c 6a 1b 78 	mr      r10,r3
10009aec:	81 3f 00 98 	lwz     r9,152(r31)
10009af0:	91 49 01 44 	stw     r10,324(r9)
	}
    /* Pound it to lower case. */
    for ( cp1 = hc->hostname; *cp1 != '\0'; ++cp1 )
10009af4:	81 3f 00 98 	lwz     r9,152(r31)
10009af8:	81 29 01 44 	lwz     r9,324(r9)
10009afc:	91 3f 00 08 	stw     r9,8(r31)
10009b00:	48 00 00 68 	b       10009b68 <vhost_map+0x154>
	if ( isupper( *cp1 ) )
10009b04:	48 02 3d 29 	bl      1002d82c <__ctype_b_loc@plt>
10009b08:	7c 69 1b 78 	mr      r9,r3
10009b0c:	81 49 00 00 	lwz     r10,0(r9)
10009b10:	81 3f 00 08 	lwz     r9,8(r31)
10009b14:	89 29 00 00 	lbz     r9,0(r9)
10009b18:	55 29 06 3e 	clrlwi  r9,r9,24
10009b1c:	55 29 08 3c 	rlwinm  r9,r9,1,0,30
10009b20:	7d 2a 4a 14 	add     r9,r10,r9
10009b24:	a1 29 00 00 	lhz     r9,0(r9)
10009b28:	55 29 04 3e 	clrlwi  r9,r9,16
10009b2c:	55 29 07 fe 	clrlwi  r9,r9,31
10009b30:	2f 89 00 00 	cmpwi   cr7,r9,0
10009b34:	41 9e 00 28 	beq     cr7,10009b5c <vhost_map+0x148>
	    *cp1 = tolower( *cp1 );
10009b38:	81 3f 00 08 	lwz     r9,8(r31)
10009b3c:	89 29 00 00 	lbz     r9,0(r9)
10009b40:	55 29 06 3e 	clrlwi  r9,r9,24
10009b44:	7d 23 4b 78 	mr      r3,r9
10009b48:	48 02 39 1d 	bl      1002d464 <tolower@plt>
10009b4c:	7c 69 1b 78 	mr      r9,r3
10009b50:	55 2a 06 3e 	clrlwi  r10,r9,24
10009b54:	81 3f 00 08 	lwz     r9,8(r31)
10009b58:	99 49 00 00 	stb     r10,0(r9)
	    return 0;
	    }
	hc->hostname = httpd_ntoa( &sa );
	}
    /* Pound it to lower case. */
    for ( cp1 = hc->hostname; *cp1 != '\0'; ++cp1 )
10009b5c:	81 3f 00 08 	lwz     r9,8(r31)
10009b60:	39 29 00 01 	addi    r9,r9,1
10009b64:	91 3f 00 08 	stw     r9,8(r31)
10009b68:	81 3f 00 08 	lwz     r9,8(r31)
10009b6c:	89 29 00 00 	lbz     r9,0(r9)
10009b70:	55 29 06 3e 	clrlwi  r9,r9,24
10009b74:	2f 89 00 00 	cmpwi   cr7,r9,0
10009b78:	40 9e ff 8c 	bne     cr7,10009b04 <vhost_map+0xf0>
	if ( isupper( *cp1 ) )
	    *cp1 = tolower( *cp1 );

    if ( hc->tildemapped )
10009b7c:	81 3f 00 98 	lwz     r9,152(r31)
10009b80:	81 29 01 54 	lwz     r9,340(r9)
10009b84:	2f 89 00 00 	cmpwi   cr7,r9,0
10009b88:	41 9e 00 0c 	beq     cr7,10009b94 <vhost_map+0x180>
	return 1;
10009b8c:	39 20 00 01 	li      r9,1
10009b90:	48 00 01 40 	b       10009cd0 <vhost_map+0x2bc>
	/* Copy a slash. */
	*cp2++ = '/';
	}
    (void) strcpy( cp2, hc->hostname );
#else /* VHOST_DIRLEVELS */
    httpd_realloc_str( &hc->hostdir, &hc->maxhostdir, strlen( hc->hostname ) );
10009b94:	81 3f 00 98 	lwz     r9,152(r31)
10009b98:	3b a9 00 f0 	addi    r29,r9,240
10009b9c:	81 3f 00 98 	lwz     r9,152(r31)
10009ba0:	3b c9 01 24 	addi    r30,r9,292
10009ba4:	81 3f 00 98 	lwz     r9,152(r31)
10009ba8:	81 29 01 44 	lwz     r9,324(r9)
10009bac:	7d 23 4b 78 	mr      r3,r9
10009bb0:	48 02 3a a5 	bl      1002d654 <strlen@plt>
10009bb4:	7c 69 1b 78 	mr      r9,r3
10009bb8:	7f a3 eb 78 	mr      r3,r29
10009bbc:	7f c4 f3 78 	mr      r4,r30
10009bc0:	7d 25 4b 78 	mr      r5,r9
10009bc4:	4b ff e7 55 	bl      10008318 <httpd_realloc_str>
    (void) strcpy( hc->hostdir, hc->hostname );
10009bc8:	81 3f 00 98 	lwz     r9,152(r31)
10009bcc:	81 49 00 f0 	lwz     r10,240(r9)
10009bd0:	81 3f 00 98 	lwz     r9,152(r31)
10009bd4:	81 29 01 44 	lwz     r9,324(r9)
10009bd8:	7d 43 53 78 	mr      r3,r10
10009bdc:	7d 24 4b 78 	mr      r4,r9
10009be0:	48 02 39 85 	bl      1002d564 <strcpy@plt>
#endif /* VHOST_DIRLEVELS */

    /* Prepend hostdir to the filename. */
    len = strlen( hc->expnfilename );
10009be4:	81 3f 00 98 	lwz     r9,152(r31)
10009be8:	81 29 00 bc 	lwz     r9,188(r9)
10009bec:	7d 23 4b 78 	mr      r3,r9
10009bf0:	48 02 3a 65 	bl      1002d654 <strlen@plt>
10009bf4:	7c 69 1b 78 	mr      r9,r3
10009bf8:	91 3f 00 0c 	stw     r9,12(r31)
    httpd_realloc_str( &tempfilename, &maxtempfilename, len );
10009bfc:	81 3f 00 0c 	lwz     r9,12(r31)
10009c00:	3d 40 10 03 	lis     r10,4099
10009c04:	38 6a dc 70 	addi    r3,r10,-9104
10009c08:	3d 40 10 03 	lis     r10,4099
10009c0c:	38 8a dc 74 	addi    r4,r10,-9100
10009c10:	7d 25 4b 78 	mr      r5,r9
10009c14:	4b ff e7 05 	bl      10008318 <httpd_realloc_str>
    (void) strcpy( tempfilename, hc->expnfilename );
10009c18:	3d 20 10 03 	lis     r9,4099
10009c1c:	81 49 dc 70 	lwz     r10,-9104(r9)
10009c20:	81 3f 00 98 	lwz     r9,152(r31)
10009c24:	81 29 00 bc 	lwz     r9,188(r9)
10009c28:	7d 43 53 78 	mr      r3,r10
10009c2c:	7d 24 4b 78 	mr      r4,r9
10009c30:	48 02 39 35 	bl      1002d564 <strcpy@plt>
    httpd_realloc_str(
10009c34:	81 3f 00 98 	lwz     r9,152(r31)
10009c38:	3b a9 00 bc 	addi    r29,r9,188
10009c3c:	81 3f 00 98 	lwz     r9,152(r31)
10009c40:	3b c9 01 08 	addi    r30,r9,264
	&hc->expnfilename, &hc->maxexpnfilename,
	strlen( hc->hostdir ) + 1 + len );
10009c44:	81 3f 00 98 	lwz     r9,152(r31)
10009c48:	81 29 00 f0 	lwz     r9,240(r9)
10009c4c:	7d 23 4b 78 	mr      r3,r9
10009c50:	48 02 3a 05 	bl      1002d654 <strlen@plt>
10009c54:	7c 6a 1b 78 	mr      r10,r3
10009c58:	81 3f 00 0c 	lwz     r9,12(r31)
10009c5c:	7d 2a 4a 14 	add     r9,r10,r9

    /* Prepend hostdir to the filename. */
    len = strlen( hc->expnfilename );
    httpd_realloc_str( &tempfilename, &maxtempfilename, len );
    (void) strcpy( tempfilename, hc->expnfilename );
    httpd_realloc_str(
10009c60:	39 29 00 01 	addi    r9,r9,1
10009c64:	7f a3 eb 78 	mr      r3,r29
10009c68:	7f c4 f3 78 	mr      r4,r30
10009c6c:	7d 25 4b 78 	mr      r5,r9
10009c70:	4b ff e6 a9 	bl      10008318 <httpd_realloc_str>
	&hc->expnfilename, &hc->maxexpnfilename,
	strlen( hc->hostdir ) + 1 + len );
    (void) strcpy( hc->expnfilename, hc->hostdir );
10009c74:	81 3f 00 98 	lwz     r9,152(r31)
10009c78:	81 49 00 bc 	lwz     r10,188(r9)
10009c7c:	81 3f 00 98 	lwz     r9,152(r31)
10009c80:	81 29 00 f0 	lwz     r9,240(r9)
10009c84:	7d 43 53 78 	mr      r3,r10
10009c88:	7d 24 4b 78 	mr      r4,r9
10009c8c:	48 02 38 d9 	bl      1002d564 <strcpy@plt>
    (void) strcat( hc->expnfilename, "/" );
10009c90:	81 3f 00 98 	lwz     r9,152(r31)
10009c94:	83 c9 00 bc 	lwz     r30,188(r9)
10009c98:	7f c3 f3 78 	mr      r3,r30
10009c9c:	48 02 39 b9 	bl      1002d654 <strlen@plt>
10009ca0:	7c 69 1b 78 	mr      r9,r3
10009ca4:	7d 3e 4a 14 	add     r9,r30,r9
10009ca8:	39 40 2f 00 	li      r10,12032
10009cac:	b1 49 00 00 	sth     r10,0(r9)
    (void) strcat( hc->expnfilename, tempfilename );
10009cb0:	81 3f 00 98 	lwz     r9,152(r31)
10009cb4:	81 49 00 bc 	lwz     r10,188(r9)
10009cb8:	3d 20 10 03 	lis     r9,4099
10009cbc:	81 29 dc 70 	lwz     r9,-9104(r9)
10009cc0:	7d 43 53 78 	mr      r3,r10
10009cc4:	7d 24 4b 78 	mr      r4,r9
10009cc8:	48 02 38 8d 	bl      1002d554 <strcat@plt>
    return 1;
10009ccc:	39 20 00 01 	li      r9,1
    }
10009cd0:	7d 23 4b 78 	mr      r3,r9
10009cd4:	39 7f 00 b0 	addi    r11,r31,176
10009cd8:	80 0b 00 04 	lwz     r0,4(r11)
10009cdc:	7c 08 03 a6 	mtlr    r0
10009ce0:	83 ab ff f4 	lwz     r29,-12(r11)
10009ce4:	83 cb ff f8 	lwz     r30,-8(r11)
10009ce8:	83 eb ff fc 	lwz     r31,-4(r11)
10009cec:	7d 61 5b 78 	mr      r1,r11
10009cf0:	4e 80 00 20 	blr

10009cf4 <expand_symlinks>:
** This is a fairly nice little routine.  It handles any size filenames
** without excessive mallocs.
*/
static char*
expand_symlinks( char* path, char** restP, int no_symlink_check, int tildemapped )
    {
10009cf4:	94 21 eb c0 	stwu    r1,-5184(r1)
10009cf8:	7c 08 02 a6 	mflr    r0
10009cfc:	90 01 14 44 	stw     r0,5188(r1)
10009d00:	93 a1 14 34 	stw     r29,5172(r1)
10009d04:	93 c1 14 38 	stw     r30,5176(r1)
10009d08:	93 e1 14 3c 	stw     r31,5180(r1)
10009d0c:	7c 3f 0b 78 	mr      r31,r1
10009d10:	90 7f 14 18 	stw     r3,5144(r31)
10009d14:	90 9f 14 1c 	stw     r4,5148(r31)
10009d18:	90 bf 14 20 	stw     r5,5152(r31)
10009d1c:	90 df 14 24 	stw     r6,5156(r31)
    int nlinks, i;
    char* r;
    char* cp1;
    char* cp2;

    if ( no_symlink_check )
10009d20:	81 3f 14 20 	lwz     r9,5152(r31)
10009d24:	2f 89 00 00 	cmpwi   cr7,r9,0
10009d28:	41 9e 00 f0 	beq     cr7,10009e18 <expand_symlinks+0x124>
	** One side-effect of this is that users can't symlink to central
	** approved CGIs any more.  The workaround is to use the central
	** URL for the CGI instead of a local symlinked one.
	*/
	struct stat sb;
	if ( stat( path, &sb ) != -1 )
10009d2c:	39 3f 13 b8 	addi    r9,r31,5048
10009d30:	80 7f 14 18 	lwz     r3,5144(r31)
10009d34:	7d 24 4b 78 	mr      r4,r9
10009d38:	48 00 de bd 	bl      10017bf4 <__stat>
10009d3c:	7c 6a 1b 78 	mr      r10,r3
10009d40:	39 20 ff ff 	li      r9,-1
10009d44:	7f 8a 48 00 	cmpw    cr7,r10,r9
10009d48:	41 9e 00 d0 	beq     cr7,10009e18 <expand_symlinks+0x124>
	    {
	    checkedlen = strlen( path );
10009d4c:	80 7f 14 18 	lwz     r3,5144(r31)
10009d50:	48 02 39 05 	bl      1002d654 <strlen@plt>
10009d54:	90 7f 00 08 	stw     r3,8(r31)
	    httpd_realloc_str( &checked, &maxchecked, checkedlen );
10009d58:	3d 20 10 03 	lis     r9,4099
10009d5c:	38 69 dc 78 	addi    r3,r9,-9096
10009d60:	3d 20 10 03 	lis     r9,4099
10009d64:	38 89 dc 7c 	addi    r4,r9,-9092
10009d68:	80 bf 00 08 	lwz     r5,8(r31)
10009d6c:	4b ff e5 ad 	bl      10008318 <httpd_realloc_str>
	    (void) strcpy( checked, path );
10009d70:	3d 20 10 03 	lis     r9,4099
10009d74:	81 29 dc 78 	lwz     r9,-9096(r9)
10009d78:	7d 23 4b 78 	mr      r3,r9
10009d7c:	80 9f 14 18 	lwz     r4,5144(r31)
10009d80:	48 02 37 e5 	bl      1002d564 <strcpy@plt>
	    /* Trim trailing slashes. */
	    while ( checked[checkedlen - 1] == '/' )
10009d84:	48 00 00 2c 	b       10009db0 <expand_symlinks+0xbc>
		{
		checked[checkedlen - 1] = '\0';
10009d88:	3d 20 10 03 	lis     r9,4099
10009d8c:	81 49 dc 78 	lwz     r10,-9096(r9)
10009d90:	81 3f 00 08 	lwz     r9,8(r31)
10009d94:	39 29 ff ff 	addi    r9,r9,-1
10009d98:	7d 2a 4a 14 	add     r9,r10,r9
10009d9c:	39 40 00 00 	li      r10,0
10009da0:	99 49 00 00 	stb     r10,0(r9)
		--checkedlen;
10009da4:	81 3f 00 08 	lwz     r9,8(r31)
10009da8:	39 29 ff ff 	addi    r9,r9,-1
10009dac:	91 3f 00 08 	stw     r9,8(r31)
	    {
	    checkedlen = strlen( path );
	    httpd_realloc_str( &checked, &maxchecked, checkedlen );
	    (void) strcpy( checked, path );
	    /* Trim trailing slashes. */
	    while ( checked[checkedlen - 1] == '/' )
10009db0:	3d 20 10 03 	lis     r9,4099
10009db4:	81 49 dc 78 	lwz     r10,-9096(r9)
10009db8:	81 3f 00 08 	lwz     r9,8(r31)
10009dbc:	39 29 ff ff 	addi    r9,r9,-1
10009dc0:	7d 2a 4a 14 	add     r9,r10,r9
10009dc4:	89 29 00 00 	lbz     r9,0(r9)
10009dc8:	55 29 06 3e 	clrlwi  r9,r9,24
10009dcc:	2b 89 00 2f 	cmplwi  cr7,r9,47
10009dd0:	41 9e ff b8 	beq     cr7,10009d88 <expand_symlinks+0x94>
		{
		checked[checkedlen - 1] = '\0';
		--checkedlen;
		}
	    httpd_realloc_str( &rest, &maxrest, 0 );
10009dd4:	3d 20 10 03 	lis     r9,4099
10009dd8:	38 69 dc 80 	addi    r3,r9,-9088
10009ddc:	3d 20 10 03 	lis     r9,4099
10009de0:	38 89 dc 84 	addi    r4,r9,-9084
10009de4:	38 a0 00 00 	li      r5,0
10009de8:	4b ff e5 31 	bl      10008318 <httpd_realloc_str>
	    rest[0] = '\0';
10009dec:	3d 20 10 03 	lis     r9,4099
10009df0:	81 29 dc 80 	lwz     r9,-9088(r9)
10009df4:	39 40 00 00 	li      r10,0
10009df8:	99 49 00 00 	stb     r10,0(r9)
	    *restP = rest;
10009dfc:	3d 20 10 03 	lis     r9,4099
10009e00:	81 49 dc 80 	lwz     r10,-9088(r9)
10009e04:	81 3f 14 1c 	lwz     r9,5148(r31)
10009e08:	91 49 00 00 	stw     r10,0(r9)
	    return checked;
10009e0c:	3d 20 10 03 	lis     r9,4099
10009e10:	81 29 dc 78 	lwz     r9,-9096(r9)
10009e14:	48 00 08 74 	b       1000a688 <expand_symlinks+0x994>
	    }
	}

    /* Start out with nothing in checked and the whole filename in rest. */
    httpd_realloc_str( &checked, &maxchecked, 1 );
10009e18:	3d 20 10 03 	lis     r9,4099
10009e1c:	38 69 dc 78 	addi    r3,r9,-9096
10009e20:	3d 20 10 03 	lis     r9,4099
10009e24:	38 89 dc 7c 	addi    r4,r9,-9092
10009e28:	38 a0 00 01 	li      r5,1
10009e2c:	4b ff e4 ed 	bl      10008318 <httpd_realloc_str>
    checked[0] = '\0';
10009e30:	3d 20 10 03 	lis     r9,4099
10009e34:	81 29 dc 78 	lwz     r9,-9096(r9)
10009e38:	39 40 00 00 	li      r10,0
10009e3c:	99 49 00 00 	stb     r10,0(r9)
    checkedlen = 0;
10009e40:	39 20 00 00 	li      r9,0
10009e44:	91 3f 00 08 	stw     r9,8(r31)
    restlen = strlen( path );
10009e48:	80 7f 14 18 	lwz     r3,5144(r31)
10009e4c:	48 02 38 09 	bl      1002d654 <strlen@plt>
10009e50:	90 7f 00 0c 	stw     r3,12(r31)
    httpd_realloc_str( &rest, &maxrest, restlen );
10009e54:	3d 20 10 03 	lis     r9,4099
10009e58:	38 69 dc 80 	addi    r3,r9,-9088
10009e5c:	3d 20 10 03 	lis     r9,4099
10009e60:	38 89 dc 84 	addi    r4,r9,-9084
10009e64:	80 bf 00 0c 	lwz     r5,12(r31)
10009e68:	4b ff e4 b1 	bl      10008318 <httpd_realloc_str>
    (void) strcpy( rest, path );
10009e6c:	3d 20 10 03 	lis     r9,4099
10009e70:	81 29 dc 80 	lwz     r9,-9088(r9)
10009e74:	7d 23 4b 78 	mr      r3,r9
10009e78:	80 9f 14 18 	lwz     r4,5144(r31)
10009e7c:	48 02 36 e9 	bl      1002d564 <strcpy@plt>
    if ( rest[restlen - 1] == '/' )
10009e80:	3d 20 10 03 	lis     r9,4099
10009e84:	81 49 dc 80 	lwz     r10,-9088(r9)
10009e88:	81 3f 00 0c 	lwz     r9,12(r31)
10009e8c:	39 29 ff ff 	addi    r9,r9,-1
10009e90:	7d 2a 4a 14 	add     r9,r10,r9
10009e94:	89 29 00 00 	lbz     r9,0(r9)
10009e98:	55 29 06 3e 	clrlwi  r9,r9,24
10009e9c:	2b 89 00 2f 	cmplwi  cr7,r9,47
10009ea0:	40 9e 00 28 	bne     cr7,10009ec8 <expand_symlinks+0x1d4>
	rest[--restlen] = '\0';         /* trim trailing slash */
10009ea4:	3d 20 10 03 	lis     r9,4099
10009ea8:	81 49 dc 80 	lwz     r10,-9088(r9)
10009eac:	81 3f 00 0c 	lwz     r9,12(r31)
10009eb0:	39 29 ff ff 	addi    r9,r9,-1
10009eb4:	91 3f 00 0c 	stw     r9,12(r31)
10009eb8:	81 3f 00 0c 	lwz     r9,12(r31)
10009ebc:	7d 2a 4a 14 	add     r9,r10,r9
10009ec0:	39 40 00 00 	li      r10,0
10009ec4:	99 49 00 00 	stb     r10,0(r9)
    if ( ! tildemapped )
10009ec8:	81 3f 14 24 	lwz     r9,5156(r31)
10009ecc:	2f 89 00 00 	cmpwi   cr7,r9,0
10009ed0:	40 9e 00 6c 	bne     cr7,10009f3c <expand_symlinks+0x248>
	/* Remove any leading slashes. */
	while ( rest[0] == '/' )
10009ed4:	48 00 00 50 	b       10009f24 <expand_symlinks+0x230>
	    {
	    (void) ol_strcpy( rest, &(rest[1]) );
10009ed8:	3d 20 10 03 	lis     r9,4099
10009edc:	83 a9 dc 80 	lwz     r29,-9088(r9)
10009ee0:	3d 20 10 03 	lis     r9,4099
10009ee4:	81 29 dc 80 	lwz     r9,-9088(r9)
10009ee8:	3b c9 00 01 	addi    r30,r9,1
10009eec:	3d 20 10 03 	lis     r9,4099
10009ef0:	81 29 dc 80 	lwz     r9,-9088(r9)
10009ef4:	39 29 00 01 	addi    r9,r9,1
10009ef8:	7d 23 4b 78 	mr      r3,r9
10009efc:	48 02 37 59 	bl      1002d654 <strlen@plt>
10009f00:	7c 69 1b 78 	mr      r9,r3
10009f04:	39 29 00 01 	addi    r9,r9,1
10009f08:	7f a3 eb 78 	mr      r3,r29
10009f0c:	7f c4 f3 78 	mr      r4,r30
10009f10:	7d 25 4b 78 	mr      r5,r9
10009f14:	48 02 35 11 	bl      1002d424 <memmove@plt>
	    --restlen;
10009f18:	81 3f 00 0c 	lwz     r9,12(r31)
10009f1c:	39 29 ff ff 	addi    r9,r9,-1
10009f20:	91 3f 00 0c 	stw     r9,12(r31)
    (void) strcpy( rest, path );
    if ( rest[restlen - 1] == '/' )
	rest[--restlen] = '\0';         /* trim trailing slash */
    if ( ! tildemapped )
	/* Remove any leading slashes. */
	while ( rest[0] == '/' )
10009f24:	3d 20 10 03 	lis     r9,4099
10009f28:	81 29 dc 80 	lwz     r9,-9088(r9)
10009f2c:	89 29 00 00 	lbz     r9,0(r9)
10009f30:	55 29 06 3e 	clrlwi  r9,r9,24
10009f34:	2b 89 00 2f 	cmplwi  cr7,r9,47
10009f38:	41 9e ff a0 	beq     cr7,10009ed8 <expand_symlinks+0x1e4>
	    {
	    (void) ol_strcpy( rest, &(rest[1]) );
	    --restlen;
	    }
    r = rest;
10009f3c:	3d 20 10 03 	lis     r9,4099
10009f40:	81 29 dc 80 	lwz     r9,-9088(r9)
10009f44:	91 3f 00 1c 	stw     r9,28(r31)
    nlinks = 0;
10009f48:	39 20 00 00 	li      r9,0
10009f4c:	91 3f 00 14 	stw     r9,20(r31)

    /* While there are still components to check... */
    while ( restlen > 0 )
10009f50:	48 00 06 f0 	b       1000a640 <expand_symlinks+0x94c>
	{
	/* Save current checkedlen in case we get a symlink.  Save current
	** restlen in case we get a non-existant component.
	*/
	prevcheckedlen = checkedlen;
10009f54:	81 3f 00 08 	lwz     r9,8(r31)
10009f58:	91 3f 00 20 	stw     r9,32(r31)
	prevrestlen = restlen;
10009f5c:	81 3f 00 0c 	lwz     r9,12(r31)
10009f60:	91 3f 00 24 	stw     r9,36(r31)

	/* Grab one component from r and transfer it to checked. */
	cp1 = strchr( r, '/' );
10009f64:	80 7f 00 1c 	lwz     r3,28(r31)
10009f68:	38 80 00 2f 	li      r4,47
10009f6c:	48 02 36 d9 	bl      1002d644 <strchr@plt>
10009f70:	90 7f 00 28 	stw     r3,40(r31)
	if ( cp1 != (char*) 0 )
10009f74:	81 3f 00 28 	lwz     r9,40(r31)
10009f78:	2f 89 00 00 	cmpwi   cr7,r9,0
10009f7c:	41 9e 02 04 	beq     cr7,1000a180 <expand_symlinks+0x48c>
	    {
	    i = cp1 - r;
10009f80:	81 5f 00 28 	lwz     r10,40(r31)
10009f84:	81 3f 00 1c 	lwz     r9,28(r31)
10009f88:	7d 29 50 50 	subf    r9,r9,r10
10009f8c:	91 3f 00 18 	stw     r9,24(r31)
	    if ( i == 0 )
10009f90:	81 3f 00 18 	lwz     r9,24(r31)
10009f94:	2f 89 00 00 	cmpwi   cr7,r9,0
10009f98:	40 9e 00 54 	bne     cr7,10009fec <expand_symlinks+0x2f8>
		{
		/* Special case for absolute paths. */
		httpd_realloc_str( &checked, &maxchecked, checkedlen + 1 );
10009f9c:	81 3f 00 08 	lwz     r9,8(r31)
10009fa0:	39 29 00 01 	addi    r9,r9,1
10009fa4:	3d 40 10 03 	lis     r10,4099
10009fa8:	38 6a dc 78 	addi    r3,r10,-9096
10009fac:	3d 40 10 03 	lis     r10,4099
10009fb0:	38 8a dc 7c 	addi    r4,r10,-9092
10009fb4:	7d 25 4b 78 	mr      r5,r9
10009fb8:	4b ff e3 61 	bl      10008318 <httpd_realloc_str>
		(void) strncpy( &checked[checkedlen], r, 1 );
10009fbc:	3d 20 10 03 	lis     r9,4099
10009fc0:	81 49 dc 78 	lwz     r10,-9096(r9)
10009fc4:	81 3f 00 08 	lwz     r9,8(r31)
10009fc8:	7d 2a 4a 14 	add     r9,r10,r9
10009fcc:	7d 23 4b 78 	mr      r3,r9
10009fd0:	80 9f 00 1c 	lwz     r4,28(r31)
10009fd4:	38 a0 00 01 	li      r5,1
10009fd8:	48 02 37 0d 	bl      1002d6e4 <strncpy@plt>
		checkedlen += 1;
10009fdc:	81 3f 00 08 	lwz     r9,8(r31)
10009fe0:	39 29 00 01 	addi    r9,r9,1
10009fe4:	91 3f 00 08 	stw     r9,8(r31)
10009fe8:	48 00 01 54 	b       1000a13c <expand_symlinks+0x448>
		}
	    else if ( strncmp( r, "..", MAX( i, 2 ) ) == 0 )
10009fec:	81 3f 00 18 	lwz     r9,24(r31)
10009ff0:	2f 89 00 02 	cmpwi   cr7,r9,2
10009ff4:	40 9c 00 08 	bge     cr7,10009ffc <expand_symlinks+0x308>
10009ff8:	39 20 00 02 	li      r9,2
10009ffc:	80 7f 00 1c 	lwz     r3,28(r31)
1000a000:	3d 40 10 02 	lis     r10,4098
1000a004:	38 8a 92 94 	addi    r4,r10,-28012
1000a008:	7d 25 4b 78 	mr      r5,r9
1000a00c:	48 02 37 e9 	bl      1002d7f4 <strncmp@plt>
1000a010:	7c 69 1b 78 	mr      r9,r3
1000a014:	2f 89 00 00 	cmpwi   cr7,r9,0
1000a018:	40 9e 00 78 	bne     cr7,1000a090 <expand_symlinks+0x39c>
		{
		/* Ignore ..'s that go above the start of the path. */
		if ( checkedlen != 0 )
1000a01c:	81 3f 00 08 	lwz     r9,8(r31)
1000a020:	2f 89 00 00 	cmpwi   cr7,r9,0
1000a024:	41 9e 01 18 	beq     cr7,1000a13c <expand_symlinks+0x448>
		    {
		    cp2 = strrchr( checked, '/' );
1000a028:	3d 20 10 03 	lis     r9,4099
1000a02c:	81 29 dc 78 	lwz     r9,-9096(r9)
1000a030:	7d 23 4b 78 	mr      r3,r9
1000a034:	38 80 00 2f 	li      r4,47
1000a038:	48 02 37 45 	bl      1002d77c <strrchr@plt>
1000a03c:	90 7f 00 2c 	stw     r3,44(r31)
		    if ( cp2 == (char*) 0 )
1000a040:	81 3f 00 2c 	lwz     r9,44(r31)
1000a044:	2f 89 00 00 	cmpwi   cr7,r9,0
1000a048:	40 9e 00 10 	bne     cr7,1000a058 <expand_symlinks+0x364>
			checkedlen = 0;
1000a04c:	39 20 00 00 	li      r9,0
1000a050:	91 3f 00 08 	stw     r9,8(r31)
1000a054:	48 00 00 e8 	b       1000a13c <expand_symlinks+0x448>
		    else if ( cp2 == checked )
1000a058:	3d 20 10 03 	lis     r9,4099
1000a05c:	81 29 dc 78 	lwz     r9,-9096(r9)
1000a060:	81 5f 00 2c 	lwz     r10,44(r31)
1000a064:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000a068:	40 9e 00 10 	bne     cr7,1000a078 <expand_symlinks+0x384>
			checkedlen = 1;
1000a06c:	39 20 00 01 	li      r9,1
1000a070:	91 3f 00 08 	stw     r9,8(r31)
1000a074:	48 00 00 c8 	b       1000a13c <expand_symlinks+0x448>
		    else
			checkedlen = cp2 - checked;
1000a078:	81 5f 00 2c 	lwz     r10,44(r31)
1000a07c:	3d 20 10 03 	lis     r9,4099
1000a080:	81 29 dc 78 	lwz     r9,-9096(r9)
1000a084:	7d 29 50 50 	subf    r9,r9,r10
1000a088:	91 3f 00 08 	stw     r9,8(r31)
1000a08c:	48 00 00 b0 	b       1000a13c <expand_symlinks+0x448>
		    }
		}
	    else
		{
		httpd_realloc_str( &checked, &maxchecked, checkedlen + 1 + i );
1000a090:	81 5f 00 18 	lwz     r10,24(r31)
1000a094:	81 3f 00 08 	lwz     r9,8(r31)
1000a098:	7d 2a 4a 14 	add     r9,r10,r9
1000a09c:	39 29 00 01 	addi    r9,r9,1
1000a0a0:	3d 40 10 03 	lis     r10,4099
1000a0a4:	38 6a dc 78 	addi    r3,r10,-9096
1000a0a8:	3d 40 10 03 	lis     r10,4099
1000a0ac:	38 8a dc 7c 	addi    r4,r10,-9092
1000a0b0:	7d 25 4b 78 	mr      r5,r9
1000a0b4:	4b ff e2 65 	bl      10008318 <httpd_realloc_str>
		if ( checkedlen > 0 && checked[checkedlen-1] != '/' )
1000a0b8:	81 3f 00 08 	lwz     r9,8(r31)
1000a0bc:	2f 89 00 00 	cmpwi   cr7,r9,0
1000a0c0:	41 9e 00 48 	beq     cr7,1000a108 <expand_symlinks+0x414>
1000a0c4:	3d 20 10 03 	lis     r9,4099
1000a0c8:	81 49 dc 78 	lwz     r10,-9096(r9)
1000a0cc:	81 3f 00 08 	lwz     r9,8(r31)
1000a0d0:	39 29 ff ff 	addi    r9,r9,-1
1000a0d4:	7d 2a 4a 14 	add     r9,r10,r9
1000a0d8:	89 29 00 00 	lbz     r9,0(r9)
1000a0dc:	55 29 06 3e 	clrlwi  r9,r9,24
1000a0e0:	2b 89 00 2f 	cmplwi  cr7,r9,47
1000a0e4:	41 9e 00 24 	beq     cr7,1000a108 <expand_symlinks+0x414>
		    checked[checkedlen++] = '/';
1000a0e8:	3d 20 10 03 	lis     r9,4099
1000a0ec:	81 49 dc 78 	lwz     r10,-9096(r9)
1000a0f0:	81 3f 00 08 	lwz     r9,8(r31)
1000a0f4:	39 09 00 01 	addi    r8,r9,1
1000a0f8:	91 1f 00 08 	stw     r8,8(r31)
1000a0fc:	7d 2a 4a 14 	add     r9,r10,r9
1000a100:	39 40 00 2f 	li      r10,47
1000a104:	99 49 00 00 	stb     r10,0(r9)
		(void) strncpy( &checked[checkedlen], r, i );
1000a108:	3d 20 10 03 	lis     r9,4099
1000a10c:	81 49 dc 78 	lwz     r10,-9096(r9)
1000a110:	81 3f 00 08 	lwz     r9,8(r31)
1000a114:	7d 4a 4a 14 	add     r10,r10,r9
1000a118:	81 3f 00 18 	lwz     r9,24(r31)
1000a11c:	7d 43 53 78 	mr      r3,r10
1000a120:	80 9f 00 1c 	lwz     r4,28(r31)
1000a124:	7d 25 4b 78 	mr      r5,r9
1000a128:	48 02 35 bd 	bl      1002d6e4 <strncpy@plt>
		checkedlen += i;
1000a12c:	81 3f 00 18 	lwz     r9,24(r31)
1000a130:	81 5f 00 08 	lwz     r10,8(r31)
1000a134:	7d 2a 4a 14 	add     r9,r10,r9
1000a138:	91 3f 00 08 	stw     r9,8(r31)
		}
	    checked[checkedlen] = '\0';
1000a13c:	3d 20 10 03 	lis     r9,4099
1000a140:	81 49 dc 78 	lwz     r10,-9096(r9)
1000a144:	81 3f 00 08 	lwz     r9,8(r31)
1000a148:	7d 2a 4a 14 	add     r9,r10,r9
1000a14c:	39 40 00 00 	li      r10,0
1000a150:	99 49 00 00 	stb     r10,0(r9)
	    r += i + 1;
1000a154:	81 3f 00 18 	lwz     r9,24(r31)
1000a158:	39 29 00 01 	addi    r9,r9,1
1000a15c:	81 5f 00 1c 	lwz     r10,28(r31)
1000a160:	7d 2a 4a 14 	add     r9,r10,r9
1000a164:	91 3f 00 1c 	stw     r9,28(r31)
	    restlen -= i + 1;
1000a168:	81 3f 00 18 	lwz     r9,24(r31)
1000a16c:	81 5f 00 0c 	lwz     r10,12(r31)
1000a170:	7d 29 50 50 	subf    r9,r9,r10
1000a174:	39 29 ff ff 	addi    r9,r9,-1
1000a178:	91 3f 00 0c 	stw     r9,12(r31)
1000a17c:	48 00 01 68 	b       1000a2e4 <expand_symlinks+0x5f0>
	    }
	else
	    {
	    /* No slashes remaining, r is all one component. */
	    if ( strcmp( r, ".." ) == 0 )
1000a180:	80 7f 00 1c 	lwz     r3,28(r31)
1000a184:	3d 20 10 02 	lis     r9,4098
1000a188:	38 89 92 94 	addi    r4,r9,-28012
1000a18c:	48 02 32 51 	bl      1002d3dc <strcmp@plt>
1000a190:	7c 69 1b 78 	mr      r9,r3
1000a194:	2f 89 00 00 	cmpwi   cr7,r9,0
1000a198:	40 9e 00 90 	bne     cr7,1000a228 <expand_symlinks+0x534>
		{
		/* Ignore ..'s that go above the start of the path. */
		if ( checkedlen != 0 )
1000a19c:	81 3f 00 08 	lwz     r9,8(r31)
1000a1a0:	2f 89 00 00 	cmpwi   cr7,r9,0
1000a1a4:	41 9e 01 28 	beq     cr7,1000a2cc <expand_symlinks+0x5d8>
		    {
		    cp2 = strrchr( checked, '/' );
1000a1a8:	3d 20 10 03 	lis     r9,4099
1000a1ac:	81 29 dc 78 	lwz     r9,-9096(r9)
1000a1b0:	7d 23 4b 78 	mr      r3,r9
1000a1b4:	38 80 00 2f 	li      r4,47
1000a1b8:	48 02 35 c5 	bl      1002d77c <strrchr@plt>
1000a1bc:	90 7f 00 2c 	stw     r3,44(r31)
		    if ( cp2 == (char*) 0 )
1000a1c0:	81 3f 00 2c 	lwz     r9,44(r31)
1000a1c4:	2f 89 00 00 	cmpwi   cr7,r9,0
1000a1c8:	40 9e 00 10 	bne     cr7,1000a1d8 <expand_symlinks+0x4e4>
			checkedlen = 0;
1000a1cc:	39 20 00 00 	li      r9,0
1000a1d0:	91 3f 00 08 	stw     r9,8(r31)
1000a1d4:	48 00 00 38 	b       1000a20c <expand_symlinks+0x518>
		    else if ( cp2 == checked )
1000a1d8:	3d 20 10 03 	lis     r9,4099
1000a1dc:	81 29 dc 78 	lwz     r9,-9096(r9)
1000a1e0:	81 5f 00 2c 	lwz     r10,44(r31)
1000a1e4:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000a1e8:	40 9e 00 10 	bne     cr7,1000a1f8 <expand_symlinks+0x504>
			checkedlen = 1;
1000a1ec:	39 20 00 01 	li      r9,1
1000a1f0:	91 3f 00 08 	stw     r9,8(r31)
1000a1f4:	48 00 00 18 	b       1000a20c <expand_symlinks+0x518>
		    else
			checkedlen = cp2 - checked;
1000a1f8:	81 5f 00 2c 	lwz     r10,44(r31)
1000a1fc:	3d 20 10 03 	lis     r9,4099
1000a200:	81 29 dc 78 	lwz     r9,-9096(r9)
1000a204:	7d 29 50 50 	subf    r9,r9,r10
1000a208:	91 3f 00 08 	stw     r9,8(r31)
		    checked[checkedlen] = '\0';
1000a20c:	3d 20 10 03 	lis     r9,4099
1000a210:	81 49 dc 78 	lwz     r10,-9096(r9)
1000a214:	81 3f 00 08 	lwz     r9,8(r31)
1000a218:	7d 2a 4a 14 	add     r9,r10,r9
1000a21c:	39 40 00 00 	li      r10,0
1000a220:	99 49 00 00 	stb     r10,0(r9)
1000a224:	48 00 00 a8 	b       1000a2cc <expand_symlinks+0x5d8>
		    }
		}
	    else
		{
		httpd_realloc_str(
		    &checked, &maxchecked, checkedlen + 1 + restlen );
1000a228:	81 5f 00 08 	lwz     r10,8(r31)
1000a22c:	81 3f 00 0c 	lwz     r9,12(r31)
1000a230:	7d 2a 4a 14 	add     r9,r10,r9
		    checked[checkedlen] = '\0';
		    }
		}
	    else
		{
		httpd_realloc_str(
1000a234:	39 29 00 01 	addi    r9,r9,1
1000a238:	3d 40 10 03 	lis     r10,4099
1000a23c:	38 6a dc 78 	addi    r3,r10,-9096
1000a240:	3d 40 10 03 	lis     r10,4099
1000a244:	38 8a dc 7c 	addi    r4,r10,-9092
1000a248:	7d 25 4b 78 	mr      r5,r9
1000a24c:	4b ff e0 cd 	bl      10008318 <httpd_realloc_str>
		    &checked, &maxchecked, checkedlen + 1 + restlen );
		if ( checkedlen > 0 && checked[checkedlen-1] != '/' )
1000a250:	81 3f 00 08 	lwz     r9,8(r31)
1000a254:	2f 89 00 00 	cmpwi   cr7,r9,0
1000a258:	41 9e 00 48 	beq     cr7,1000a2a0 <expand_symlinks+0x5ac>
1000a25c:	3d 20 10 03 	lis     r9,4099
1000a260:	81 49 dc 78 	lwz     r10,-9096(r9)
1000a264:	81 3f 00 08 	lwz     r9,8(r31)
1000a268:	39 29 ff ff 	addi    r9,r9,-1
1000a26c:	7d 2a 4a 14 	add     r9,r10,r9
1000a270:	89 29 00 00 	lbz     r9,0(r9)
1000a274:	55 29 06 3e 	clrlwi  r9,r9,24
1000a278:	2b 89 00 2f 	cmplwi  cr7,r9,47
1000a27c:	41 9e 00 24 	beq     cr7,1000a2a0 <expand_symlinks+0x5ac>
		    checked[checkedlen++] = '/';
1000a280:	3d 20 10 03 	lis     r9,4099
1000a284:	81 49 dc 78 	lwz     r10,-9096(r9)
1000a288:	81 3f 00 08 	lwz     r9,8(r31)
1000a28c:	39 09 00 01 	addi    r8,r9,1
1000a290:	91 1f 00 08 	stw     r8,8(r31)
1000a294:	7d 2a 4a 14 	add     r9,r10,r9
1000a298:	39 40 00 2f 	li      r10,47
1000a29c:	99 49 00 00 	stb     r10,0(r9)
		(void) strcpy( &checked[checkedlen], r );
1000a2a0:	3d 20 10 03 	lis     r9,4099
1000a2a4:	81 49 dc 78 	lwz     r10,-9096(r9)
1000a2a8:	81 3f 00 08 	lwz     r9,8(r31)
1000a2ac:	7d 2a 4a 14 	add     r9,r10,r9
1000a2b0:	7d 23 4b 78 	mr      r3,r9
1000a2b4:	80 9f 00 1c 	lwz     r4,28(r31)
1000a2b8:	48 02 32 ad 	bl      1002d564 <strcpy@plt>
		checkedlen += restlen;
1000a2bc:	81 5f 00 08 	lwz     r10,8(r31)
1000a2c0:	81 3f 00 0c 	lwz     r9,12(r31)
1000a2c4:	7d 2a 4a 14 	add     r9,r10,r9
1000a2c8:	91 3f 00 08 	stw     r9,8(r31)
		}
	    r += restlen;
1000a2cc:	81 5f 00 1c 	lwz     r10,28(r31)
1000a2d0:	81 3f 00 0c 	lwz     r9,12(r31)
1000a2d4:	7d 2a 4a 14 	add     r9,r10,r9
1000a2d8:	91 3f 00 1c 	stw     r9,28(r31)
	    restlen = 0;
1000a2dc:	39 20 00 00 	li      r9,0
1000a2e0:	91 3f 00 0c 	stw     r9,12(r31)
	    }

	/* Try reading the current filename as a symlink */
	if ( checked[0] == '\0' )
1000a2e4:	3d 20 10 03 	lis     r9,4099
1000a2e8:	81 29 dc 78 	lwz     r9,-9096(r9)
1000a2ec:	89 29 00 00 	lbz     r9,0(r9)
1000a2f0:	55 29 06 3e 	clrlwi  r9,r9,24
1000a2f4:	2f 89 00 00 	cmpwi   cr7,r9,0
1000a2f8:	40 9e 00 08 	bne     cr7,1000a300 <expand_symlinks+0x60c>
	    continue;
1000a2fc:	48 00 03 44 	b       1000a640 <expand_symlinks+0x94c>
	linklen = readlink( checked, lnk, sizeof(lnk) - 1 );
1000a300:	3d 20 10 03 	lis     r9,4099
1000a304:	81 49 dc 78 	lwz     r10,-9096(r9)
1000a308:	39 3f 00 30 	addi    r9,r31,48
1000a30c:	7d 43 53 78 	mr      r3,r10
1000a310:	7d 24 4b 78 	mr      r4,r9
1000a314:	38 a0 13 87 	li      r5,4999
1000a318:	48 02 31 e5 	bl      1002d4fc <readlink@plt>
1000a31c:	7c 69 1b 78 	mr      r9,r3
1000a320:	91 3f 00 10 	stw     r9,16(r31)
	if ( linklen == -1 )
1000a324:	81 5f 00 10 	lwz     r10,16(r31)
1000a328:	39 20 ff ff 	li      r9,-1
1000a32c:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000a330:	40 9e 00 e0 	bne     cr7,1000a410 <expand_symlinks+0x71c>
	    {
	    if ( errno == EINVAL )
1000a334:	48 02 33 a9 	bl      1002d6dc <__errno_location@plt>
1000a338:	7c 69 1b 78 	mr      r9,r3
1000a33c:	81 29 00 00 	lwz     r9,0(r9)
1000a340:	2f 89 00 16 	cmpwi   cr7,r9,22
1000a344:	40 9e 00 08 	bne     cr7,1000a34c <expand_symlinks+0x658>
		continue;               /* not a symlink */
1000a348:	48 00 02 f8 	b       1000a640 <expand_symlinks+0x94c>
	    if ( errno == EACCES || errno == ENOENT || errno == ENOTDIR )
1000a34c:	48 02 33 91 	bl      1002d6dc <__errno_location@plt>
1000a350:	7c 69 1b 78 	mr      r9,r3
1000a354:	81 29 00 00 	lwz     r9,0(r9)
1000a358:	2f 89 00 0d 	cmpwi   cr7,r9,13
1000a35c:	41 9e 00 2c 	beq     cr7,1000a388 <expand_symlinks+0x694>
1000a360:	48 02 33 7d 	bl      1002d6dc <__errno_location@plt>
1000a364:	7c 69 1b 78 	mr      r9,r3
1000a368:	81 29 00 00 	lwz     r9,0(r9)
1000a36c:	2f 89 00 02 	cmpwi   cr7,r9,2
1000a370:	41 9e 00 18 	beq     cr7,1000a388 <expand_symlinks+0x694>
1000a374:	48 02 33 69 	bl      1002d6dc <__errno_location@plt>
1000a378:	7c 69 1b 78 	mr      r9,r3
1000a37c:	81 29 00 00 	lwz     r9,0(r9)
1000a380:	2f 89 00 14 	cmpwi   cr7,r9,20
1000a384:	40 9e 00 64 	bne     cr7,1000a3e8 <expand_symlinks+0x6f4>
		{
		/* That last component was bogus.  Restore and return. */
		*restP = r - ( prevrestlen - restlen );
1000a388:	81 5f 00 0c 	lwz     r10,12(r31)
1000a38c:	81 3f 00 24 	lwz     r9,36(r31)
1000a390:	7d 29 50 50 	subf    r9,r9,r10
1000a394:	81 5f 00 1c 	lwz     r10,28(r31)
1000a398:	7d 4a 4a 14 	add     r10,r10,r9
1000a39c:	81 3f 14 1c 	lwz     r9,5148(r31)
1000a3a0:	91 49 00 00 	stw     r10,0(r9)
		if ( prevcheckedlen == 0 )
1000a3a4:	81 3f 00 20 	lwz     r9,32(r31)
1000a3a8:	2f 89 00 00 	cmpwi   cr7,r9,0
1000a3ac:	40 9e 00 18 	bne     cr7,1000a3c4 <expand_symlinks+0x6d0>
		    (void) strcpy( checked, "." );
1000a3b0:	3d 20 10 03 	lis     r9,4099
1000a3b4:	81 29 dc 78 	lwz     r9,-9096(r9)
1000a3b8:	39 40 2e 00 	li      r10,11776
1000a3bc:	b1 49 00 00 	sth     r10,0(r9)
1000a3c0:	48 00 00 1c 	b       1000a3dc <expand_symlinks+0x6e8>
		else
		    checked[prevcheckedlen] = '\0';
1000a3c4:	3d 20 10 03 	lis     r9,4099
1000a3c8:	81 49 dc 78 	lwz     r10,-9096(r9)
1000a3cc:	81 3f 00 20 	lwz     r9,32(r31)
1000a3d0:	7d 2a 4a 14 	add     r9,r10,r9
1000a3d4:	39 40 00 00 	li      r10,0
1000a3d8:	99 49 00 00 	stb     r10,0(r9)
		return checked;
1000a3dc:	3d 20 10 03 	lis     r9,4099
1000a3e0:	81 29 dc 78 	lwz     r9,-9096(r9)
1000a3e4:	48 00 02 a4 	b       1000a688 <expand_symlinks+0x994>
		}
	    syslog( LOG_ERR, "readlink %.80s - %m", checked );
1000a3e8:	3d 20 10 03 	lis     r9,4099
1000a3ec:	81 29 dc 78 	lwz     r9,-9096(r9)
1000a3f0:	38 60 00 03 	li      r3,3
1000a3f4:	3d 40 10 02 	lis     r10,4098
1000a3f8:	38 8a 92 98 	addi    r4,r10,-28008
1000a3fc:	7d 25 4b 78 	mr      r5,r9
1000a400:	4c c6 31 82 	crclr   4*cr1+eq
1000a404:	48 02 33 81 	bl      1002d784 <syslog@plt>
	    return (char*) 0;
1000a408:	39 20 00 00 	li      r9,0
1000a40c:	48 00 02 7c 	b       1000a688 <expand_symlinks+0x994>
	    }
	++nlinks;
1000a410:	81 3f 00 14 	lwz     r9,20(r31)
1000a414:	39 29 00 01 	addi    r9,r9,1
1000a418:	91 3f 00 14 	stw     r9,20(r31)
	if ( nlinks > MAX_LINKS )
1000a41c:	81 3f 00 14 	lwz     r9,20(r31)
1000a420:	2f 89 00 20 	cmpwi   cr7,r9,32
1000a424:	40 9d 00 24 	ble     cr7,1000a448 <expand_symlinks+0x754>
	    {
	    syslog( LOG_ERR, "too many symlinks in %.80s", path );
1000a428:	38 60 00 03 	li      r3,3
1000a42c:	3d 20 10 02 	lis     r9,4098
1000a430:	38 89 92 ac 	addi    r4,r9,-27988
1000a434:	80 bf 14 18 	lwz     r5,5144(r31)
1000a438:	4c c6 31 82 	crclr   4*cr1+eq
1000a43c:	48 02 33 49 	bl      1002d784 <syslog@plt>
	    return (char*) 0;
1000a440:	39 20 00 00 	li      r9,0
1000a444:	48 00 02 44 	b       1000a688 <expand_symlinks+0x994>
	    }
	lnk[linklen] = '\0';
1000a448:	39 5f 00 30 	addi    r10,r31,48
1000a44c:	81 3f 00 10 	lwz     r9,16(r31)
1000a450:	7d 2a 4a 14 	add     r9,r10,r9
1000a454:	39 40 00 00 	li      r10,0
1000a458:	99 49 00 00 	stb     r10,0(r9)
	if ( lnk[linklen - 1] == '/' )
1000a45c:	81 3f 00 10 	lwz     r9,16(r31)
1000a460:	39 29 ff ff 	addi    r9,r9,-1
1000a464:	39 5f 00 08 	addi    r10,r31,8
1000a468:	7d 2a 4a 14 	add     r9,r10,r9
1000a46c:	89 29 00 28 	lbz     r9,40(r9)
1000a470:	55 29 06 3e 	clrlwi  r9,r9,24
1000a474:	2b 89 00 2f 	cmplwi  cr7,r9,47
1000a478:	40 9e 00 24 	bne     cr7,1000a49c <expand_symlinks+0x7a8>
	    lnk[--linklen] = '\0';     /* trim trailing slash */
1000a47c:	81 3f 00 10 	lwz     r9,16(r31)
1000a480:	39 29 ff ff 	addi    r9,r9,-1
1000a484:	91 3f 00 10 	stw     r9,16(r31)
1000a488:	39 5f 00 30 	addi    r10,r31,48
1000a48c:	81 3f 00 10 	lwz     r9,16(r31)
1000a490:	7d 2a 4a 14 	add     r9,r10,r9
1000a494:	39 40 00 00 	li      r10,0
1000a498:	99 49 00 00 	stb     r10,0(r9)

	/* Insert the link contents in front of the rest of the filename. */
	if ( restlen != 0 )
1000a49c:	81 3f 00 0c 	lwz     r9,12(r31)
1000a4a0:	2f 89 00 00 	cmpwi   cr7,r9,0
1000a4a4:	41 9e 01 04 	beq     cr7,1000a5a8 <expand_symlinks+0x8b4>
	    {
	    (void) ol_strcpy( rest, r );
1000a4a8:	3d 20 10 03 	lis     r9,4099
1000a4ac:	83 c9 dc 80 	lwz     r30,-9088(r9)
1000a4b0:	80 7f 00 1c 	lwz     r3,28(r31)
1000a4b4:	48 02 31 a1 	bl      1002d654 <strlen@plt>
1000a4b8:	7c 69 1b 78 	mr      r9,r3
1000a4bc:	39 29 00 01 	addi    r9,r9,1
1000a4c0:	7f c3 f3 78 	mr      r3,r30
1000a4c4:	80 9f 00 1c 	lwz     r4,28(r31)
1000a4c8:	7d 25 4b 78 	mr      r5,r9
1000a4cc:	48 02 2f 59 	bl      1002d424 <memmove@plt>
	    httpd_realloc_str( &rest, &maxrest, restlen + linklen + 1 );
1000a4d0:	81 5f 00 0c 	lwz     r10,12(r31)
1000a4d4:	81 3f 00 10 	lwz     r9,16(r31)
1000a4d8:	7d 2a 4a 14 	add     r9,r10,r9
1000a4dc:	39 29 00 01 	addi    r9,r9,1
1000a4e0:	3d 40 10 03 	lis     r10,4099
1000a4e4:	38 6a dc 80 	addi    r3,r10,-9088
1000a4e8:	3d 40 10 03 	lis     r10,4099
1000a4ec:	38 8a dc 84 	addi    r4,r10,-9084
1000a4f0:	7d 25 4b 78 	mr      r5,r9
1000a4f4:	4b ff de 25 	bl      10008318 <httpd_realloc_str>
	    for ( i = restlen; i >= 0; --i )
1000a4f8:	81 3f 00 0c 	lwz     r9,12(r31)
1000a4fc:	91 3f 00 18 	stw     r9,24(r31)
1000a500:	48 00 00 48 	b       1000a548 <expand_symlinks+0x854>
		rest[i + linklen + 1] = rest[i];
1000a504:	3d 20 10 03 	lis     r9,4099
1000a508:	81 49 dc 80 	lwz     r10,-9088(r9)
1000a50c:	81 1f 00 18 	lwz     r8,24(r31)
1000a510:	81 3f 00 10 	lwz     r9,16(r31)
1000a514:	7d 28 4a 14 	add     r9,r8,r9
1000a518:	39 29 00 01 	addi    r9,r9,1
1000a51c:	7d 2a 4a 14 	add     r9,r10,r9
1000a520:	3d 40 10 03 	lis     r10,4099
1000a524:	81 0a dc 80 	lwz     r8,-9088(r10)
1000a528:	81 5f 00 18 	lwz     r10,24(r31)
1000a52c:	7d 48 52 14 	add     r10,r8,r10
1000a530:	89 4a 00 00 	lbz     r10,0(r10)
1000a534:	55 4a 06 3e 	clrlwi  r10,r10,24
1000a538:	99 49 00 00 	stb     r10,0(r9)
	/* Insert the link contents in front of the rest of the filename. */
	if ( restlen != 0 )
	    {
	    (void) ol_strcpy( rest, r );
	    httpd_realloc_str( &rest, &maxrest, restlen + linklen + 1 );
	    for ( i = restlen; i >= 0; --i )
1000a53c:	81 3f 00 18 	lwz     r9,24(r31)
1000a540:	39 29 ff ff 	addi    r9,r9,-1
1000a544:	91 3f 00 18 	stw     r9,24(r31)
1000a548:	81 3f 00 18 	lwz     r9,24(r31)
1000a54c:	2f 89 00 00 	cmpwi   cr7,r9,0
1000a550:	40 9c ff b4 	bge     cr7,1000a504 <expand_symlinks+0x810>
		rest[i + linklen + 1] = rest[i];
	    (void) strcpy( rest, lnk );
1000a554:	3d 20 10 03 	lis     r9,4099
1000a558:	81 49 dc 80 	lwz     r10,-9088(r9)
1000a55c:	39 3f 00 30 	addi    r9,r31,48
1000a560:	7d 43 53 78 	mr      r3,r10
1000a564:	7d 24 4b 78 	mr      r4,r9
1000a568:	48 02 2f fd 	bl      1002d564 <strcpy@plt>
	    rest[linklen] = '/';
1000a56c:	3d 20 10 03 	lis     r9,4099
1000a570:	81 49 dc 80 	lwz     r10,-9088(r9)
1000a574:	81 3f 00 10 	lwz     r9,16(r31)
1000a578:	7d 2a 4a 14 	add     r9,r10,r9
1000a57c:	39 40 00 2f 	li      r10,47
1000a580:	99 49 00 00 	stb     r10,0(r9)
	    restlen += linklen + 1;
1000a584:	81 5f 00 10 	lwz     r10,16(r31)
1000a588:	81 3f 00 0c 	lwz     r9,12(r31)
1000a58c:	7d 2a 4a 14 	add     r9,r10,r9
1000a590:	39 29 00 01 	addi    r9,r9,1
1000a594:	91 3f 00 0c 	stw     r9,12(r31)
	    r = rest;
1000a598:	3d 20 10 03 	lis     r9,4099
1000a59c:	81 29 dc 80 	lwz     r9,-9088(r9)
1000a5a0:	91 3f 00 1c 	stw     r9,28(r31)
1000a5a4:	48 00 00 48 	b       1000a5ec <expand_symlinks+0x8f8>
	else
	    {
	    /* There's nothing left in the filename, so the link contents
	    ** becomes the rest.
	    */
	    httpd_realloc_str( &rest, &maxrest, linklen );
1000a5a8:	3d 20 10 03 	lis     r9,4099
1000a5ac:	38 69 dc 80 	addi    r3,r9,-9088
1000a5b0:	3d 20 10 03 	lis     r9,4099
1000a5b4:	38 89 dc 84 	addi    r4,r9,-9084
1000a5b8:	80 bf 00 10 	lwz     r5,16(r31)
1000a5bc:	4b ff dd 5d 	bl      10008318 <httpd_realloc_str>
	    (void) strcpy( rest, lnk );
1000a5c0:	3d 20 10 03 	lis     r9,4099
1000a5c4:	81 49 dc 80 	lwz     r10,-9088(r9)
1000a5c8:	39 3f 00 30 	addi    r9,r31,48
1000a5cc:	7d 43 53 78 	mr      r3,r10
1000a5d0:	7d 24 4b 78 	mr      r4,r9
1000a5d4:	48 02 2f 91 	bl      1002d564 <strcpy@plt>
	    restlen = linklen;
1000a5d8:	81 3f 00 10 	lwz     r9,16(r31)
1000a5dc:	91 3f 00 0c 	stw     r9,12(r31)
	    r = rest;
1000a5e0:	3d 20 10 03 	lis     r9,4099
1000a5e4:	81 29 dc 80 	lwz     r9,-9088(r9)
1000a5e8:	91 3f 00 1c 	stw     r9,28(r31)
	    }

	if ( rest[0] == '/' )
1000a5ec:	3d 20 10 03 	lis     r9,4099
1000a5f0:	81 29 dc 80 	lwz     r9,-9088(r9)
1000a5f4:	89 29 00 00 	lbz     r9,0(r9)
1000a5f8:	55 29 06 3e 	clrlwi  r9,r9,24
1000a5fc:	2b 89 00 2f 	cmplwi  cr7,r9,47
1000a600:	40 9e 00 20 	bne     cr7,1000a620 <expand_symlinks+0x92c>
	    {
	    /* There must have been an absolute symlink - zero out checked. */
	    checked[0] = '\0';
1000a604:	3d 20 10 03 	lis     r9,4099
1000a608:	81 29 dc 78 	lwz     r9,-9096(r9)
1000a60c:	39 40 00 00 	li      r10,0
1000a610:	99 49 00 00 	stb     r10,0(r9)
	    checkedlen = 0;
1000a614:	39 20 00 00 	li      r9,0
1000a618:	91 3f 00 08 	stw     r9,8(r31)
1000a61c:	48 00 00 24 	b       1000a640 <expand_symlinks+0x94c>
	    }
	else
	    {
	    /* Re-check this component. */
	    checkedlen = prevcheckedlen;
1000a620:	81 3f 00 20 	lwz     r9,32(r31)
1000a624:	91 3f 00 08 	stw     r9,8(r31)
	    checked[checkedlen] = '\0';
1000a628:	3d 20 10 03 	lis     r9,4099
1000a62c:	81 49 dc 78 	lwz     r10,-9096(r9)
1000a630:	81 3f 00 08 	lwz     r9,8(r31)
1000a634:	7d 2a 4a 14 	add     r9,r10,r9
1000a638:	39 40 00 00 	li      r10,0
1000a63c:	99 49 00 00 	stb     r10,0(r9)
	    }
    r = rest;
    nlinks = 0;

    /* While there are still components to check... */
    while ( restlen > 0 )
1000a640:	81 3f 00 0c 	lwz     r9,12(r31)
1000a644:	2f 89 00 00 	cmpwi   cr7,r9,0
1000a648:	40 9e f9 0c 	bne     cr7,10009f54 <expand_symlinks+0x260>
	    checked[checkedlen] = '\0';
	    }
	}

    /* Ok. */
    *restP = r;
1000a64c:	81 3f 14 1c 	lwz     r9,5148(r31)
1000a650:	81 5f 00 1c 	lwz     r10,28(r31)
1000a654:	91 49 00 00 	stw     r10,0(r9)
    if ( checked[0] == '\0' )
1000a658:	3d 20 10 03 	lis     r9,4099
1000a65c:	81 29 dc 78 	lwz     r9,-9096(r9)
1000a660:	89 29 00 00 	lbz     r9,0(r9)
1000a664:	55 29 06 3e 	clrlwi  r9,r9,24
1000a668:	2f 89 00 00 	cmpwi   cr7,r9,0
1000a66c:	40 9e 00 14 	bne     cr7,1000a680 <expand_symlinks+0x98c>
	(void) strcpy( checked, "." );
1000a670:	3d 20 10 03 	lis     r9,4099
1000a674:	81 29 dc 78 	lwz     r9,-9096(r9)
1000a678:	39 40 2e 00 	li      r10,11776
1000a67c:	b1 49 00 00 	sth     r10,0(r9)
    return checked;
1000a680:	3d 20 10 03 	lis     r9,4099
1000a684:	81 29 dc 78 	lwz     r9,-9096(r9)
    }
1000a688:	7d 23 4b 78 	mr      r3,r9
1000a68c:	39 7f 14 40 	addi    r11,r31,5184
1000a690:	80 0b 00 04 	lwz     r0,4(r11)
1000a694:	7c 08 03 a6 	mtlr    r0
1000a698:	83 ab ff f4 	lwz     r29,-12(r11)
1000a69c:	83 cb ff f8 	lwz     r30,-8(r11)
1000a6a0:	83 eb ff fc 	lwz     r31,-4(r11)
1000a6a4:	7d 61 5b 78 	mr      r1,r11
1000a6a8:	4e 80 00 20 	blr

1000a6ac <httpd_get_conn>:


int
httpd_get_conn( httpd_server* hs, int listen_fd, httpd_conn* hc )
    {
1000a6ac:	94 21 ff 50 	stwu    r1,-176(r1)
1000a6b0:	7c 08 02 a6 	mflr    r0
1000a6b4:	90 01 00 b4 	stw     r0,180(r1)
1000a6b8:	93 c1 00 a8 	stw     r30,168(r1)
1000a6bc:	93 e1 00 ac 	stw     r31,172(r1)
1000a6c0:	7c 3f 0b 78 	mr      r31,r1
1000a6c4:	90 7f 00 98 	stw     r3,152(r31)
1000a6c8:	90 9f 00 9c 	stw     r4,156(r31)
1000a6cc:	90 bf 00 a0 	stw     r5,160(r31)
    httpd_sockaddr sa;
    socklen_t sz;

    if ( ! hc->initialized )
1000a6d0:	81 3f 00 a0 	lwz     r9,160(r31)
1000a6d4:	81 29 00 00 	lwz     r9,0(r9)
1000a6d8:	2f 89 00 00 	cmpwi   cr7,r9,0
1000a6dc:	40 9e 02 78 	bne     cr7,1000a954 <httpd_get_conn+0x2a8>
	{
	hc->read_size = 0;
1000a6e0:	81 3f 00 a0 	lwz     r9,160(r31)
1000a6e4:	39 40 00 00 	li      r10,0
1000a6e8:	91 49 00 8c 	stw     r10,140(r9)
	httpd_realloc_str( &hc->read_buf, &hc->read_size, 500 );
1000a6ec:	81 3f 00 a0 	lwz     r9,160(r31)
1000a6f0:	39 49 00 88 	addi    r10,r9,136
1000a6f4:	81 3f 00 a0 	lwz     r9,160(r31)
1000a6f8:	39 29 00 8c 	addi    r9,r9,140
1000a6fc:	7d 43 53 78 	mr      r3,r10
1000a700:	7d 24 4b 78 	mr      r4,r9
1000a704:	38 a0 01 f4 	li      r5,500
1000a708:	4b ff dc 11 	bl      10008318 <httpd_realloc_str>
	hc->maxdecodedurl =
	    hc->maxorigfilename = hc->maxexpnfilename = hc->maxencodings =
	    hc->maxpathinfo = hc->maxquery = hc->maxaccept =
	    hc->maxaccepte = hc->maxreqhost = hc->maxhostdir =
	    hc->maxremoteuser = hc->maxresponse = 0;
1000a70c:	81 3f 00 a0 	lwz     r9,160(r31)
1000a710:	39 40 00 00 	li      r10,0
1000a714:	91 49 01 2c 	stw     r10,300(r9)
1000a718:	81 3f 00 a0 	lwz     r9,160(r31)
1000a71c:	81 49 01 2c 	lwz     r10,300(r9)
1000a720:	81 3f 00 a0 	lwz     r9,160(r31)
1000a724:	91 49 01 28 	stw     r10,296(r9)
1000a728:	81 3f 00 a0 	lwz     r9,160(r31)
1000a72c:	81 49 01 28 	lwz     r10,296(r9)
	hc->read_size = 0;
	httpd_realloc_str( &hc->read_buf, &hc->read_size, 500 );
	hc->maxdecodedurl =
	    hc->maxorigfilename = hc->maxexpnfilename = hc->maxencodings =
	    hc->maxpathinfo = hc->maxquery = hc->maxaccept =
	    hc->maxaccepte = hc->maxreqhost = hc->maxhostdir =
1000a730:	81 3f 00 a0 	lwz     r9,160(r31)
1000a734:	91 49 01 24 	stw     r10,292(r9)
1000a738:	81 3f 00 a0 	lwz     r9,160(r31)
1000a73c:	81 49 01 24 	lwz     r10,292(r9)
1000a740:	81 3f 00 a0 	lwz     r9,160(r31)
1000a744:	91 49 01 20 	stw     r10,288(r9)
1000a748:	81 3f 00 a0 	lwz     r9,160(r31)
1000a74c:	81 49 01 20 	lwz     r10,288(r9)
1000a750:	81 3f 00 a0 	lwz     r9,160(r31)
1000a754:	91 49 01 1c 	stw     r10,284(r9)
1000a758:	81 3f 00 a0 	lwz     r9,160(r31)
1000a75c:	81 49 01 1c 	lwz     r10,284(r9)
	{
	hc->read_size = 0;
	httpd_realloc_str( &hc->read_buf, &hc->read_size, 500 );
	hc->maxdecodedurl =
	    hc->maxorigfilename = hc->maxexpnfilename = hc->maxencodings =
	    hc->maxpathinfo = hc->maxquery = hc->maxaccept =
1000a760:	81 3f 00 a0 	lwz     r9,160(r31)
1000a764:	91 49 01 18 	stw     r10,280(r9)
1000a768:	81 3f 00 a0 	lwz     r9,160(r31)
1000a76c:	81 49 01 18 	lwz     r10,280(r9)
1000a770:	81 3f 00 a0 	lwz     r9,160(r31)
1000a774:	91 49 01 14 	stw     r10,276(r9)
1000a778:	81 3f 00 a0 	lwz     r9,160(r31)
1000a77c:	81 49 01 14 	lwz     r10,276(r9)
1000a780:	81 3f 00 a0 	lwz     r9,160(r31)
1000a784:	91 49 01 10 	stw     r10,272(r9)
1000a788:	81 3f 00 a0 	lwz     r9,160(r31)
1000a78c:	81 49 01 10 	lwz     r10,272(r9)
    if ( ! hc->initialized )
	{
	hc->read_size = 0;
	httpd_realloc_str( &hc->read_buf, &hc->read_size, 500 );
	hc->maxdecodedurl =
	    hc->maxorigfilename = hc->maxexpnfilename = hc->maxencodings =
1000a790:	81 3f 00 a0 	lwz     r9,160(r31)
1000a794:	91 49 01 0c 	stw     r10,268(r9)
1000a798:	81 3f 00 a0 	lwz     r9,160(r31)
1000a79c:	81 49 01 0c 	lwz     r10,268(r9)
1000a7a0:	81 3f 00 a0 	lwz     r9,160(r31)
1000a7a4:	91 49 01 08 	stw     r10,264(r9)
1000a7a8:	81 3f 00 a0 	lwz     r9,160(r31)
1000a7ac:	81 49 01 08 	lwz     r10,264(r9)
1000a7b0:	81 3f 00 a0 	lwz     r9,160(r31)
1000a7b4:	91 49 01 04 	stw     r10,260(r9)
1000a7b8:	81 3f 00 a0 	lwz     r9,160(r31)
1000a7bc:	81 49 01 04 	lwz     r10,260(r9)

    if ( ! hc->initialized )
	{
	hc->read_size = 0;
	httpd_realloc_str( &hc->read_buf, &hc->read_size, 500 );
	hc->maxdecodedurl =
1000a7c0:	81 3f 00 a0 	lwz     r9,160(r31)
1000a7c4:	91 49 01 00 	stw     r10,256(r9)
	    hc->maxaccepte = hc->maxreqhost = hc->maxhostdir =
	    hc->maxremoteuser = hc->maxresponse = 0;
#ifdef TILDE_MAP_2
	hc->maxaltdir = 0;
#endif /* TILDE_MAP_2 */
	httpd_realloc_str( &hc->decodedurl, &hc->maxdecodedurl, 1 );
1000a7c8:	81 3f 00 a0 	lwz     r9,160(r31)
1000a7cc:	39 49 00 b0 	addi    r10,r9,176
1000a7d0:	81 3f 00 a0 	lwz     r9,160(r31)
1000a7d4:	39 29 01 00 	addi    r9,r9,256
1000a7d8:	7d 43 53 78 	mr      r3,r10
1000a7dc:	7d 24 4b 78 	mr      r4,r9
1000a7e0:	38 a0 00 01 	li      r5,1
1000a7e4:	4b ff db 35 	bl      10008318 <httpd_realloc_str>
	httpd_realloc_str( &hc->origfilename, &hc->maxorigfilename, 1 );
1000a7e8:	81 3f 00 a0 	lwz     r9,160(r31)
1000a7ec:	39 49 00 b8 	addi    r10,r9,184
1000a7f0:	81 3f 00 a0 	lwz     r9,160(r31)
1000a7f4:	39 29 01 04 	addi    r9,r9,260
1000a7f8:	7d 43 53 78 	mr      r3,r10
1000a7fc:	7d 24 4b 78 	mr      r4,r9
1000a800:	38 a0 00 01 	li      r5,1
1000a804:	4b ff db 15 	bl      10008318 <httpd_realloc_str>
	httpd_realloc_str( &hc->expnfilename, &hc->maxexpnfilename, 0 );
1000a808:	81 3f 00 a0 	lwz     r9,160(r31)
1000a80c:	39 49 00 bc 	addi    r10,r9,188
1000a810:	81 3f 00 a0 	lwz     r9,160(r31)
1000a814:	39 29 01 08 	addi    r9,r9,264
1000a818:	7d 43 53 78 	mr      r3,r10
1000a81c:	7d 24 4b 78 	mr      r4,r9
1000a820:	38 a0 00 00 	li      r5,0
1000a824:	4b ff da f5 	bl      10008318 <httpd_realloc_str>
	httpd_realloc_str( &hc->encodings, &hc->maxencodings, 0 );
1000a828:	81 3f 00 a0 	lwz     r9,160(r31)
1000a82c:	39 49 00 c0 	addi    r10,r9,192
1000a830:	81 3f 00 a0 	lwz     r9,160(r31)
1000a834:	39 29 01 0c 	addi    r9,r9,268
1000a838:	7d 43 53 78 	mr      r3,r10
1000a83c:	7d 24 4b 78 	mr      r4,r9
1000a840:	38 a0 00 00 	li      r5,0
1000a844:	4b ff da d5 	bl      10008318 <httpd_realloc_str>
	httpd_realloc_str( &hc->pathinfo, &hc->maxpathinfo, 0 );
1000a848:	81 3f 00 a0 	lwz     r9,160(r31)
1000a84c:	39 49 00 c4 	addi    r10,r9,196
1000a850:	81 3f 00 a0 	lwz     r9,160(r31)
1000a854:	39 29 01 10 	addi    r9,r9,272
1000a858:	7d 43 53 78 	mr      r3,r10
1000a85c:	7d 24 4b 78 	mr      r4,r9
1000a860:	38 a0 00 00 	li      r5,0
1000a864:	4b ff da b5 	bl      10008318 <httpd_realloc_str>
	httpd_realloc_str( &hc->query, &hc->maxquery, 0 );
1000a868:	81 3f 00 a0 	lwz     r9,160(r31)
1000a86c:	39 49 00 c8 	addi    r10,r9,200
1000a870:	81 3f 00 a0 	lwz     r9,160(r31)
1000a874:	39 29 01 14 	addi    r9,r9,276
1000a878:	7d 43 53 78 	mr      r3,r10
1000a87c:	7d 24 4b 78 	mr      r4,r9
1000a880:	38 a0 00 00 	li      r5,0
1000a884:	4b ff da 95 	bl      10008318 <httpd_realloc_str>
	httpd_realloc_str( &hc->accept, &hc->maxaccept, 0 );
1000a888:	81 3f 00 a0 	lwz     r9,160(r31)
1000a88c:	39 49 00 d4 	addi    r10,r9,212
1000a890:	81 3f 00 a0 	lwz     r9,160(r31)
1000a894:	39 29 01 18 	addi    r9,r9,280
1000a898:	7d 43 53 78 	mr      r3,r10
1000a89c:	7d 24 4b 78 	mr      r4,r9
1000a8a0:	38 a0 00 00 	li      r5,0
1000a8a4:	4b ff da 75 	bl      10008318 <httpd_realloc_str>
	httpd_realloc_str( &hc->accepte, &hc->maxaccepte, 0 );
1000a8a8:	81 3f 00 a0 	lwz     r9,160(r31)
1000a8ac:	39 49 00 d8 	addi    r10,r9,216
1000a8b0:	81 3f 00 a0 	lwz     r9,160(r31)
1000a8b4:	39 29 01 1c 	addi    r9,r9,284
1000a8b8:	7d 43 53 78 	mr      r3,r10
1000a8bc:	7d 24 4b 78 	mr      r4,r9
1000a8c0:	38 a0 00 00 	li      r5,0
1000a8c4:	4b ff da 55 	bl      10008318 <httpd_realloc_str>
	httpd_realloc_str( &hc->reqhost, &hc->maxreqhost, 0 );
1000a8c8:	81 3f 00 a0 	lwz     r9,160(r31)
1000a8cc:	39 49 00 e8 	addi    r10,r9,232
1000a8d0:	81 3f 00 a0 	lwz     r9,160(r31)
1000a8d4:	39 29 01 20 	addi    r9,r9,288
1000a8d8:	7d 43 53 78 	mr      r3,r10
1000a8dc:	7d 24 4b 78 	mr      r4,r9
1000a8e0:	38 a0 00 00 	li      r5,0
1000a8e4:	4b ff da 35 	bl      10008318 <httpd_realloc_str>
	httpd_realloc_str( &hc->hostdir, &hc->maxhostdir, 0 );
1000a8e8:	81 3f 00 a0 	lwz     r9,160(r31)
1000a8ec:	39 49 00 f0 	addi    r10,r9,240
1000a8f0:	81 3f 00 a0 	lwz     r9,160(r31)
1000a8f4:	39 29 01 24 	addi    r9,r9,292
1000a8f8:	7d 43 53 78 	mr      r3,r10
1000a8fc:	7d 24 4b 78 	mr      r4,r9
1000a900:	38 a0 00 00 	li      r5,0
1000a904:	4b ff da 15 	bl      10008318 <httpd_realloc_str>
	httpd_realloc_str( &hc->remoteuser, &hc->maxremoteuser, 0 );
1000a908:	81 3f 00 a0 	lwz     r9,160(r31)
1000a90c:	39 49 00 f8 	addi    r10,r9,248
1000a910:	81 3f 00 a0 	lwz     r9,160(r31)
1000a914:	39 29 01 28 	addi    r9,r9,296
1000a918:	7d 43 53 78 	mr      r3,r10
1000a91c:	7d 24 4b 78 	mr      r4,r9
1000a920:	38 a0 00 00 	li      r5,0
1000a924:	4b ff d9 f5 	bl      10008318 <httpd_realloc_str>
	httpd_realloc_str( &hc->response, &hc->maxresponse, 0 );
1000a928:	81 3f 00 a0 	lwz     r9,160(r31)
1000a92c:	39 49 00 fc 	addi    r10,r9,252
1000a930:	81 3f 00 a0 	lwz     r9,160(r31)
1000a934:	39 29 01 2c 	addi    r9,r9,300
1000a938:	7d 43 53 78 	mr      r3,r10
1000a93c:	7d 24 4b 78 	mr      r4,r9
1000a940:	38 a0 00 00 	li      r5,0
1000a944:	4b ff d9 d5 	bl      10008318 <httpd_realloc_str>
#ifdef TILDE_MAP_2
	httpd_realloc_str( &hc->altdir, &hc->maxaltdir, 0 );
#endif /* TILDE_MAP_2 */
	hc->initialized = 1;
1000a948:	81 3f 00 a0 	lwz     r9,160(r31)
1000a94c:	39 40 00 01 	li      r10,1
1000a950:	91 49 00 00 	stw     r10,0(r9)
	}

    /* Accept the new connection. */
    sz = sizeof(sa);
1000a954:	39 20 00 80 	li      r9,128
1000a958:	91 3f 00 88 	stw     r9,136(r31)
    hc->conn_fd = accept( listen_fd, &sa.sa, &sz );
1000a95c:	39 3f 00 88 	addi    r9,r31,136
1000a960:	80 7f 00 9c 	lwz     r3,156(r31)
1000a964:	39 5f 00 08 	addi    r10,r31,8
1000a968:	7d 44 53 78 	mr      r4,r10
1000a96c:	7d 25 4b 78 	mr      r5,r9
1000a970:	48 02 2b b5 	bl      1002d524 <accept@plt>
1000a974:	7c 6a 1b 78 	mr      r10,r3
1000a978:	81 3f 00 a0 	lwz     r9,160(r31)
1000a97c:	91 49 01 c0 	stw     r10,448(r9)
    if ( hc->conn_fd < 0 )
1000a980:	81 3f 00 a0 	lwz     r9,160(r31)
1000a984:	81 29 01 c0 	lwz     r9,448(r9)
1000a988:	2f 89 00 00 	cmpwi   cr7,r9,0
1000a98c:	40 9c 00 50 	bge     cr7,1000a9dc <httpd_get_conn+0x330>
	{
	if ( errno == EWOULDBLOCK )
1000a990:	48 02 2d 4d 	bl      1002d6dc <__errno_location@plt>
1000a994:	7c 69 1b 78 	mr      r9,r3
1000a998:	81 29 00 00 	lwz     r9,0(r9)
1000a99c:	2f 89 00 0b 	cmpwi   cr7,r9,11
1000a9a0:	40 9e 00 0c 	bne     cr7,1000a9ac <httpd_get_conn+0x300>
	    return GC_NO_MORE;
1000a9a4:	39 20 00 02 	li      r9,2
1000a9a8:	48 00 03 50 	b       1000acf8 <httpd_get_conn+0x64c>
	/* ECONNABORTED means the connection was closed by the client while
	** it was waiting in the listen queue.  It's not worth logging.
	*/
	if ( errno != ECONNABORTED )
1000a9ac:	48 02 2d 31 	bl      1002d6dc <__errno_location@plt>
1000a9b0:	7c 69 1b 78 	mr      r9,r3
1000a9b4:	81 29 00 00 	lwz     r9,0(r9)
1000a9b8:	2f 89 00 67 	cmpwi   cr7,r9,103
1000a9bc:	41 9e 00 18 	beq     cr7,1000a9d4 <httpd_get_conn+0x328>
	    syslog( LOG_ERR, "accept - %m" );
1000a9c0:	38 60 00 03 	li      r3,3
1000a9c4:	3d 20 10 02 	lis     r9,4098
1000a9c8:	38 89 92 c8 	addi    r4,r9,-27960
1000a9cc:	4c c6 31 82 	crclr   4*cr1+eq
1000a9d0:	48 02 2d b5 	bl      1002d784 <syslog@plt>
	return GC_FAIL;
1000a9d4:	39 20 00 00 	li      r9,0
1000a9d8:	48 00 03 20 	b       1000acf8 <httpd_get_conn+0x64c>
	}
    if ( ! sockaddr_check( &sa ) )
1000a9dc:	39 3f 00 08 	addi    r9,r31,8
1000a9e0:	7d 23 4b 78 	mr      r3,r9
1000a9e4:	48 00 6a c1 	bl      100114a4 <sockaddr_check>
1000a9e8:	7c 69 1b 78 	mr      r9,r3
1000a9ec:	2f 89 00 00 	cmpwi   cr7,r9,0
1000a9f0:	40 9e 00 3c 	bne     cr7,1000aa2c <httpd_get_conn+0x380>
	{
	syslog( LOG_ERR, "unknown sockaddr family" );
1000a9f4:	38 60 00 03 	li      r3,3
1000a9f8:	3d 20 10 02 	lis     r9,4098
1000a9fc:	38 89 92 d4 	addi    r4,r9,-27948
1000aa00:	4c c6 31 82 	crclr   4*cr1+eq
1000aa04:	48 02 2d 81 	bl      1002d784 <syslog@plt>
	close( hc->conn_fd );
1000aa08:	81 3f 00 a0 	lwz     r9,160(r31)
1000aa0c:	81 29 01 c0 	lwz     r9,448(r9)
1000aa10:	7d 23 4b 78 	mr      r3,r9
1000aa14:	48 02 2d f9 	bl      1002d80c <close@plt>
	hc->conn_fd = -1;
1000aa18:	81 3f 00 a0 	lwz     r9,160(r31)
1000aa1c:	39 40 ff ff 	li      r10,-1
1000aa20:	91 49 01 c0 	stw     r10,448(r9)
	return GC_FAIL;
1000aa24:	39 20 00 00 	li      r9,0
1000aa28:	48 00 02 d0 	b       1000acf8 <httpd_get_conn+0x64c>
	}
    (void) fcntl( hc->conn_fd, F_SETFD, 1 );
1000aa2c:	81 3f 00 a0 	lwz     r9,160(r31)
1000aa30:	81 29 01 c0 	lwz     r9,448(r9)
1000aa34:	7d 23 4b 78 	mr      r3,r9
1000aa38:	38 80 00 02 	li      r4,2
1000aa3c:	38 a0 00 01 	li      r5,1
1000aa40:	4c c6 31 82 	crclr   4*cr1+eq
1000aa44:	48 02 2c 51 	bl      1002d694 <fcntl@plt>
    hc->hs = hs;
1000aa48:	81 3f 00 a0 	lwz     r9,160(r31)
1000aa4c:	81 5f 00 98 	lwz     r10,152(r31)
1000aa50:	91 49 00 04 	stw     r10,4(r9)
    (void) memset( &hc->client_addr, 0, sizeof(hc->client_addr) );
1000aa54:	81 3f 00 a0 	lwz     r9,160(r31)
1000aa58:	39 29 00 08 	addi    r9,r9,8
1000aa5c:	7d 23 4b 78 	mr      r3,r9
1000aa60:	38 80 00 00 	li      r4,0
1000aa64:	38 a0 00 80 	li      r5,128
1000aa68:	48 02 2c 5d 	bl      1002d6c4 <memset@plt>
    (void) memmove( &hc->client_addr, &sa, sockaddr_len( &sa ) );
1000aa6c:	81 3f 00 a0 	lwz     r9,160(r31)
1000aa70:	3b c9 00 08 	addi    r30,r9,8
1000aa74:	39 3f 00 08 	addi    r9,r31,8
1000aa78:	7d 23 4b 78 	mr      r3,r9
1000aa7c:	48 00 6a 81 	bl      100114fc <sockaddr_len>
1000aa80:	7c 69 1b 78 	mr      r9,r3
1000aa84:	7f c3 f3 78 	mr      r3,r30
1000aa88:	39 5f 00 08 	addi    r10,r31,8
1000aa8c:	7d 44 53 78 	mr      r4,r10
1000aa90:	7d 25 4b 78 	mr      r5,r9
1000aa94:	48 02 29 91 	bl      1002d424 <memmove@plt>
    hc->read_idx = 0;
1000aa98:	81 3f 00 a0 	lwz     r9,160(r31)
1000aa9c:	39 40 00 00 	li      r10,0
1000aaa0:	91 49 00 90 	stw     r10,144(r9)
    hc->checked_idx = 0;
1000aaa4:	81 3f 00 a0 	lwz     r9,160(r31)
1000aaa8:	39 40 00 00 	li      r10,0
1000aaac:	91 49 00 94 	stw     r10,148(r9)
    hc->checked_state = CHST_FIRSTWORD;
1000aab0:	81 3f 00 a0 	lwz     r9,160(r31)
1000aab4:	39 40 00 00 	li      r10,0
1000aab8:	91 49 00 98 	stw     r10,152(r9)
    hc->method = METHOD_UNKNOWN;
1000aabc:	81 3f 00 a0 	lwz     r9,160(r31)
1000aac0:	39 40 00 00 	li      r10,0
1000aac4:	91 49 00 9c 	stw     r10,156(r9)
    hc->status = 0;
1000aac8:	81 3f 00 a0 	lwz     r9,160(r31)
1000aacc:	39 40 00 00 	li      r10,0
1000aad0:	91 49 00 a0 	stw     r10,160(r9)
    hc->bytes_to_send = 0;
1000aad4:	81 3f 00 a0 	lwz     r9,160(r31)
1000aad8:	39 40 00 00 	li      r10,0
1000aadc:	91 49 00 a4 	stw     r10,164(r9)
    hc->bytes_sent = 0;
1000aae0:	81 3f 00 a0 	lwz     r9,160(r31)
1000aae4:	39 40 00 00 	li      r10,0
1000aae8:	91 49 00 a8 	stw     r10,168(r9)
    hc->encodedurl = "";
1000aaec:	81 3f 00 a0 	lwz     r9,160(r31)
1000aaf0:	3d 40 10 02 	lis     r10,4098
1000aaf4:	39 4a 8e d4 	addi    r10,r10,-28972
1000aaf8:	91 49 00 ac 	stw     r10,172(r9)
    hc->decodedurl[0] = '\0';
1000aafc:	81 3f 00 a0 	lwz     r9,160(r31)
1000ab00:	81 29 00 b0 	lwz     r9,176(r9)
1000ab04:	39 40 00 00 	li      r10,0
1000ab08:	99 49 00 00 	stb     r10,0(r9)
    hc->protocol = "UNKNOWN";
1000ab0c:	81 3f 00 a0 	lwz     r9,160(r31)
1000ab10:	3d 40 10 02 	lis     r10,4098
1000ab14:	39 4a 92 4c 	addi    r10,r10,-28084
1000ab18:	91 49 00 b4 	stw     r10,180(r9)
    hc->origfilename[0] = '\0';
1000ab1c:	81 3f 00 a0 	lwz     r9,160(r31)
1000ab20:	81 29 00 b8 	lwz     r9,184(r9)
1000ab24:	39 40 00 00 	li      r10,0
1000ab28:	99 49 00 00 	stb     r10,0(r9)
    hc->expnfilename[0] = '\0';
1000ab2c:	81 3f 00 a0 	lwz     r9,160(r31)
1000ab30:	81 29 00 bc 	lwz     r9,188(r9)
1000ab34:	39 40 00 00 	li      r10,0
1000ab38:	99 49 00 00 	stb     r10,0(r9)
    hc->encodings[0] = '\0';
1000ab3c:	81 3f 00 a0 	lwz     r9,160(r31)
1000ab40:	81 29 00 c0 	lwz     r9,192(r9)
1000ab44:	39 40 00 00 	li      r10,0
1000ab48:	99 49 00 00 	stb     r10,0(r9)
    hc->pathinfo[0] = '\0';
1000ab4c:	81 3f 00 a0 	lwz     r9,160(r31)
1000ab50:	81 29 00 c4 	lwz     r9,196(r9)
1000ab54:	39 40 00 00 	li      r10,0
1000ab58:	99 49 00 00 	stb     r10,0(r9)
    hc->query[0] = '\0';
1000ab5c:	81 3f 00 a0 	lwz     r9,160(r31)
1000ab60:	81 29 00 c8 	lwz     r9,200(r9)
1000ab64:	39 40 00 00 	li      r10,0
1000ab68:	99 49 00 00 	stb     r10,0(r9)
    hc->referrer = "";
1000ab6c:	81 3f 00 a0 	lwz     r9,160(r31)
1000ab70:	3d 40 10 02 	lis     r10,4098
1000ab74:	39 4a 8e d4 	addi    r10,r10,-28972
1000ab78:	91 49 00 cc 	stw     r10,204(r9)
    hc->useragent = "";
1000ab7c:	81 3f 00 a0 	lwz     r9,160(r31)
1000ab80:	3d 40 10 02 	lis     r10,4098
1000ab84:	39 4a 8e d4 	addi    r10,r10,-28972
1000ab88:	91 49 00 d0 	stw     r10,208(r9)
    hc->accept[0] = '\0';
1000ab8c:	81 3f 00 a0 	lwz     r9,160(r31)
1000ab90:	81 29 00 d4 	lwz     r9,212(r9)
1000ab94:	39 40 00 00 	li      r10,0
1000ab98:	99 49 00 00 	stb     r10,0(r9)
    hc->accepte[0] = '\0';
1000ab9c:	81 3f 00 a0 	lwz     r9,160(r31)
1000aba0:	81 29 00 d8 	lwz     r9,216(r9)
1000aba4:	39 40 00 00 	li      r10,0
1000aba8:	99 49 00 00 	stb     r10,0(r9)
    hc->acceptl = "";
1000abac:	81 3f 00 a0 	lwz     r9,160(r31)
1000abb0:	3d 40 10 02 	lis     r10,4098
1000abb4:	39 4a 8e d4 	addi    r10,r10,-28972
1000abb8:	91 49 00 dc 	stw     r10,220(r9)
    hc->cookie = "";
1000abbc:	81 3f 00 a0 	lwz     r9,160(r31)
1000abc0:	3d 40 10 02 	lis     r10,4098
1000abc4:	39 4a 8e d4 	addi    r10,r10,-28972
1000abc8:	91 49 00 e0 	stw     r10,224(r9)
    hc->contenttype = "";
1000abcc:	81 3f 00 a0 	lwz     r9,160(r31)
1000abd0:	3d 40 10 02 	lis     r10,4098
1000abd4:	39 4a 8e d4 	addi    r10,r10,-28972
1000abd8:	91 49 00 e4 	stw     r10,228(r9)
    hc->reqhost[0] = '\0';
1000abdc:	81 3f 00 a0 	lwz     r9,160(r31)
1000abe0:	81 29 00 e8 	lwz     r9,232(r9)
1000abe4:	39 40 00 00 	li      r10,0
1000abe8:	99 49 00 00 	stb     r10,0(r9)
    hc->hdrhost = "";
1000abec:	81 3f 00 a0 	lwz     r9,160(r31)
1000abf0:	3d 40 10 02 	lis     r10,4098
1000abf4:	39 4a 8e d4 	addi    r10,r10,-28972
1000abf8:	91 49 00 ec 	stw     r10,236(r9)
    hc->hostdir[0] = '\0';
1000abfc:	81 3f 00 a0 	lwz     r9,160(r31)
1000ac00:	81 29 00 f0 	lwz     r9,240(r9)
1000ac04:	39 40 00 00 	li      r10,0
1000ac08:	99 49 00 00 	stb     r10,0(r9)
    hc->authorization = "";
1000ac0c:	81 3f 00 a0 	lwz     r9,160(r31)
1000ac10:	3d 40 10 02 	lis     r10,4098
1000ac14:	39 4a 8e d4 	addi    r10,r10,-28972
1000ac18:	91 49 00 f4 	stw     r10,244(r9)
    hc->remoteuser[0] = '\0';
1000ac1c:	81 3f 00 a0 	lwz     r9,160(r31)
1000ac20:	81 29 00 f8 	lwz     r9,248(r9)
1000ac24:	39 40 00 00 	li      r10,0
1000ac28:	99 49 00 00 	stb     r10,0(r9)
    hc->response[0] = '\0';
1000ac2c:	81 3f 00 a0 	lwz     r9,160(r31)
1000ac30:	81 29 00 fc 	lwz     r9,252(r9)
1000ac34:	39 40 00 00 	li      r10,0
1000ac38:	99 49 00 00 	stb     r10,0(r9)
#ifdef TILDE_MAP_2
    hc->altdir[0] = '\0';
#endif /* TILDE_MAP_2 */
    hc->responselen = 0;
1000ac3c:	81 3f 00 a0 	lwz     r9,160(r31)
1000ac40:	39 40 00 00 	li      r10,0
1000ac44:	91 49 01 30 	stw     r10,304(r9)
    hc->if_modified_since = (time_t) -1;
1000ac48:	81 3f 00 a0 	lwz     r9,160(r31)
1000ac4c:	39 40 ff ff 	li      r10,-1
1000ac50:	91 49 01 34 	stw     r10,308(r9)
    hc->range_if = (time_t) -1;
1000ac54:	81 3f 00 a0 	lwz     r9,160(r31)
1000ac58:	39 40 ff ff 	li      r10,-1
1000ac5c:	91 49 01 38 	stw     r10,312(r9)
    hc->contentlength = -1;
1000ac60:	81 3f 00 a0 	lwz     r9,160(r31)
1000ac64:	39 40 ff ff 	li      r10,-1
1000ac68:	91 49 01 3c 	stw     r10,316(r9)
    hc->type = "";
1000ac6c:	81 3f 00 a0 	lwz     r9,160(r31)
1000ac70:	3d 40 10 02 	lis     r10,4098
1000ac74:	39 4a 8e d4 	addi    r10,r10,-28972
1000ac78:	91 49 01 40 	stw     r10,320(r9)
    hc->hostname = (char*) 0;
1000ac7c:	81 3f 00 a0 	lwz     r9,160(r31)
1000ac80:	39 40 00 00 	li      r10,0
1000ac84:	91 49 01 44 	stw     r10,324(r9)
    hc->mime_flag = 1;
1000ac88:	81 3f 00 a0 	lwz     r9,160(r31)
1000ac8c:	39 40 00 01 	li      r10,1
1000ac90:	91 49 01 48 	stw     r10,328(r9)
    hc->one_one = 0;
1000ac94:	81 3f 00 a0 	lwz     r9,160(r31)
1000ac98:	39 40 00 00 	li      r10,0
1000ac9c:	91 49 01 4c 	stw     r10,332(r9)
    hc->got_range = 0;
1000aca0:	81 3f 00 a0 	lwz     r9,160(r31)
1000aca4:	39 40 00 00 	li      r10,0
1000aca8:	91 49 01 50 	stw     r10,336(r9)
    hc->tildemapped = 0;
1000acac:	81 3f 00 a0 	lwz     r9,160(r31)
1000acb0:	39 40 00 00 	li      r10,0
1000acb4:	91 49 01 54 	stw     r10,340(r9)
    hc->first_byte_index = 0;
1000acb8:	81 3f 00 a0 	lwz     r9,160(r31)
1000acbc:	39 40 00 00 	li      r10,0
1000acc0:	91 49 01 58 	stw     r10,344(r9)
    hc->last_byte_index = -1;
1000acc4:	81 3f 00 a0 	lwz     r9,160(r31)
1000acc8:	39 40 ff ff 	li      r10,-1
1000accc:	91 49 01 5c 	stw     r10,348(r9)
    hc->keep_alive = 0;
1000acd0:	81 3f 00 a0 	lwz     r9,160(r31)
1000acd4:	39 40 00 00 	li      r10,0
1000acd8:	91 49 01 60 	stw     r10,352(r9)
    hc->should_linger = 0;
1000acdc:	81 3f 00 a0 	lwz     r9,160(r31)
1000ace0:	39 40 00 00 	li      r10,0
1000ace4:	91 49 01 64 	stw     r10,356(r9)
    hc->file_address = (char*) 0;
1000ace8:	81 3f 00 a0 	lwz     r9,160(r31)
1000acec:	39 40 00 00 	li      r10,0
1000acf0:	91 49 01 c4 	stw     r10,452(r9)
    return GC_OK;
1000acf4:	39 20 00 01 	li      r9,1
    }
1000acf8:	7d 23 4b 78 	mr      r3,r9
1000acfc:	39 7f 00 b0 	addi    r11,r31,176
1000ad00:	80 0b 00 04 	lwz     r0,4(r11)
1000ad04:	7c 08 03 a6 	mtlr    r0
1000ad08:	83 cb ff f8 	lwz     r30,-8(r11)
1000ad0c:	83 eb ff fc 	lwz     r31,-4(r11)
1000ad10:	7d 61 5b 78 	mr      r1,r11
1000ad14:	4e 80 00 20 	blr

1000ad18 <httpd_got_request>:
** have checked so far; and hc->checked_state is the current state of the
** finite state machine.
*/
int
httpd_got_request( httpd_conn* hc )
    {
1000ad18:	94 21 ff d0 	stwu    r1,-48(r1)
1000ad1c:	93 e1 00 2c 	stw     r31,44(r1)
1000ad20:	7c 3f 0b 78 	mr      r31,r1
1000ad24:	90 7f 00 18 	stw     r3,24(r31)
    char c;

    for ( ; hc->checked_idx < hc->read_idx; ++hc->checked_idx )
1000ad28:	48 00 04 1c 	b       1000b144 <httpd_got_request+0x42c>
	{
	c = hc->read_buf[hc->checked_idx];
1000ad2c:	81 3f 00 18 	lwz     r9,24(r31)
1000ad30:	81 49 00 88 	lwz     r10,136(r9)
1000ad34:	81 3f 00 18 	lwz     r9,24(r31)
1000ad38:	81 29 00 94 	lwz     r9,148(r9)
1000ad3c:	7d 2a 4a 14 	add     r9,r10,r9
1000ad40:	89 29 00 00 	lbz     r9,0(r9)
1000ad44:	99 3f 00 08 	stb     r9,8(r31)
	switch ( hc->checked_state )
1000ad48:	81 3f 00 18 	lwz     r9,24(r31)
1000ad4c:	81 29 00 98 	lwz     r9,152(r9)
1000ad50:	2b 89 00 0b 	cmplwi  cr7,r9,11
1000ad54:	41 9d 03 dc 	bgt     cr7,1000b130 <httpd_got_request+0x418>
1000ad58:	55 2a 10 3a 	rlwinm  r10,r9,2,0,29
1000ad5c:	3d 20 10 02 	lis     r9,4098
1000ad60:	39 29 92 ec 	addi    r9,r9,-27924
1000ad64:	7d 2a 4a 14 	add     r9,r10,r9
1000ad68:	81 49 00 00 	lwz     r10,0(r9)
1000ad6c:	3d 20 10 02 	lis     r9,4098
1000ad70:	39 29 92 ec 	addi    r9,r9,-27924
1000ad74:	7d 2a 4a 14 	add     r9,r10,r9
1000ad78:	7d 29 03 a6 	mtctr   r9
1000ad7c:	4e 80 04 20 	bctr
	    {
	    case CHST_FIRSTWORD:
	    switch ( c )
1000ad80:	89 3f 00 08 	lbz     r9,8(r31)
1000ad84:	55 29 06 3e 	clrlwi  r9,r9,24
1000ad88:	2f 89 00 0a 	cmpwi   cr7,r9,10
1000ad8c:	41 9e 00 40 	beq     cr7,1000adcc <httpd_got_request+0xb4>
1000ad90:	2f 89 00 0a 	cmpwi   cr7,r9,10
1000ad94:	41 9d 00 10 	bgt     cr7,1000ada4 <httpd_got_request+0x8c>
1000ad98:	2f 89 00 09 	cmpwi   cr7,r9,9
1000ad9c:	41 9e 00 1c 	beq     cr7,1000adb8 <httpd_got_request+0xa0>
		break;
		case '\012': case '\015':
		hc->checked_state = CHST_BOGUS;
		return GR_BAD_REQUEST;
		}
	    break;
1000ada0:	48 00 03 90 	b       1000b130 <httpd_got_request+0x418>
	{
	c = hc->read_buf[hc->checked_idx];
	switch ( hc->checked_state )
	    {
	    case CHST_FIRSTWORD:
	    switch ( c )
1000ada4:	2f 89 00 0d 	cmpwi   cr7,r9,13
1000ada8:	41 9e 00 24 	beq     cr7,1000adcc <httpd_got_request+0xb4>
1000adac:	2f 89 00 20 	cmpwi   cr7,r9,32
1000adb0:	41 9e 00 08 	beq     cr7,1000adb8 <httpd_got_request+0xa0>
		break;
		case '\012': case '\015':
		hc->checked_state = CHST_BOGUS;
		return GR_BAD_REQUEST;
		}
	    break;
1000adb4:	48 00 03 7c 	b       1000b130 <httpd_got_request+0x418>
	    {
	    case CHST_FIRSTWORD:
	    switch ( c )
		{
		case ' ': case '\t':
		hc->checked_state = CHST_FIRSTWS;
1000adb8:	81 3f 00 18 	lwz     r9,24(r31)
1000adbc:	39 40 00 01 	li      r10,1
1000adc0:	91 49 00 98 	stw     r10,152(r9)
		break;
1000adc4:	60 00 00 00 	nop
		case '\012': case '\015':
		hc->checked_state = CHST_BOGUS;
		return GR_BAD_REQUEST;
		}
	    break;
1000adc8:	48 00 03 68 	b       1000b130 <httpd_got_request+0x418>
		{
		case ' ': case '\t':
		hc->checked_state = CHST_FIRSTWS;
		break;
		case '\012': case '\015':
		hc->checked_state = CHST_BOGUS;
1000adcc:	81 3f 00 18 	lwz     r9,24(r31)
1000add0:	39 40 00 0b 	li      r10,11
1000add4:	91 49 00 98 	stw     r10,152(r9)
		return GR_BAD_REQUEST;
1000add8:	39 20 00 02 	li      r9,2
1000addc:	48 00 03 84 	b       1000b160 <httpd_got_request+0x448>
		}
	    break;
	    case CHST_FIRSTWS:
	    switch ( c )
1000ade0:	89 3f 00 08 	lbz     r9,8(r31)
1000ade4:	55 29 06 3e 	clrlwi  r9,r9,24
1000ade8:	2f 89 00 0a 	cmpwi   cr7,r9,10
1000adec:	41 9e 00 2c 	beq     cr7,1000ae18 <httpd_got_request+0x100>
1000adf0:	2f 89 00 0a 	cmpwi   cr7,r9,10
1000adf4:	41 9d 00 10 	bgt     cr7,1000ae04 <httpd_got_request+0xec>
1000adf8:	2f 89 00 09 	cmpwi   cr7,r9,9
1000adfc:	41 9e 00 40 	beq     cr7,1000ae3c <httpd_got_request+0x124>
1000ae00:	48 00 00 2c 	b       1000ae2c <httpd_got_request+0x114>
1000ae04:	2f 89 00 0d 	cmpwi   cr7,r9,13
1000ae08:	41 9e 00 10 	beq     cr7,1000ae18 <httpd_got_request+0x100>
1000ae0c:	2f 89 00 20 	cmpwi   cr7,r9,32
1000ae10:	41 9e 00 2c 	beq     cr7,1000ae3c <httpd_got_request+0x124>
1000ae14:	48 00 00 18 	b       1000ae2c <httpd_got_request+0x114>
		{
		case ' ': case '\t':
		break;
		case '\012': case '\015':
		hc->checked_state = CHST_BOGUS;
1000ae18:	81 3f 00 18 	lwz     r9,24(r31)
1000ae1c:	39 40 00 0b 	li      r10,11
1000ae20:	91 49 00 98 	stw     r10,152(r9)
		return GR_BAD_REQUEST;
1000ae24:	39 20 00 02 	li      r9,2
1000ae28:	48 00 03 38 	b       1000b160 <httpd_got_request+0x448>
		default:
		hc->checked_state = CHST_SECONDWORD;
1000ae2c:	81 3f 00 18 	lwz     r9,24(r31)
1000ae30:	39 40 00 02 	li      r10,2
1000ae34:	91 49 00 98 	stw     r10,152(r9)
		break;
1000ae38:	48 00 00 08 	b       1000ae40 <httpd_got_request+0x128>
	    break;
	    case CHST_FIRSTWS:
	    switch ( c )
		{
		case ' ': case '\t':
		break;
1000ae3c:	60 00 00 00 	nop
		return GR_BAD_REQUEST;
		default:
		hc->checked_state = CHST_SECONDWORD;
		break;
		}
	    break;
1000ae40:	48 00 02 f0 	b       1000b130 <httpd_got_request+0x418>
	    case CHST_SECONDWORD:
	    switch ( c )
1000ae44:	89 3f 00 08 	lbz     r9,8(r31)
1000ae48:	55 29 06 3e 	clrlwi  r9,r9,24
1000ae4c:	2f 89 00 0a 	cmpwi   cr7,r9,10
1000ae50:	41 9e 00 40 	beq     cr7,1000ae90 <httpd_got_request+0x178>
1000ae54:	2f 89 00 0a 	cmpwi   cr7,r9,10
1000ae58:	41 9d 00 10 	bgt     cr7,1000ae68 <httpd_got_request+0x150>
1000ae5c:	2f 89 00 09 	cmpwi   cr7,r9,9
1000ae60:	41 9e 00 1c 	beq     cr7,1000ae7c <httpd_got_request+0x164>
		break;
		case '\012': case '\015':
		/* The first line has only two words - an HTTP/0.9 request. */
		return GR_GOT_REQUEST;
		}
	    break;
1000ae64:	48 00 02 cc 	b       1000b130 <httpd_got_request+0x418>
		hc->checked_state = CHST_SECONDWORD;
		break;
		}
	    break;
	    case CHST_SECONDWORD:
	    switch ( c )
1000ae68:	2f 89 00 0d 	cmpwi   cr7,r9,13
1000ae6c:	41 9e 00 24 	beq     cr7,1000ae90 <httpd_got_request+0x178>
1000ae70:	2f 89 00 20 	cmpwi   cr7,r9,32
1000ae74:	41 9e 00 08 	beq     cr7,1000ae7c <httpd_got_request+0x164>
		break;
		case '\012': case '\015':
		/* The first line has only two words - an HTTP/0.9 request. */
		return GR_GOT_REQUEST;
		}
	    break;
1000ae78:	48 00 02 b8 	b       1000b130 <httpd_got_request+0x418>
	    break;
	    case CHST_SECONDWORD:
	    switch ( c )
		{
		case ' ': case '\t':
		hc->checked_state = CHST_SECONDWS;
1000ae7c:	81 3f 00 18 	lwz     r9,24(r31)
1000ae80:	39 40 00 03 	li      r10,3
1000ae84:	91 49 00 98 	stw     r10,152(r9)
		break;
1000ae88:	60 00 00 00 	nop
		case '\012': case '\015':
		/* The first line has only two words - an HTTP/0.9 request. */
		return GR_GOT_REQUEST;
		}
	    break;
1000ae8c:	48 00 02 a4 	b       1000b130 <httpd_got_request+0x418>
		case ' ': case '\t':
		hc->checked_state = CHST_SECONDWS;
		break;
		case '\012': case '\015':
		/* The first line has only two words - an HTTP/0.9 request. */
		return GR_GOT_REQUEST;
1000ae90:	39 20 00 01 	li      r9,1
1000ae94:	48 00 02 cc 	b       1000b160 <httpd_got_request+0x448>
		}
	    break;
	    case CHST_SECONDWS:
	    switch ( c )
1000ae98:	89 3f 00 08 	lbz     r9,8(r31)
1000ae9c:	55 29 06 3e 	clrlwi  r9,r9,24
1000aea0:	2f 89 00 0a 	cmpwi   cr7,r9,10
1000aea4:	41 9e 00 2c 	beq     cr7,1000aed0 <httpd_got_request+0x1b8>
1000aea8:	2f 89 00 0a 	cmpwi   cr7,r9,10
1000aeac:	41 9d 00 10 	bgt     cr7,1000aebc <httpd_got_request+0x1a4>
1000aeb0:	2f 89 00 09 	cmpwi   cr7,r9,9
1000aeb4:	41 9e 00 40 	beq     cr7,1000aef4 <httpd_got_request+0x1dc>
1000aeb8:	48 00 00 2c 	b       1000aee4 <httpd_got_request+0x1cc>
1000aebc:	2f 89 00 0d 	cmpwi   cr7,r9,13
1000aec0:	41 9e 00 10 	beq     cr7,1000aed0 <httpd_got_request+0x1b8>
1000aec4:	2f 89 00 20 	cmpwi   cr7,r9,32
1000aec8:	41 9e 00 2c 	beq     cr7,1000aef4 <httpd_got_request+0x1dc>
1000aecc:	48 00 00 18 	b       1000aee4 <httpd_got_request+0x1cc>
		{
		case ' ': case '\t':
		break;
		case '\012': case '\015':
		hc->checked_state = CHST_BOGUS;
1000aed0:	81 3f 00 18 	lwz     r9,24(r31)
1000aed4:	39 40 00 0b 	li      r10,11
1000aed8:	91 49 00 98 	stw     r10,152(r9)
		return GR_BAD_REQUEST;
1000aedc:	39 20 00 02 	li      r9,2
1000aee0:	48 00 02 80 	b       1000b160 <httpd_got_request+0x448>
		default:
		hc->checked_state = CHST_THIRDWORD;
1000aee4:	81 3f 00 18 	lwz     r9,24(r31)
1000aee8:	39 40 00 04 	li      r10,4
1000aeec:	91 49 00 98 	stw     r10,152(r9)
		break;
1000aef0:	48 00 00 08 	b       1000aef8 <httpd_got_request+0x1e0>
	    break;
	    case CHST_SECONDWS:
	    switch ( c )
		{
		case ' ': case '\t':
		break;
1000aef4:	60 00 00 00 	nop
		return GR_BAD_REQUEST;
		default:
		hc->checked_state = CHST_THIRDWORD;
		break;
		}
	    break;
1000aef8:	48 00 02 38 	b       1000b130 <httpd_got_request+0x418>
	    case CHST_THIRDWORD:
	    switch ( c )
1000aefc:	89 3f 00 08 	lbz     r9,8(r31)
1000af00:	55 29 06 3e 	clrlwi  r9,r9,24
1000af04:	2f 89 00 0a 	cmpwi   cr7,r9,10
1000af08:	41 9e 00 3c 	beq     cr7,1000af44 <httpd_got_request+0x22c>
1000af0c:	2f 89 00 0a 	cmpwi   cr7,r9,10
1000af10:	41 9d 00 10 	bgt     cr7,1000af20 <httpd_got_request+0x208>
1000af14:	2f 89 00 09 	cmpwi   cr7,r9,9
1000af18:	41 9e 00 1c 	beq     cr7,1000af34 <httpd_got_request+0x21c>
		break;
		case '\015':
		hc->checked_state = CHST_CR;
		break;
		}
	    break;
1000af1c:	48 00 02 14 	b       1000b130 <httpd_got_request+0x418>
		hc->checked_state = CHST_THIRDWORD;
		break;
		}
	    break;
	    case CHST_THIRDWORD:
	    switch ( c )
1000af20:	2f 89 00 0d 	cmpwi   cr7,r9,13
1000af24:	41 9e 00 30 	beq     cr7,1000af54 <httpd_got_request+0x23c>
1000af28:	2f 89 00 20 	cmpwi   cr7,r9,32
1000af2c:	41 9e 00 08 	beq     cr7,1000af34 <httpd_got_request+0x21c>
		break;
		case '\015':
		hc->checked_state = CHST_CR;
		break;
		}
	    break;
1000af30:	48 00 02 00 	b       1000b130 <httpd_got_request+0x418>
	    break;
	    case CHST_THIRDWORD:
	    switch ( c )
		{
		case ' ': case '\t':
		hc->checked_state = CHST_THIRDWS;
1000af34:	81 3f 00 18 	lwz     r9,24(r31)
1000af38:	39 40 00 05 	li      r10,5
1000af3c:	91 49 00 98 	stw     r10,152(r9)
		break;
1000af40:	48 00 00 24 	b       1000af64 <httpd_got_request+0x24c>
		case '\012':
		hc->checked_state = CHST_LF;
1000af44:	81 3f 00 18 	lwz     r9,24(r31)
1000af48:	39 40 00 07 	li      r10,7
1000af4c:	91 49 00 98 	stw     r10,152(r9)
		break;
1000af50:	48 00 00 14 	b       1000af64 <httpd_got_request+0x24c>
		case '\015':
		hc->checked_state = CHST_CR;
1000af54:	81 3f 00 18 	lwz     r9,24(r31)
1000af58:	39 40 00 08 	li      r10,8
1000af5c:	91 49 00 98 	stw     r10,152(r9)
		break;
1000af60:	60 00 00 00 	nop
		}
	    break;
1000af64:	48 00 01 cc 	b       1000b130 <httpd_got_request+0x418>
	    case CHST_THIRDWS:
	    switch ( c )
1000af68:	89 3f 00 08 	lbz     r9,8(r31)
1000af6c:	55 29 06 3e 	clrlwi  r9,r9,24
1000af70:	2f 89 00 0a 	cmpwi   cr7,r9,10
1000af74:	41 9e 00 2c 	beq     cr7,1000afa0 <httpd_got_request+0x288>
1000af78:	2f 89 00 0a 	cmpwi   cr7,r9,10
1000af7c:	41 9d 00 10 	bgt     cr7,1000af8c <httpd_got_request+0x274>
1000af80:	2f 89 00 09 	cmpwi   cr7,r9,9
1000af84:	41 9e 00 50 	beq     cr7,1000afd4 <httpd_got_request+0x2bc>
1000af88:	48 00 00 38 	b       1000afc0 <httpd_got_request+0x2a8>
1000af8c:	2f 89 00 0d 	cmpwi   cr7,r9,13
1000af90:	41 9e 00 20 	beq     cr7,1000afb0 <httpd_got_request+0x298>
1000af94:	2f 89 00 20 	cmpwi   cr7,r9,32
1000af98:	41 9e 00 3c 	beq     cr7,1000afd4 <httpd_got_request+0x2bc>
1000af9c:	48 00 00 24 	b       1000afc0 <httpd_got_request+0x2a8>
		{
		case ' ': case '\t':
		break;
		case '\012':
		hc->checked_state = CHST_LF;
1000afa0:	81 3f 00 18 	lwz     r9,24(r31)
1000afa4:	39 40 00 07 	li      r10,7
1000afa8:	91 49 00 98 	stw     r10,152(r9)
		break;
1000afac:	48 00 00 2c 	b       1000afd8 <httpd_got_request+0x2c0>
		case '\015':
		hc->checked_state = CHST_CR;
1000afb0:	81 3f 00 18 	lwz     r9,24(r31)
1000afb4:	39 40 00 08 	li      r10,8
1000afb8:	91 49 00 98 	stw     r10,152(r9)
		break;
1000afbc:	48 00 00 1c 	b       1000afd8 <httpd_got_request+0x2c0>
		default:
		hc->checked_state = CHST_BOGUS;
1000afc0:	81 3f 00 18 	lwz     r9,24(r31)
1000afc4:	39 40 00 0b 	li      r10,11
1000afc8:	91 49 00 98 	stw     r10,152(r9)
		return GR_BAD_REQUEST;
1000afcc:	39 20 00 02 	li      r9,2
1000afd0:	48 00 01 90 	b       1000b160 <httpd_got_request+0x448>
	    break;
	    case CHST_THIRDWS:
	    switch ( c )
		{
		case ' ': case '\t':
		break;
1000afd4:	60 00 00 00 	nop
		break;
		default:
		hc->checked_state = CHST_BOGUS;
		return GR_BAD_REQUEST;
		}
	    break;
1000afd8:	48 00 01 58 	b       1000b130 <httpd_got_request+0x418>
	    case CHST_LINE:
	    switch ( c )
1000afdc:	89 3f 00 08 	lbz     r9,8(r31)
1000afe0:	55 29 06 3e 	clrlwi  r9,r9,24
1000afe4:	2f 89 00 0a 	cmpwi   cr7,r9,10
1000afe8:	41 9e 00 10 	beq     cr7,1000aff8 <httpd_got_request+0x2e0>
1000afec:	2f 89 00 0d 	cmpwi   cr7,r9,13
1000aff0:	41 9e 00 18 	beq     cr7,1000b008 <httpd_got_request+0x2f0>
		break;
		case '\015':
		hc->checked_state = CHST_CR;
		break;
		}
	    break;
1000aff4:	48 00 01 3c 	b       1000b130 <httpd_got_request+0x418>
	    break;
	    case CHST_LINE:
	    switch ( c )
		{
		case '\012':
		hc->checked_state = CHST_LF;
1000aff8:	81 3f 00 18 	lwz     r9,24(r31)
1000affc:	39 40 00 07 	li      r10,7
1000b000:	91 49 00 98 	stw     r10,152(r9)
		break;
1000b004:	48 00 00 14 	b       1000b018 <httpd_got_request+0x300>
		case '\015':
		hc->checked_state = CHST_CR;
1000b008:	81 3f 00 18 	lwz     r9,24(r31)
1000b00c:	39 40 00 08 	li      r10,8
1000b010:	91 49 00 98 	stw     r10,152(r9)
		break;
1000b014:	60 00 00 00 	nop
		}
	    break;
1000b018:	48 00 01 18 	b       1000b130 <httpd_got_request+0x418>
	    case CHST_LF:
	    switch ( c )
1000b01c:	89 3f 00 08 	lbz     r9,8(r31)
1000b020:	55 29 06 3e 	clrlwi  r9,r9,24
1000b024:	2f 89 00 0a 	cmpwi   cr7,r9,10
1000b028:	41 9e 00 10 	beq     cr7,1000b038 <httpd_got_request+0x320>
1000b02c:	2f 89 00 0d 	cmpwi   cr7,r9,13
1000b030:	41 9e 00 10 	beq     cr7,1000b040 <httpd_got_request+0x328>
1000b034:	48 00 00 1c 	b       1000b050 <httpd_got_request+0x338>
		{
		case '\012':
		/* Two newlines in a row - a blank line - end of request. */
		return GR_GOT_REQUEST;
1000b038:	39 20 00 01 	li      r9,1
1000b03c:	48 00 01 24 	b       1000b160 <httpd_got_request+0x448>
		case '\015':
		hc->checked_state = CHST_CR;
1000b040:	81 3f 00 18 	lwz     r9,24(r31)
1000b044:	39 40 00 08 	li      r10,8
1000b048:	91 49 00 98 	stw     r10,152(r9)
		break;
1000b04c:	48 00 00 14 	b       1000b060 <httpd_got_request+0x348>
		default:
		hc->checked_state = CHST_LINE;
1000b050:	81 3f 00 18 	lwz     r9,24(r31)
1000b054:	39 40 00 06 	li      r10,6
1000b058:	91 49 00 98 	stw     r10,152(r9)
		break;
1000b05c:	60 00 00 00 	nop
		}
	    break;
1000b060:	48 00 00 d0 	b       1000b130 <httpd_got_request+0x418>
	    case CHST_CR:
	    switch ( c )
1000b064:	89 3f 00 08 	lbz     r9,8(r31)
1000b068:	55 29 06 3e 	clrlwi  r9,r9,24
1000b06c:	2f 89 00 0a 	cmpwi   cr7,r9,10
1000b070:	41 9e 00 10 	beq     cr7,1000b080 <httpd_got_request+0x368>
1000b074:	2f 89 00 0d 	cmpwi   cr7,r9,13
1000b078:	41 9e 00 18 	beq     cr7,1000b090 <httpd_got_request+0x378>
1000b07c:	48 00 00 1c 	b       1000b098 <httpd_got_request+0x380>
		{
		case '\012':
		hc->checked_state = CHST_CRLF;
1000b080:	81 3f 00 18 	lwz     r9,24(r31)
1000b084:	39 40 00 09 	li      r10,9
1000b088:	91 49 00 98 	stw     r10,152(r9)
		break;
1000b08c:	48 00 00 1c 	b       1000b0a8 <httpd_got_request+0x390>
		case '\015':
		/* Two returns in a row - end of request. */
		return GR_GOT_REQUEST;
1000b090:	39 20 00 01 	li      r9,1
1000b094:	48 00 00 cc 	b       1000b160 <httpd_got_request+0x448>
		default:
		hc->checked_state = CHST_LINE;
1000b098:	81 3f 00 18 	lwz     r9,24(r31)
1000b09c:	39 40 00 06 	li      r10,6
1000b0a0:	91 49 00 98 	stw     r10,152(r9)
		break;
1000b0a4:	60 00 00 00 	nop
		}
	    break;
1000b0a8:	48 00 00 88 	b       1000b130 <httpd_got_request+0x418>
	    case CHST_CRLF:
	    switch ( c )
1000b0ac:	89 3f 00 08 	lbz     r9,8(r31)
1000b0b0:	55 29 06 3e 	clrlwi  r9,r9,24
1000b0b4:	2f 89 00 0a 	cmpwi   cr7,r9,10
1000b0b8:	41 9e 00 10 	beq     cr7,1000b0c8 <httpd_got_request+0x3b0>
1000b0bc:	2f 89 00 0d 	cmpwi   cr7,r9,13
1000b0c0:	41 9e 00 10 	beq     cr7,1000b0d0 <httpd_got_request+0x3b8>
1000b0c4:	48 00 00 1c 	b       1000b0e0 <httpd_got_request+0x3c8>
		{
		case '\012':
		/* Two newlines in a row - end of request. */
		return GR_GOT_REQUEST;
1000b0c8:	39 20 00 01 	li      r9,1
1000b0cc:	48 00 00 94 	b       1000b160 <httpd_got_request+0x448>
		case '\015':
		hc->checked_state = CHST_CRLFCR;
1000b0d0:	81 3f 00 18 	lwz     r9,24(r31)
1000b0d4:	39 40 00 0a 	li      r10,10
1000b0d8:	91 49 00 98 	stw     r10,152(r9)
		break;
1000b0dc:	48 00 00 14 	b       1000b0f0 <httpd_got_request+0x3d8>
		default:
		hc->checked_state = CHST_LINE;
1000b0e0:	81 3f 00 18 	lwz     r9,24(r31)
1000b0e4:	39 40 00 06 	li      r10,6
1000b0e8:	91 49 00 98 	stw     r10,152(r9)
		break;
1000b0ec:	60 00 00 00 	nop
		}
	    break;
1000b0f0:	48 00 00 40 	b       1000b130 <httpd_got_request+0x418>
	    case CHST_CRLFCR:
	    switch ( c )
1000b0f4:	89 3f 00 08 	lbz     r9,8(r31)
1000b0f8:	55 29 06 3e 	clrlwi  r9,r9,24
1000b0fc:	2f 89 00 0a 	cmpwi   cr7,r9,10
1000b100:	41 9e 00 0c 	beq     cr7,1000b10c <httpd_got_request+0x3f4>
1000b104:	2f 89 00 0d 	cmpwi   cr7,r9,13
1000b108:	40 9e 00 0c 	bne     cr7,1000b114 <httpd_got_request+0x3fc>
		{
		case '\012': case '\015':
		/* Two CRLFs or two CRs in a row - end of request. */
		return GR_GOT_REQUEST;
1000b10c:	39 20 00 01 	li      r9,1
1000b110:	48 00 00 50 	b       1000b160 <httpd_got_request+0x448>
		default:
		hc->checked_state = CHST_LINE;
1000b114:	81 3f 00 18 	lwz     r9,24(r31)
1000b118:	39 40 00 06 	li      r10,6
1000b11c:	91 49 00 98 	stw     r10,152(r9)
		break;
1000b120:	60 00 00 00 	nop
		}
	    break;
1000b124:	48 00 00 0c 	b       1000b130 <httpd_got_request+0x418>
	    case CHST_BOGUS:
	    return GR_BAD_REQUEST;
1000b128:	39 20 00 02 	li      r9,2
1000b12c:	48 00 00 34 	b       1000b160 <httpd_got_request+0x448>
int
httpd_got_request( httpd_conn* hc )
    {
    char c;

    for ( ; hc->checked_idx < hc->read_idx; ++hc->checked_idx )
1000b130:	81 3f 00 18 	lwz     r9,24(r31)
1000b134:	81 29 00 94 	lwz     r9,148(r9)
1000b138:	39 49 00 01 	addi    r10,r9,1
1000b13c:	81 3f 00 18 	lwz     r9,24(r31)
1000b140:	91 49 00 94 	stw     r10,148(r9)
1000b144:	81 3f 00 18 	lwz     r9,24(r31)
1000b148:	81 49 00 94 	lwz     r10,148(r9)
1000b14c:	81 3f 00 18 	lwz     r9,24(r31)
1000b150:	81 29 00 90 	lwz     r9,144(r9)
1000b154:	7f 8a 48 40 	cmplw   cr7,r10,r9
1000b158:	41 9c fb d4 	blt     cr7,1000ad2c <httpd_got_request+0x14>
	    break;
	    case CHST_BOGUS:
	    return GR_BAD_REQUEST;
	    }
	}
    return GR_NO_REQUEST;
1000b15c:	39 20 00 00 	li      r9,0
    }
1000b160:	7d 23 4b 78 	mr      r3,r9
1000b164:	39 7f 00 30 	addi    r11,r31,48
1000b168:	83 eb ff fc 	lwz     r31,-4(r11)
1000b16c:	7d 61 5b 78 	mr      r1,r11
1000b170:	4e 80 00 20 	blr

1000b174 <httpd_parse_request>:


int
httpd_parse_request( httpd_conn* hc )
    {
1000b174:	94 21 ff b0 	stwu    r1,-80(r1)
1000b178:	7c 08 02 a6 	mflr    r0
1000b17c:	90 01 00 54 	stw     r0,84(r1)
1000b180:	93 81 00 40 	stw     r28,64(r1)
1000b184:	93 a1 00 44 	stw     r29,68(r1)
1000b188:	93 c1 00 48 	stw     r30,72(r1)
1000b18c:	93 e1 00 4c 	stw     r31,76(r1)
1000b190:	7c 3f 0b 78 	mr      r31,r1
1000b194:	90 7f 00 38 	stw     r3,56(r31)
    char* reqhost;
    char* eol;
    char* cp;
    char* pi;

    hc->checked_idx = 0;	/* reset */
1000b198:	81 3f 00 38 	lwz     r9,56(r31)
1000b19c:	39 40 00 00 	li      r10,0
1000b1a0:	91 49 00 94 	stw     r10,148(r9)
    method_str = bufgets( hc );
1000b1a4:	80 7f 00 38 	lwz     r3,56(r31)
1000b1a8:	48 00 15 45 	bl      1000c6ec <bufgets>
1000b1ac:	90 7f 00 10 	stw     r3,16(r31)
    url = strpbrk( method_str, " \t\012\015" );
1000b1b0:	80 7f 00 10 	lwz     r3,16(r31)
1000b1b4:	3d 20 10 02 	lis     r9,4098
1000b1b8:	38 89 93 1c 	addi    r4,r9,-27876
1000b1bc:	48 02 25 91 	bl      1002d74c <strpbrk@plt>
1000b1c0:	90 7f 00 08 	stw     r3,8(r31)
    if ( url == (char*) 0 )
1000b1c4:	81 3f 00 08 	lwz     r9,8(r31)
1000b1c8:	2f 89 00 00 	cmpwi   cr7,r9,0
1000b1cc:	40 9e 00 40 	bne     cr7,1000b20c <httpd_parse_request+0x98>
	{
	httpd_send_err( hc, 400, httpd_err400title, "", httpd_err400form, "" );
1000b1d0:	3d 20 10 03 	lis     r9,4099
1000b1d4:	81 49 d3 38 	lwz     r10,-11464(r9)
1000b1d8:	3d 20 10 03 	lis     r9,4099
1000b1dc:	81 29 d3 3c 	lwz     r9,-11460(r9)
1000b1e0:	80 7f 00 38 	lwz     r3,56(r31)
1000b1e4:	38 80 01 90 	li      r4,400
1000b1e8:	7d 45 53 78 	mr      r5,r10
1000b1ec:	3d 40 10 02 	lis     r10,4098
1000b1f0:	38 ca 8e d4 	addi    r6,r10,-28972
1000b1f4:	7d 27 4b 78 	mr      r7,r9
1000b1f8:	3d 20 10 02 	lis     r9,4098
1000b1fc:	39 09 8e d4 	addi    r8,r9,-28972
1000b200:	4b ff d5 f5 	bl      100087f4 <httpd_send_err>
	return -1;
1000b204:	39 20 ff ff 	li      r9,-1
1000b208:	48 00 14 bc 	b       1000c6c4 <httpd_parse_request+0x1550>
	}
    *url++ = '\0';
1000b20c:	81 3f 00 08 	lwz     r9,8(r31)
1000b210:	39 49 00 01 	addi    r10,r9,1
1000b214:	91 5f 00 08 	stw     r10,8(r31)
1000b218:	39 40 00 00 	li      r10,0
1000b21c:	99 49 00 00 	stb     r10,0(r9)
    url += strspn( url, " \t\012\015" );
1000b220:	80 7f 00 08 	lwz     r3,8(r31)
1000b224:	3d 20 10 02 	lis     r9,4098
1000b228:	38 89 93 1c 	addi    r4,r9,-27876
1000b22c:	48 02 25 f1 	bl      1002d81c <strspn@plt>
1000b230:	7c 69 1b 78 	mr      r9,r3
1000b234:	81 5f 00 08 	lwz     r10,8(r31)
1000b238:	7d 2a 4a 14 	add     r9,r10,r9
1000b23c:	91 3f 00 08 	stw     r9,8(r31)
    protocol = strpbrk( url, " \t\012\015" );
1000b240:	80 7f 00 08 	lwz     r3,8(r31)
1000b244:	3d 20 10 02 	lis     r9,4098
1000b248:	38 89 93 1c 	addi    r4,r9,-27876
1000b24c:	48 02 25 01 	bl      1002d74c <strpbrk@plt>
1000b250:	90 7f 00 0c 	stw     r3,12(r31)
    if ( protocol == (char*) 0 )
1000b254:	81 3f 00 0c 	lwz     r9,12(r31)
1000b258:	2f 89 00 00 	cmpwi   cr7,r9,0
1000b25c:	40 9e 00 20 	bne     cr7,1000b27c <httpd_parse_request+0x108>
	{
	protocol = "HTTP/0.9";
1000b260:	3d 20 10 02 	lis     r9,4098
1000b264:	39 29 93 24 	addi    r9,r9,-27868
1000b268:	91 3f 00 0c 	stw     r9,12(r31)
	hc->mime_flag = 0;
1000b26c:	81 3f 00 38 	lwz     r9,56(r31)
1000b270:	39 40 00 00 	li      r10,0
1000b274:	91 49 01 48 	stw     r10,328(r9)
1000b278:	48 00 00 a0 	b       1000b318 <httpd_parse_request+0x1a4>
	}
    else
	{
	*protocol++ = '\0';
1000b27c:	81 3f 00 0c 	lwz     r9,12(r31)
1000b280:	39 49 00 01 	addi    r10,r9,1
1000b284:	91 5f 00 0c 	stw     r10,12(r31)
1000b288:	39 40 00 00 	li      r10,0
1000b28c:	99 49 00 00 	stb     r10,0(r9)
	protocol += strspn( protocol, " \t\012\015" );
1000b290:	80 7f 00 0c 	lwz     r3,12(r31)
1000b294:	3d 20 10 02 	lis     r9,4098
1000b298:	38 89 93 1c 	addi    r4,r9,-27876
1000b29c:	48 02 25 81 	bl      1002d81c <strspn@plt>
1000b2a0:	7c 69 1b 78 	mr      r9,r3
1000b2a4:	81 5f 00 0c 	lwz     r10,12(r31)
1000b2a8:	7d 2a 4a 14 	add     r9,r10,r9
1000b2ac:	91 3f 00 0c 	stw     r9,12(r31)
	if ( *protocol != '\0' )
1000b2b0:	81 3f 00 0c 	lwz     r9,12(r31)
1000b2b4:	89 29 00 00 	lbz     r9,0(r9)
1000b2b8:	55 29 06 3e 	clrlwi  r9,r9,24
1000b2bc:	2f 89 00 00 	cmpwi   cr7,r9,0
1000b2c0:	41 9e 00 58 	beq     cr7,1000b318 <httpd_parse_request+0x1a4>
	    {
	    eol = strpbrk( protocol, " \t\012\015" );
1000b2c4:	80 7f 00 0c 	lwz     r3,12(r31)
1000b2c8:	3d 20 10 02 	lis     r9,4098
1000b2cc:	38 89 93 1c 	addi    r4,r9,-27876
1000b2d0:	48 02 24 7d 	bl      1002d74c <strpbrk@plt>
1000b2d4:	90 7f 00 14 	stw     r3,20(r31)
	    if ( eol != (char*) 0 )
1000b2d8:	81 3f 00 14 	lwz     r9,20(r31)
1000b2dc:	2f 89 00 00 	cmpwi   cr7,r9,0
1000b2e0:	41 9e 00 10 	beq     cr7,1000b2f0 <httpd_parse_request+0x17c>
		*eol = '\0';
1000b2e4:	81 3f 00 14 	lwz     r9,20(r31)
1000b2e8:	39 40 00 00 	li      r10,0
1000b2ec:	99 49 00 00 	stb     r10,0(r9)
	    if ( strcasecmp( protocol, "HTTP/1.0" ) != 0 )
1000b2f0:	80 7f 00 0c 	lwz     r3,12(r31)
1000b2f4:	3d 20 10 02 	lis     r9,4098
1000b2f8:	38 89 93 30 	addi    r4,r9,-27856
1000b2fc:	48 02 23 89 	bl      1002d684 <strcasecmp@plt>
1000b300:	7c 69 1b 78 	mr      r9,r3
1000b304:	2f 89 00 00 	cmpwi   cr7,r9,0
1000b308:	41 9e 00 10 	beq     cr7,1000b318 <httpd_parse_request+0x1a4>
		hc->one_one = 1;
1000b30c:	81 3f 00 38 	lwz     r9,56(r31)
1000b310:	39 40 00 01 	li      r10,1
1000b314:	91 49 01 4c 	stw     r10,332(r9)
	    }
	}
    hc->protocol = protocol;
1000b318:	81 3f 00 38 	lwz     r9,56(r31)
1000b31c:	81 5f 00 0c 	lwz     r10,12(r31)
1000b320:	91 49 00 b4 	stw     r10,180(r9)

    /* Check for HTTP/1.1 absolute URL. */
    if ( strncasecmp( url, "http://", 7 ) == 0 )
1000b324:	80 7f 00 08 	lwz     r3,8(r31)
1000b328:	3d 20 10 02 	lis     r9,4098
1000b32c:	38 89 93 3c 	addi    r4,r9,-27844
1000b330:	38 a0 00 07 	li      r5,7
1000b334:	48 02 23 d1 	bl      1002d704 <strncasecmp@plt>
1000b338:	7c 69 1b 78 	mr      r9,r3
1000b33c:	2f 89 00 00 	cmpwi   cr7,r9,0
1000b340:	40 9e 01 74 	bne     cr7,1000b4b4 <httpd_parse_request+0x340>
	{
	if ( ! hc->one_one )
1000b344:	81 3f 00 38 	lwz     r9,56(r31)
1000b348:	81 29 01 4c 	lwz     r9,332(r9)
1000b34c:	2f 89 00 00 	cmpwi   cr7,r9,0
1000b350:	40 9e 00 40 	bne     cr7,1000b390 <httpd_parse_request+0x21c>
	    {
	    httpd_send_err( hc, 400, httpd_err400title, "", httpd_err400form, "" );
1000b354:	3d 20 10 03 	lis     r9,4099
1000b358:	81 49 d3 38 	lwz     r10,-11464(r9)
1000b35c:	3d 20 10 03 	lis     r9,4099
1000b360:	81 29 d3 3c 	lwz     r9,-11460(r9)
1000b364:	80 7f 00 38 	lwz     r3,56(r31)
1000b368:	38 80 01 90 	li      r4,400
1000b36c:	7d 45 53 78 	mr      r5,r10
1000b370:	3d 40 10 02 	lis     r10,4098
1000b374:	38 ca 8e d4 	addi    r6,r10,-28972
1000b378:	7d 27 4b 78 	mr      r7,r9
1000b37c:	3d 20 10 02 	lis     r9,4098
1000b380:	39 09 8e d4 	addi    r8,r9,-28972
1000b384:	4b ff d4 71 	bl      100087f4 <httpd_send_err>
	    return -1;
1000b388:	39 20 ff ff 	li      r9,-1
1000b38c:	48 00 13 38 	b       1000c6c4 <httpd_parse_request+0x1550>
	    }
	reqhost = url + 7;
1000b390:	81 3f 00 08 	lwz     r9,8(r31)
1000b394:	39 29 00 07 	addi    r9,r9,7
1000b398:	91 3f 00 18 	stw     r9,24(r31)
	url = strchr( reqhost, '/' );
1000b39c:	80 7f 00 18 	lwz     r3,24(r31)
1000b3a0:	38 80 00 2f 	li      r4,47
1000b3a4:	48 02 22 a1 	bl      1002d644 <strchr@plt>
1000b3a8:	90 7f 00 08 	stw     r3,8(r31)
	if ( url == (char*) 0 )
1000b3ac:	81 3f 00 08 	lwz     r9,8(r31)
1000b3b0:	2f 89 00 00 	cmpwi   cr7,r9,0
1000b3b4:	40 9e 00 40 	bne     cr7,1000b3f4 <httpd_parse_request+0x280>
	    {
	    httpd_send_err( hc, 400, httpd_err400title, "", httpd_err400form, "" );
1000b3b8:	3d 20 10 03 	lis     r9,4099
1000b3bc:	81 49 d3 38 	lwz     r10,-11464(r9)
1000b3c0:	3d 20 10 03 	lis     r9,4099
1000b3c4:	81 29 d3 3c 	lwz     r9,-11460(r9)
1000b3c8:	80 7f 00 38 	lwz     r3,56(r31)
1000b3cc:	38 80 01 90 	li      r4,400
1000b3d0:	7d 45 53 78 	mr      r5,r10
1000b3d4:	3d 40 10 02 	lis     r10,4098
1000b3d8:	38 ca 8e d4 	addi    r6,r10,-28972
1000b3dc:	7d 27 4b 78 	mr      r7,r9
1000b3e0:	3d 20 10 02 	lis     r9,4098
1000b3e4:	39 09 8e d4 	addi    r8,r9,-28972
1000b3e8:	4b ff d4 0d 	bl      100087f4 <httpd_send_err>
	    return -1;
1000b3ec:	39 20 ff ff 	li      r9,-1
1000b3f0:	48 00 12 d4 	b       1000c6c4 <httpd_parse_request+0x1550>
	    }
	*url = '\0';
1000b3f4:	81 3f 00 08 	lwz     r9,8(r31)
1000b3f8:	39 40 00 00 	li      r10,0
1000b3fc:	99 49 00 00 	stb     r10,0(r9)
	if ( strchr( reqhost, '/' ) != (char*) 0 || reqhost[0] == '.' )
1000b400:	80 7f 00 18 	lwz     r3,24(r31)
1000b404:	38 80 00 2f 	li      r4,47
1000b408:	48 02 22 3d 	bl      1002d644 <strchr@plt>
1000b40c:	7c 69 1b 78 	mr      r9,r3
1000b410:	2f 89 00 00 	cmpwi   cr7,r9,0
1000b414:	40 9e 00 18 	bne     cr7,1000b42c <httpd_parse_request+0x2b8>
1000b418:	81 3f 00 18 	lwz     r9,24(r31)
1000b41c:	89 29 00 00 	lbz     r9,0(r9)
1000b420:	55 29 06 3e 	clrlwi  r9,r9,24
1000b424:	2b 89 00 2e 	cmplwi  cr7,r9,46
1000b428:	40 9e 00 40 	bne     cr7,1000b468 <httpd_parse_request+0x2f4>
	    {
	    httpd_send_err( hc, 400, httpd_err400title, "", httpd_err400form, "" );
1000b42c:	3d 20 10 03 	lis     r9,4099
1000b430:	81 49 d3 38 	lwz     r10,-11464(r9)
1000b434:	3d 20 10 03 	lis     r9,4099
1000b438:	81 29 d3 3c 	lwz     r9,-11460(r9)
1000b43c:	80 7f 00 38 	lwz     r3,56(r31)
1000b440:	38 80 01 90 	li      r4,400
1000b444:	7d 45 53 78 	mr      r5,r10
1000b448:	3d 40 10 02 	lis     r10,4098
1000b44c:	38 ca 8e d4 	addi    r6,r10,-28972
1000b450:	7d 27 4b 78 	mr      r7,r9
1000b454:	3d 20 10 02 	lis     r9,4098
1000b458:	39 09 8e d4 	addi    r8,r9,-28972
1000b45c:	4b ff d3 99 	bl      100087f4 <httpd_send_err>
	    return -1;
1000b460:	39 20 ff ff 	li      r9,-1
1000b464:	48 00 12 60 	b       1000c6c4 <httpd_parse_request+0x1550>
	    }
	httpd_realloc_str( &hc->reqhost, &hc->maxreqhost, strlen( reqhost ) );
1000b468:	81 3f 00 38 	lwz     r9,56(r31)
1000b46c:	3b a9 00 e8 	addi    r29,r9,232
1000b470:	81 3f 00 38 	lwz     r9,56(r31)
1000b474:	3b c9 01 20 	addi    r30,r9,288
1000b478:	80 7f 00 18 	lwz     r3,24(r31)
1000b47c:	48 02 21 d9 	bl      1002d654 <strlen@plt>
1000b480:	7c 69 1b 78 	mr      r9,r3
1000b484:	7f a3 eb 78 	mr      r3,r29
1000b488:	7f c4 f3 78 	mr      r4,r30
1000b48c:	7d 25 4b 78 	mr      r5,r9
1000b490:	4b ff ce 89 	bl      10008318 <httpd_realloc_str>
	(void) strcpy( hc->reqhost, reqhost );
1000b494:	81 3f 00 38 	lwz     r9,56(r31)
1000b498:	81 29 00 e8 	lwz     r9,232(r9)
1000b49c:	7d 23 4b 78 	mr      r3,r9
1000b4a0:	80 9f 00 18 	lwz     r4,24(r31)
1000b4a4:	48 02 20 c1 	bl      1002d564 <strcpy@plt>
	*url = '/';
1000b4a8:	81 3f 00 08 	lwz     r9,8(r31)
1000b4ac:	39 40 00 2f 	li      r10,47
1000b4b0:	99 49 00 00 	stb     r10,0(r9)
	}

    if ( *url != '/' )
1000b4b4:	81 3f 00 08 	lwz     r9,8(r31)
1000b4b8:	89 29 00 00 	lbz     r9,0(r9)
1000b4bc:	55 29 06 3e 	clrlwi  r9,r9,24
1000b4c0:	2b 89 00 2f 	cmplwi  cr7,r9,47
1000b4c4:	41 9e 00 40 	beq     cr7,1000b504 <httpd_parse_request+0x390>
	{
	httpd_send_err( hc, 400, httpd_err400title, "", httpd_err400form, "" );
1000b4c8:	3d 20 10 03 	lis     r9,4099
1000b4cc:	81 49 d3 38 	lwz     r10,-11464(r9)
1000b4d0:	3d 20 10 03 	lis     r9,4099
1000b4d4:	81 29 d3 3c 	lwz     r9,-11460(r9)
1000b4d8:	80 7f 00 38 	lwz     r3,56(r31)
1000b4dc:	38 80 01 90 	li      r4,400
1000b4e0:	7d 45 53 78 	mr      r5,r10
1000b4e4:	3d 40 10 02 	lis     r10,4098
1000b4e8:	38 ca 8e d4 	addi    r6,r10,-28972
1000b4ec:	7d 27 4b 78 	mr      r7,r9
1000b4f0:	3d 20 10 02 	lis     r9,4098
1000b4f4:	39 09 8e d4 	addi    r8,r9,-28972
1000b4f8:	4b ff d2 fd 	bl      100087f4 <httpd_send_err>
	return -1;
1000b4fc:	39 20 ff ff 	li      r9,-1
1000b500:	48 00 11 c4 	b       1000c6c4 <httpd_parse_request+0x1550>
	}

    if ( strcasecmp( method_str, httpd_method_str( METHOD_GET ) ) == 0 )
1000b504:	38 60 00 01 	li      r3,1
1000b508:	4b ff e0 e1 	bl      100095e8 <httpd_method_str>
1000b50c:	7c 69 1b 78 	mr      r9,r3
1000b510:	80 7f 00 10 	lwz     r3,16(r31)
1000b514:	7d 24 4b 78 	mr      r4,r9
1000b518:	48 02 21 6d 	bl      1002d684 <strcasecmp@plt>
1000b51c:	7c 69 1b 78 	mr      r9,r3
1000b520:	2f 89 00 00 	cmpwi   cr7,r9,0
1000b524:	40 9e 00 14 	bne     cr7,1000b538 <httpd_parse_request+0x3c4>
	hc->method = METHOD_GET;
1000b528:	81 3f 00 38 	lwz     r9,56(r31)
1000b52c:	39 40 00 01 	li      r10,1
1000b530:	91 49 00 9c 	stw     r10,156(r9)
1000b534:	48 00 01 40 	b       1000b674 <httpd_parse_request+0x500>
    else if ( strcasecmp( method_str, httpd_method_str( METHOD_HEAD ) ) == 0 )
1000b538:	38 60 00 02 	li      r3,2
1000b53c:	4b ff e0 ad 	bl      100095e8 <httpd_method_str>
1000b540:	7c 69 1b 78 	mr      r9,r3
1000b544:	80 7f 00 10 	lwz     r3,16(r31)
1000b548:	7d 24 4b 78 	mr      r4,r9
1000b54c:	48 02 21 39 	bl      1002d684 <strcasecmp@plt>
1000b550:	7c 69 1b 78 	mr      r9,r3
1000b554:	2f 89 00 00 	cmpwi   cr7,r9,0
1000b558:	40 9e 00 14 	bne     cr7,1000b56c <httpd_parse_request+0x3f8>
	hc->method = METHOD_HEAD;
1000b55c:	81 3f 00 38 	lwz     r9,56(r31)
1000b560:	39 40 00 02 	li      r10,2
1000b564:	91 49 00 9c 	stw     r10,156(r9)
1000b568:	48 00 01 0c 	b       1000b674 <httpd_parse_request+0x500>
    else if ( strcasecmp( method_str, httpd_method_str( METHOD_POST ) ) == 0 )
1000b56c:	38 60 00 03 	li      r3,3
1000b570:	4b ff e0 79 	bl      100095e8 <httpd_method_str>
1000b574:	7c 69 1b 78 	mr      r9,r3
1000b578:	80 7f 00 10 	lwz     r3,16(r31)
1000b57c:	7d 24 4b 78 	mr      r4,r9
1000b580:	48 02 21 05 	bl      1002d684 <strcasecmp@plt>
1000b584:	7c 69 1b 78 	mr      r9,r3
1000b588:	2f 89 00 00 	cmpwi   cr7,r9,0
1000b58c:	40 9e 00 14 	bne     cr7,1000b5a0 <httpd_parse_request+0x42c>
	hc->method = METHOD_POST;
1000b590:	81 3f 00 38 	lwz     r9,56(r31)
1000b594:	39 40 00 03 	li      r10,3
1000b598:	91 49 00 9c 	stw     r10,156(r9)
1000b59c:	48 00 00 d8 	b       1000b674 <httpd_parse_request+0x500>
    else if ( strcasecmp( method_str, httpd_method_str( METHOD_PUT ) ) == 0 )
1000b5a0:	38 60 00 04 	li      r3,4
1000b5a4:	4b ff e0 45 	bl      100095e8 <httpd_method_str>
1000b5a8:	7c 69 1b 78 	mr      r9,r3
1000b5ac:	80 7f 00 10 	lwz     r3,16(r31)
1000b5b0:	7d 24 4b 78 	mr      r4,r9
1000b5b4:	48 02 20 d1 	bl      1002d684 <strcasecmp@plt>
1000b5b8:	7c 69 1b 78 	mr      r9,r3
1000b5bc:	2f 89 00 00 	cmpwi   cr7,r9,0
1000b5c0:	40 9e 00 14 	bne     cr7,1000b5d4 <httpd_parse_request+0x460>
	hc->method = METHOD_PUT;
1000b5c4:	81 3f 00 38 	lwz     r9,56(r31)
1000b5c8:	39 40 00 04 	li      r10,4
1000b5cc:	91 49 00 9c 	stw     r10,156(r9)
1000b5d0:	48 00 00 a4 	b       1000b674 <httpd_parse_request+0x500>
    else if ( strcasecmp( method_str, httpd_method_str( METHOD_DELETE ) ) == 0 )
1000b5d4:	38 60 00 05 	li      r3,5
1000b5d8:	4b ff e0 11 	bl      100095e8 <httpd_method_str>
1000b5dc:	7c 69 1b 78 	mr      r9,r3
1000b5e0:	80 7f 00 10 	lwz     r3,16(r31)
1000b5e4:	7d 24 4b 78 	mr      r4,r9
1000b5e8:	48 02 20 9d 	bl      1002d684 <strcasecmp@plt>
1000b5ec:	7c 69 1b 78 	mr      r9,r3
1000b5f0:	2f 89 00 00 	cmpwi   cr7,r9,0
1000b5f4:	40 9e 00 14 	bne     cr7,1000b608 <httpd_parse_request+0x494>
	hc->method = METHOD_DELETE;
1000b5f8:	81 3f 00 38 	lwz     r9,56(r31)
1000b5fc:	39 40 00 05 	li      r10,5
1000b600:	91 49 00 9c 	stw     r10,156(r9)
1000b604:	48 00 00 70 	b       1000b674 <httpd_parse_request+0x500>
    else if ( strcasecmp( method_str, httpd_method_str( METHOD_TRACE ) ) == 0 )
1000b608:	38 60 00 06 	li      r3,6
1000b60c:	4b ff df dd 	bl      100095e8 <httpd_method_str>
1000b610:	7c 69 1b 78 	mr      r9,r3
1000b614:	80 7f 00 10 	lwz     r3,16(r31)
1000b618:	7d 24 4b 78 	mr      r4,r9
1000b61c:	48 02 20 69 	bl      1002d684 <strcasecmp@plt>
1000b620:	7c 69 1b 78 	mr      r9,r3
1000b624:	2f 89 00 00 	cmpwi   cr7,r9,0
1000b628:	40 9e 00 14 	bne     cr7,1000b63c <httpd_parse_request+0x4c8>
	hc->method = METHOD_TRACE;
1000b62c:	81 3f 00 38 	lwz     r9,56(r31)
1000b630:	39 40 00 06 	li      r10,6
1000b634:	91 49 00 9c 	stw     r10,156(r9)
1000b638:	48 00 00 3c 	b       1000b674 <httpd_parse_request+0x500>
    else
	{
	httpd_send_err( hc, 501, err501title, "", err501form, method_str );
1000b63c:	3d 20 10 03 	lis     r9,4099
1000b640:	81 49 c1 3c 	lwz     r10,-16068(r9)
1000b644:	3d 20 10 03 	lis     r9,4099
1000b648:	81 29 c1 40 	lwz     r9,-16064(r9)
1000b64c:	80 7f 00 38 	lwz     r3,56(r31)
1000b650:	38 80 01 f5 	li      r4,501
1000b654:	7d 45 53 78 	mr      r5,r10
1000b658:	3d 40 10 02 	lis     r10,4098
1000b65c:	38 ca 8e d4 	addi    r6,r10,-28972
1000b660:	7d 27 4b 78 	mr      r7,r9
1000b664:	81 1f 00 10 	lwz     r8,16(r31)
1000b668:	4b ff d1 8d 	bl      100087f4 <httpd_send_err>
	return -1;
1000b66c:	39 20 ff ff 	li      r9,-1
1000b670:	48 00 10 54 	b       1000c6c4 <httpd_parse_request+0x1550>
	}

    hc->encodedurl = url;
1000b674:	81 3f 00 38 	lwz     r9,56(r31)
1000b678:	81 5f 00 08 	lwz     r10,8(r31)
1000b67c:	91 49 00 ac 	stw     r10,172(r9)
    httpd_realloc_str(
1000b680:	81 3f 00 38 	lwz     r9,56(r31)
1000b684:	3b a9 00 b0 	addi    r29,r9,176
1000b688:	81 3f 00 38 	lwz     r9,56(r31)
1000b68c:	3b c9 01 00 	addi    r30,r9,256
	&hc->decodedurl, &hc->maxdecodedurl, strlen( hc->encodedurl ) );
1000b690:	81 3f 00 38 	lwz     r9,56(r31)
1000b694:	81 29 00 ac 	lwz     r9,172(r9)
	httpd_send_err( hc, 501, err501title, "", err501form, method_str );
	return -1;
	}

    hc->encodedurl = url;
    httpd_realloc_str(
1000b698:	7d 23 4b 78 	mr      r3,r9
1000b69c:	48 02 1f b9 	bl      1002d654 <strlen@plt>
1000b6a0:	7c 69 1b 78 	mr      r9,r3
1000b6a4:	7f a3 eb 78 	mr      r3,r29
1000b6a8:	7f c4 f3 78 	mr      r4,r30
1000b6ac:	7d 25 4b 78 	mr      r5,r9
1000b6b0:	4b ff cc 69 	bl      10008318 <httpd_realloc_str>
	&hc->decodedurl, &hc->maxdecodedurl, strlen( hc->encodedurl ) );
    strdecode( hc->decodedurl, hc->encodedurl );
1000b6b4:	81 3f 00 38 	lwz     r9,56(r31)
1000b6b8:	81 49 00 b0 	lwz     r10,176(r9)
1000b6bc:	81 3f 00 38 	lwz     r9,56(r31)
1000b6c0:	81 29 00 ac 	lwz     r9,172(r9)
1000b6c4:	7d 43 53 78 	mr      r3,r10
1000b6c8:	7d 24 4b 78 	mr      r4,r9
1000b6cc:	4b ff e0 85 	bl      10009750 <strdecode>

    httpd_realloc_str(
1000b6d0:	81 3f 00 38 	lwz     r9,56(r31)
1000b6d4:	3b a9 00 b8 	addi    r29,r9,184
1000b6d8:	81 3f 00 38 	lwz     r9,56(r31)
1000b6dc:	3b c9 01 04 	addi    r30,r9,260
	&hc->origfilename, &hc->maxorigfilename, strlen( hc->decodedurl ) );
1000b6e0:	81 3f 00 38 	lwz     r9,56(r31)
1000b6e4:	81 29 00 b0 	lwz     r9,176(r9)
    hc->encodedurl = url;
    httpd_realloc_str(
	&hc->decodedurl, &hc->maxdecodedurl, strlen( hc->encodedurl ) );
    strdecode( hc->decodedurl, hc->encodedurl );

    httpd_realloc_str(
1000b6e8:	7d 23 4b 78 	mr      r3,r9
1000b6ec:	48 02 1f 69 	bl      1002d654 <strlen@plt>
1000b6f0:	7c 69 1b 78 	mr      r9,r3
1000b6f4:	7f a3 eb 78 	mr      r3,r29
1000b6f8:	7f c4 f3 78 	mr      r4,r30
1000b6fc:	7d 25 4b 78 	mr      r5,r9
1000b700:	4b ff cc 19 	bl      10008318 <httpd_realloc_str>
	&hc->origfilename, &hc->maxorigfilename, strlen( hc->decodedurl ) );
    (void) strcpy( hc->origfilename, &hc->decodedurl[1] );
1000b704:	81 3f 00 38 	lwz     r9,56(r31)
1000b708:	81 49 00 b8 	lwz     r10,184(r9)
1000b70c:	81 3f 00 38 	lwz     r9,56(r31)
1000b710:	81 29 00 b0 	lwz     r9,176(r9)
1000b714:	39 29 00 01 	addi    r9,r9,1
1000b718:	7d 43 53 78 	mr      r3,r10
1000b71c:	7d 24 4b 78 	mr      r4,r9
1000b720:	48 02 1e 45 	bl      1002d564 <strcpy@plt>
    /* Special case for top-level URL. */
    if ( hc->origfilename[0] == '\0' )
1000b724:	81 3f 00 38 	lwz     r9,56(r31)
1000b728:	81 29 00 b8 	lwz     r9,184(r9)
1000b72c:	89 29 00 00 	lbz     r9,0(r9)
1000b730:	55 29 06 3e 	clrlwi  r9,r9,24
1000b734:	2f 89 00 00 	cmpwi   cr7,r9,0
1000b738:	40 9e 00 14 	bne     cr7,1000b74c <httpd_parse_request+0x5d8>
	(void) strcpy( hc->origfilename, "." );
1000b73c:	81 3f 00 38 	lwz     r9,56(r31)
1000b740:	81 29 00 b8 	lwz     r9,184(r9)
1000b744:	39 40 2e 00 	li      r10,11776
1000b748:	b1 49 00 00 	sth     r10,0(r9)

    /* Extract query string from encoded URL. */
    cp = strchr( hc->encodedurl, '?' );
1000b74c:	81 3f 00 38 	lwz     r9,56(r31)
1000b750:	81 29 00 ac 	lwz     r9,172(r9)
1000b754:	7d 23 4b 78 	mr      r3,r9
1000b758:	38 80 00 3f 	li      r4,63
1000b75c:	48 02 1e e9 	bl      1002d644 <strchr@plt>
1000b760:	90 7f 00 1c 	stw     r3,28(r31)
    if ( cp != (char*) 0 )
1000b764:	81 3f 00 1c 	lwz     r9,28(r31)
1000b768:	2f 89 00 00 	cmpwi   cr7,r9,0
1000b76c:	41 9e 00 80 	beq     cr7,1000b7ec <httpd_parse_request+0x678>
	{
	++cp;
1000b770:	81 3f 00 1c 	lwz     r9,28(r31)
1000b774:	39 29 00 01 	addi    r9,r9,1
1000b778:	91 3f 00 1c 	stw     r9,28(r31)
	httpd_realloc_str( &hc->query, &hc->maxquery, strlen( cp ) );
1000b77c:	81 3f 00 38 	lwz     r9,56(r31)
1000b780:	3b a9 00 c8 	addi    r29,r9,200
1000b784:	81 3f 00 38 	lwz     r9,56(r31)
1000b788:	3b c9 01 14 	addi    r30,r9,276
1000b78c:	80 7f 00 1c 	lwz     r3,28(r31)
1000b790:	48 02 1e c5 	bl      1002d654 <strlen@plt>
1000b794:	7c 69 1b 78 	mr      r9,r3
1000b798:	7f a3 eb 78 	mr      r3,r29
1000b79c:	7f c4 f3 78 	mr      r4,r30
1000b7a0:	7d 25 4b 78 	mr      r5,r9
1000b7a4:	4b ff cb 75 	bl      10008318 <httpd_realloc_str>
	(void) strcpy( hc->query, cp );
1000b7a8:	81 3f 00 38 	lwz     r9,56(r31)
1000b7ac:	81 29 00 c8 	lwz     r9,200(r9)
1000b7b0:	7d 23 4b 78 	mr      r3,r9
1000b7b4:	80 9f 00 1c 	lwz     r4,28(r31)
1000b7b8:	48 02 1d ad 	bl      1002d564 <strcpy@plt>
	/* Remove query from (decoded) origfilename. */
	cp = strchr( hc->origfilename, '?' );
1000b7bc:	81 3f 00 38 	lwz     r9,56(r31)
1000b7c0:	81 29 00 b8 	lwz     r9,184(r9)
1000b7c4:	7d 23 4b 78 	mr      r3,r9
1000b7c8:	38 80 00 3f 	li      r4,63
1000b7cc:	48 02 1e 79 	bl      1002d644 <strchr@plt>
1000b7d0:	90 7f 00 1c 	stw     r3,28(r31)
	if ( cp != (char*) 0 )
1000b7d4:	81 3f 00 1c 	lwz     r9,28(r31)
1000b7d8:	2f 89 00 00 	cmpwi   cr7,r9,0
1000b7dc:	41 9e 00 10 	beq     cr7,1000b7ec <httpd_parse_request+0x678>
	    *cp = '\0';
1000b7e0:	81 3f 00 1c 	lwz     r9,28(r31)
1000b7e4:	39 40 00 00 	li      r10,0
1000b7e8:	99 49 00 00 	stb     r10,0(r9)
	}

    de_dotdot( hc->origfilename );
1000b7ec:	81 3f 00 38 	lwz     r9,56(r31)
1000b7f0:	81 29 00 b8 	lwz     r9,184(r9)
1000b7f4:	7d 23 4b 78 	mr      r3,r9
1000b7f8:	48 00 10 55 	bl      1000c84c <de_dotdot>
    if ( hc->origfilename[0] == '/' ||
1000b7fc:	81 3f 00 38 	lwz     r9,56(r31)
1000b800:	81 29 00 b8 	lwz     r9,184(r9)
1000b804:	89 29 00 00 	lbz     r9,0(r9)
1000b808:	55 29 06 3e 	clrlwi  r9,r9,24
1000b80c:	2b 89 00 2f 	cmplwi  cr7,r9,47
1000b810:	41 9e 00 70 	beq     cr7,1000b880 <httpd_parse_request+0x70c>
	 ( hc->origfilename[0] == '.' && hc->origfilename[1] == '.' &&
1000b814:	81 3f 00 38 	lwz     r9,56(r31)
1000b818:	81 29 00 b8 	lwz     r9,184(r9)
1000b81c:	89 29 00 00 	lbz     r9,0(r9)
1000b820:	55 29 06 3e 	clrlwi  r9,r9,24
	if ( cp != (char*) 0 )
	    *cp = '\0';
	}

    de_dotdot( hc->origfilename );
    if ( hc->origfilename[0] == '/' ||
1000b824:	2b 89 00 2e 	cmplwi  cr7,r9,46
1000b828:	40 9e 00 94 	bne     cr7,1000b8bc <httpd_parse_request+0x748>
	 ( hc->origfilename[0] == '.' && hc->origfilename[1] == '.' &&
1000b82c:	81 3f 00 38 	lwz     r9,56(r31)
1000b830:	81 29 00 b8 	lwz     r9,184(r9)
1000b834:	39 29 00 01 	addi    r9,r9,1
1000b838:	89 29 00 00 	lbz     r9,0(r9)
1000b83c:	55 29 06 3e 	clrlwi  r9,r9,24
1000b840:	2b 89 00 2e 	cmplwi  cr7,r9,46
1000b844:	40 9e 00 78 	bne     cr7,1000b8bc <httpd_parse_request+0x748>
	   ( hc->origfilename[2] == '\0' || hc->origfilename[2] == '/' ) ) )
1000b848:	81 3f 00 38 	lwz     r9,56(r31)
1000b84c:	81 29 00 b8 	lwz     r9,184(r9)
1000b850:	39 29 00 02 	addi    r9,r9,2
1000b854:	89 29 00 00 	lbz     r9,0(r9)
1000b858:	55 29 06 3e 	clrlwi  r9,r9,24
	    *cp = '\0';
	}

    de_dotdot( hc->origfilename );
    if ( hc->origfilename[0] == '/' ||
	 ( hc->origfilename[0] == '.' && hc->origfilename[1] == '.' &&
1000b85c:	2f 89 00 00 	cmpwi   cr7,r9,0
1000b860:	41 9e 00 20 	beq     cr7,1000b880 <httpd_parse_request+0x70c>
	   ( hc->origfilename[2] == '\0' || hc->origfilename[2] == '/' ) ) )
1000b864:	81 3f 00 38 	lwz     r9,56(r31)
1000b868:	81 29 00 b8 	lwz     r9,184(r9)
1000b86c:	39 29 00 02 	addi    r9,r9,2
1000b870:	89 29 00 00 	lbz     r9,0(r9)
1000b874:	55 29 06 3e 	clrlwi  r9,r9,24
1000b878:	2b 89 00 2f 	cmplwi  cr7,r9,47
1000b87c:	40 9e 00 40 	bne     cr7,1000b8bc <httpd_parse_request+0x748>
	{
	httpd_send_err( hc, 400, httpd_err400title, "", httpd_err400form, "" );
1000b880:	3d 20 10 03 	lis     r9,4099
1000b884:	81 49 d3 38 	lwz     r10,-11464(r9)
1000b888:	3d 20 10 03 	lis     r9,4099
1000b88c:	81 29 d3 3c 	lwz     r9,-11460(r9)
1000b890:	80 7f 00 38 	lwz     r3,56(r31)
1000b894:	38 80 01 90 	li      r4,400
1000b898:	7d 45 53 78 	mr      r5,r10
1000b89c:	3d 40 10 02 	lis     r10,4098
1000b8a0:	38 ca 8e d4 	addi    r6,r10,-28972
1000b8a4:	7d 27 4b 78 	mr      r7,r9
1000b8a8:	3d 20 10 02 	lis     r9,4098
1000b8ac:	39 09 8e d4 	addi    r8,r9,-28972
1000b8b0:	4b ff cf 45 	bl      100087f4 <httpd_send_err>
	return -1;
1000b8b4:	39 20 ff ff 	li      r9,-1
1000b8b8:	48 00 0e 0c 	b       1000c6c4 <httpd_parse_request+0x1550>
	}

    if ( hc->mime_flag )
1000b8bc:	81 3f 00 38 	lwz     r9,56(r31)
1000b8c0:	81 29 01 48 	lwz     r9,328(r9)
1000b8c4:	2f 89 00 00 	cmpwi   cr7,r9,0
1000b8c8:	41 9e 09 b4 	beq     cr7,1000c27c <httpd_parse_request+0x1108>
	{
	/* Read the MIME headers. */
	while ( ( buf = bufgets( hc ) ) != (char*) 0 )
1000b8cc:	48 00 09 98 	b       1000c264 <httpd_parse_request+0x10f0>
	    {
	    if ( buf[0] == '\0' )
1000b8d0:	81 3f 00 20 	lwz     r9,32(r31)
1000b8d4:	89 29 00 00 	lbz     r9,0(r9)
1000b8d8:	55 29 06 3e 	clrlwi  r9,r9,24
1000b8dc:	2f 89 00 00 	cmpwi   cr7,r9,0
1000b8e0:	40 9e 00 08 	bne     cr7,1000b8e8 <httpd_parse_request+0x774>
		break;
1000b8e4:	48 00 09 98 	b       1000c27c <httpd_parse_request+0x1108>
	    if ( strncasecmp( buf, "Referer:", 8 ) == 0 )
1000b8e8:	80 7f 00 20 	lwz     r3,32(r31)
1000b8ec:	3d 20 10 02 	lis     r9,4098
1000b8f0:	38 89 93 44 	addi    r4,r9,-27836
1000b8f4:	38 a0 00 08 	li      r5,8
1000b8f8:	48 02 1e 0d 	bl      1002d704 <strncasecmp@plt>
1000b8fc:	7c 69 1b 78 	mr      r9,r3
1000b900:	2f 89 00 00 	cmpwi   cr7,r9,0
1000b904:	40 9e 00 40 	bne     cr7,1000b944 <httpd_parse_request+0x7d0>
		{
		cp = &buf[8];
1000b908:	81 3f 00 20 	lwz     r9,32(r31)
1000b90c:	39 29 00 08 	addi    r9,r9,8
1000b910:	91 3f 00 1c 	stw     r9,28(r31)
		cp += strspn( cp, " \t" );
1000b914:	80 7f 00 1c 	lwz     r3,28(r31)
1000b918:	3d 20 10 02 	lis     r9,4098
1000b91c:	38 89 93 50 	addi    r4,r9,-27824
1000b920:	48 02 1e fd 	bl      1002d81c <strspn@plt>
1000b924:	7c 69 1b 78 	mr      r9,r3
1000b928:	81 5f 00 1c 	lwz     r10,28(r31)
1000b92c:	7d 2a 4a 14 	add     r9,r10,r9
1000b930:	91 3f 00 1c 	stw     r9,28(r31)
		hc->referrer = cp;
1000b934:	81 3f 00 38 	lwz     r9,56(r31)
1000b938:	81 5f 00 1c 	lwz     r10,28(r31)
1000b93c:	91 49 00 cc 	stw     r10,204(r9)
1000b940:	48 00 09 24 	b       1000c264 <httpd_parse_request+0x10f0>
		}
	    else if ( strncasecmp( buf, "Referrer:", 9 ) == 0 )
1000b944:	80 7f 00 20 	lwz     r3,32(r31)
1000b948:	3d 20 10 02 	lis     r9,4098
1000b94c:	38 89 93 54 	addi    r4,r9,-27820
1000b950:	38 a0 00 09 	li      r5,9
1000b954:	48 02 1d b1 	bl      1002d704 <strncasecmp@plt>
1000b958:	7c 69 1b 78 	mr      r9,r3
1000b95c:	2f 89 00 00 	cmpwi   cr7,r9,0
1000b960:	40 9e 00 40 	bne     cr7,1000b9a0 <httpd_parse_request+0x82c>
		{
		cp = &buf[9];
1000b964:	81 3f 00 20 	lwz     r9,32(r31)
1000b968:	39 29 00 09 	addi    r9,r9,9
1000b96c:	91 3f 00 1c 	stw     r9,28(r31)
		cp += strspn( cp, " \t" );
1000b970:	80 7f 00 1c 	lwz     r3,28(r31)
1000b974:	3d 20 10 02 	lis     r9,4098
1000b978:	38 89 93 50 	addi    r4,r9,-27824
1000b97c:	48 02 1e a1 	bl      1002d81c <strspn@plt>
1000b980:	7c 69 1b 78 	mr      r9,r3
1000b984:	81 5f 00 1c 	lwz     r10,28(r31)
1000b988:	7d 2a 4a 14 	add     r9,r10,r9
1000b98c:	91 3f 00 1c 	stw     r9,28(r31)
		hc->referrer = cp;
1000b990:	81 3f 00 38 	lwz     r9,56(r31)
1000b994:	81 5f 00 1c 	lwz     r10,28(r31)
1000b998:	91 49 00 cc 	stw     r10,204(r9)
1000b99c:	48 00 08 c8 	b       1000c264 <httpd_parse_request+0x10f0>
		}
	    else if ( strncasecmp( buf, "User-Agent:", 11 ) == 0 )
1000b9a0:	80 7f 00 20 	lwz     r3,32(r31)
1000b9a4:	3d 20 10 02 	lis     r9,4098
1000b9a8:	38 89 93 60 	addi    r4,r9,-27808
1000b9ac:	38 a0 00 0b 	li      r5,11
1000b9b0:	48 02 1d 55 	bl      1002d704 <strncasecmp@plt>
1000b9b4:	7c 69 1b 78 	mr      r9,r3
1000b9b8:	2f 89 00 00 	cmpwi   cr7,r9,0
1000b9bc:	40 9e 00 40 	bne     cr7,1000b9fc <httpd_parse_request+0x888>
		{
		cp = &buf[11];
1000b9c0:	81 3f 00 20 	lwz     r9,32(r31)
1000b9c4:	39 29 00 0b 	addi    r9,r9,11
1000b9c8:	91 3f 00 1c 	stw     r9,28(r31)
		cp += strspn( cp, " \t" );
1000b9cc:	80 7f 00 1c 	lwz     r3,28(r31)
1000b9d0:	3d 20 10 02 	lis     r9,4098
1000b9d4:	38 89 93 50 	addi    r4,r9,-27824
1000b9d8:	48 02 1e 45 	bl      1002d81c <strspn@plt>
1000b9dc:	7c 69 1b 78 	mr      r9,r3
1000b9e0:	81 5f 00 1c 	lwz     r10,28(r31)
1000b9e4:	7d 2a 4a 14 	add     r9,r10,r9
1000b9e8:	91 3f 00 1c 	stw     r9,28(r31)
		hc->useragent = cp;
1000b9ec:	81 3f 00 38 	lwz     r9,56(r31)
1000b9f0:	81 5f 00 1c 	lwz     r10,28(r31)
1000b9f4:	91 49 00 d0 	stw     r10,208(r9)
1000b9f8:	48 00 08 6c 	b       1000c264 <httpd_parse_request+0x10f0>
		}
	    else if ( strncasecmp( buf, "Host:", 5 ) == 0 )
1000b9fc:	80 7f 00 20 	lwz     r3,32(r31)
1000ba00:	3d 20 10 02 	lis     r9,4098
1000ba04:	38 89 93 6c 	addi    r4,r9,-27796
1000ba08:	38 a0 00 05 	li      r5,5
1000ba0c:	48 02 1c f9 	bl      1002d704 <strncasecmp@plt>
1000ba10:	7c 69 1b 78 	mr      r9,r3
1000ba14:	2f 89 00 00 	cmpwi   cr7,r9,0
1000ba18:	40 9e 00 e0 	bne     cr7,1000baf8 <httpd_parse_request+0x984>
		{
		cp = &buf[5];
1000ba1c:	81 3f 00 20 	lwz     r9,32(r31)
1000ba20:	39 29 00 05 	addi    r9,r9,5
1000ba24:	91 3f 00 1c 	stw     r9,28(r31)
		cp += strspn( cp, " \t" );
1000ba28:	80 7f 00 1c 	lwz     r3,28(r31)
1000ba2c:	3d 20 10 02 	lis     r9,4098
1000ba30:	38 89 93 50 	addi    r4,r9,-27824
1000ba34:	48 02 1d e9 	bl      1002d81c <strspn@plt>
1000ba38:	7c 69 1b 78 	mr      r9,r3
1000ba3c:	81 5f 00 1c 	lwz     r10,28(r31)
1000ba40:	7d 2a 4a 14 	add     r9,r10,r9
1000ba44:	91 3f 00 1c 	stw     r9,28(r31)
		hc->hdrhost = cp;
1000ba48:	81 3f 00 38 	lwz     r9,56(r31)
1000ba4c:	81 5f 00 1c 	lwz     r10,28(r31)
1000ba50:	91 49 00 ec 	stw     r10,236(r9)
		cp = strchr( hc->hdrhost, ':' );
1000ba54:	81 3f 00 38 	lwz     r9,56(r31)
1000ba58:	81 29 00 ec 	lwz     r9,236(r9)
1000ba5c:	7d 23 4b 78 	mr      r3,r9
1000ba60:	38 80 00 3a 	li      r4,58
1000ba64:	48 02 1b e1 	bl      1002d644 <strchr@plt>
1000ba68:	90 7f 00 1c 	stw     r3,28(r31)
		if ( cp != (char*) 0 )
1000ba6c:	81 3f 00 1c 	lwz     r9,28(r31)
1000ba70:	2f 89 00 00 	cmpwi   cr7,r9,0
1000ba74:	41 9e 00 10 	beq     cr7,1000ba84 <httpd_parse_request+0x910>
		    *cp = '\0';
1000ba78:	81 3f 00 1c 	lwz     r9,28(r31)
1000ba7c:	39 40 00 00 	li      r10,0
1000ba80:	99 49 00 00 	stb     r10,0(r9)
		if ( strchr( hc->hdrhost, '/' ) != (char*) 0 || hc->hdrhost[0] == '.' )
1000ba84:	81 3f 00 38 	lwz     r9,56(r31)
1000ba88:	81 29 00 ec 	lwz     r9,236(r9)
1000ba8c:	7d 23 4b 78 	mr      r3,r9
1000ba90:	38 80 00 2f 	li      r4,47
1000ba94:	48 02 1b b1 	bl      1002d644 <strchr@plt>
1000ba98:	7c 69 1b 78 	mr      r9,r3
1000ba9c:	2f 89 00 00 	cmpwi   cr7,r9,0
1000baa0:	40 9e 00 1c 	bne     cr7,1000babc <httpd_parse_request+0x948>
1000baa4:	81 3f 00 38 	lwz     r9,56(r31)
1000baa8:	81 29 00 ec 	lwz     r9,236(r9)
1000baac:	89 29 00 00 	lbz     r9,0(r9)
1000bab0:	55 29 06 3e 	clrlwi  r9,r9,24
1000bab4:	2b 89 00 2e 	cmplwi  cr7,r9,46
1000bab8:	40 9e 07 ac 	bne     cr7,1000c264 <httpd_parse_request+0x10f0>
		    {
		    httpd_send_err( hc, 400, httpd_err400title, "", httpd_err400form, "" );
1000babc:	3d 20 10 03 	lis     r9,4099
1000bac0:	81 49 d3 38 	lwz     r10,-11464(r9)
1000bac4:	3d 20 10 03 	lis     r9,4099
1000bac8:	81 29 d3 3c 	lwz     r9,-11460(r9)
1000bacc:	80 7f 00 38 	lwz     r3,56(r31)
1000bad0:	38 80 01 90 	li      r4,400
1000bad4:	7d 45 53 78 	mr      r5,r10
1000bad8:	3d 40 10 02 	lis     r10,4098
1000badc:	38 ca 8e d4 	addi    r6,r10,-28972
1000bae0:	7d 27 4b 78 	mr      r7,r9
1000bae4:	3d 20 10 02 	lis     r9,4098
1000bae8:	39 09 8e d4 	addi    r8,r9,-28972
1000baec:	4b ff cd 09 	bl      100087f4 <httpd_send_err>
		    return -1;
1000baf0:	39 20 ff ff 	li      r9,-1
1000baf4:	48 00 0b d0 	b       1000c6c4 <httpd_parse_request+0x1550>
		    }
		}
	    else if ( strncasecmp( buf, "Accept:", 7 ) == 0 )
1000baf8:	80 7f 00 20 	lwz     r3,32(r31)
1000bafc:	3d 20 10 02 	lis     r9,4098
1000bb00:	38 89 93 74 	addi    r4,r9,-27788
1000bb04:	38 a0 00 07 	li      r5,7
1000bb08:	48 02 1b fd 	bl      1002d704 <strncasecmp@plt>
1000bb0c:	7c 69 1b 78 	mr      r9,r3
1000bb10:	2f 89 00 00 	cmpwi   cr7,r9,0
1000bb14:	40 9e 01 54 	bne     cr7,1000bc68 <httpd_parse_request+0xaf4>
		{
		cp = &buf[7];
1000bb18:	81 3f 00 20 	lwz     r9,32(r31)
1000bb1c:	39 29 00 07 	addi    r9,r9,7
1000bb20:	91 3f 00 1c 	stw     r9,28(r31)
		cp += strspn( cp, " \t" );
1000bb24:	80 7f 00 1c 	lwz     r3,28(r31)
1000bb28:	3d 20 10 02 	lis     r9,4098
1000bb2c:	38 89 93 50 	addi    r4,r9,-27824
1000bb30:	48 02 1c ed 	bl      1002d81c <strspn@plt>
1000bb34:	7c 69 1b 78 	mr      r9,r3
1000bb38:	81 5f 00 1c 	lwz     r10,28(r31)
1000bb3c:	7d 2a 4a 14 	add     r9,r10,r9
1000bb40:	91 3f 00 1c 	stw     r9,28(r31)
		if ( hc->accept[0] != '\0' )
1000bb44:	81 3f 00 38 	lwz     r9,56(r31)
1000bb48:	81 29 00 d4 	lwz     r9,212(r9)
1000bb4c:	89 29 00 00 	lbz     r9,0(r9)
1000bb50:	55 29 06 3e 	clrlwi  r9,r9,24
1000bb54:	2f 89 00 00 	cmpwi   cr7,r9,0
1000bb58:	41 9e 00 cc 	beq     cr7,1000bc24 <httpd_parse_request+0xab0>
		    {
		    if ( strlen( hc->accept ) > 5000 )
1000bb5c:	81 3f 00 38 	lwz     r9,56(r31)
1000bb60:	81 29 00 d4 	lwz     r9,212(r9)
1000bb64:	7d 23 4b 78 	mr      r3,r9
1000bb68:	48 02 1a ed 	bl      1002d654 <strlen@plt>
1000bb6c:	7c 69 1b 78 	mr      r9,r3
1000bb70:	2b 89 13 88 	cmplwi  cr7,r9,5000
1000bb74:	40 9d 00 34 	ble     cr7,1000bba8 <httpd_parse_request+0xa34>
			{
			syslog(
1000bb78:	81 3f 00 38 	lwz     r9,56(r31)
1000bb7c:	39 29 00 08 	addi    r9,r9,8
1000bb80:	7d 23 4b 78 	mr      r3,r9
1000bb84:	48 00 57 c9 	bl      1001134c <httpd_ntoa>
1000bb88:	7c 69 1b 78 	mr      r9,r3
1000bb8c:	38 60 00 03 	li      r3,3
1000bb90:	3d 40 10 02 	lis     r10,4098
1000bb94:	38 8a 93 7c 	addi    r4,r10,-27780
1000bb98:	7d 25 4b 78 	mr      r5,r9
1000bb9c:	4c c6 31 82 	crclr   4*cr1+eq
1000bba0:	48 02 1b e5 	bl      1002d784 <syslog@plt>
			    LOG_ERR, "%.80s way too much Accept: data",
			    httpd_ntoa( &hc->client_addr ) );
			continue;
1000bba4:	48 00 06 c0 	b       1000c264 <httpd_parse_request+0x10f0>
			}
		    httpd_realloc_str(
1000bba8:	81 3f 00 38 	lwz     r9,56(r31)
1000bbac:	3b a9 00 d4 	addi    r29,r9,212
1000bbb0:	81 3f 00 38 	lwz     r9,56(r31)
1000bbb4:	3b c9 01 18 	addi    r30,r9,280
			&hc->accept, &hc->maxaccept,
			strlen( hc->accept ) + 2 + strlen( cp ) );
1000bbb8:	81 3f 00 38 	lwz     r9,56(r31)
1000bbbc:	81 29 00 d4 	lwz     r9,212(r9)
1000bbc0:	7d 23 4b 78 	mr      r3,r9
1000bbc4:	48 02 1a 91 	bl      1002d654 <strlen@plt>
1000bbc8:	7c 7c 1b 78 	mr      r28,r3
1000bbcc:	80 7f 00 1c 	lwz     r3,28(r31)
1000bbd0:	48 02 1a 85 	bl      1002d654 <strlen@plt>
1000bbd4:	7c 69 1b 78 	mr      r9,r3
1000bbd8:	7d 3c 4a 14 	add     r9,r28,r9
			syslog(
			    LOG_ERR, "%.80s way too much Accept: data",
			    httpd_ntoa( &hc->client_addr ) );
			continue;
			}
		    httpd_realloc_str(
1000bbdc:	39 29 00 02 	addi    r9,r9,2
1000bbe0:	7f a3 eb 78 	mr      r3,r29
1000bbe4:	7f c4 f3 78 	mr      r4,r30
1000bbe8:	7d 25 4b 78 	mr      r5,r9
1000bbec:	4b ff c7 2d 	bl      10008318 <httpd_realloc_str>
			&hc->accept, &hc->maxaccept,
			strlen( hc->accept ) + 2 + strlen( cp ) );
		    (void) strcat( hc->accept, ", " );
1000bbf0:	81 3f 00 38 	lwz     r9,56(r31)
1000bbf4:	83 c9 00 d4 	lwz     r30,212(r9)
1000bbf8:	7f c3 f3 78 	mr      r3,r30
1000bbfc:	48 02 1a 59 	bl      1002d654 <strlen@plt>
1000bc00:	7c 69 1b 78 	mr      r9,r3
1000bc04:	7d 3e 4a 14 	add     r9,r30,r9
1000bc08:	3d 40 10 02 	lis     r10,4098
1000bc0c:	39 4a 93 9c 	addi    r10,r10,-27748
1000bc10:	a1 0a 00 00 	lhz     r8,0(r10)
1000bc14:	89 4a 00 02 	lbz     r10,2(r10)
1000bc18:	b1 09 00 00 	sth     r8,0(r9)
1000bc1c:	99 49 00 02 	stb     r10,2(r9)
1000bc20:	48 00 00 30 	b       1000bc50 <httpd_parse_request+0xadc>
		    }
		else
		    httpd_realloc_str(
1000bc24:	81 3f 00 38 	lwz     r9,56(r31)
1000bc28:	3b a9 00 d4 	addi    r29,r9,212
1000bc2c:	81 3f 00 38 	lwz     r9,56(r31)
1000bc30:	3b c9 01 18 	addi    r30,r9,280
1000bc34:	80 7f 00 1c 	lwz     r3,28(r31)
1000bc38:	48 02 1a 1d 	bl      1002d654 <strlen@plt>
1000bc3c:	7c 69 1b 78 	mr      r9,r3
1000bc40:	7f a3 eb 78 	mr      r3,r29
1000bc44:	7f c4 f3 78 	mr      r4,r30
1000bc48:	7d 25 4b 78 	mr      r5,r9
1000bc4c:	4b ff c6 cd 	bl      10008318 <httpd_realloc_str>
			&hc->accept, &hc->maxaccept, strlen( cp ) );
		(void) strcat( hc->accept, cp );
1000bc50:	81 3f 00 38 	lwz     r9,56(r31)
1000bc54:	81 29 00 d4 	lwz     r9,212(r9)
1000bc58:	7d 23 4b 78 	mr      r3,r9
1000bc5c:	80 9f 00 1c 	lwz     r4,28(r31)
1000bc60:	48 02 18 f5 	bl      1002d554 <strcat@plt>
1000bc64:	48 00 06 00 	b       1000c264 <httpd_parse_request+0x10f0>
		}
	    else if ( strncasecmp( buf, "Accept-Encoding:", 16 ) == 0 )
1000bc68:	80 7f 00 20 	lwz     r3,32(r31)
1000bc6c:	3d 20 10 02 	lis     r9,4098
1000bc70:	38 89 93 a0 	addi    r4,r9,-27744
1000bc74:	38 a0 00 10 	li      r5,16
1000bc78:	48 02 1a 8d 	bl      1002d704 <strncasecmp@plt>
1000bc7c:	7c 69 1b 78 	mr      r9,r3
1000bc80:	2f 89 00 00 	cmpwi   cr7,r9,0
1000bc84:	40 9e 01 54 	bne     cr7,1000bdd8 <httpd_parse_request+0xc64>
		{
		cp = &buf[16];
1000bc88:	81 3f 00 20 	lwz     r9,32(r31)
1000bc8c:	39 29 00 10 	addi    r9,r9,16
1000bc90:	91 3f 00 1c 	stw     r9,28(r31)
		cp += strspn( cp, " \t" );
1000bc94:	80 7f 00 1c 	lwz     r3,28(r31)
1000bc98:	3d 20 10 02 	lis     r9,4098
1000bc9c:	38 89 93 50 	addi    r4,r9,-27824
1000bca0:	48 02 1b 7d 	bl      1002d81c <strspn@plt>
1000bca4:	7c 69 1b 78 	mr      r9,r3
1000bca8:	81 5f 00 1c 	lwz     r10,28(r31)
1000bcac:	7d 2a 4a 14 	add     r9,r10,r9
1000bcb0:	91 3f 00 1c 	stw     r9,28(r31)
		if ( hc->accepte[0] != '\0' )
1000bcb4:	81 3f 00 38 	lwz     r9,56(r31)
1000bcb8:	81 29 00 d8 	lwz     r9,216(r9)
1000bcbc:	89 29 00 00 	lbz     r9,0(r9)
1000bcc0:	55 29 06 3e 	clrlwi  r9,r9,24
1000bcc4:	2f 89 00 00 	cmpwi   cr7,r9,0
1000bcc8:	41 9e 00 cc 	beq     cr7,1000bd94 <httpd_parse_request+0xc20>
		    {
		    if ( strlen( hc->accepte ) > 5000 )
1000bccc:	81 3f 00 38 	lwz     r9,56(r31)
1000bcd0:	81 29 00 d8 	lwz     r9,216(r9)
1000bcd4:	7d 23 4b 78 	mr      r3,r9
1000bcd8:	48 02 19 7d 	bl      1002d654 <strlen@plt>
1000bcdc:	7c 69 1b 78 	mr      r9,r3
1000bce0:	2b 89 13 88 	cmplwi  cr7,r9,5000
1000bce4:	40 9d 00 34 	ble     cr7,1000bd18 <httpd_parse_request+0xba4>
			{
			syslog(
1000bce8:	81 3f 00 38 	lwz     r9,56(r31)
1000bcec:	39 29 00 08 	addi    r9,r9,8
1000bcf0:	7d 23 4b 78 	mr      r3,r9
1000bcf4:	48 00 56 59 	bl      1001134c <httpd_ntoa>
1000bcf8:	7c 69 1b 78 	mr      r9,r3
1000bcfc:	38 60 00 03 	li      r3,3
1000bd00:	3d 40 10 02 	lis     r10,4098
1000bd04:	38 8a 93 b4 	addi    r4,r10,-27724
1000bd08:	7d 25 4b 78 	mr      r5,r9
1000bd0c:	4c c6 31 82 	crclr   4*cr1+eq
1000bd10:	48 02 1a 75 	bl      1002d784 <syslog@plt>
			    LOG_ERR, "%.80s way too much Accept-Encoding: data",
			    httpd_ntoa( &hc->client_addr ) );
			continue;
1000bd14:	48 00 05 50 	b       1000c264 <httpd_parse_request+0x10f0>
			}
		    httpd_realloc_str(
1000bd18:	81 3f 00 38 	lwz     r9,56(r31)
1000bd1c:	3b a9 00 d8 	addi    r29,r9,216
1000bd20:	81 3f 00 38 	lwz     r9,56(r31)
1000bd24:	3b c9 01 1c 	addi    r30,r9,284
			&hc->accepte, &hc->maxaccepte,
			strlen( hc->accepte ) + 2 + strlen( cp ) );
1000bd28:	81 3f 00 38 	lwz     r9,56(r31)
1000bd2c:	81 29 00 d8 	lwz     r9,216(r9)
1000bd30:	7d 23 4b 78 	mr      r3,r9
1000bd34:	48 02 19 21 	bl      1002d654 <strlen@plt>
1000bd38:	7c 7c 1b 78 	mr      r28,r3
1000bd3c:	80 7f 00 1c 	lwz     r3,28(r31)
1000bd40:	48 02 19 15 	bl      1002d654 <strlen@plt>
1000bd44:	7c 69 1b 78 	mr      r9,r3
1000bd48:	7d 3c 4a 14 	add     r9,r28,r9
			syslog(
			    LOG_ERR, "%.80s way too much Accept-Encoding: data",
			    httpd_ntoa( &hc->client_addr ) );
			continue;
			}
		    httpd_realloc_str(
1000bd4c:	39 29 00 02 	addi    r9,r9,2
1000bd50:	7f a3 eb 78 	mr      r3,r29
1000bd54:	7f c4 f3 78 	mr      r4,r30
1000bd58:	7d 25 4b 78 	mr      r5,r9
1000bd5c:	4b ff c5 bd 	bl      10008318 <httpd_realloc_str>
			&hc->accepte, &hc->maxaccepte,
			strlen( hc->accepte ) + 2 + strlen( cp ) );
		    (void) strcat( hc->accepte, ", " );
1000bd60:	81 3f 00 38 	lwz     r9,56(r31)
1000bd64:	83 c9 00 d8 	lwz     r30,216(r9)
1000bd68:	7f c3 f3 78 	mr      r3,r30
1000bd6c:	48 02 18 e9 	bl      1002d654 <strlen@plt>
1000bd70:	7c 69 1b 78 	mr      r9,r3
1000bd74:	7d 3e 4a 14 	add     r9,r30,r9
1000bd78:	3d 40 10 02 	lis     r10,4098
1000bd7c:	39 4a 93 9c 	addi    r10,r10,-27748
1000bd80:	a1 0a 00 00 	lhz     r8,0(r10)
1000bd84:	89 4a 00 02 	lbz     r10,2(r10)
1000bd88:	b1 09 00 00 	sth     r8,0(r9)
1000bd8c:	99 49 00 02 	stb     r10,2(r9)
1000bd90:	48 00 00 30 	b       1000bdc0 <httpd_parse_request+0xc4c>
		    }
		else
		    httpd_realloc_str(
1000bd94:	81 3f 00 38 	lwz     r9,56(r31)
1000bd98:	3b a9 00 d8 	addi    r29,r9,216
1000bd9c:	81 3f 00 38 	lwz     r9,56(r31)
1000bda0:	3b c9 01 1c 	addi    r30,r9,284
1000bda4:	80 7f 00 1c 	lwz     r3,28(r31)
1000bda8:	48 02 18 ad 	bl      1002d654 <strlen@plt>
1000bdac:	7c 69 1b 78 	mr      r9,r3
1000bdb0:	7f a3 eb 78 	mr      r3,r29
1000bdb4:	7f c4 f3 78 	mr      r4,r30
1000bdb8:	7d 25 4b 78 	mr      r5,r9
1000bdbc:	4b ff c5 5d 	bl      10008318 <httpd_realloc_str>
			&hc->accepte, &hc->maxaccepte, strlen( cp ) );
		(void) strcpy( hc->accepte, cp );
1000bdc0:	81 3f 00 38 	lwz     r9,56(r31)
1000bdc4:	81 29 00 d8 	lwz     r9,216(r9)
1000bdc8:	7d 23 4b 78 	mr      r3,r9
1000bdcc:	80 9f 00 1c 	lwz     r4,28(r31)
1000bdd0:	48 02 17 95 	bl      1002d564 <strcpy@plt>
1000bdd4:	48 00 04 90 	b       1000c264 <httpd_parse_request+0x10f0>
		}
	    else if ( strncasecmp( buf, "Accept-Language:", 16 ) == 0 )
1000bdd8:	80 7f 00 20 	lwz     r3,32(r31)
1000bddc:	3d 20 10 02 	lis     r9,4098
1000bde0:	38 89 93 e0 	addi    r4,r9,-27680
1000bde4:	38 a0 00 10 	li      r5,16
1000bde8:	48 02 19 1d 	bl      1002d704 <strncasecmp@plt>
1000bdec:	7c 69 1b 78 	mr      r9,r3
1000bdf0:	2f 89 00 00 	cmpwi   cr7,r9,0
1000bdf4:	40 9e 00 40 	bne     cr7,1000be34 <httpd_parse_request+0xcc0>
		{
		cp = &buf[16];
1000bdf8:	81 3f 00 20 	lwz     r9,32(r31)
1000bdfc:	39 29 00 10 	addi    r9,r9,16
1000be00:	91 3f 00 1c 	stw     r9,28(r31)
		cp += strspn( cp, " \t" );
1000be04:	80 7f 00 1c 	lwz     r3,28(r31)
1000be08:	3d 20 10 02 	lis     r9,4098
1000be0c:	38 89 93 50 	addi    r4,r9,-27824
1000be10:	48 02 1a 0d 	bl      1002d81c <strspn@plt>
1000be14:	7c 69 1b 78 	mr      r9,r3
1000be18:	81 5f 00 1c 	lwz     r10,28(r31)
1000be1c:	7d 2a 4a 14 	add     r9,r10,r9
1000be20:	91 3f 00 1c 	stw     r9,28(r31)
		hc->acceptl = cp;
1000be24:	81 3f 00 38 	lwz     r9,56(r31)
1000be28:	81 5f 00 1c 	lwz     r10,28(r31)
1000be2c:	91 49 00 dc 	stw     r10,220(r9)
1000be30:	48 00 04 34 	b       1000c264 <httpd_parse_request+0x10f0>
		}
	    else if ( strncasecmp( buf, "If-Modified-Since:", 18 ) == 0 )
1000be34:	80 7f 00 20 	lwz     r3,32(r31)
1000be38:	3d 20 10 02 	lis     r9,4098
1000be3c:	38 89 93 f4 	addi    r4,r9,-27660
1000be40:	38 a0 00 12 	li      r5,18
1000be44:	48 02 18 c1 	bl      1002d704 <strncasecmp@plt>
1000be48:	7c 69 1b 78 	mr      r9,r3
1000be4c:	2f 89 00 00 	cmpwi   cr7,r9,0
1000be50:	40 9e 00 54 	bne     cr7,1000bea4 <httpd_parse_request+0xd30>
		{
		cp = &buf[18];
1000be54:	81 3f 00 20 	lwz     r9,32(r31)
1000be58:	39 29 00 12 	addi    r9,r9,18
1000be5c:	91 3f 00 1c 	stw     r9,28(r31)
		hc->if_modified_since = tdate_parse( cp );
1000be60:	80 7f 00 1c 	lwz     r3,28(r31)
1000be64:	48 00 8c 49 	bl      10014aac <tdate_parse>
1000be68:	7c 6a 1b 78 	mr      r10,r3
1000be6c:	81 3f 00 38 	lwz     r9,56(r31)
1000be70:	91 49 01 34 	stw     r10,308(r9)
		if ( hc->if_modified_since == (time_t) -1 )
1000be74:	81 3f 00 38 	lwz     r9,56(r31)
1000be78:	81 49 01 34 	lwz     r10,308(r9)
1000be7c:	39 20 ff ff 	li      r9,-1
1000be80:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000be84:	40 9e 03 e0 	bne     cr7,1000c264 <httpd_parse_request+0x10f0>
		    syslog( LOG_DEBUG, "unparsable time: %.80s", cp );
1000be88:	38 60 00 07 	li      r3,7
1000be8c:	3d 20 10 02 	lis     r9,4098
1000be90:	38 89 94 08 	addi    r4,r9,-27640
1000be94:	80 bf 00 1c 	lwz     r5,28(r31)
1000be98:	4c c6 31 82 	crclr   4*cr1+eq
1000be9c:	48 02 18 e9 	bl      1002d784 <syslog@plt>
1000bea0:	48 00 03 c4 	b       1000c264 <httpd_parse_request+0x10f0>
		}
	    else if ( strncasecmp( buf, "Cookie:", 7 ) == 0 )
1000bea4:	80 7f 00 20 	lwz     r3,32(r31)
1000bea8:	3d 20 10 02 	lis     r9,4098
1000beac:	38 89 94 20 	addi    r4,r9,-27616
1000beb0:	38 a0 00 07 	li      r5,7
1000beb4:	48 02 18 51 	bl      1002d704 <strncasecmp@plt>
1000beb8:	7c 69 1b 78 	mr      r9,r3
1000bebc:	2f 89 00 00 	cmpwi   cr7,r9,0
1000bec0:	40 9e 00 40 	bne     cr7,1000bf00 <httpd_parse_request+0xd8c>
		{
		cp = &buf[7];
1000bec4:	81 3f 00 20 	lwz     r9,32(r31)
1000bec8:	39 29 00 07 	addi    r9,r9,7
1000becc:	91 3f 00 1c 	stw     r9,28(r31)
		cp += strspn( cp, " \t" );
1000bed0:	80 7f 00 1c 	lwz     r3,28(r31)
1000bed4:	3d 20 10 02 	lis     r9,4098
1000bed8:	38 89 93 50 	addi    r4,r9,-27824
1000bedc:	48 02 19 41 	bl      1002d81c <strspn@plt>
1000bee0:	7c 69 1b 78 	mr      r9,r3
1000bee4:	81 5f 00 1c 	lwz     r10,28(r31)
1000bee8:	7d 2a 4a 14 	add     r9,r10,r9
1000beec:	91 3f 00 1c 	stw     r9,28(r31)
		hc->cookie = cp;
1000bef0:	81 3f 00 38 	lwz     r9,56(r31)
1000bef4:	81 5f 00 1c 	lwz     r10,28(r31)
1000bef8:	91 49 00 e0 	stw     r10,224(r9)
1000befc:	48 00 03 68 	b       1000c264 <httpd_parse_request+0x10f0>
		}
	    else if ( strncasecmp( buf, "Range:", 6 ) == 0 )
1000bf00:	80 7f 00 20 	lwz     r3,32(r31)
1000bf04:	3d 20 10 02 	lis     r9,4098
1000bf08:	38 89 94 28 	addi    r4,r9,-27608
1000bf0c:	38 a0 00 06 	li      r5,6
1000bf10:	48 02 17 f5 	bl      1002d704 <strncasecmp@plt>
1000bf14:	7c 69 1b 78 	mr      r9,r3
1000bf18:	2f 89 00 00 	cmpwi   cr7,r9,0
1000bf1c:	40 9e 01 40 	bne     cr7,1000c05c <httpd_parse_request+0xee8>
		{
		/* Only support %d- and %d-%d, not %d-%d,%d-%d or -%d. */
		if ( strchr( buf, ',' ) == (char*) 0 )
1000bf20:	80 7f 00 20 	lwz     r3,32(r31)
1000bf24:	38 80 00 2c 	li      r4,44
1000bf28:	48 02 17 1d 	bl      1002d644 <strchr@plt>
1000bf2c:	7c 69 1b 78 	mr      r9,r3
1000bf30:	2f 89 00 00 	cmpwi   cr7,r9,0
1000bf34:	40 9e 01 24 	bne     cr7,1000c058 <httpd_parse_request+0xee4>
		    {
		    char* cp_dash;
		    cp = strpbrk( buf, "=" );
1000bf38:	80 7f 00 20 	lwz     r3,32(r31)
1000bf3c:	38 80 00 3d 	li      r4,61
1000bf40:	48 02 17 05 	bl      1002d644 <strchr@plt>
1000bf44:	90 7f 00 1c 	stw     r3,28(r31)
		    if ( cp != (char*) 0 )
1000bf48:	81 3f 00 1c 	lwz     r9,28(r31)
1000bf4c:	2f 89 00 00 	cmpwi   cr7,r9,0
1000bf50:	41 9e 01 08 	beq     cr7,1000c058 <httpd_parse_request+0xee4>
			{
			cp_dash = strchr( cp + 1, '-' );
1000bf54:	81 3f 00 1c 	lwz     r9,28(r31)
1000bf58:	39 29 00 01 	addi    r9,r9,1
1000bf5c:	7d 23 4b 78 	mr      r3,r9
1000bf60:	38 80 00 2d 	li      r4,45
1000bf64:	48 02 16 e1 	bl      1002d644 <strchr@plt>
1000bf68:	90 7f 00 24 	stw     r3,36(r31)
			if ( cp_dash != (char*) 0 && cp_dash != cp + 1 )
1000bf6c:	81 3f 00 24 	lwz     r9,36(r31)
1000bf70:	2f 89 00 00 	cmpwi   cr7,r9,0
1000bf74:	41 9e 00 e4 	beq     cr7,1000c058 <httpd_parse_request+0xee4>
1000bf78:	81 3f 00 1c 	lwz     r9,28(r31)
1000bf7c:	39 49 00 01 	addi    r10,r9,1
1000bf80:	81 3f 00 24 	lwz     r9,36(r31)
1000bf84:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000bf88:	41 9e 00 d0 	beq     cr7,1000c058 <httpd_parse_request+0xee4>
			    {
			    *cp_dash = '\0';
1000bf8c:	81 3f 00 24 	lwz     r9,36(r31)
1000bf90:	39 40 00 00 	li      r10,0
1000bf94:	99 49 00 00 	stb     r10,0(r9)
			    hc->got_range = 1;
1000bf98:	81 3f 00 38 	lwz     r9,56(r31)
1000bf9c:	39 40 00 01 	li      r10,1
1000bfa0:	91 49 01 50 	stw     r10,336(r9)
			    hc->first_byte_index = atoll( cp + 1 );
1000bfa4:	81 3f 00 1c 	lwz     r9,28(r31)
1000bfa8:	39 29 00 01 	addi    r9,r9,1
1000bfac:	7d 23 4b 78 	mr      r3,r9
1000bfb0:	48 02 15 2d 	bl      1002d4dc <atoll@plt>
1000bfb4:	7c 8a 23 78 	mr      r10,r4
1000bfb8:	7c 69 1b 78 	mr      r9,r3
1000bfbc:	81 3f 00 38 	lwz     r9,56(r31)
1000bfc0:	91 49 01 58 	stw     r10,344(r9)
			    if ( hc->first_byte_index < 0 )
1000bfc4:	81 3f 00 38 	lwz     r9,56(r31)
1000bfc8:	81 29 01 58 	lwz     r9,344(r9)
1000bfcc:	2f 89 00 00 	cmpwi   cr7,r9,0
1000bfd0:	40 9c 00 10 	bge     cr7,1000bfe0 <httpd_parse_request+0xe6c>
				hc->first_byte_index = 0;
1000bfd4:	81 3f 00 38 	lwz     r9,56(r31)
1000bfd8:	39 40 00 00 	li      r10,0
1000bfdc:	91 49 01 58 	stw     r10,344(r9)
			    if ( isdigit( (int) cp_dash[1] ) )
1000bfe0:	48 02 18 4d 	bl      1002d82c <__ctype_b_loc@plt>
1000bfe4:	7c 69 1b 78 	mr      r9,r3
1000bfe8:	81 49 00 00 	lwz     r10,0(r9)
1000bfec:	81 3f 00 24 	lwz     r9,36(r31)
1000bff0:	39 29 00 01 	addi    r9,r9,1
1000bff4:	89 29 00 00 	lbz     r9,0(r9)
1000bff8:	55 29 06 3e 	clrlwi  r9,r9,24
1000bffc:	55 29 08 3c 	rlwinm  r9,r9,1,0,30
1000c000:	7d 2a 4a 14 	add     r9,r10,r9
1000c004:	a1 29 00 00 	lhz     r9,0(r9)
1000c008:	55 29 04 3e 	clrlwi  r9,r9,16
1000c00c:	55 29 07 38 	rlwinm  r9,r9,0,28,28
1000c010:	2f 89 00 00 	cmpwi   cr7,r9,0
1000c014:	41 9e 00 44 	beq     cr7,1000c058 <httpd_parse_request+0xee4>
				{
				hc->last_byte_index = atoll( cp_dash + 1 );
1000c018:	81 3f 00 24 	lwz     r9,36(r31)
1000c01c:	39 29 00 01 	addi    r9,r9,1
1000c020:	7d 23 4b 78 	mr      r3,r9
1000c024:	48 02 14 b9 	bl      1002d4dc <atoll@plt>
1000c028:	7c 8a 23 78 	mr      r10,r4
1000c02c:	7c 69 1b 78 	mr      r9,r3
1000c030:	81 3f 00 38 	lwz     r9,56(r31)
1000c034:	91 49 01 5c 	stw     r10,348(r9)
				if ( hc->last_byte_index < 0 )
1000c038:	81 3f 00 38 	lwz     r9,56(r31)
1000c03c:	81 29 01 5c 	lwz     r9,348(r9)
1000c040:	2f 89 00 00 	cmpwi   cr7,r9,0
1000c044:	40 9c 00 14 	bge     cr7,1000c058 <httpd_parse_request+0xee4>
				    hc->last_byte_index = -1;
1000c048:	81 3f 00 38 	lwz     r9,56(r31)
1000c04c:	39 40 ff ff 	li      r10,-1
1000c050:	91 49 01 5c 	stw     r10,348(r9)
1000c054:	48 00 02 10 	b       1000c264 <httpd_parse_request+0x10f0>
1000c058:	48 00 02 0c 	b       1000c264 <httpd_parse_request+0x10f0>
				}
			    }
			}
		    }
		}
	    else if ( strncasecmp( buf, "Range-If:", 9 ) == 0 ||
1000c05c:	80 7f 00 20 	lwz     r3,32(r31)
1000c060:	3d 20 10 02 	lis     r9,4098
1000c064:	38 89 94 30 	addi    r4,r9,-27600
1000c068:	38 a0 00 09 	li      r5,9
1000c06c:	48 02 16 99 	bl      1002d704 <strncasecmp@plt>
1000c070:	7c 69 1b 78 	mr      r9,r3
1000c074:	2f 89 00 00 	cmpwi   cr7,r9,0
1000c078:	41 9e 00 24 	beq     cr7,1000c09c <httpd_parse_request+0xf28>
		      strncasecmp( buf, "If-Range:", 9 ) == 0 )
1000c07c:	80 7f 00 20 	lwz     r3,32(r31)
1000c080:	3d 20 10 02 	lis     r9,4098
1000c084:	38 89 94 3c 	addi    r4,r9,-27588
1000c088:	38 a0 00 09 	li      r5,9
1000c08c:	48 02 16 79 	bl      1002d704 <strncasecmp@plt>
1000c090:	7c 69 1b 78 	mr      r9,r3
				}
			    }
			}
		    }
		}
	    else if ( strncasecmp( buf, "Range-If:", 9 ) == 0 ||
1000c094:	2f 89 00 00 	cmpwi   cr7,r9,0
1000c098:	40 9e 00 58 	bne     cr7,1000c0f0 <httpd_parse_request+0xf7c>
		      strncasecmp( buf, "If-Range:", 9 ) == 0 )
		{
		cp = &buf[9];
1000c09c:	81 3f 00 20 	lwz     r9,32(r31)
1000c0a0:	39 29 00 09 	addi    r9,r9,9
1000c0a4:	91 3f 00 1c 	stw     r9,28(r31)
		hc->range_if = tdate_parse( cp );
1000c0a8:	80 7f 00 1c 	lwz     r3,28(r31)
1000c0ac:	48 00 8a 01 	bl      10014aac <tdate_parse>
1000c0b0:	7c 6a 1b 78 	mr      r10,r3
1000c0b4:	81 3f 00 38 	lwz     r9,56(r31)
1000c0b8:	91 49 01 38 	stw     r10,312(r9)
		if ( hc->range_if == (time_t) -1 )
1000c0bc:	81 3f 00 38 	lwz     r9,56(r31)
1000c0c0:	81 49 01 38 	lwz     r10,312(r9)
1000c0c4:	39 20 ff ff 	li      r9,-1
1000c0c8:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000c0cc:	40 9e 00 20 	bne     cr7,1000c0ec <httpd_parse_request+0xf78>
		    syslog( LOG_DEBUG, "unparsable time: %.80s", cp );
1000c0d0:	38 60 00 07 	li      r3,7
1000c0d4:	3d 20 10 02 	lis     r9,4098
1000c0d8:	38 89 94 08 	addi    r4,r9,-27640
1000c0dc:	80 bf 00 1c 	lwz     r5,28(r31)
1000c0e0:	4c c6 31 82 	crclr   4*cr1+eq
1000c0e4:	48 02 16 a1 	bl      1002d784 <syslog@plt>
	    else if ( strncasecmp( buf, "Range-If:", 9 ) == 0 ||
		      strncasecmp( buf, "If-Range:", 9 ) == 0 )
		{
		cp = &buf[9];
		hc->range_if = tdate_parse( cp );
		if ( hc->range_if == (time_t) -1 )
1000c0e8:	48 00 01 7c 	b       1000c264 <httpd_parse_request+0x10f0>
1000c0ec:	48 00 01 78 	b       1000c264 <httpd_parse_request+0x10f0>
		    syslog( LOG_DEBUG, "unparsable time: %.80s", cp );
		}
	    else if ( strncasecmp( buf, "Content-Type:", 13 ) == 0 )
1000c0f0:	80 7f 00 20 	lwz     r3,32(r31)
1000c0f4:	3d 20 10 02 	lis     r9,4098
1000c0f8:	38 89 94 48 	addi    r4,r9,-27576
1000c0fc:	38 a0 00 0d 	li      r5,13
1000c100:	48 02 16 05 	bl      1002d704 <strncasecmp@plt>
1000c104:	7c 69 1b 78 	mr      r9,r3
1000c108:	2f 89 00 00 	cmpwi   cr7,r9,0
1000c10c:	40 9e 00 40 	bne     cr7,1000c14c <httpd_parse_request+0xfd8>
		{
		cp = &buf[13];
1000c110:	81 3f 00 20 	lwz     r9,32(r31)
1000c114:	39 29 00 0d 	addi    r9,r9,13
1000c118:	91 3f 00 1c 	stw     r9,28(r31)
		cp += strspn( cp, " \t" );
1000c11c:	80 7f 00 1c 	lwz     r3,28(r31)
1000c120:	3d 20 10 02 	lis     r9,4098
1000c124:	38 89 93 50 	addi    r4,r9,-27824
1000c128:	48 02 16 f5 	bl      1002d81c <strspn@plt>
1000c12c:	7c 69 1b 78 	mr      r9,r3
1000c130:	81 5f 00 1c 	lwz     r10,28(r31)
1000c134:	7d 2a 4a 14 	add     r9,r10,r9
1000c138:	91 3f 00 1c 	stw     r9,28(r31)
		hc->contenttype = cp;
1000c13c:	81 3f 00 38 	lwz     r9,56(r31)
1000c140:	81 5f 00 1c 	lwz     r10,28(r31)
1000c144:	91 49 00 e4 	stw     r10,228(r9)
1000c148:	48 00 01 1c 	b       1000c264 <httpd_parse_request+0x10f0>
		}
	    else if ( strncasecmp( buf, "Content-Length:", 15 ) == 0 )
1000c14c:	80 7f 00 20 	lwz     r3,32(r31)
1000c150:	3d 20 10 02 	lis     r9,4098
1000c154:	38 89 94 58 	addi    r4,r9,-27560
1000c158:	38 a0 00 0f 	li      r5,15
1000c15c:	48 02 15 a9 	bl      1002d704 <strncasecmp@plt>
1000c160:	7c 69 1b 78 	mr      r9,r3
1000c164:	2f 89 00 00 	cmpwi   cr7,r9,0
1000c168:	40 9e 00 2c 	bne     cr7,1000c194 <httpd_parse_request+0x1020>
		{
		cp = &buf[15];
1000c16c:	81 3f 00 20 	lwz     r9,32(r31)
1000c170:	39 29 00 0f 	addi    r9,r9,15
1000c174:	91 3f 00 1c 	stw     r9,28(r31)
		hc->contentlength = atol( cp );
1000c178:	80 7f 00 1c 	lwz     r3,28(r31)
1000c17c:	48 02 15 11 	bl      1002d68c <atol@plt>
1000c180:	7c 69 1b 78 	mr      r9,r3
1000c184:	7d 2a 4b 78 	mr      r10,r9
1000c188:	81 3f 00 38 	lwz     r9,56(r31)
1000c18c:	91 49 01 3c 	stw     r10,316(r9)
1000c190:	48 00 00 d4 	b       1000c264 <httpd_parse_request+0x10f0>
		}
	    else if ( strncasecmp( buf, "Authorization:", 14 ) == 0 )
1000c194:	80 7f 00 20 	lwz     r3,32(r31)
1000c198:	3d 20 10 02 	lis     r9,4098
1000c19c:	38 89 94 68 	addi    r4,r9,-27544
1000c1a0:	38 a0 00 0e 	li      r5,14
1000c1a4:	48 02 15 61 	bl      1002d704 <strncasecmp@plt>
1000c1a8:	7c 69 1b 78 	mr      r9,r3
1000c1ac:	2f 89 00 00 	cmpwi   cr7,r9,0
1000c1b0:	40 9e 00 40 	bne     cr7,1000c1f0 <httpd_parse_request+0x107c>
		{
		cp = &buf[14];
1000c1b4:	81 3f 00 20 	lwz     r9,32(r31)
1000c1b8:	39 29 00 0e 	addi    r9,r9,14
1000c1bc:	91 3f 00 1c 	stw     r9,28(r31)
		cp += strspn( cp, " \t" );
1000c1c0:	80 7f 00 1c 	lwz     r3,28(r31)
1000c1c4:	3d 20 10 02 	lis     r9,4098
1000c1c8:	38 89 93 50 	addi    r4,r9,-27824
1000c1cc:	48 02 16 51 	bl      1002d81c <strspn@plt>
1000c1d0:	7c 69 1b 78 	mr      r9,r3
1000c1d4:	81 5f 00 1c 	lwz     r10,28(r31)
1000c1d8:	7d 2a 4a 14 	add     r9,r10,r9
1000c1dc:	91 3f 00 1c 	stw     r9,28(r31)
		hc->authorization = cp;
1000c1e0:	81 3f 00 38 	lwz     r9,56(r31)
1000c1e4:	81 5f 00 1c 	lwz     r10,28(r31)
1000c1e8:	91 49 00 f4 	stw     r10,244(r9)
1000c1ec:	48 00 00 78 	b       1000c264 <httpd_parse_request+0x10f0>
		}
	    else if ( strncasecmp( buf, "Connection:", 11 ) == 0 )
1000c1f0:	80 7f 00 20 	lwz     r3,32(r31)
1000c1f4:	3d 20 10 02 	lis     r9,4098
1000c1f8:	38 89 94 78 	addi    r4,r9,-27528
1000c1fc:	38 a0 00 0b 	li      r5,11
1000c200:	48 02 15 05 	bl      1002d704 <strncasecmp@plt>
1000c204:	7c 69 1b 78 	mr      r9,r3
1000c208:	2f 89 00 00 	cmpwi   cr7,r9,0
1000c20c:	40 9e 00 58 	bne     cr7,1000c264 <httpd_parse_request+0x10f0>
		{
		cp = &buf[11];
1000c210:	81 3f 00 20 	lwz     r9,32(r31)
1000c214:	39 29 00 0b 	addi    r9,r9,11
1000c218:	91 3f 00 1c 	stw     r9,28(r31)
		cp += strspn( cp, " \t" );
1000c21c:	80 7f 00 1c 	lwz     r3,28(r31)
1000c220:	3d 20 10 02 	lis     r9,4098
1000c224:	38 89 93 50 	addi    r4,r9,-27824
1000c228:	48 02 15 f5 	bl      1002d81c <strspn@plt>
1000c22c:	7c 69 1b 78 	mr      r9,r3
1000c230:	81 5f 00 1c 	lwz     r10,28(r31)
1000c234:	7d 2a 4a 14 	add     r9,r10,r9
1000c238:	91 3f 00 1c 	stw     r9,28(r31)
		if ( strcasecmp( cp, "keep-alive" ) == 0 )
1000c23c:	80 7f 00 1c 	lwz     r3,28(r31)
1000c240:	3d 20 10 02 	lis     r9,4098
1000c244:	38 89 94 84 	addi    r4,r9,-27516
1000c248:	48 02 14 3d 	bl      1002d684 <strcasecmp@plt>
1000c24c:	7c 69 1b 78 	mr      r9,r3
1000c250:	2f 89 00 00 	cmpwi   cr7,r9,0
1000c254:	40 9e 00 10 	bne     cr7,1000c264 <httpd_parse_request+0x10f0>
		    hc->keep_alive = 1;
1000c258:	81 3f 00 38 	lwz     r9,56(r31)
1000c25c:	39 40 00 01 	li      r10,1
1000c260:	91 49 01 60 	stw     r10,352(r9)
	}

    if ( hc->mime_flag )
	{
	/* Read the MIME headers. */
	while ( ( buf = bufgets( hc ) ) != (char*) 0 )
1000c264:	80 7f 00 38 	lwz     r3,56(r31)
1000c268:	48 00 04 85 	bl      1000c6ec <bufgets>
1000c26c:	90 7f 00 20 	stw     r3,32(r31)
1000c270:	81 3f 00 20 	lwz     r9,32(r31)
1000c274:	2f 89 00 00 	cmpwi   cr7,r9,0
1000c278:	40 9e f6 58 	bne     cr7,1000b8d0 <httpd_parse_request+0x75c>
		syslog( LOG_DEBUG, "unknown request header: %.80s", buf );
#endif /* LOG_UNKNOWN_HEADERS */
	    }
	}

    if ( hc->one_one )
1000c27c:	81 3f 00 38 	lwz     r9,56(r31)
1000c280:	81 29 01 4c 	lwz     r9,332(r9)
1000c284:	2f 89 00 00 	cmpwi   cr7,r9,0
1000c288:	41 9e 00 8c 	beq     cr7,1000c314 <httpd_parse_request+0x11a0>
	{
	/* Check that HTTP/1.1 requests specify a host, as required. */
	if ( hc->reqhost[0] == '\0' && hc->hdrhost[0] == '\0' )
1000c28c:	81 3f 00 38 	lwz     r9,56(r31)
1000c290:	81 29 00 e8 	lwz     r9,232(r9)
1000c294:	89 29 00 00 	lbz     r9,0(r9)
1000c298:	55 29 06 3e 	clrlwi  r9,r9,24
1000c29c:	2f 89 00 00 	cmpwi   cr7,r9,0
1000c2a0:	40 9e 00 58 	bne     cr7,1000c2f8 <httpd_parse_request+0x1184>
1000c2a4:	81 3f 00 38 	lwz     r9,56(r31)
1000c2a8:	81 29 00 ec 	lwz     r9,236(r9)
1000c2ac:	89 29 00 00 	lbz     r9,0(r9)
1000c2b0:	55 29 06 3e 	clrlwi  r9,r9,24
1000c2b4:	2f 89 00 00 	cmpwi   cr7,r9,0
1000c2b8:	40 9e 00 40 	bne     cr7,1000c2f8 <httpd_parse_request+0x1184>
	    {
	    httpd_send_err( hc, 400, httpd_err400title, "", httpd_err400form, "" );
1000c2bc:	3d 20 10 03 	lis     r9,4099
1000c2c0:	81 49 d3 38 	lwz     r10,-11464(r9)
1000c2c4:	3d 20 10 03 	lis     r9,4099
1000c2c8:	81 29 d3 3c 	lwz     r9,-11460(r9)
1000c2cc:	80 7f 00 38 	lwz     r3,56(r31)
1000c2d0:	38 80 01 90 	li      r4,400
1000c2d4:	7d 45 53 78 	mr      r5,r10
1000c2d8:	3d 40 10 02 	lis     r10,4098
1000c2dc:	38 ca 8e d4 	addi    r6,r10,-28972
1000c2e0:	7d 27 4b 78 	mr      r7,r9
1000c2e4:	3d 20 10 02 	lis     r9,4098
1000c2e8:	39 09 8e d4 	addi    r8,r9,-28972
1000c2ec:	4b ff c5 09 	bl      100087f4 <httpd_send_err>
	    return -1;
1000c2f0:	39 20 ff ff 	li      r9,-1
1000c2f4:	48 00 03 d0 	b       1000c6c4 <httpd_parse_request+0x1550>
	** pipelining.  There's no way for us to tell.  Since we don't
	** implement keep-alives yet, if we close such a connection there
	** might be unread pipelined requests waiting.  So, we have to
	** do a lingering close.
	*/
	if ( hc->keep_alive )
1000c2f8:	81 3f 00 38 	lwz     r9,56(r31)
1000c2fc:	81 29 01 60 	lwz     r9,352(r9)
1000c300:	2f 89 00 00 	cmpwi   cr7,r9,0
1000c304:	41 9e 00 10 	beq     cr7,1000c314 <httpd_parse_request+0x11a0>
	    hc->should_linger = 1;
1000c308:	81 3f 00 38 	lwz     r9,56(r31)
1000c30c:	39 40 00 01 	li      r10,1
1000c310:	91 49 01 64 	stw     r10,356(r9)
    /* Ok, the request has been parsed.  Now we resolve stuff that
    ** may require the entire request.
    */

    /* Copy original filename to expanded filename. */
    httpd_realloc_str(
1000c314:	81 3f 00 38 	lwz     r9,56(r31)
1000c318:	3b a9 00 bc 	addi    r29,r9,188
1000c31c:	81 3f 00 38 	lwz     r9,56(r31)
1000c320:	3b c9 01 08 	addi    r30,r9,264
	&hc->expnfilename, &hc->maxexpnfilename, strlen( hc->origfilename ) );
1000c324:	81 3f 00 38 	lwz     r9,56(r31)
1000c328:	81 29 00 b8 	lwz     r9,184(r9)
    /* Ok, the request has been parsed.  Now we resolve stuff that
    ** may require the entire request.
    */

    /* Copy original filename to expanded filename. */
    httpd_realloc_str(
1000c32c:	7d 23 4b 78 	mr      r3,r9
1000c330:	48 02 13 25 	bl      1002d654 <strlen@plt>
1000c334:	7c 69 1b 78 	mr      r9,r3
1000c338:	7f a3 eb 78 	mr      r3,r29
1000c33c:	7f c4 f3 78 	mr      r4,r30
1000c340:	7d 25 4b 78 	mr      r5,r9
1000c344:	4b ff bf d5 	bl      10008318 <httpd_realloc_str>
	&hc->expnfilename, &hc->maxexpnfilename, strlen( hc->origfilename ) );
    (void) strcpy( hc->expnfilename, hc->origfilename );
1000c348:	81 3f 00 38 	lwz     r9,56(r31)
1000c34c:	81 49 00 bc 	lwz     r10,188(r9)
1000c350:	81 3f 00 38 	lwz     r9,56(r31)
1000c354:	81 29 00 b8 	lwz     r9,184(r9)
1000c358:	7d 43 53 78 	mr      r3,r10
1000c35c:	7d 24 4b 78 	mr      r4,r9
1000c360:	48 02 12 05 	bl      1002d564 <strcpy@plt>
	    }
#endif /* TILDE_MAP_2 */
	}

    /* Virtual host mapping. */
    if ( hc->hs->vhost )
1000c364:	81 3f 00 38 	lwz     r9,56(r31)
1000c368:	81 29 00 04 	lwz     r9,4(r9)
1000c36c:	81 29 00 3c 	lwz     r9,60(r9)
1000c370:	2f 89 00 00 	cmpwi   cr7,r9,0
1000c374:	41 9e 00 58 	beq     cr7,1000c3cc <httpd_parse_request+0x1258>
	if ( ! vhost_map( hc ) )
1000c378:	80 7f 00 38 	lwz     r3,56(r31)
1000c37c:	4b ff d6 99 	bl      10009a14 <vhost_map>
1000c380:	7c 69 1b 78 	mr      r9,r3
1000c384:	2f 89 00 00 	cmpwi   cr7,r9,0
1000c388:	40 9e 00 44 	bne     cr7,1000c3cc <httpd_parse_request+0x1258>
	    {
	    httpd_send_err( hc, 500, err500title, "", err500form, hc->encodedurl );
1000c38c:	3d 20 10 03 	lis     r9,4099
1000c390:	81 09 c1 34 	lwz     r8,-16076(r9)
1000c394:	3d 20 10 03 	lis     r9,4099
1000c398:	81 49 c1 38 	lwz     r10,-16072(r9)
1000c39c:	81 3f 00 38 	lwz     r9,56(r31)
1000c3a0:	81 29 00 ac 	lwz     r9,172(r9)
1000c3a4:	80 7f 00 38 	lwz     r3,56(r31)
1000c3a8:	38 80 01 f4 	li      r4,500
1000c3ac:	7d 05 43 78 	mr      r5,r8
1000c3b0:	3d 00 10 02 	lis     r8,4098
1000c3b4:	38 c8 8e d4 	addi    r6,r8,-28972
1000c3b8:	7d 47 53 78 	mr      r7,r10
1000c3bc:	7d 28 4b 78 	mr      r8,r9
1000c3c0:	4b ff c4 35 	bl      100087f4 <httpd_send_err>
	    return -1;
1000c3c4:	39 20 ff ff 	li      r9,-1
1000c3c8:	48 00 02 fc 	b       1000c6c4 <httpd_parse_request+0x1550>
	    }

    /* Expand all symbolic links in the filename.  This also gives us
    ** any trailing non-existing components, for pathinfo.
    */
    cp = expand_symlinks( hc->expnfilename, &pi, hc->hs->no_symlink_check, hc->tildemapped );
1000c3cc:	81 3f 00 38 	lwz     r9,56(r31)
1000c3d0:	80 e9 00 bc 	lwz     r7,188(r9)
1000c3d4:	81 3f 00 38 	lwz     r9,56(r31)
1000c3d8:	81 29 00 04 	lwz     r9,4(r9)
1000c3dc:	81 49 00 38 	lwz     r10,56(r9)
1000c3e0:	81 3f 00 38 	lwz     r9,56(r31)
1000c3e4:	81 29 01 54 	lwz     r9,340(r9)
1000c3e8:	39 1f 00 2c 	addi    r8,r31,44
1000c3ec:	7c e3 3b 78 	mr      r3,r7
1000c3f0:	7d 04 43 78 	mr      r4,r8
1000c3f4:	7d 45 53 78 	mr      r5,r10
1000c3f8:	7d 26 4b 78 	mr      r6,r9
1000c3fc:	4b ff d8 f9 	bl      10009cf4 <expand_symlinks>
1000c400:	90 7f 00 1c 	stw     r3,28(r31)
    if ( cp == (char*) 0 )
1000c404:	81 3f 00 1c 	lwz     r9,28(r31)
1000c408:	2f 89 00 00 	cmpwi   cr7,r9,0
1000c40c:	40 9e 00 44 	bne     cr7,1000c450 <httpd_parse_request+0x12dc>
	{
	httpd_send_err( hc, 500, err500title, "", err500form, hc->encodedurl );
1000c410:	3d 20 10 03 	lis     r9,4099
1000c414:	81 09 c1 34 	lwz     r8,-16076(r9)
1000c418:	3d 20 10 03 	lis     r9,4099
1000c41c:	81 49 c1 38 	lwz     r10,-16072(r9)
1000c420:	81 3f 00 38 	lwz     r9,56(r31)
1000c424:	81 29 00 ac 	lwz     r9,172(r9)
1000c428:	80 7f 00 38 	lwz     r3,56(r31)
1000c42c:	38 80 01 f4 	li      r4,500
1000c430:	7d 05 43 78 	mr      r5,r8
1000c434:	3d 00 10 02 	lis     r8,4098
1000c438:	38 c8 8e d4 	addi    r6,r8,-28972
1000c43c:	7d 47 53 78 	mr      r7,r10
1000c440:	7d 28 4b 78 	mr      r8,r9
1000c444:	4b ff c3 b1 	bl      100087f4 <httpd_send_err>
	return -1;
1000c448:	39 20 ff ff 	li      r9,-1
1000c44c:	48 00 02 78 	b       1000c6c4 <httpd_parse_request+0x1550>
	}
    httpd_realloc_str( &hc->expnfilename, &hc->maxexpnfilename, strlen( cp ) );
1000c450:	81 3f 00 38 	lwz     r9,56(r31)
1000c454:	3b a9 00 bc 	addi    r29,r9,188
1000c458:	81 3f 00 38 	lwz     r9,56(r31)
1000c45c:	3b c9 01 08 	addi    r30,r9,264
1000c460:	80 7f 00 1c 	lwz     r3,28(r31)
1000c464:	48 02 11 f1 	bl      1002d654 <strlen@plt>
1000c468:	7c 69 1b 78 	mr      r9,r3
1000c46c:	7f a3 eb 78 	mr      r3,r29
1000c470:	7f c4 f3 78 	mr      r4,r30
1000c474:	7d 25 4b 78 	mr      r5,r9
1000c478:	4b ff be a1 	bl      10008318 <httpd_realloc_str>
    (void) strcpy( hc->expnfilename, cp );
1000c47c:	81 3f 00 38 	lwz     r9,56(r31)
1000c480:	81 29 00 bc 	lwz     r9,188(r9)
1000c484:	7d 23 4b 78 	mr      r3,r9
1000c488:	80 9f 00 1c 	lwz     r4,28(r31)
1000c48c:	48 02 10 d9 	bl      1002d564 <strcpy@plt>
    httpd_realloc_str( &hc->pathinfo, &hc->maxpathinfo, strlen( pi ) );
1000c490:	81 3f 00 38 	lwz     r9,56(r31)
1000c494:	3b a9 00 c4 	addi    r29,r9,196
1000c498:	81 3f 00 38 	lwz     r9,56(r31)
1000c49c:	3b c9 01 10 	addi    r30,r9,272
1000c4a0:	81 3f 00 2c 	lwz     r9,44(r31)
1000c4a4:	7d 23 4b 78 	mr      r3,r9
1000c4a8:	48 02 11 ad 	bl      1002d654 <strlen@plt>
1000c4ac:	7c 69 1b 78 	mr      r9,r3
1000c4b0:	7f a3 eb 78 	mr      r3,r29
1000c4b4:	7f c4 f3 78 	mr      r4,r30
1000c4b8:	7d 25 4b 78 	mr      r5,r9
1000c4bc:	4b ff be 5d 	bl      10008318 <httpd_realloc_str>
    (void) strcpy( hc->pathinfo, pi );
1000c4c0:	81 3f 00 38 	lwz     r9,56(r31)
1000c4c4:	81 49 00 c4 	lwz     r10,196(r9)
1000c4c8:	81 3f 00 2c 	lwz     r9,44(r31)
1000c4cc:	7d 43 53 78 	mr      r3,r10
1000c4d0:	7d 24 4b 78 	mr      r4,r9
1000c4d4:	48 02 10 91 	bl      1002d564 <strcpy@plt>

    /* Remove pathinfo stuff from the original filename too. */
    if ( hc->pathinfo[0] != '\0' )
1000c4d8:	81 3f 00 38 	lwz     r9,56(r31)
1000c4dc:	81 29 00 c4 	lwz     r9,196(r9)
1000c4e0:	89 29 00 00 	lbz     r9,0(r9)
1000c4e4:	55 29 06 3e 	clrlwi  r9,r9,24
1000c4e8:	2f 89 00 00 	cmpwi   cr7,r9,0
1000c4ec:	41 9e 00 8c 	beq     cr7,1000c578 <httpd_parse_request+0x1404>
	{
	int i;
	i = strlen( hc->origfilename ) - strlen( hc->pathinfo );
1000c4f0:	81 3f 00 38 	lwz     r9,56(r31)
1000c4f4:	81 29 00 b8 	lwz     r9,184(r9)
1000c4f8:	7d 23 4b 78 	mr      r3,r9
1000c4fc:	48 02 11 59 	bl      1002d654 <strlen@plt>
1000c500:	7c 7e 1b 78 	mr      r30,r3
1000c504:	81 3f 00 38 	lwz     r9,56(r31)
1000c508:	81 29 00 c4 	lwz     r9,196(r9)
1000c50c:	7d 23 4b 78 	mr      r3,r9
1000c510:	48 02 11 45 	bl      1002d654 <strlen@plt>
1000c514:	7c 69 1b 78 	mr      r9,r3
1000c518:	7d 29 f0 50 	subf    r9,r9,r30
1000c51c:	91 3f 00 28 	stw     r9,40(r31)
	if ( i > 0 && strcmp( &hc->origfilename[i], hc->pathinfo ) == 0 )
1000c520:	81 3f 00 28 	lwz     r9,40(r31)
1000c524:	2f 89 00 00 	cmpwi   cr7,r9,0
1000c528:	40 9d 00 50 	ble     cr7,1000c578 <httpd_parse_request+0x1404>
1000c52c:	81 3f 00 38 	lwz     r9,56(r31)
1000c530:	81 49 00 b8 	lwz     r10,184(r9)
1000c534:	81 3f 00 28 	lwz     r9,40(r31)
1000c538:	7d 4a 4a 14 	add     r10,r10,r9
1000c53c:	81 3f 00 38 	lwz     r9,56(r31)
1000c540:	81 29 00 c4 	lwz     r9,196(r9)
1000c544:	7d 43 53 78 	mr      r3,r10
1000c548:	7d 24 4b 78 	mr      r4,r9
1000c54c:	48 02 0e 91 	bl      1002d3dc <strcmp@plt>
1000c550:	7c 69 1b 78 	mr      r9,r3
1000c554:	2f 89 00 00 	cmpwi   cr7,r9,0
1000c558:	40 9e 00 20 	bne     cr7,1000c578 <httpd_parse_request+0x1404>
	    hc->origfilename[i - 1] = '\0';
1000c55c:	81 3f 00 38 	lwz     r9,56(r31)
1000c560:	81 49 00 b8 	lwz     r10,184(r9)
1000c564:	81 3f 00 28 	lwz     r9,40(r31)
1000c568:	39 29 ff ff 	addi    r9,r9,-1
1000c56c:	7d 2a 4a 14 	add     r9,r10,r9
1000c570:	39 40 00 00 	li      r10,0
1000c574:	99 49 00 00 	stb     r10,0(r9)
	}

    /* If the expanded filename is an absolute path, check that it's still
    ** within the current directory or the alternate directory.
    */
    if ( hc->expnfilename[0] == '/' )
1000c578:	81 3f 00 38 	lwz     r9,56(r31)
1000c57c:	81 29 00 bc 	lwz     r9,188(r9)
1000c580:	89 29 00 00 	lbz     r9,0(r9)
1000c584:	55 29 06 3e 	clrlwi  r9,r9,24
1000c588:	2b 89 00 2f 	cmplwi  cr7,r9,47
1000c58c:	40 9e 01 34 	bne     cr7,1000c6c0 <httpd_parse_request+0x154c>
	{
	if ( strncmp(
		 hc->expnfilename, hc->hs->cwd, strlen( hc->hs->cwd ) ) == 0 )
1000c590:	81 3f 00 38 	lwz     r9,56(r31)
1000c594:	83 a9 00 bc 	lwz     r29,188(r9)
1000c598:	81 3f 00 38 	lwz     r9,56(r31)
1000c59c:	81 29 00 04 	lwz     r9,4(r9)
1000c5a0:	83 c9 00 24 	lwz     r30,36(r9)
1000c5a4:	81 3f 00 38 	lwz     r9,56(r31)
1000c5a8:	81 29 00 04 	lwz     r9,4(r9)
1000c5ac:	81 29 00 24 	lwz     r9,36(r9)
    /* If the expanded filename is an absolute path, check that it's still
    ** within the current directory or the alternate directory.
    */
    if ( hc->expnfilename[0] == '/' )
	{
	if ( strncmp(
1000c5b0:	7d 23 4b 78 	mr      r3,r9
1000c5b4:	48 02 10 a1 	bl      1002d654 <strlen@plt>
1000c5b8:	7c 69 1b 78 	mr      r9,r3
1000c5bc:	7f a3 eb 78 	mr      r3,r29
1000c5c0:	7f c4 f3 78 	mr      r4,r30
1000c5c4:	7d 25 4b 78 	mr      r5,r9
1000c5c8:	48 02 12 2d 	bl      1002d7f4 <strncmp@plt>
1000c5cc:	7c 69 1b 78 	mr      r9,r3
1000c5d0:	2f 89 00 00 	cmpwi   cr7,r9,0
1000c5d4:	40 9e 00 78 	bne     cr7,1000c64c <httpd_parse_request+0x14d8>
		 hc->expnfilename, hc->hs->cwd, strlen( hc->hs->cwd ) ) == 0 )
	    {
	    /* Elide the current directory. */
	    (void) ol_strcpy(
1000c5d8:	81 3f 00 38 	lwz     r9,56(r31)
1000c5dc:	83 a9 00 bc 	lwz     r29,188(r9)
1000c5e0:	81 3f 00 38 	lwz     r9,56(r31)
1000c5e4:	83 c9 00 bc 	lwz     r30,188(r9)
1000c5e8:	81 3f 00 38 	lwz     r9,56(r31)
1000c5ec:	81 29 00 04 	lwz     r9,4(r9)
1000c5f0:	81 29 00 24 	lwz     r9,36(r9)
1000c5f4:	7d 23 4b 78 	mr      r3,r9
1000c5f8:	48 02 10 5d 	bl      1002d654 <strlen@plt>
1000c5fc:	7c 69 1b 78 	mr      r9,r3
1000c600:	7f de 4a 14 	add     r30,r30,r9
1000c604:	81 3f 00 38 	lwz     r9,56(r31)
1000c608:	83 89 00 bc 	lwz     r28,188(r9)
1000c60c:	81 3f 00 38 	lwz     r9,56(r31)
1000c610:	81 29 00 04 	lwz     r9,4(r9)
1000c614:	81 29 00 24 	lwz     r9,36(r9)
1000c618:	7d 23 4b 78 	mr      r3,r9
1000c61c:	48 02 10 39 	bl      1002d654 <strlen@plt>
1000c620:	7c 69 1b 78 	mr      r9,r3
1000c624:	7d 3c 4a 14 	add     r9,r28,r9
1000c628:	7d 23 4b 78 	mr      r3,r9
1000c62c:	48 02 10 29 	bl      1002d654 <strlen@plt>
1000c630:	7c 69 1b 78 	mr      r9,r3
1000c634:	39 29 00 01 	addi    r9,r9,1
1000c638:	7f a3 eb 78 	mr      r3,r29
1000c63c:	7f c4 f3 78 	mr      r4,r30
1000c640:	7d 25 4b 78 	mr      r5,r9
1000c644:	48 02 0d e1 	bl      1002d424 <memmove@plt>
1000c648:	48 00 00 78 	b       1000c6c0 <httpd_parse_request+0x154c>
		      hc->expnfilename[strlen( hc->altdir )] == '/' ) ) )
	    {}
#endif /* TILDE_MAP_2 */
	else
	    {
	    syslog(
1000c64c:	81 3f 00 38 	lwz     r9,56(r31)
1000c650:	39 29 00 08 	addi    r9,r9,8
1000c654:	7d 23 4b 78 	mr      r3,r9
1000c658:	48 00 4c f5 	bl      1001134c <httpd_ntoa>
1000c65c:	7c 6a 1b 78 	mr      r10,r3
1000c660:	81 3f 00 38 	lwz     r9,56(r31)
1000c664:	81 29 00 ac 	lwz     r9,172(r9)
1000c668:	38 60 00 05 	li      r3,5
1000c66c:	3d 00 10 02 	lis     r8,4098
1000c670:	38 88 94 90 	addi    r4,r8,-27504
1000c674:	7d 45 53 78 	mr      r5,r10
1000c678:	7d 26 4b 78 	mr      r6,r9
1000c67c:	4c c6 31 82 	crclr   4*cr1+eq
1000c680:	48 02 11 05 	bl      1002d784 <syslog@plt>
		LOG_NOTICE, "%.80s URL \"%.80s\" goes outside the web tree",
		httpd_ntoa( &hc->client_addr ), hc->encodedurl );
	    httpd_send_err(
1000c684:	3d 20 10 03 	lis     r9,4099
1000c688:	81 49 c1 20 	lwz     r10,-16096(r9)
1000c68c:	81 3f 00 38 	lwz     r9,56(r31)
1000c690:	81 29 00 ac 	lwz     r9,172(r9)
1000c694:	80 7f 00 38 	lwz     r3,56(r31)
1000c698:	38 80 01 93 	li      r4,403
1000c69c:	7d 45 53 78 	mr      r5,r10
1000c6a0:	3d 40 10 02 	lis     r10,4098
1000c6a4:	38 ca 8e d4 	addi    r6,r10,-28972
1000c6a8:	3d 40 10 02 	lis     r10,4098
1000c6ac:	38 ea 94 bc 	addi    r7,r10,-27460
1000c6b0:	7d 28 4b 78 	mr      r8,r9
1000c6b4:	4b ff c1 41 	bl      100087f4 <httpd_send_err>
		hc, 403, err403title, "",
		ERROR_FORM( err403form, "The requested URL '%.80s' resolves to a file outside the permitted web server directory tree.\n" ),
		hc->encodedurl );
	    return -1;
1000c6b8:	39 20 ff ff 	li      r9,-1
1000c6bc:	48 00 00 08 	b       1000c6c4 <httpd_parse_request+0x1550>
	    }
	}

    return 0;
1000c6c0:	39 20 00 00 	li      r9,0
    }
1000c6c4:	7d 23 4b 78 	mr      r3,r9
1000c6c8:	39 7f 00 50 	addi    r11,r31,80
1000c6cc:	80 0b 00 04 	lwz     r0,4(r11)
1000c6d0:	7c 08 03 a6 	mtlr    r0
1000c6d4:	83 8b ff f0 	lwz     r28,-16(r11)
1000c6d8:	83 ab ff f4 	lwz     r29,-12(r11)
1000c6dc:	83 cb ff f8 	lwz     r30,-8(r11)
1000c6e0:	83 eb ff fc 	lwz     r31,-4(r11)
1000c6e4:	7d 61 5b 78 	mr      r1,r11
1000c6e8:	4e 80 00 20 	blr

1000c6ec <bufgets>:


static char*
bufgets( httpd_conn* hc )
    {
1000c6ec:	94 21 ff d0 	stwu    r1,-48(r1)
1000c6f0:	93 e1 00 2c 	stw     r31,44(r1)
1000c6f4:	7c 3f 0b 78 	mr      r31,r1
1000c6f8:	90 7f 00 18 	stw     r3,24(r31)
    int i;
    char c;

    for ( i = hc->checked_idx; hc->checked_idx < hc->read_idx; ++hc->checked_idx )
1000c6fc:	81 3f 00 18 	lwz     r9,24(r31)
1000c700:	81 29 00 94 	lwz     r9,148(r9)
1000c704:	91 3f 00 08 	stw     r9,8(r31)
1000c708:	48 00 01 14 	b       1000c81c <bufgets+0x130>
	{
	c = hc->read_buf[hc->checked_idx];
1000c70c:	81 3f 00 18 	lwz     r9,24(r31)
1000c710:	81 49 00 88 	lwz     r10,136(r9)
1000c714:	81 3f 00 18 	lwz     r9,24(r31)
1000c718:	81 29 00 94 	lwz     r9,148(r9)
1000c71c:	7d 2a 4a 14 	add     r9,r10,r9
1000c720:	89 29 00 00 	lbz     r9,0(r9)
1000c724:	99 3f 00 0c 	stb     r9,12(r31)
	if ( c == '\012' || c == '\015' )
1000c728:	89 3f 00 0c 	lbz     r9,12(r31)
1000c72c:	55 29 06 3e 	clrlwi  r9,r9,24
1000c730:	2f 89 00 0a 	cmpwi   cr7,r9,10
1000c734:	41 9e 00 14 	beq     cr7,1000c748 <bufgets+0x5c>
1000c738:	89 3f 00 0c 	lbz     r9,12(r31)
1000c73c:	55 29 06 3e 	clrlwi  r9,r9,24
1000c740:	2f 89 00 0d 	cmpwi   cr7,r9,13
1000c744:	40 9e 00 c4 	bne     cr7,1000c808 <bufgets+0x11c>
	    {
	    hc->read_buf[hc->checked_idx] = '\0';
1000c748:	81 3f 00 18 	lwz     r9,24(r31)
1000c74c:	81 49 00 88 	lwz     r10,136(r9)
1000c750:	81 3f 00 18 	lwz     r9,24(r31)
1000c754:	81 29 00 94 	lwz     r9,148(r9)
1000c758:	7d 2a 4a 14 	add     r9,r10,r9
1000c75c:	39 40 00 00 	li      r10,0
1000c760:	99 49 00 00 	stb     r10,0(r9)
	    ++hc->checked_idx;
1000c764:	81 3f 00 18 	lwz     r9,24(r31)
1000c768:	81 29 00 94 	lwz     r9,148(r9)
1000c76c:	39 49 00 01 	addi    r10,r9,1
1000c770:	81 3f 00 18 	lwz     r9,24(r31)
1000c774:	91 49 00 94 	stw     r10,148(r9)
	    if ( c == '\015' && hc->checked_idx < hc->read_idx &&
1000c778:	89 3f 00 0c 	lbz     r9,12(r31)
1000c77c:	55 29 06 3e 	clrlwi  r9,r9,24
1000c780:	2f 89 00 0d 	cmpwi   cr7,r9,13
1000c784:	40 9e 00 70 	bne     cr7,1000c7f4 <bufgets+0x108>
1000c788:	81 3f 00 18 	lwz     r9,24(r31)
1000c78c:	81 49 00 94 	lwz     r10,148(r9)
1000c790:	81 3f 00 18 	lwz     r9,24(r31)
1000c794:	81 29 00 90 	lwz     r9,144(r9)
1000c798:	7f 8a 48 40 	cmplw   cr7,r10,r9
1000c79c:	40 9c 00 58 	bge     cr7,1000c7f4 <bufgets+0x108>
		 hc->read_buf[hc->checked_idx] == '\012' )
1000c7a0:	81 3f 00 18 	lwz     r9,24(r31)
1000c7a4:	81 49 00 88 	lwz     r10,136(r9)
1000c7a8:	81 3f 00 18 	lwz     r9,24(r31)
1000c7ac:	81 29 00 94 	lwz     r9,148(r9)
1000c7b0:	7d 2a 4a 14 	add     r9,r10,r9
1000c7b4:	89 29 00 00 	lbz     r9,0(r9)
1000c7b8:	55 29 06 3e 	clrlwi  r9,r9,24
	c = hc->read_buf[hc->checked_idx];
	if ( c == '\012' || c == '\015' )
	    {
	    hc->read_buf[hc->checked_idx] = '\0';
	    ++hc->checked_idx;
	    if ( c == '\015' && hc->checked_idx < hc->read_idx &&
1000c7bc:	2b 89 00 0a 	cmplwi  cr7,r9,10
1000c7c0:	40 9e 00 34 	bne     cr7,1000c7f4 <bufgets+0x108>
		 hc->read_buf[hc->checked_idx] == '\012' )
		{
		hc->read_buf[hc->checked_idx] = '\0';
1000c7c4:	81 3f 00 18 	lwz     r9,24(r31)
1000c7c8:	81 49 00 88 	lwz     r10,136(r9)
1000c7cc:	81 3f 00 18 	lwz     r9,24(r31)
1000c7d0:	81 29 00 94 	lwz     r9,148(r9)
1000c7d4:	7d 2a 4a 14 	add     r9,r10,r9
1000c7d8:	39 40 00 00 	li      r10,0
1000c7dc:	99 49 00 00 	stb     r10,0(r9)
		++hc->checked_idx;
1000c7e0:	81 3f 00 18 	lwz     r9,24(r31)
1000c7e4:	81 29 00 94 	lwz     r9,148(r9)
1000c7e8:	39 49 00 01 	addi    r10,r9,1
1000c7ec:	81 3f 00 18 	lwz     r9,24(r31)
1000c7f0:	91 49 00 94 	stw     r10,148(r9)
		}
	    return &(hc->read_buf[i]);
1000c7f4:	81 3f 00 18 	lwz     r9,24(r31)
1000c7f8:	81 49 00 88 	lwz     r10,136(r9)
1000c7fc:	81 3f 00 08 	lwz     r9,8(r31)
1000c800:	7d 2a 4a 14 	add     r9,r10,r9
1000c804:	48 00 00 34 	b       1000c838 <bufgets+0x14c>
bufgets( httpd_conn* hc )
    {
    int i;
    char c;

    for ( i = hc->checked_idx; hc->checked_idx < hc->read_idx; ++hc->checked_idx )
1000c808:	81 3f 00 18 	lwz     r9,24(r31)
1000c80c:	81 29 00 94 	lwz     r9,148(r9)
1000c810:	39 49 00 01 	addi    r10,r9,1
1000c814:	81 3f 00 18 	lwz     r9,24(r31)
1000c818:	91 49 00 94 	stw     r10,148(r9)
1000c81c:	81 3f 00 18 	lwz     r9,24(r31)
1000c820:	81 49 00 94 	lwz     r10,148(r9)
1000c824:	81 3f 00 18 	lwz     r9,24(r31)
1000c828:	81 29 00 90 	lwz     r9,144(r9)
1000c82c:	7f 8a 48 40 	cmplw   cr7,r10,r9
1000c830:	41 9c fe dc 	blt     cr7,1000c70c <bufgets+0x20>
		++hc->checked_idx;
		}
	    return &(hc->read_buf[i]);
	    }
	}
    return (char*) 0;
1000c834:	39 20 00 00 	li      r9,0
    }
1000c838:	7d 23 4b 78 	mr      r3,r9
1000c83c:	39 7f 00 30 	addi    r11,r31,48
1000c840:	83 eb ff fc 	lwz     r31,-4(r11)
1000c844:	7d 61 5b 78 	mr      r1,r11
1000c848:	4e 80 00 20 	blr

1000c84c <de_dotdot>:


static void
de_dotdot( char* file )
    {
1000c84c:	94 21 ff d0 	stwu    r1,-48(r1)
1000c850:	7c 08 02 a6 	mflr    r0
1000c854:	90 01 00 34 	stw     r0,52(r1)
1000c858:	93 a1 00 24 	stw     r29,36(r1)
1000c85c:	93 c1 00 28 	stw     r30,40(r1)
1000c860:	93 e1 00 2c 	stw     r31,44(r1)
1000c864:	7c 3f 0b 78 	mr      r31,r1
1000c868:	90 7f 00 18 	stw     r3,24(r31)
    char* cp;
    char* cp2;
    int l;

    /* Collapse any multiple / sequences. */
    while ( ( cp = strstr( file, "//") ) != (char*) 0 )
1000c86c:	48 00 00 5c 	b       1000c8c8 <de_dotdot+0x7c>
	{
	for ( cp2 = cp + 2; *cp2 == '/'; ++cp2 )
1000c870:	81 3f 00 0c 	lwz     r9,12(r31)
1000c874:	39 29 00 02 	addi    r9,r9,2
1000c878:	91 3f 00 08 	stw     r9,8(r31)
1000c87c:	48 00 00 10 	b       1000c88c <de_dotdot+0x40>
1000c880:	81 3f 00 08 	lwz     r9,8(r31)
1000c884:	39 29 00 01 	addi    r9,r9,1
1000c888:	91 3f 00 08 	stw     r9,8(r31)
1000c88c:	81 3f 00 08 	lwz     r9,8(r31)
1000c890:	89 29 00 00 	lbz     r9,0(r9)
1000c894:	55 29 06 3e 	clrlwi  r9,r9,24
1000c898:	2b 89 00 2f 	cmplwi  cr7,r9,47
1000c89c:	41 9e ff e4 	beq     cr7,1000c880 <de_dotdot+0x34>
	    continue;
	(void) ol_strcpy( cp + 1, cp2 );
1000c8a0:	81 3f 00 0c 	lwz     r9,12(r31)
1000c8a4:	3b c9 00 01 	addi    r30,r9,1
1000c8a8:	80 7f 00 08 	lwz     r3,8(r31)
1000c8ac:	48 02 0d a9 	bl      1002d654 <strlen@plt>
1000c8b0:	7c 69 1b 78 	mr      r9,r3
1000c8b4:	39 29 00 01 	addi    r9,r9,1
1000c8b8:	7f c3 f3 78 	mr      r3,r30
1000c8bc:	80 9f 00 08 	lwz     r4,8(r31)
1000c8c0:	7d 25 4b 78 	mr      r5,r9
1000c8c4:	48 02 0b 61 	bl      1002d424 <memmove@plt>
    char* cp;
    char* cp2;
    int l;

    /* Collapse any multiple / sequences. */
    while ( ( cp = strstr( file, "//") ) != (char*) 0 )
1000c8c8:	80 7f 00 18 	lwz     r3,24(r31)
1000c8cc:	3d 20 10 02 	lis     r9,4098
1000c8d0:	38 89 95 1c 	addi    r4,r9,-27364
1000c8d4:	48 02 0b 01 	bl      1002d3d4 <strstr@plt>
1000c8d8:	90 7f 00 0c 	stw     r3,12(r31)
1000c8dc:	81 3f 00 0c 	lwz     r9,12(r31)
1000c8e0:	2f 89 00 00 	cmpwi   cr7,r9,0
1000c8e4:	40 9e ff 8c 	bne     cr7,1000c870 <de_dotdot+0x24>
	    continue;
	(void) ol_strcpy( cp + 1, cp2 );
	}

    /* Remove leading ./ and any /./ sequences. */
    while ( strncmp( file, "./", 2 ) == 0 )
1000c8e8:	48 00 00 34 	b       1000c91c <de_dotdot+0xd0>
	(void) ol_strcpy( file, file + 2 );
1000c8ec:	81 3f 00 18 	lwz     r9,24(r31)
1000c8f0:	3b c9 00 02 	addi    r30,r9,2
1000c8f4:	81 3f 00 18 	lwz     r9,24(r31)
1000c8f8:	39 29 00 02 	addi    r9,r9,2
1000c8fc:	7d 23 4b 78 	mr      r3,r9
1000c900:	48 02 0d 55 	bl      1002d654 <strlen@plt>
1000c904:	7c 69 1b 78 	mr      r9,r3
1000c908:	39 29 00 01 	addi    r9,r9,1
1000c90c:	80 7f 00 18 	lwz     r3,24(r31)
1000c910:	7f c4 f3 78 	mr      r4,r30
1000c914:	7d 25 4b 78 	mr      r5,r9
1000c918:	48 02 0b 0d 	bl      1002d424 <memmove@plt>
	    continue;
	(void) ol_strcpy( cp + 1, cp2 );
	}

    /* Remove leading ./ and any /./ sequences. */
    while ( strncmp( file, "./", 2 ) == 0 )
1000c91c:	80 7f 00 18 	lwz     r3,24(r31)
1000c920:	3d 20 10 02 	lis     r9,4098
1000c924:	38 89 95 20 	addi    r4,r9,-27360
1000c928:	38 a0 00 02 	li      r5,2
1000c92c:	48 02 0e c9 	bl      1002d7f4 <strncmp@plt>
1000c930:	7c 69 1b 78 	mr      r9,r3
1000c934:	2f 89 00 00 	cmpwi   cr7,r9,0
1000c938:	41 9e ff b4 	beq     cr7,1000c8ec <de_dotdot+0xa0>
	(void) ol_strcpy( file, file + 2 );
    while ( ( cp = strstr( file, "/./") ) != (char*) 0 )
1000c93c:	48 00 00 34 	b       1000c970 <de_dotdot+0x124>
	(void) ol_strcpy( cp, cp + 2 );
1000c940:	81 3f 00 0c 	lwz     r9,12(r31)
1000c944:	3b c9 00 02 	addi    r30,r9,2
1000c948:	81 3f 00 0c 	lwz     r9,12(r31)
1000c94c:	39 29 00 02 	addi    r9,r9,2
1000c950:	7d 23 4b 78 	mr      r3,r9
1000c954:	48 02 0d 01 	bl      1002d654 <strlen@plt>
1000c958:	7c 69 1b 78 	mr      r9,r3
1000c95c:	39 29 00 01 	addi    r9,r9,1
1000c960:	80 7f 00 0c 	lwz     r3,12(r31)
1000c964:	7f c4 f3 78 	mr      r4,r30
1000c968:	7d 25 4b 78 	mr      r5,r9
1000c96c:	48 02 0a b9 	bl      1002d424 <memmove@plt>
	}

    /* Remove leading ./ and any /./ sequences. */
    while ( strncmp( file, "./", 2 ) == 0 )
	(void) ol_strcpy( file, file + 2 );
    while ( ( cp = strstr( file, "/./") ) != (char*) 0 )
1000c970:	80 7f 00 18 	lwz     r3,24(r31)
1000c974:	3d 20 10 02 	lis     r9,4098
1000c978:	38 89 95 24 	addi    r4,r9,-27356
1000c97c:	48 02 0a 59 	bl      1002d3d4 <strstr@plt>
1000c980:	90 7f 00 0c 	stw     r3,12(r31)
1000c984:	81 3f 00 0c 	lwz     r9,12(r31)
1000c988:	2f 89 00 00 	cmpwi   cr7,r9,0
1000c98c:	40 9e ff b4 	bne     cr7,1000c940 <de_dotdot+0xf4>
	(void) ol_strcpy( cp, cp + 2 );

    /* Alternate between removing leading ../ and removing xxx/../ */
    for (;;)
	{
	while ( strncmp( file, "../", 3 ) == 0 )
1000c990:	48 00 00 34 	b       1000c9c4 <de_dotdot+0x178>
	    (void) ol_strcpy( file, file + 3 );
1000c994:	81 3f 00 18 	lwz     r9,24(r31)
1000c998:	3b c9 00 03 	addi    r30,r9,3
1000c99c:	81 3f 00 18 	lwz     r9,24(r31)
1000c9a0:	39 29 00 03 	addi    r9,r9,3
1000c9a4:	7d 23 4b 78 	mr      r3,r9
1000c9a8:	48 02 0c ad 	bl      1002d654 <strlen@plt>
1000c9ac:	7c 69 1b 78 	mr      r9,r3
1000c9b0:	39 29 00 01 	addi    r9,r9,1
1000c9b4:	80 7f 00 18 	lwz     r3,24(r31)
1000c9b8:	7f c4 f3 78 	mr      r4,r30
1000c9bc:	7d 25 4b 78 	mr      r5,r9
1000c9c0:	48 02 0a 65 	bl      1002d424 <memmove@plt>
	(void) ol_strcpy( cp, cp + 2 );

    /* Alternate between removing leading ../ and removing xxx/../ */
    for (;;)
	{
	while ( strncmp( file, "../", 3 ) == 0 )
1000c9c4:	80 7f 00 18 	lwz     r3,24(r31)
1000c9c8:	3d 20 10 02 	lis     r9,4098
1000c9cc:	38 89 95 28 	addi    r4,r9,-27352
1000c9d0:	38 a0 00 03 	li      r5,3
1000c9d4:	48 02 0e 21 	bl      1002d7f4 <strncmp@plt>
1000c9d8:	7c 69 1b 78 	mr      r9,r3
1000c9dc:	2f 89 00 00 	cmpwi   cr7,r9,0
1000c9e0:	41 9e ff b4 	beq     cr7,1000c994 <de_dotdot+0x148>
	    (void) ol_strcpy( file, file + 3 );
	cp = strstr( file, "/../" );
1000c9e4:	80 7f 00 18 	lwz     r3,24(r31)
1000c9e8:	3d 20 10 02 	lis     r9,4098
1000c9ec:	38 89 95 2c 	addi    r4,r9,-27348
1000c9f0:	48 02 09 e5 	bl      1002d3d4 <strstr@plt>
1000c9f4:	90 7f 00 0c 	stw     r3,12(r31)
	if ( cp == (char*) 0 )
1000c9f8:	81 3f 00 0c 	lwz     r9,12(r31)
1000c9fc:	2f 89 00 00 	cmpwi   cr7,r9,0
1000ca00:	40 9e 00 0c 	bne     cr7,1000ca0c <de_dotdot+0x1c0>
	    break;
1000ca04:	60 00 00 00 	nop
	    continue;
	(void) ol_strcpy( cp2 + 1, cp + 4 );
	}

    /* Also elide any xxx/.. at the end. */
    while ( ( l = strlen( file ) ) > 3 &&
1000ca08:	48 00 00 e0 	b       1000cae8 <de_dotdot+0x29c>
	while ( strncmp( file, "../", 3 ) == 0 )
	    (void) ol_strcpy( file, file + 3 );
	cp = strstr( file, "/../" );
	if ( cp == (char*) 0 )
	    break;
	for ( cp2 = cp - 1; cp2 >= file && *cp2 != '/'; --cp2 )
1000ca0c:	81 3f 00 0c 	lwz     r9,12(r31)
1000ca10:	39 29 ff ff 	addi    r9,r9,-1
1000ca14:	91 3f 00 08 	stw     r9,8(r31)
1000ca18:	48 00 00 10 	b       1000ca28 <de_dotdot+0x1dc>
1000ca1c:	81 3f 00 08 	lwz     r9,8(r31)
1000ca20:	39 29 ff ff 	addi    r9,r9,-1
1000ca24:	91 3f 00 08 	stw     r9,8(r31)
1000ca28:	81 5f 00 08 	lwz     r10,8(r31)
1000ca2c:	81 3f 00 18 	lwz     r9,24(r31)
1000ca30:	7f 8a 48 40 	cmplw   cr7,r10,r9
1000ca34:	41 9c 00 18 	blt     cr7,1000ca4c <de_dotdot+0x200>
1000ca38:	81 3f 00 08 	lwz     r9,8(r31)
1000ca3c:	89 29 00 00 	lbz     r9,0(r9)
1000ca40:	55 29 06 3e 	clrlwi  r9,r9,24
1000ca44:	2b 89 00 2f 	cmplwi  cr7,r9,47
1000ca48:	40 9e ff d4 	bne     cr7,1000ca1c <de_dotdot+0x1d0>
	    continue;
	(void) ol_strcpy( cp2 + 1, cp + 4 );
1000ca4c:	81 3f 00 08 	lwz     r9,8(r31)
1000ca50:	3b a9 00 01 	addi    r29,r9,1
1000ca54:	81 3f 00 0c 	lwz     r9,12(r31)
1000ca58:	3b c9 00 04 	addi    r30,r9,4
1000ca5c:	81 3f 00 0c 	lwz     r9,12(r31)
1000ca60:	39 29 00 04 	addi    r9,r9,4
1000ca64:	7d 23 4b 78 	mr      r3,r9
1000ca68:	48 02 0b ed 	bl      1002d654 <strlen@plt>
1000ca6c:	7c 69 1b 78 	mr      r9,r3
1000ca70:	39 29 00 01 	addi    r9,r9,1
1000ca74:	7f a3 eb 78 	mr      r3,r29
1000ca78:	7f c4 f3 78 	mr      r4,r30
1000ca7c:	7d 25 4b 78 	mr      r5,r9
1000ca80:	48 02 09 a5 	bl      1002d424 <memmove@plt>
	}
1000ca84:	4b ff ff 0c 	b       1000c990 <de_dotdot+0x144>

    /* Also elide any xxx/.. at the end. */
    while ( ( l = strlen( file ) ) > 3 &&
	    strcmp( ( cp = file + l - 3 ), "/.." ) == 0 )
	{
	for ( cp2 = cp - 1; cp2 >= file && *cp2 != '/'; --cp2 )
1000ca88:	81 3f 00 0c 	lwz     r9,12(r31)
1000ca8c:	39 29 ff ff 	addi    r9,r9,-1
1000ca90:	91 3f 00 08 	stw     r9,8(r31)
1000ca94:	48 00 00 10 	b       1000caa4 <de_dotdot+0x258>
1000ca98:	81 3f 00 08 	lwz     r9,8(r31)
1000ca9c:	39 29 ff ff 	addi    r9,r9,-1
1000caa0:	91 3f 00 08 	stw     r9,8(r31)
1000caa4:	81 5f 00 08 	lwz     r10,8(r31)
1000caa8:	81 3f 00 18 	lwz     r9,24(r31)
1000caac:	7f 8a 48 40 	cmplw   cr7,r10,r9
1000cab0:	41 9c 00 18 	blt     cr7,1000cac8 <de_dotdot+0x27c>
1000cab4:	81 3f 00 08 	lwz     r9,8(r31)
1000cab8:	89 29 00 00 	lbz     r9,0(r9)
1000cabc:	55 29 06 3e 	clrlwi  r9,r9,24
1000cac0:	2b 89 00 2f 	cmplwi  cr7,r9,47
1000cac4:	40 9e ff d4 	bne     cr7,1000ca98 <de_dotdot+0x24c>
	    continue;
	if ( cp2 < file )
1000cac8:	81 5f 00 08 	lwz     r10,8(r31)
1000cacc:	81 3f 00 18 	lwz     r9,24(r31)
1000cad0:	7f 8a 48 40 	cmplw   cr7,r10,r9
1000cad4:	40 9c 00 08 	bge     cr7,1000cadc <de_dotdot+0x290>
	    break;
1000cad8:	48 00 00 5c 	b       1000cb34 <de_dotdot+0x2e8>
	*cp2 = '\0';
1000cadc:	81 3f 00 08 	lwz     r9,8(r31)
1000cae0:	39 40 00 00 	li      r10,0
1000cae4:	99 49 00 00 	stb     r10,0(r9)
	    continue;
	(void) ol_strcpy( cp2 + 1, cp + 4 );
	}

    /* Also elide any xxx/.. at the end. */
    while ( ( l = strlen( file ) ) > 3 &&
1000cae8:	80 7f 00 18 	lwz     r3,24(r31)
1000caec:	48 02 0b 69 	bl      1002d654 <strlen@plt>
1000caf0:	7c 69 1b 78 	mr      r9,r3
1000caf4:	91 3f 00 10 	stw     r9,16(r31)
1000caf8:	81 3f 00 10 	lwz     r9,16(r31)
1000cafc:	2f 89 00 03 	cmpwi   cr7,r9,3
1000cb00:	40 9d 00 34 	ble     cr7,1000cb34 <de_dotdot+0x2e8>
	    strcmp( ( cp = file + l - 3 ), "/.." ) == 0 )
1000cb04:	81 3f 00 10 	lwz     r9,16(r31)
1000cb08:	39 29 ff fd 	addi    r9,r9,-3
1000cb0c:	81 5f 00 18 	lwz     r10,24(r31)
1000cb10:	7d 2a 4a 14 	add     r9,r10,r9
1000cb14:	91 3f 00 0c 	stw     r9,12(r31)
1000cb18:	80 7f 00 0c 	lwz     r3,12(r31)
1000cb1c:	3d 20 10 02 	lis     r9,4098
1000cb20:	38 89 95 34 	addi    r4,r9,-27340
1000cb24:	48 02 08 b9 	bl      1002d3dc <strcmp@plt>
1000cb28:	7c 69 1b 78 	mr      r9,r3
	    continue;
	(void) ol_strcpy( cp2 + 1, cp + 4 );
	}

    /* Also elide any xxx/.. at the end. */
    while ( ( l = strlen( file ) ) > 3 &&
1000cb2c:	2f 89 00 00 	cmpwi   cr7,r9,0
1000cb30:	41 9e ff 58 	beq     cr7,1000ca88 <de_dotdot+0x23c>
	    continue;
	if ( cp2 < file )
	    break;
	*cp2 = '\0';
	}
    }
1000cb34:	39 7f 00 30 	addi    r11,r31,48
1000cb38:	80 0b 00 04 	lwz     r0,4(r11)
1000cb3c:	7c 08 03 a6 	mtlr    r0
1000cb40:	83 ab ff f4 	lwz     r29,-12(r11)
1000cb44:	83 cb ff f8 	lwz     r30,-8(r11)
1000cb48:	83 eb ff fc 	lwz     r31,-4(r11)
1000cb4c:	7d 61 5b 78 	mr      r1,r11
1000cb50:	4e 80 00 20 	blr

1000cb54 <httpd_close_conn>:


void
httpd_close_conn( httpd_conn* hc, struct timeval* nowP )
    {
1000cb54:	94 21 ff e0 	stwu    r1,-32(r1)
1000cb58:	7c 08 02 a6 	mflr    r0
1000cb5c:	90 01 00 24 	stw     r0,36(r1)
1000cb60:	93 e1 00 1c 	stw     r31,28(r1)
1000cb64:	7c 3f 0b 78 	mr      r31,r1
1000cb68:	90 7f 00 08 	stw     r3,8(r31)
1000cb6c:	90 9f 00 0c 	stw     r4,12(r31)
    make_log_entry( hc, nowP );
1000cb70:	80 7f 00 08 	lwz     r3,8(r31)
1000cb74:	80 9f 00 0c 	lwz     r4,12(r31)
1000cb78:	48 00 3f c9 	bl      10010b40 <make_log_entry>

    if ( hc->file_address != (char*) 0 )
1000cb7c:	81 3f 00 08 	lwz     r9,8(r31)
1000cb80:	81 29 01 c4 	lwz     r9,452(r9)
1000cb84:	2f 89 00 00 	cmpwi   cr7,r9,0
1000cb88:	41 9e 00 30 	beq     cr7,1000cbb8 <httpd_close_conn+0x64>
	{
	mmc_unmap( hc->file_address, &(hc->sb), nowP );
1000cb8c:	81 3f 00 08 	lwz     r9,8(r31)
1000cb90:	81 49 01 c4 	lwz     r10,452(r9)
1000cb94:	81 3f 00 08 	lwz     r9,8(r31)
1000cb98:	39 29 01 68 	addi    r9,r9,360
1000cb9c:	7d 43 53 78 	mr      r3,r10
1000cba0:	7d 24 4b 78 	mr      r4,r9
1000cba4:	80 bf 00 0c 	lwz     r5,12(r31)
1000cba8:	48 00 5d a5 	bl      1001294c <mmc_unmap>
	hc->file_address = (char*) 0;
1000cbac:	81 3f 00 08 	lwz     r9,8(r31)
1000cbb0:	39 40 00 00 	li      r10,0
1000cbb4:	91 49 01 c4 	stw     r10,452(r9)
	}
    if ( hc->conn_fd >= 0 )
1000cbb8:	81 3f 00 08 	lwz     r9,8(r31)
1000cbbc:	81 29 01 c0 	lwz     r9,448(r9)
1000cbc0:	2f 89 00 00 	cmpwi   cr7,r9,0
1000cbc4:	41 9c 00 20 	blt     cr7,1000cbe4 <httpd_close_conn+0x90>
	{
	(void) close( hc->conn_fd );
1000cbc8:	81 3f 00 08 	lwz     r9,8(r31)
1000cbcc:	81 29 01 c0 	lwz     r9,448(r9)
1000cbd0:	7d 23 4b 78 	mr      r3,r9
1000cbd4:	48 02 0c 39 	bl      1002d80c <close@plt>
	hc->conn_fd = -1;
1000cbd8:	81 3f 00 08 	lwz     r9,8(r31)
1000cbdc:	39 40 ff ff 	li      r10,-1
1000cbe0:	91 49 01 c0 	stw     r10,448(r9)
	}
    }
1000cbe4:	39 7f 00 20 	addi    r11,r31,32
1000cbe8:	80 0b 00 04 	lwz     r0,4(r11)
1000cbec:	7c 08 03 a6 	mtlr    r0
1000cbf0:	83 eb ff fc 	lwz     r31,-4(r11)
1000cbf4:	7d 61 5b 78 	mr      r1,r11
1000cbf8:	4e 80 00 20 	blr

1000cbfc <httpd_destroy_conn>:

void
httpd_destroy_conn( httpd_conn* hc )
    {
1000cbfc:	94 21 ff e0 	stwu    r1,-32(r1)
1000cc00:	7c 08 02 a6 	mflr    r0
1000cc04:	90 01 00 24 	stw     r0,36(r1)
1000cc08:	93 e1 00 1c 	stw     r31,28(r1)
1000cc0c:	7c 3f 0b 78 	mr      r31,r1
1000cc10:	90 7f 00 08 	stw     r3,8(r31)
    if ( hc->initialized )
1000cc14:	81 3f 00 08 	lwz     r9,8(r31)
1000cc18:	81 29 00 00 	lwz     r9,0(r9)
1000cc1c:	2f 89 00 00 	cmpwi   cr7,r9,0
1000cc20:	41 9e 00 e0 	beq     cr7,1000cd00 <httpd_destroy_conn+0x104>
	{
	free( (void*) hc->read_buf );
1000cc24:	81 3f 00 08 	lwz     r9,8(r31)
1000cc28:	81 29 00 88 	lwz     r9,136(r9)
1000cc2c:	7d 23 4b 78 	mr      r3,r9
1000cc30:	48 02 08 05 	bl      1002d434 <free@plt>
	free( (void*) hc->decodedurl );
1000cc34:	81 3f 00 08 	lwz     r9,8(r31)
1000cc38:	81 29 00 b0 	lwz     r9,176(r9)
1000cc3c:	7d 23 4b 78 	mr      r3,r9
1000cc40:	48 02 07 f5 	bl      1002d434 <free@plt>
	free( (void*) hc->origfilename );
1000cc44:	81 3f 00 08 	lwz     r9,8(r31)
1000cc48:	81 29 00 b8 	lwz     r9,184(r9)
1000cc4c:	7d 23 4b 78 	mr      r3,r9
1000cc50:	48 02 07 e5 	bl      1002d434 <free@plt>
	free( (void*) hc->expnfilename );
1000cc54:	81 3f 00 08 	lwz     r9,8(r31)
1000cc58:	81 29 00 bc 	lwz     r9,188(r9)
1000cc5c:	7d 23 4b 78 	mr      r3,r9
1000cc60:	48 02 07 d5 	bl      1002d434 <free@plt>
	free( (void*) hc->encodings );
1000cc64:	81 3f 00 08 	lwz     r9,8(r31)
1000cc68:	81 29 00 c0 	lwz     r9,192(r9)
1000cc6c:	7d 23 4b 78 	mr      r3,r9
1000cc70:	48 02 07 c5 	bl      1002d434 <free@plt>
	free( (void*) hc->pathinfo );
1000cc74:	81 3f 00 08 	lwz     r9,8(r31)
1000cc78:	81 29 00 c4 	lwz     r9,196(r9)
1000cc7c:	7d 23 4b 78 	mr      r3,r9
1000cc80:	48 02 07 b5 	bl      1002d434 <free@plt>
	free( (void*) hc->query );
1000cc84:	81 3f 00 08 	lwz     r9,8(r31)
1000cc88:	81 29 00 c8 	lwz     r9,200(r9)
1000cc8c:	7d 23 4b 78 	mr      r3,r9
1000cc90:	48 02 07 a5 	bl      1002d434 <free@plt>
	free( (void*) hc->accept );
1000cc94:	81 3f 00 08 	lwz     r9,8(r31)
1000cc98:	81 29 00 d4 	lwz     r9,212(r9)
1000cc9c:	7d 23 4b 78 	mr      r3,r9
1000cca0:	48 02 07 95 	bl      1002d434 <free@plt>
	free( (void*) hc->accepte );
1000cca4:	81 3f 00 08 	lwz     r9,8(r31)
1000cca8:	81 29 00 d8 	lwz     r9,216(r9)
1000ccac:	7d 23 4b 78 	mr      r3,r9
1000ccb0:	48 02 07 85 	bl      1002d434 <free@plt>
	free( (void*) hc->reqhost );
1000ccb4:	81 3f 00 08 	lwz     r9,8(r31)
1000ccb8:	81 29 00 e8 	lwz     r9,232(r9)
1000ccbc:	7d 23 4b 78 	mr      r3,r9
1000ccc0:	48 02 07 75 	bl      1002d434 <free@plt>
	free( (void*) hc->hostdir );
1000ccc4:	81 3f 00 08 	lwz     r9,8(r31)
1000ccc8:	81 29 00 f0 	lwz     r9,240(r9)
1000cccc:	7d 23 4b 78 	mr      r3,r9
1000ccd0:	48 02 07 65 	bl      1002d434 <free@plt>
	free( (void*) hc->remoteuser );
1000ccd4:	81 3f 00 08 	lwz     r9,8(r31)
1000ccd8:	81 29 00 f8 	lwz     r9,248(r9)
1000ccdc:	7d 23 4b 78 	mr      r3,r9
1000cce0:	48 02 07 55 	bl      1002d434 <free@plt>
	free( (void*) hc->response );
1000cce4:	81 3f 00 08 	lwz     r9,8(r31)
1000cce8:	81 29 00 fc 	lwz     r9,252(r9)
1000ccec:	7d 23 4b 78 	mr      r3,r9
1000ccf0:	48 02 07 45 	bl      1002d434 <free@plt>
#ifdef TILDE_MAP_2
	free( (void*) hc->altdir );
#endif /* TILDE_MAP_2 */
	hc->initialized = 0;
1000ccf4:	81 3f 00 08 	lwz     r9,8(r31)
1000ccf8:	39 40 00 00 	li      r10,0
1000ccfc:	91 49 00 00 	stw     r10,0(r9)
	}
    }
1000cd00:	39 7f 00 20 	addi    r11,r31,32
1000cd04:	80 0b 00 04 	lwz     r0,4(r11)
1000cd08:	7c 08 03 a6 	mtlr    r0
1000cd0c:	83 eb ff fc 	lwz     r31,-4(r11)
1000cd10:	7d 61 5b 78 	mr      r1,r11
1000cd14:	4e 80 00 20 	blr

1000cd18 <ext_compare>:


/* qsort comparison routine */
static int
ext_compare( const void* v1, const void* v2 )
    {
1000cd18:	94 21 ff d0 	stwu    r1,-48(r1)
1000cd1c:	7c 08 02 a6 	mflr    r0
1000cd20:	90 01 00 34 	stw     r0,52(r1)
1000cd24:	93 e1 00 2c 	stw     r31,44(r1)
1000cd28:	7c 3f 0b 78 	mr      r31,r1
1000cd2c:	90 7f 00 18 	stw     r3,24(r31)
1000cd30:	90 9f 00 1c 	stw     r4,28(r31)
    const struct mime_entry* m1 = (const struct mime_entry*) v1;
1000cd34:	81 3f 00 18 	lwz     r9,24(r31)
1000cd38:	91 3f 00 08 	stw     r9,8(r31)
    const struct mime_entry* m2 = (const struct mime_entry*) v2;
1000cd3c:	81 3f 00 1c 	lwz     r9,28(r31)
1000cd40:	91 3f 00 0c 	stw     r9,12(r31)

    return strcmp( m1->ext, m2->ext );
1000cd44:	81 3f 00 08 	lwz     r9,8(r31)
1000cd48:	81 49 00 00 	lwz     r10,0(r9)
1000cd4c:	81 3f 00 0c 	lwz     r9,12(r31)
1000cd50:	81 29 00 00 	lwz     r9,0(r9)
1000cd54:	7d 43 53 78 	mr      r3,r10
1000cd58:	7d 24 4b 78 	mr      r4,r9
1000cd5c:	48 02 06 81 	bl      1002d3dc <strcmp@plt>
1000cd60:	7c 69 1b 78 	mr      r9,r3
    }
1000cd64:	7d 23 4b 78 	mr      r3,r9
1000cd68:	39 7f 00 30 	addi    r11,r31,48
1000cd6c:	80 0b 00 04 	lwz     r0,4(r11)
1000cd70:	7c 08 03 a6 	mtlr    r0
1000cd74:	83 eb ff fc 	lwz     r31,-4(r11)
1000cd78:	7d 61 5b 78 	mr      r1,r11
1000cd7c:	4e 80 00 20 	blr

1000cd80 <init_mime>:


static void
init_mime( void )
    {
1000cd80:	94 21 ff e0 	stwu    r1,-32(r1)
1000cd84:	7c 08 02 a6 	mflr    r0
1000cd88:	90 01 00 24 	stw     r0,36(r1)
1000cd8c:	93 e1 00 1c 	stw     r31,28(r1)
1000cd90:	7c 3f 0b 78 	mr      r31,r1
    int i;

    /* Sort the tables so we can do binary search. */
    qsort( enc_tab, n_enc_tab, sizeof(*enc_tab), ext_compare );
1000cd94:	39 20 00 03 	li      r9,3
1000cd98:	3d 40 10 03 	lis     r10,4099
1000cd9c:	38 6a c5 44 	addi    r3,r10,-15036
1000cda0:	7d 24 4b 78 	mr      r4,r9
1000cda4:	38 a0 00 10 	li      r5,16
1000cda8:	3d 20 10 01 	lis     r9,4097
1000cdac:	38 c9 cd 18 	addi    r6,r9,-13032
1000cdb0:	48 02 0a 25 	bl      1002d7d4 <qsort@plt>
    qsort( typ_tab, n_typ_tab, sizeof(*typ_tab), ext_compare );
1000cdb4:	39 20 00 c1 	li      r9,193
1000cdb8:	3d 40 10 03 	lis     r10,4099
1000cdbc:	38 6a c5 74 	addi    r3,r10,-14988
1000cdc0:	7d 24 4b 78 	mr      r4,r9
1000cdc4:	38 a0 00 10 	li      r5,16
1000cdc8:	3d 20 10 01 	lis     r9,4097
1000cdcc:	38 c9 cd 18 	addi    r6,r9,-13032
1000cdd0:	48 02 0a 05 	bl      1002d7d4 <qsort@plt>

    /* Fill in the lengths. */
    for ( i = 0; i < n_enc_tab; ++i )
1000cdd4:	39 20 00 00 	li      r9,0
1000cdd8:	91 3f 00 08 	stw     r9,8(r31)
1000cddc:	48 00 00 94 	b       1000ce70 <init_mime+0xf0>
	{
	enc_tab[i].ext_len = strlen( enc_tab[i].ext );
1000cde0:	3d 20 10 03 	lis     r9,4099
1000cde4:	39 49 c5 44 	addi    r10,r9,-15036
1000cde8:	81 3f 00 08 	lwz     r9,8(r31)
1000cdec:	55 29 20 36 	rlwinm  r9,r9,4,0,27
1000cdf0:	7d 2a 4a 14 	add     r9,r10,r9
1000cdf4:	81 29 00 00 	lwz     r9,0(r9)
1000cdf8:	7d 23 4b 78 	mr      r3,r9
1000cdfc:	48 02 08 59 	bl      1002d654 <strlen@plt>
1000ce00:	7c 6a 1b 78 	mr      r10,r3
1000ce04:	3d 20 10 03 	lis     r9,4099
1000ce08:	39 09 c5 44 	addi    r8,r9,-15036
1000ce0c:	81 3f 00 08 	lwz     r9,8(r31)
1000ce10:	55 29 20 36 	rlwinm  r9,r9,4,0,27
1000ce14:	7d 28 4a 14 	add     r9,r8,r9
1000ce18:	39 29 00 04 	addi    r9,r9,4
1000ce1c:	91 49 00 00 	stw     r10,0(r9)
	enc_tab[i].val_len = strlen( enc_tab[i].val );
1000ce20:	3d 20 10 03 	lis     r9,4099
1000ce24:	39 49 c5 44 	addi    r10,r9,-15036
1000ce28:	81 3f 00 08 	lwz     r9,8(r31)
1000ce2c:	55 29 20 36 	rlwinm  r9,r9,4,0,27
1000ce30:	7d 2a 4a 14 	add     r9,r10,r9
1000ce34:	39 29 00 08 	addi    r9,r9,8
1000ce38:	81 29 00 00 	lwz     r9,0(r9)
1000ce3c:	7d 23 4b 78 	mr      r3,r9
1000ce40:	48 02 08 15 	bl      1002d654 <strlen@plt>
1000ce44:	7c 6a 1b 78 	mr      r10,r3
1000ce48:	3d 20 10 03 	lis     r9,4099
1000ce4c:	39 09 c5 44 	addi    r8,r9,-15036
1000ce50:	81 3f 00 08 	lwz     r9,8(r31)
1000ce54:	55 29 20 36 	rlwinm  r9,r9,4,0,27
1000ce58:	7d 28 4a 14 	add     r9,r8,r9
1000ce5c:	39 29 00 0c 	addi    r9,r9,12
1000ce60:	91 49 00 00 	stw     r10,0(r9)
    /* Sort the tables so we can do binary search. */
    qsort( enc_tab, n_enc_tab, sizeof(*enc_tab), ext_compare );
    qsort( typ_tab, n_typ_tab, sizeof(*typ_tab), ext_compare );

    /* Fill in the lengths. */
    for ( i = 0; i < n_enc_tab; ++i )
1000ce64:	81 3f 00 08 	lwz     r9,8(r31)
1000ce68:	39 29 00 01 	addi    r9,r9,1
1000ce6c:	91 3f 00 08 	stw     r9,8(r31)
1000ce70:	39 20 00 03 	li      r9,3
1000ce74:	81 5f 00 08 	lwz     r10,8(r31)
1000ce78:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000ce7c:	41 9c ff 64 	blt     cr7,1000cde0 <init_mime+0x60>
	{
	enc_tab[i].ext_len = strlen( enc_tab[i].ext );
	enc_tab[i].val_len = strlen( enc_tab[i].val );
	}
    for ( i = 0; i < n_typ_tab; ++i )
1000ce80:	39 20 00 00 	li      r9,0
1000ce84:	91 3f 00 08 	stw     r9,8(r31)
1000ce88:	48 00 00 94 	b       1000cf1c <init_mime+0x19c>
	{
	typ_tab[i].ext_len = strlen( typ_tab[i].ext );
1000ce8c:	3d 20 10 03 	lis     r9,4099
1000ce90:	39 49 c5 74 	addi    r10,r9,-14988
1000ce94:	81 3f 00 08 	lwz     r9,8(r31)
1000ce98:	55 29 20 36 	rlwinm  r9,r9,4,0,27
1000ce9c:	7d 2a 4a 14 	add     r9,r10,r9
1000cea0:	81 29 00 00 	lwz     r9,0(r9)
1000cea4:	7d 23 4b 78 	mr      r3,r9
1000cea8:	48 02 07 ad 	bl      1002d654 <strlen@plt>
1000ceac:	7c 6a 1b 78 	mr      r10,r3
1000ceb0:	3d 20 10 03 	lis     r9,4099
1000ceb4:	39 09 c5 74 	addi    r8,r9,-14988
1000ceb8:	81 3f 00 08 	lwz     r9,8(r31)
1000cebc:	55 29 20 36 	rlwinm  r9,r9,4,0,27
1000cec0:	7d 28 4a 14 	add     r9,r8,r9
1000cec4:	39 29 00 04 	addi    r9,r9,4
1000cec8:	91 49 00 00 	stw     r10,0(r9)
	typ_tab[i].val_len = strlen( typ_tab[i].val );
1000cecc:	3d 20 10 03 	lis     r9,4099
1000ced0:	39 49 c5 74 	addi    r10,r9,-14988
1000ced4:	81 3f 00 08 	lwz     r9,8(r31)
1000ced8:	55 29 20 36 	rlwinm  r9,r9,4,0,27
1000cedc:	7d 2a 4a 14 	add     r9,r10,r9
1000cee0:	39 29 00 08 	addi    r9,r9,8
1000cee4:	81 29 00 00 	lwz     r9,0(r9)
1000cee8:	7d 23 4b 78 	mr      r3,r9
1000ceec:	48 02 07 69 	bl      1002d654 <strlen@plt>
1000cef0:	7c 6a 1b 78 	mr      r10,r3
1000cef4:	3d 20 10 03 	lis     r9,4099
1000cef8:	39 09 c5 74 	addi    r8,r9,-14988
1000cefc:	81 3f 00 08 	lwz     r9,8(r31)
1000cf00:	55 29 20 36 	rlwinm  r9,r9,4,0,27
1000cf04:	7d 28 4a 14 	add     r9,r8,r9
1000cf08:	39 29 00 0c 	addi    r9,r9,12
1000cf0c:	91 49 00 00 	stw     r10,0(r9)
    for ( i = 0; i < n_enc_tab; ++i )
	{
	enc_tab[i].ext_len = strlen( enc_tab[i].ext );
	enc_tab[i].val_len = strlen( enc_tab[i].val );
	}
    for ( i = 0; i < n_typ_tab; ++i )
1000cf10:	81 3f 00 08 	lwz     r9,8(r31)
1000cf14:	39 29 00 01 	addi    r9,r9,1
1000cf18:	91 3f 00 08 	stw     r9,8(r31)
1000cf1c:	39 20 00 c1 	li      r9,193
1000cf20:	81 5f 00 08 	lwz     r10,8(r31)
1000cf24:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000cf28:	41 9c ff 64 	blt     cr7,1000ce8c <init_mime+0x10c>
	{
	typ_tab[i].ext_len = strlen( typ_tab[i].ext );
	typ_tab[i].val_len = strlen( typ_tab[i].val );
	}

    }
1000cf2c:	39 7f 00 20 	addi    r11,r31,32
1000cf30:	80 0b 00 04 	lwz     r0,4(r11)
1000cf34:	7c 08 03 a6 	mtlr    r0
1000cf38:	83 eb ff fc 	lwz     r31,-4(r11)
1000cf3c:	7d 61 5b 78 	mr      r1,r11
1000cf40:	4e 80 00 20 	blr

1000cf44 <figure_mime>:
** encodings are separated by commas, and are listed in the order in
** which they were applied to the file.
*/
static void
figure_mime( httpd_conn* hc )
    {
1000cf44:	94 21 fe 20 	stwu    r1,-480(r1)
1000cf48:	7c 08 02 a6 	mflr    r0
1000cf4c:	90 01 01 e4 	stw     r0,484(r1)
1000cf50:	93 c1 01 d8 	stw     r30,472(r1)
1000cf54:	93 e1 01 dc 	stw     r31,476(r1)
1000cf58:	7c 3f 0b 78 	mr      r31,r1
1000cf5c:	90 7f 01 c8 	stw     r3,456(r31)
    char* ext;
    int me_indexes[100], n_me_indexes;
    size_t ext_len, encodings_len;
    int i, top, bot, mid;
    int r;
    char* default_type = "text/plain; charset=%s";
1000cf60:	3d 20 10 02 	lis     r9,4098
1000cf64:	39 29 96 38 	addi    r9,r9,-27080
1000cf68:	91 3f 00 24 	stw     r9,36(r31)

    /* Peel off encoding extensions until there aren't any more. */
    n_me_indexes = 0;
1000cf6c:	39 20 00 00 	li      r9,0
1000cf70:	91 3f 00 10 	stw     r9,16(r31)
    for ( prev_dot = &hc->expnfilename[strlen(hc->expnfilename)]; ; prev_dot = dot )
1000cf74:	81 3f 01 c8 	lwz     r9,456(r31)
1000cf78:	83 c9 00 bc 	lwz     r30,188(r9)
1000cf7c:	81 3f 01 c8 	lwz     r9,456(r31)
1000cf80:	81 29 00 bc 	lwz     r9,188(r9)
1000cf84:	7d 23 4b 78 	mr      r3,r9
1000cf88:	48 02 06 cd 	bl      1002d654 <strlen@plt>
1000cf8c:	7c 69 1b 78 	mr      r9,r3
1000cf90:	7d 3e 4a 14 	add     r9,r30,r9
1000cf94:	91 3f 00 08 	stw     r9,8(r31)
	{
	for ( dot = prev_dot - 1; dot >= hc->expnfilename && *dot != '.'; --dot )
1000cf98:	81 3f 00 08 	lwz     r9,8(r31)
1000cf9c:	39 29 ff ff 	addi    r9,r9,-1
1000cfa0:	91 3f 00 0c 	stw     r9,12(r31)
1000cfa4:	48 00 00 10 	b       1000cfb4 <figure_mime+0x70>
1000cfa8:	81 3f 00 0c 	lwz     r9,12(r31)
1000cfac:	39 29 ff ff 	addi    r9,r9,-1
1000cfb0:	91 3f 00 0c 	stw     r9,12(r31)
1000cfb4:	81 3f 01 c8 	lwz     r9,456(r31)
1000cfb8:	81 49 00 bc 	lwz     r10,188(r9)
1000cfbc:	81 3f 00 0c 	lwz     r9,12(r31)
1000cfc0:	7f 8a 48 40 	cmplw   cr7,r10,r9
1000cfc4:	41 9d 00 18 	bgt     cr7,1000cfdc <figure_mime+0x98>
1000cfc8:	81 3f 00 0c 	lwz     r9,12(r31)
1000cfcc:	89 29 00 00 	lbz     r9,0(r9)
1000cfd0:	55 29 06 3e 	clrlwi  r9,r9,24
1000cfd4:	2b 89 00 2e 	cmplwi  cr7,r9,46
1000cfd8:	40 9e ff d0 	bne     cr7,1000cfa8 <figure_mime+0x64>
	    ;
	if ( dot < hc->expnfilename )
1000cfdc:	81 3f 01 c8 	lwz     r9,456(r31)
1000cfe0:	81 49 00 bc 	lwz     r10,188(r9)
1000cfe4:	81 3f 00 0c 	lwz     r9,12(r31)
1000cfe8:	7f 8a 48 40 	cmplw   cr7,r10,r9
1000cfec:	40 9d 00 14 	ble     cr7,1000d000 <figure_mime+0xbc>
	    {
	    /* No dot found.  No more encoding extensions, and no type
	    ** extension either.
	    */
	    hc->type = default_type;
1000cff0:	81 3f 01 c8 	lwz     r9,456(r31)
1000cff4:	81 5f 00 24 	lwz     r10,36(r31)
1000cff8:	91 49 01 40 	stw     r10,320(r9)
	    goto done;
1000cffc:	48 00 02 38 	b       1000d234 <figure_mime+0x2f0>
	    }
	ext = dot + 1;
1000d000:	81 3f 00 0c 	lwz     r9,12(r31)
1000d004:	39 29 00 01 	addi    r9,r9,1
1000d008:	91 3f 00 28 	stw     r9,40(r31)
	ext_len = prev_dot - ext;
1000d00c:	81 5f 00 08 	lwz     r10,8(r31)
1000d010:	81 3f 00 28 	lwz     r9,40(r31)
1000d014:	7d 29 50 50 	subf    r9,r9,r10
1000d018:	91 3f 00 2c 	stw     r9,44(r31)
	/* Search the encodings table.  Linear search is fine here, there
	** are only a few entries.
	*/
	for ( i = 0; i < n_enc_tab; ++i )
1000d01c:	39 20 00 00 	li      r9,0
1000d020:	91 3f 00 18 	stw     r9,24(r31)
1000d024:	48 00 00 a8 	b       1000d0cc <figure_mime+0x188>
	    {
	    if ( ext_len == enc_tab[i].ext_len && strncasecmp( ext, enc_tab[i].ext, ext_len ) == 0 )
1000d028:	3d 20 10 03 	lis     r9,4099
1000d02c:	39 49 c5 44 	addi    r10,r9,-15036
1000d030:	81 3f 00 18 	lwz     r9,24(r31)
1000d034:	55 29 20 36 	rlwinm  r9,r9,4,0,27
1000d038:	7d 2a 4a 14 	add     r9,r10,r9
1000d03c:	39 29 00 04 	addi    r9,r9,4
1000d040:	81 49 00 00 	lwz     r10,0(r9)
1000d044:	81 3f 00 2c 	lwz     r9,44(r31)
1000d048:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000d04c:	40 9e 00 74 	bne     cr7,1000d0c0 <figure_mime+0x17c>
1000d050:	3d 20 10 03 	lis     r9,4099
1000d054:	39 49 c5 44 	addi    r10,r9,-15036
1000d058:	81 3f 00 18 	lwz     r9,24(r31)
1000d05c:	55 29 20 36 	rlwinm  r9,r9,4,0,27
1000d060:	7d 2a 4a 14 	add     r9,r10,r9
1000d064:	81 29 00 00 	lwz     r9,0(r9)
1000d068:	80 7f 00 28 	lwz     r3,40(r31)
1000d06c:	7d 24 4b 78 	mr      r4,r9
1000d070:	80 bf 00 2c 	lwz     r5,44(r31)
1000d074:	48 02 06 91 	bl      1002d704 <strncasecmp@plt>
1000d078:	7c 69 1b 78 	mr      r9,r3
1000d07c:	2f 89 00 00 	cmpwi   cr7,r9,0
1000d080:	40 9e 00 40 	bne     cr7,1000d0c0 <figure_mime+0x17c>
		{
		if ( n_me_indexes < sizeof(me_indexes)/sizeof(*me_indexes) )
1000d084:	81 3f 00 10 	lwz     r9,16(r31)
1000d088:	2b 89 00 63 	cmplwi  cr7,r9,99
1000d08c:	41 9d 00 30 	bgt     cr7,1000d0bc <figure_mime+0x178>
		    {
		    me_indexes[n_me_indexes] = i;
1000d090:	81 3f 00 10 	lwz     r9,16(r31)
1000d094:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1000d098:	39 5f 00 08 	addi    r10,r31,8
1000d09c:	7d 2a 4a 14 	add     r9,r10,r9
1000d0a0:	39 29 00 30 	addi    r9,r9,48
1000d0a4:	81 5f 00 18 	lwz     r10,24(r31)
1000d0a8:	91 49 00 00 	stw     r10,0(r9)
		    ++n_me_indexes;
1000d0ac:	81 3f 00 10 	lwz     r9,16(r31)
1000d0b0:	39 29 00 01 	addi    r9,r9,1
1000d0b4:	91 3f 00 10 	stw     r9,16(r31)
		    }
		goto next;
1000d0b8:	48 00 00 40 	b       1000d0f8 <figure_mime+0x1b4>
1000d0bc:	48 00 00 3c 	b       1000d0f8 <figure_mime+0x1b4>
	ext = dot + 1;
	ext_len = prev_dot - ext;
	/* Search the encodings table.  Linear search is fine here, there
	** are only a few entries.
	*/
	for ( i = 0; i < n_enc_tab; ++i )
1000d0c0:	81 3f 00 18 	lwz     r9,24(r31)
1000d0c4:	39 29 00 01 	addi    r9,r9,1
1000d0c8:	91 3f 00 18 	stw     r9,24(r31)
1000d0cc:	39 20 00 03 	li      r9,3
1000d0d0:	81 5f 00 18 	lwz     r10,24(r31)
1000d0d4:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000d0d8:	41 9c ff 50 	blt     cr7,1000d028 <figure_mime+0xe4>
		    }
		goto next;
		}
	    }
	/* No encoding extension found.  Break and look for a type extension. */
	break;
1000d0dc:	60 00 00 00 	nop

	next: ;
	}

    /* Binary search for a matching type extension. */
    top = n_typ_tab - 1;
1000d0e0:	39 20 00 c1 	li      r9,193
1000d0e4:	39 29 ff ff 	addi    r9,r9,-1
1000d0e8:	91 3f 00 1c 	stw     r9,28(r31)
    bot = 0;
1000d0ec:	39 20 00 00 	li      r9,0
1000d0f0:	91 3f 00 20 	stw     r9,32(r31)
    while ( top >= bot )
1000d0f4:	48 00 01 24 	b       1000d218 <figure_mime+0x2d4>
    int r;
    char* default_type = "text/plain; charset=%s";

    /* Peel off encoding extensions until there aren't any more. */
    n_me_indexes = 0;
    for ( prev_dot = &hc->expnfilename[strlen(hc->expnfilename)]; ; prev_dot = dot )
1000d0f8:	81 3f 00 0c 	lwz     r9,12(r31)
1000d0fc:	91 3f 00 08 	stw     r9,8(r31)
	    }
	/* No encoding extension found.  Break and look for a type extension. */
	break;

	next: ;
	}
1000d100:	4b ff fe 98 	b       1000cf98 <figure_mime+0x54>
    /* Binary search for a matching type extension. */
    top = n_typ_tab - 1;
    bot = 0;
    while ( top >= bot )
	{
	mid = ( top + bot ) / 2;
1000d104:	81 5f 00 1c 	lwz     r10,28(r31)
1000d108:	81 3f 00 20 	lwz     r9,32(r31)
1000d10c:	7d 2a 4a 14 	add     r9,r10,r9
1000d110:	7d 29 0e 70 	srawi   r9,r9,1
1000d114:	7d 29 01 94 	addze   r9,r9
1000d118:	91 3f 00 30 	stw     r9,48(r31)
	r = strncasecmp( ext, typ_tab[mid].ext, ext_len );
1000d11c:	3d 20 10 03 	lis     r9,4099
1000d120:	39 49 c5 74 	addi    r10,r9,-14988
1000d124:	81 3f 00 30 	lwz     r9,48(r31)
1000d128:	55 29 20 36 	rlwinm  r9,r9,4,0,27
1000d12c:	7d 2a 4a 14 	add     r9,r10,r9
1000d130:	81 29 00 00 	lwz     r9,0(r9)
1000d134:	80 7f 00 28 	lwz     r3,40(r31)
1000d138:	7d 24 4b 78 	mr      r4,r9
1000d13c:	80 bf 00 2c 	lwz     r5,44(r31)
1000d140:	48 02 05 c5 	bl      1002d704 <strncasecmp@plt>
1000d144:	90 7f 00 34 	stw     r3,52(r31)
	if ( r < 0 )
1000d148:	81 3f 00 34 	lwz     r9,52(r31)
1000d14c:	2f 89 00 00 	cmpwi   cr7,r9,0
1000d150:	40 9c 00 14 	bge     cr7,1000d164 <figure_mime+0x220>
	    top = mid - 1;
1000d154:	81 3f 00 30 	lwz     r9,48(r31)
1000d158:	39 29 ff ff 	addi    r9,r9,-1
1000d15c:	91 3f 00 1c 	stw     r9,28(r31)
1000d160:	48 00 00 b8 	b       1000d218 <figure_mime+0x2d4>
	else if ( r > 0 )
1000d164:	81 3f 00 34 	lwz     r9,52(r31)
1000d168:	2f 89 00 00 	cmpwi   cr7,r9,0
1000d16c:	40 9d 00 14 	ble     cr7,1000d180 <figure_mime+0x23c>
	    bot = mid + 1;
1000d170:	81 3f 00 30 	lwz     r9,48(r31)
1000d174:	39 29 00 01 	addi    r9,r9,1
1000d178:	91 3f 00 20 	stw     r9,32(r31)
1000d17c:	48 00 00 9c 	b       1000d218 <figure_mime+0x2d4>
	else
	    if ( ext_len < typ_tab[mid].ext_len )
1000d180:	3d 20 10 03 	lis     r9,4099
1000d184:	39 49 c5 74 	addi    r10,r9,-14988
1000d188:	81 3f 00 30 	lwz     r9,48(r31)
1000d18c:	55 29 20 36 	rlwinm  r9,r9,4,0,27
1000d190:	7d 2a 4a 14 	add     r9,r10,r9
1000d194:	39 29 00 04 	addi    r9,r9,4
1000d198:	81 49 00 00 	lwz     r10,0(r9)
1000d19c:	81 3f 00 2c 	lwz     r9,44(r31)
1000d1a0:	7f 8a 48 40 	cmplw   cr7,r10,r9
1000d1a4:	40 9d 00 14 	ble     cr7,1000d1b8 <figure_mime+0x274>
		top = mid - 1;
1000d1a8:	81 3f 00 30 	lwz     r9,48(r31)
1000d1ac:	39 29 ff ff 	addi    r9,r9,-1
1000d1b0:	91 3f 00 1c 	stw     r9,28(r31)
1000d1b4:	48 00 00 64 	b       1000d218 <figure_mime+0x2d4>
	    else if ( ext_len > typ_tab[mid].ext_len )
1000d1b8:	3d 20 10 03 	lis     r9,4099
1000d1bc:	39 49 c5 74 	addi    r10,r9,-14988
1000d1c0:	81 3f 00 30 	lwz     r9,48(r31)
1000d1c4:	55 29 20 36 	rlwinm  r9,r9,4,0,27
1000d1c8:	7d 2a 4a 14 	add     r9,r10,r9
1000d1cc:	39 29 00 04 	addi    r9,r9,4
1000d1d0:	81 49 00 00 	lwz     r10,0(r9)
1000d1d4:	81 3f 00 2c 	lwz     r9,44(r31)
1000d1d8:	7f 8a 48 40 	cmplw   cr7,r10,r9
1000d1dc:	40 9c 00 14 	bge     cr7,1000d1f0 <figure_mime+0x2ac>
		bot = mid + 1;
1000d1e0:	81 3f 00 30 	lwz     r9,48(r31)
1000d1e4:	39 29 00 01 	addi    r9,r9,1
1000d1e8:	91 3f 00 20 	stw     r9,32(r31)
1000d1ec:	48 00 00 2c 	b       1000d218 <figure_mime+0x2d4>
	    else
		{
		hc->type = typ_tab[mid].val;
1000d1f0:	3d 20 10 03 	lis     r9,4099
1000d1f4:	39 49 c5 74 	addi    r10,r9,-14988
1000d1f8:	81 3f 00 30 	lwz     r9,48(r31)
1000d1fc:	55 29 20 36 	rlwinm  r9,r9,4,0,27
1000d200:	7d 2a 4a 14 	add     r9,r10,r9
1000d204:	39 29 00 08 	addi    r9,r9,8
1000d208:	81 49 00 00 	lwz     r10,0(r9)
1000d20c:	81 3f 01 c8 	lwz     r9,456(r31)
1000d210:	91 49 01 40 	stw     r10,320(r9)
		goto done;
1000d214:	48 00 00 20 	b       1000d234 <figure_mime+0x2f0>
	}

    /* Binary search for a matching type extension. */
    top = n_typ_tab - 1;
    bot = 0;
    while ( top >= bot )
1000d218:	81 5f 00 1c 	lwz     r10,28(r31)
1000d21c:	81 3f 00 20 	lwz     r9,32(r31)
1000d220:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000d224:	40 9c fe e0 	bge     cr7,1000d104 <figure_mime+0x1c0>
		{
		hc->type = typ_tab[mid].val;
		goto done;
		}
	}
    hc->type = default_type;
1000d228:	81 3f 01 c8 	lwz     r9,456(r31)
1000d22c:	81 5f 00 24 	lwz     r10,36(r31)
1000d230:	91 49 01 40 	stw     r10,320(r9)

    done:

    /* The last thing we do is actually generate the mime-encoding header. */
    hc->encodings[0] = '\0';
1000d234:	81 3f 01 c8 	lwz     r9,456(r31)
1000d238:	81 29 00 c0 	lwz     r9,192(r9)
1000d23c:	39 40 00 00 	li      r10,0
1000d240:	99 49 00 00 	stb     r10,0(r9)
    encodings_len = 0;
1000d244:	39 20 00 00 	li      r9,0
1000d248:	91 3f 00 14 	stw     r9,20(r31)
    for ( i = n_me_indexes - 1; i >= 0; --i )
1000d24c:	81 3f 00 10 	lwz     r9,16(r31)
1000d250:	39 29 ff ff 	addi    r9,r9,-1
1000d254:	91 3f 00 18 	stw     r9,24(r31)
1000d258:	48 00 01 30 	b       1000d388 <figure_mime+0x444>
	{
	httpd_realloc_str(
1000d25c:	81 3f 01 c8 	lwz     r9,456(r31)
1000d260:	39 09 00 c0 	addi    r8,r9,192
1000d264:	81 3f 01 c8 	lwz     r9,456(r31)
1000d268:	39 49 01 0c 	addi    r10,r9,268
	    &hc->encodings, &hc->maxencodings,
	    encodings_len + enc_tab[me_indexes[i]].val_len + 1 );
1000d26c:	81 3f 00 18 	lwz     r9,24(r31)
1000d270:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1000d274:	38 ff 00 08 	addi    r7,r31,8
1000d278:	7d 27 4a 14 	add     r9,r7,r9
1000d27c:	39 29 00 30 	addi    r9,r9,48
1000d280:	81 29 00 00 	lwz     r9,0(r9)
1000d284:	3c e0 10 03 	lis     r7,4099
1000d288:	38 e7 c5 44 	addi    r7,r7,-15036
1000d28c:	55 29 20 36 	rlwinm  r9,r9,4,0,27
1000d290:	7d 27 4a 14 	add     r9,r7,r9
1000d294:	39 29 00 0c 	addi    r9,r9,12
1000d298:	80 e9 00 00 	lwz     r7,0(r9)
1000d29c:	81 3f 00 14 	lwz     r9,20(r31)
1000d2a0:	7d 27 4a 14 	add     r9,r7,r9
    /* The last thing we do is actually generate the mime-encoding header. */
    hc->encodings[0] = '\0';
    encodings_len = 0;
    for ( i = n_me_indexes - 1; i >= 0; --i )
	{
	httpd_realloc_str(
1000d2a4:	39 29 00 01 	addi    r9,r9,1
1000d2a8:	7d 03 43 78 	mr      r3,r8
1000d2ac:	7d 44 53 78 	mr      r4,r10
1000d2b0:	7d 25 4b 78 	mr      r5,r9
1000d2b4:	4b ff b0 65 	bl      10008318 <httpd_realloc_str>
	    &hc->encodings, &hc->maxencodings,
	    encodings_len + enc_tab[me_indexes[i]].val_len + 1 );
	if ( hc->encodings[0] != '\0' )
1000d2b8:	81 3f 01 c8 	lwz     r9,456(r31)
1000d2bc:	81 29 00 c0 	lwz     r9,192(r9)
1000d2c0:	89 29 00 00 	lbz     r9,0(r9)
1000d2c4:	55 29 06 3e 	clrlwi  r9,r9,24
1000d2c8:	2f 89 00 00 	cmpwi   cr7,r9,0
1000d2cc:	41 9e 00 28 	beq     cr7,1000d2f4 <figure_mime+0x3b0>
	    {
	    (void) strcpy( &hc->encodings[encodings_len], "," );
1000d2d0:	81 3f 01 c8 	lwz     r9,456(r31)
1000d2d4:	81 49 00 c0 	lwz     r10,192(r9)
1000d2d8:	81 3f 00 14 	lwz     r9,20(r31)
1000d2dc:	7d 2a 4a 14 	add     r9,r10,r9
1000d2e0:	39 40 2c 00 	li      r10,11264
1000d2e4:	b1 49 00 00 	sth     r10,0(r9)
	    ++encodings_len;
1000d2e8:	81 3f 00 14 	lwz     r9,20(r31)
1000d2ec:	39 29 00 01 	addi    r9,r9,1
1000d2f0:	91 3f 00 14 	stw     r9,20(r31)
	    }
	(void) strcpy( &hc->encodings[encodings_len], enc_tab[me_indexes[i]].val );
1000d2f4:	81 3f 01 c8 	lwz     r9,456(r31)
1000d2f8:	81 49 00 c0 	lwz     r10,192(r9)
1000d2fc:	81 3f 00 14 	lwz     r9,20(r31)
1000d300:	7d 4a 4a 14 	add     r10,r10,r9
1000d304:	81 3f 00 18 	lwz     r9,24(r31)
1000d308:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1000d30c:	39 1f 00 08 	addi    r8,r31,8
1000d310:	7d 28 4a 14 	add     r9,r8,r9
1000d314:	39 29 00 30 	addi    r9,r9,48
1000d318:	81 29 00 00 	lwz     r9,0(r9)
1000d31c:	3d 00 10 03 	lis     r8,4099
1000d320:	39 08 c5 44 	addi    r8,r8,-15036
1000d324:	55 29 20 36 	rlwinm  r9,r9,4,0,27
1000d328:	7d 28 4a 14 	add     r9,r8,r9
1000d32c:	39 29 00 08 	addi    r9,r9,8
1000d330:	81 29 00 00 	lwz     r9,0(r9)
1000d334:	7d 43 53 78 	mr      r3,r10
1000d338:	7d 24 4b 78 	mr      r4,r9
1000d33c:	48 02 02 29 	bl      1002d564 <strcpy@plt>
	encodings_len += enc_tab[me_indexes[i]].val_len;
1000d340:	81 3f 00 18 	lwz     r9,24(r31)
1000d344:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1000d348:	39 5f 00 08 	addi    r10,r31,8
1000d34c:	7d 2a 4a 14 	add     r9,r10,r9
1000d350:	39 29 00 30 	addi    r9,r9,48
1000d354:	81 29 00 00 	lwz     r9,0(r9)
1000d358:	3d 40 10 03 	lis     r10,4099
1000d35c:	39 4a c5 44 	addi    r10,r10,-15036
1000d360:	55 29 20 36 	rlwinm  r9,r9,4,0,27
1000d364:	7d 2a 4a 14 	add     r9,r10,r9
1000d368:	39 29 00 0c 	addi    r9,r9,12
1000d36c:	81 29 00 00 	lwz     r9,0(r9)
1000d370:	81 5f 00 14 	lwz     r10,20(r31)
1000d374:	7d 2a 4a 14 	add     r9,r10,r9
1000d378:	91 3f 00 14 	stw     r9,20(r31)
    done:

    /* The last thing we do is actually generate the mime-encoding header. */
    hc->encodings[0] = '\0';
    encodings_len = 0;
    for ( i = n_me_indexes - 1; i >= 0; --i )
1000d37c:	81 3f 00 18 	lwz     r9,24(r31)
1000d380:	39 29 ff ff 	addi    r9,r9,-1
1000d384:	91 3f 00 18 	stw     r9,24(r31)
1000d388:	81 3f 00 18 	lwz     r9,24(r31)
1000d38c:	2f 89 00 00 	cmpwi   cr7,r9,0
1000d390:	40 9c fe cc 	bge     cr7,1000d25c <figure_mime+0x318>
	    }
	(void) strcpy( &hc->encodings[encodings_len], enc_tab[me_indexes[i]].val );
	encodings_len += enc_tab[me_indexes[i]].val_len;
	}

    }
1000d394:	39 7f 01 e0 	addi    r11,r31,480
1000d398:	80 0b 00 04 	lwz     r0,4(r11)
1000d39c:	7c 08 03 a6 	mtlr    r0
1000d3a0:	83 cb ff f8 	lwz     r30,-8(r11)
1000d3a4:	83 eb ff fc 	lwz     r31,-4(r11)
1000d3a8:	7d 61 5b 78 	mr      r1,r11
1000d3ac:	4e 80 00 20 	blr

1000d3b0 <cgi_kill2>:


#ifdef CGI_TIMELIMIT
static void
cgi_kill2( ClientData client_data, struct timeval* nowP )
    {
1000d3b0:	94 21 ff d0 	stwu    r1,-48(r1)
1000d3b4:	7c 08 02 a6 	mflr    r0
1000d3b8:	90 01 00 34 	stw     r0,52(r1)
1000d3bc:	93 c1 00 28 	stw     r30,40(r1)
1000d3c0:	93 e1 00 2c 	stw     r31,44(r1)
1000d3c4:	7c 3f 0b 78 	mr      r31,r1
1000d3c8:	7c 7e 1b 78 	mr      r30,r3
1000d3cc:	90 9f 00 18 	stw     r4,24(r31)
    pid_t pid;

    pid = (pid_t) client_data.i;
1000d3d0:	81 3e 00 00 	lwz     r9,0(r30)
1000d3d4:	91 3f 00 08 	stw     r9,8(r31)
    if ( kill( pid, SIGKILL ) == 0 )
1000d3d8:	80 7f 00 08 	lwz     r3,8(r31)
1000d3dc:	38 80 00 09 	li      r4,9
1000d3e0:	48 02 02 05 	bl      1002d5e4 <kill@plt>
1000d3e4:	7c 69 1b 78 	mr      r9,r3
1000d3e8:	2f 89 00 00 	cmpwi   cr7,r9,0
1000d3ec:	40 9e 00 1c 	bne     cr7,1000d408 <cgi_kill2+0x58>
	syslog( LOG_WARNING, "hard-killed CGI process %d", pid );
1000d3f0:	38 60 00 04 	li      r3,4
1000d3f4:	3d 20 10 02 	lis     r9,4098
1000d3f8:	38 89 a4 f4 	addi    r4,r9,-23308
1000d3fc:	80 bf 00 08 	lwz     r5,8(r31)
1000d400:	4c c6 31 82 	crclr   4*cr1+eq
1000d404:	48 02 03 81 	bl      1002d784 <syslog@plt>
    }
1000d408:	39 7f 00 30 	addi    r11,r31,48
1000d40c:	80 0b 00 04 	lwz     r0,4(r11)
1000d410:	7c 08 03 a6 	mtlr    r0
1000d414:	83 cb ff f8 	lwz     r30,-8(r11)
1000d418:	83 eb ff fc 	lwz     r31,-4(r11)
1000d41c:	7d 61 5b 78 	mr      r1,r11
1000d420:	4e 80 00 20 	blr

1000d424 <cgi_kill>:

static void
cgi_kill( ClientData client_data, struct timeval* nowP )
    {
1000d424:	94 21 ff d0 	stwu    r1,-48(r1)
1000d428:	7c 08 02 a6 	mflr    r0
1000d42c:	90 01 00 34 	stw     r0,52(r1)
1000d430:	93 c1 00 28 	stw     r30,40(r1)
1000d434:	93 e1 00 2c 	stw     r31,44(r1)
1000d438:	7c 3f 0b 78 	mr      r31,r1
1000d43c:	7c 7e 1b 78 	mr      r30,r3
1000d440:	90 9f 00 18 	stw     r4,24(r31)
    pid_t pid;

    pid = (pid_t) client_data.i;
1000d444:	81 3e 00 00 	lwz     r9,0(r30)
1000d448:	91 3f 00 08 	stw     r9,8(r31)
    if ( kill( pid, SIGINT ) == 0 )
1000d44c:	80 7f 00 08 	lwz     r3,8(r31)
1000d450:	38 80 00 02 	li      r4,2
1000d454:	48 02 01 91 	bl      1002d5e4 <kill@plt>
1000d458:	7c 69 1b 78 	mr      r9,r3
1000d45c:	2f 89 00 00 	cmpwi   cr7,r9,0
1000d460:	40 9e 00 6c 	bne     cr7,1000d4cc <cgi_kill+0xa8>
	{
	syslog( LOG_WARNING, "killed CGI process %d", pid );
1000d464:	38 60 00 04 	li      r3,4
1000d468:	3d 20 10 02 	lis     r9,4098
1000d46c:	38 89 a5 10 	addi    r4,r9,-23280
1000d470:	80 bf 00 08 	lwz     r5,8(r31)
1000d474:	4c c6 31 82 	crclr   4*cr1+eq
1000d478:	48 02 03 0d 	bl      1002d784 <syslog@plt>
	/* In case this isn't enough, schedule an uncatchable kill. */
	if ( tmr_create( nowP, cgi_kill2, client_data, 5 * 1000L, 0 ) == (Timer*) 0 )
1000d47c:	81 3e 00 00 	lwz     r9,0(r30)
1000d480:	91 3f 00 1c 	stw     r9,28(r31)
1000d484:	39 3f 00 1c 	addi    r9,r31,28
1000d488:	80 7f 00 18 	lwz     r3,24(r31)
1000d48c:	3d 40 10 01 	lis     r10,4097
1000d490:	38 8a d3 b0 	addi    r4,r10,-11344
1000d494:	7d 25 4b 78 	mr      r5,r9
1000d498:	38 c0 13 88 	li      r6,5000
1000d49c:	38 e0 00 00 	li      r7,0
1000d4a0:	48 00 64 95 	bl      10013934 <tmr_create>
1000d4a4:	7c 69 1b 78 	mr      r9,r3
1000d4a8:	2f 89 00 00 	cmpwi   cr7,r9,0
1000d4ac:	40 9e 00 20 	bne     cr7,1000d4cc <cgi_kill+0xa8>
	    {
	    syslog( LOG_CRIT, "tmr_create(cgi_kill2) failed" );
1000d4b0:	38 60 00 02 	li      r3,2
1000d4b4:	3d 20 10 02 	lis     r9,4098
1000d4b8:	38 89 a5 28 	addi    r4,r9,-23256
1000d4bc:	4c c6 31 82 	crclr   4*cr1+eq
1000d4c0:	48 02 02 c5 	bl      1002d784 <syslog@plt>
	    exit( 1 );
1000d4c4:	38 60 00 01 	li      r3,1
1000d4c8:	48 02 01 0d 	bl      1002d5d4 <exit@plt>
	    }
	}
    }
1000d4cc:	39 7f 00 30 	addi    r11,r31,48
1000d4d0:	80 0b 00 04 	lwz     r0,4(r11)
1000d4d4:	7c 08 03 a6 	mtlr    r0
1000d4d8:	83 cb ff f8 	lwz     r30,-8(r11)
1000d4dc:	83 eb ff fc 	lwz     r31,-4(r11)
1000d4e0:	7d 61 5b 78 	mr      r1,r11
1000d4e4:	4e 80 00 20 	blr

1000d4e8 <name_compare>:
#ifdef GENERATE_INDEXES

/* qsort comparison routine */
static int
name_compare( const void* v1, const void* v2 )
    {
1000d4e8:	94 21 ff d0 	stwu    r1,-48(r1)
1000d4ec:	7c 08 02 a6 	mflr    r0
1000d4f0:	90 01 00 34 	stw     r0,52(r1)
1000d4f4:	93 e1 00 2c 	stw     r31,44(r1)
1000d4f8:	7c 3f 0b 78 	mr      r31,r1
1000d4fc:	90 7f 00 18 	stw     r3,24(r31)
1000d500:	90 9f 00 1c 	stw     r4,28(r31)
    const char** c1 = (const char**) v1;
1000d504:	81 3f 00 18 	lwz     r9,24(r31)
1000d508:	91 3f 00 08 	stw     r9,8(r31)
    const char** c2 = (const char**) v2;
1000d50c:	81 3f 00 1c 	lwz     r9,28(r31)
1000d510:	91 3f 00 0c 	stw     r9,12(r31)
    return strcmp( *c1, *c2 );
1000d514:	81 3f 00 08 	lwz     r9,8(r31)
1000d518:	81 49 00 00 	lwz     r10,0(r9)
1000d51c:	81 3f 00 0c 	lwz     r9,12(r31)
1000d520:	81 29 00 00 	lwz     r9,0(r9)
1000d524:	7d 43 53 78 	mr      r3,r10
1000d528:	7d 24 4b 78 	mr      r4,r9
1000d52c:	48 01 fe b1 	bl      1002d3dc <strcmp@plt>
1000d530:	7c 69 1b 78 	mr      r9,r3
    }
1000d534:	7d 23 4b 78 	mr      r3,r9
1000d538:	39 7f 00 30 	addi    r11,r31,48
1000d53c:	80 0b 00 04 	lwz     r0,4(r11)
1000d540:	7c 08 03 a6 	mtlr    r0
1000d544:	83 eb ff fc 	lwz     r31,-4(r11)
1000d548:	7d 61 5b 78 	mr      r1,r11
1000d54c:	4e 80 00 20 	blr

1000d550 <ls>:


static int
ls( httpd_conn* hc )
    {
1000d550:	94 21 ee c0 	stwu    r1,-4416(r1)
1000d554:	7c 08 02 a6 	mflr    r0
1000d558:	90 01 11 44 	stw     r0,4420(r1)
1000d55c:	93 81 11 30 	stw     r28,4400(r1)
1000d560:	93 a1 11 34 	stw     r29,4404(r1)
1000d564:	93 c1 11 38 	stw     r30,4408(r1)
1000d568:	93 e1 11 3c 	stw     r31,4412(r1)
1000d56c:	7c 3f 0b 78 	mr      r31,r1
1000d570:	90 7f 11 20 	stw     r3,4384(r31)
    char* fileclass;
    time_t now;
    char* timestr;
    ClientData client_data;

    dirp = opendir( hc->expnfilename );
1000d574:	81 3f 11 20 	lwz     r9,4384(r31)
1000d578:	81 29 00 bc 	lwz     r9,188(r9)
1000d57c:	7d 23 4b 78 	mr      r3,r9
1000d580:	48 02 02 a5 	bl      1002d824 <opendir@plt>
1000d584:	90 7f 00 30 	stw     r3,48(r31)
    if ( dirp == (DIR*) 0 )
1000d588:	81 3f 00 30 	lwz     r9,48(r31)
1000d58c:	2f 89 00 00 	cmpwi   cr7,r9,0
1000d590:	40 9e 00 64 	bne     cr7,1000d5f4 <ls+0xa4>
	{
	syslog( LOG_ERR, "opendir %.80s - %m", hc->expnfilename );
1000d594:	81 3f 11 20 	lwz     r9,4384(r31)
1000d598:	81 29 00 bc 	lwz     r9,188(r9)
1000d59c:	38 60 00 03 	li      r3,3
1000d5a0:	3d 40 10 02 	lis     r10,4098
1000d5a4:	38 8a a5 48 	addi    r4,r10,-23224
1000d5a8:	7d 25 4b 78 	mr      r5,r9
1000d5ac:	4c c6 31 82 	crclr   4*cr1+eq
1000d5b0:	48 02 01 d5 	bl      1002d784 <syslog@plt>
	httpd_send_err( hc, 404, err404title, "", err404form, hc->encodedurl );
1000d5b4:	3d 20 10 03 	lis     r9,4099
1000d5b8:	81 09 c1 24 	lwz     r8,-16092(r9)
1000d5bc:	3d 20 10 03 	lis     r9,4099
1000d5c0:	81 49 c1 28 	lwz     r10,-16088(r9)
1000d5c4:	81 3f 11 20 	lwz     r9,4384(r31)
1000d5c8:	81 29 00 ac 	lwz     r9,172(r9)
1000d5cc:	80 7f 11 20 	lwz     r3,4384(r31)
1000d5d0:	38 80 01 94 	li      r4,404
1000d5d4:	7d 05 43 78 	mr      r5,r8
1000d5d8:	3d 00 10 02 	lis     r8,4098
1000d5dc:	38 c8 8e d4 	addi    r6,r8,-28972
1000d5e0:	7d 47 53 78 	mr      r7,r10
1000d5e4:	7d 28 4b 78 	mr      r8,r9
1000d5e8:	4b ff b2 0d 	bl      100087f4 <httpd_send_err>
	return -1;
1000d5ec:	39 20 ff ff 	li      r9,-1
1000d5f0:	48 00 0d c8 	b       1000e3b8 <ls+0xe68>
	}

    if ( hc->method == METHOD_HEAD )
1000d5f4:	81 3f 11 20 	lwz     r9,4384(r31)
1000d5f8:	81 29 00 9c 	lwz     r9,156(r9)
1000d5fc:	2f 89 00 02 	cmpwi   cr7,r9,2
1000d600:	40 9e 00 4c 	bne     cr7,1000d64c <ls+0xfc>
	{
	closedir( dirp );
1000d604:	80 7f 00 30 	lwz     r3,48(r31)
1000d608:	48 02 02 0d 	bl      1002d814 <closedir@plt>
	send_mime(
1000d60c:	3d 20 10 03 	lis     r9,4099
1000d610:	81 29 c1 04 	lwz     r9,-16124(r9)
1000d614:	81 5f 11 20 	lwz     r10,4384(r31)
1000d618:	81 4a 01 a8 	lwz     r10,424(r10)
1000d61c:	80 7f 11 20 	lwz     r3,4384(r31)
1000d620:	38 80 00 c8 	li      r4,200
1000d624:	7d 25 4b 78 	mr      r5,r9
1000d628:	3d 20 10 02 	lis     r9,4098
1000d62c:	38 c9 8e d4 	addi    r6,r9,-28972
1000d630:	3d 20 10 02 	lis     r9,4098
1000d634:	38 e9 8e d4 	addi    r7,r9,-28972
1000d638:	3d 20 10 02 	lis     r9,4098
1000d63c:	39 09 8e d8 	addi    r8,r9,-28968
1000d640:	39 20 ff ff 	li      r9,-1
1000d644:	4b ff a7 75 	bl      10007db8 <send_mime>
1000d648:	48 00 0d 6c 	b       1000e3b4 <ls+0xe64>
	    hc, 200, ok200title, "", "", "text/html; charset=%s", (off_t) -1,
	    hc->sb.st_mtime );
	}
    else if ( hc->method == METHOD_GET )
1000d64c:	81 3f 11 20 	lwz     r9,4384(r31)
1000d650:	81 29 00 9c 	lwz     r9,156(r9)
1000d654:	2f 89 00 01 	cmpwi   cr7,r9,1
1000d658:	40 9e 0d 08 	bne     cr7,1000e360 <ls+0xe10>
	{
	if ( hc->hs->cgi_limit != 0 && hc->hs->cgi_count >= hc->hs->cgi_limit )
1000d65c:	81 3f 11 20 	lwz     r9,4384(r31)
1000d660:	81 29 00 04 	lwz     r9,4(r9)
1000d664:	81 29 00 10 	lwz     r9,16(r9)
1000d668:	2f 89 00 00 	cmpwi   cr7,r9,0
1000d66c:	41 9e 00 6c 	beq     cr7,1000d6d8 <ls+0x188>
1000d670:	81 3f 11 20 	lwz     r9,4384(r31)
1000d674:	81 29 00 04 	lwz     r9,4(r9)
1000d678:	81 49 00 14 	lwz     r10,20(r9)
1000d67c:	81 3f 11 20 	lwz     r9,4384(r31)
1000d680:	81 29 00 04 	lwz     r9,4(r9)
1000d684:	81 29 00 10 	lwz     r9,16(r9)
1000d688:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000d68c:	41 9c 00 4c 	blt     cr7,1000d6d8 <ls+0x188>
	    {
	    closedir( dirp );
1000d690:	80 7f 00 30 	lwz     r3,48(r31)
1000d694:	48 02 01 81 	bl      1002d814 <closedir@plt>
	    httpd_send_err(
1000d698:	3d 20 10 03 	lis     r9,4099
1000d69c:	81 09 d3 48 	lwz     r8,-11448(r9)
1000d6a0:	3d 20 10 03 	lis     r9,4099
1000d6a4:	81 49 d3 4c 	lwz     r10,-11444(r9)
1000d6a8:	81 3f 11 20 	lwz     r9,4384(r31)
1000d6ac:	81 29 00 ac 	lwz     r9,172(r9)
1000d6b0:	80 7f 11 20 	lwz     r3,4384(r31)
1000d6b4:	38 80 01 f7 	li      r4,503
1000d6b8:	7d 05 43 78 	mr      r5,r8
1000d6bc:	3d 00 10 02 	lis     r8,4098
1000d6c0:	38 c8 8e d4 	addi    r6,r8,-28972
1000d6c4:	7d 47 53 78 	mr      r7,r10
1000d6c8:	7d 28 4b 78 	mr      r8,r9
1000d6cc:	4b ff b1 29 	bl      100087f4 <httpd_send_err>
		hc, 503, httpd_err503title, "", httpd_err503form,
		hc->encodedurl );
	    return -1;
1000d6d0:	39 20 ff ff 	li      r9,-1
1000d6d4:	48 00 0c e4 	b       1000e3b8 <ls+0xe68>
	    }
	++hc->hs->cgi_count;
1000d6d8:	81 3f 11 20 	lwz     r9,4384(r31)
1000d6dc:	81 29 00 04 	lwz     r9,4(r9)
1000d6e0:	81 49 00 14 	lwz     r10,20(r9)
1000d6e4:	39 4a 00 01 	addi    r10,r10,1
1000d6e8:	91 49 00 14 	stw     r10,20(r9)
	r = fork( );
1000d6ec:	48 02 00 59 	bl      1002d744 <fork@plt>
1000d6f0:	90 7f 00 34 	stw     r3,52(r31)
	if ( r < 0 )
1000d6f4:	81 3f 00 34 	lwz     r9,52(r31)
1000d6f8:	2f 89 00 00 	cmpwi   cr7,r9,0
1000d6fc:	40 9c 00 60 	bge     cr7,1000d75c <ls+0x20c>
	    {
	    syslog( LOG_ERR, "fork - %m" );
1000d700:	38 60 00 03 	li      r3,3
1000d704:	3d 20 10 02 	lis     r9,4098
1000d708:	38 89 a5 5c 	addi    r4,r9,-23204
1000d70c:	4c c6 31 82 	crclr   4*cr1+eq
1000d710:	48 02 00 75 	bl      1002d784 <syslog@plt>
	    closedir( dirp );
1000d714:	80 7f 00 30 	lwz     r3,48(r31)
1000d718:	48 02 00 fd 	bl      1002d814 <closedir@plt>
	    httpd_send_err(
1000d71c:	3d 20 10 03 	lis     r9,4099
1000d720:	81 09 c1 34 	lwz     r8,-16076(r9)
1000d724:	3d 20 10 03 	lis     r9,4099
1000d728:	81 49 c1 38 	lwz     r10,-16072(r9)
1000d72c:	81 3f 11 20 	lwz     r9,4384(r31)
1000d730:	81 29 00 ac 	lwz     r9,172(r9)
1000d734:	80 7f 11 20 	lwz     r3,4384(r31)
1000d738:	38 80 01 f4 	li      r4,500
1000d73c:	7d 05 43 78 	mr      r5,r8
1000d740:	3d 00 10 02 	lis     r8,4098
1000d744:	38 c8 8e d4 	addi    r6,r8,-28972
1000d748:	7d 47 53 78 	mr      r7,r10
1000d74c:	7d 28 4b 78 	mr      r8,r9
1000d750:	4b ff b0 a5 	bl      100087f4 <httpd_send_err>
		hc, 500, err500title, "", err500form, hc->encodedurl );
	    return -1;
1000d754:	39 20 ff ff 	li      r9,-1
1000d758:	48 00 0c 60 	b       1000e3b8 <ls+0xe68>
	    }
	if ( r == 0 )
1000d75c:	81 3f 00 34 	lwz     r9,52(r31)
1000d760:	2f 89 00 00 	cmpwi   cr7,r9,0
1000d764:	40 9e 0b 50 	bne     cr7,1000e2b4 <ls+0xd64>
	    {
	    /* Child process. */
	    sub_process = 1;
1000d768:	3d 20 10 03 	lis     r9,4099
1000d76c:	39 40 00 01 	li      r10,1
1000d770:	91 49 db 28 	stw     r10,-9432(r9)
	    httpd_unlisten( hc->hs );
1000d774:	81 3f 11 20 	lwz     r9,4384(r31)
1000d778:	81 29 00 04 	lwz     r9,4(r9)
1000d77c:	7d 23 4b 78 	mr      r3,r9
1000d780:	4b ff a3 59 	bl      10007ad8 <httpd_unlisten>
	    send_mime(
1000d784:	3d 20 10 03 	lis     r9,4099
1000d788:	81 29 c1 04 	lwz     r9,-16124(r9)
1000d78c:	81 5f 11 20 	lwz     r10,4384(r31)
1000d790:	81 4a 01 a8 	lwz     r10,424(r10)
1000d794:	80 7f 11 20 	lwz     r3,4384(r31)
1000d798:	38 80 00 c8 	li      r4,200
1000d79c:	7d 25 4b 78 	mr      r5,r9
1000d7a0:	3d 20 10 02 	lis     r9,4098
1000d7a4:	38 c9 8e d4 	addi    r6,r9,-28972
1000d7a8:	3d 20 10 02 	lis     r9,4098
1000d7ac:	38 e9 8e d4 	addi    r7,r9,-28972
1000d7b0:	3d 20 10 02 	lis     r9,4098
1000d7b4:	39 09 8e d8 	addi    r8,r9,-28968
1000d7b8:	39 20 ff ff 	li      r9,-1
1000d7bc:	4b ff a5 fd 	bl      10007db8 <send_mime>
		hc, 200, ok200title, "", "", "text/html; charset=%s",
		(off_t) -1, hc->sb.st_mtime );
	    httpd_write_response( hc );
1000d7c0:	80 7f 11 20 	lwz     r3,4384(r31)
1000d7c4:	4b ff a4 51 	bl      10007c14 <httpd_write_response>

#ifdef CGI_NICE
	    /* Set priority. */
	    (void) nice( CGI_NICE );
1000d7c8:	38 60 ff f6 	li      r3,-10
1000d7cc:	48 01 fe 29 	bl      1002d5f4 <nice@plt>
	    /* Open a stdio stream so that we can use fprintf, which is more
	    ** efficient than a bunch of separate write()s.  We don't have
	    ** to worry about double closes or file descriptor leaks cause
	    ** we're in a subprocess.
	    */
	    fp = fdopen( hc->conn_fd, "w" );
1000d7d0:	81 3f 11 20 	lwz     r9,4384(r31)
1000d7d4:	81 29 01 c0 	lwz     r9,448(r9)
1000d7d8:	7d 23 4b 78 	mr      r3,r9
1000d7dc:	3d 20 10 02 	lis     r9,4098
1000d7e0:	38 89 a5 68 	addi    r4,r9,-23192
1000d7e4:	48 01 fe 31 	bl      1002d614 <fdopen@plt>
1000d7e8:	90 7f 00 38 	stw     r3,56(r31)
	    if ( fp == (FILE*) 0 )
1000d7ec:	81 3f 00 38 	lwz     r9,56(r31)
1000d7f0:	2f 89 00 00 	cmpwi   cr7,r9,0
1000d7f4:	40 9e 00 68 	bne     cr7,1000d85c <ls+0x30c>
		{
		syslog( LOG_ERR, "fdopen - %m" );
1000d7f8:	38 60 00 03 	li      r3,3
1000d7fc:	3d 20 10 02 	lis     r9,4098
1000d800:	38 89 a5 6c 	addi    r4,r9,-23188
1000d804:	4c c6 31 82 	crclr   4*cr1+eq
1000d808:	48 01 ff 7d 	bl      1002d784 <syslog@plt>
		httpd_send_err(
1000d80c:	3d 20 10 03 	lis     r9,4099
1000d810:	81 09 c1 34 	lwz     r8,-16076(r9)
1000d814:	3d 20 10 03 	lis     r9,4099
1000d818:	81 49 c1 38 	lwz     r10,-16072(r9)
1000d81c:	81 3f 11 20 	lwz     r9,4384(r31)
1000d820:	81 29 00 ac 	lwz     r9,172(r9)
1000d824:	80 7f 11 20 	lwz     r3,4384(r31)
1000d828:	38 80 01 f4 	li      r4,500
1000d82c:	7d 05 43 78 	mr      r5,r8
1000d830:	3d 00 10 02 	lis     r8,4098
1000d834:	38 c8 8e d4 	addi    r6,r8,-28972
1000d838:	7d 47 53 78 	mr      r7,r10
1000d83c:	7d 28 4b 78 	mr      r8,r9
1000d840:	4b ff af b5 	bl      100087f4 <httpd_send_err>
		    hc, 500, err500title, "", err500form, hc->encodedurl );
		httpd_write_response( hc );
1000d844:	80 7f 11 20 	lwz     r3,4384(r31)
1000d848:	4b ff a3 cd 	bl      10007c14 <httpd_write_response>
		closedir( dirp );
1000d84c:	80 7f 00 30 	lwz     r3,48(r31)
1000d850:	48 01 ff c5 	bl      1002d814 <closedir@plt>
		exit( 1 );
1000d854:	38 60 00 01 	li      r3,1
1000d858:	48 01 fd 7d 	bl      1002d5d4 <exit@plt>
		}

	    (void) fprintf( fp, "\
1000d85c:	81 3f 11 20 	lwz     r9,4384(r31)
1000d860:	81 49 00 ac 	lwz     r10,172(r9)
1000d864:	81 3f 11 20 	lwz     r9,4384(r31)
1000d868:	81 29 00 ac 	lwz     r9,172(r9)
1000d86c:	80 7f 00 38 	lwz     r3,56(r31)
1000d870:	3d 00 10 02 	lis     r8,4098
1000d874:	38 88 a5 78 	addi    r4,r8,-23176
1000d878:	7d 45 53 78 	mr      r5,r10
1000d87c:	7d 26 4b 78 	mr      r6,r9
1000d880:	4c c6 31 82 	crclr   4*cr1+eq
1000d884:	48 01 fd f9 	bl      1002d67c <fprintf@plt>
mode  links    bytes  last-changed  name\n\
    <hr>",
		hc->encodedurl, hc->encodedurl );

	    /* Read in names. */
	    nnames = 0;
1000d888:	39 20 00 00 	li      r9,0
1000d88c:	91 3f 00 20 	stw     r9,32(r31)
	    while ( ( de = readdir( dirp ) ) != 0 )     /* dirent or direct */
1000d890:	48 00 02 00 	b       1000da90 <ls+0x540>
		{
		if ( nnames >= maxnames )
1000d894:	3d 20 10 03 	lis     r9,4099
1000d898:	81 29 dc 88 	lwz     r9,-9080(r9)
1000d89c:	81 5f 00 20 	lwz     r10,32(r31)
1000d8a0:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000d8a4:	41 9c 01 6c 	blt     cr7,1000da10 <ls+0x4c0>
		    {
		    if ( maxnames == 0 )
1000d8a8:	3d 20 10 03 	lis     r9,4099
1000d8ac:	81 29 dc 88 	lwz     r9,-9080(r9)
1000d8b0:	2f 89 00 00 	cmpwi   cr7,r9,0
1000d8b4:	40 9e 00 5c 	bne     cr7,1000d910 <ls+0x3c0>
			{
			maxnames = 100;
1000d8b8:	3d 20 10 03 	lis     r9,4099
1000d8bc:	39 40 00 64 	li      r10,100
1000d8c0:	91 49 dc 88 	stw     r10,-9080(r9)
			names = NEW( char, maxnames * ( MAXPATHLEN + 1 ) );
1000d8c4:	3d 20 10 03 	lis     r9,4099
1000d8c8:	81 29 dc 88 	lwz     r9,-9080(r9)
1000d8cc:	1d 29 10 01 	mulli   r9,r9,4097
1000d8d0:	7d 23 4b 78 	mr      r3,r9
1000d8d4:	48 01 fc d1 	bl      1002d5a4 <malloc@plt>
1000d8d8:	7c 69 1b 78 	mr      r9,r3
1000d8dc:	7d 2a 4b 78 	mr      r10,r9
1000d8e0:	3d 20 10 03 	lis     r9,4099
1000d8e4:	91 49 dc 8c 	stw     r10,-9076(r9)
			nameptrs = NEW( char*, maxnames );
1000d8e8:	3d 20 10 03 	lis     r9,4099
1000d8ec:	81 29 dc 88 	lwz     r9,-9080(r9)
1000d8f0:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1000d8f4:	7d 23 4b 78 	mr      r3,r9
1000d8f8:	48 01 fc ad 	bl      1002d5a4 <malloc@plt>
1000d8fc:	7c 69 1b 78 	mr      r9,r3
1000d900:	7d 2a 4b 78 	mr      r10,r9
1000d904:	3d 20 10 03 	lis     r9,4099
1000d908:	91 49 dc 90 	stw     r10,-9072(r9)
1000d90c:	48 00 00 70 	b       1000d97c <ls+0x42c>
			}
		    else
			{
			maxnames *= 2;
1000d910:	3d 20 10 03 	lis     r9,4099
1000d914:	81 29 dc 88 	lwz     r9,-9080(r9)
1000d918:	55 2a 08 3c 	rlwinm  r10,r9,1,0,30
1000d91c:	3d 20 10 03 	lis     r9,4099
1000d920:	91 49 dc 88 	stw     r10,-9080(r9)
			names = RENEW( names, char, maxnames * ( MAXPATHLEN + 1 ) );
1000d924:	3d 20 10 03 	lis     r9,4099
1000d928:	81 49 dc 8c 	lwz     r10,-9076(r9)
1000d92c:	3d 20 10 03 	lis     r9,4099
1000d930:	81 29 dc 88 	lwz     r9,-9080(r9)
1000d934:	1d 29 10 01 	mulli   r9,r9,4097
1000d938:	7d 43 53 78 	mr      r3,r10
1000d93c:	7d 24 4b 78 	mr      r4,r9
1000d940:	48 01 fc 5d 	bl      1002d59c <realloc@plt>
1000d944:	7c 6a 1b 78 	mr      r10,r3
1000d948:	3d 20 10 03 	lis     r9,4099
1000d94c:	91 49 dc 8c 	stw     r10,-9076(r9)
			nameptrs = RENEW( nameptrs, char*, maxnames );
1000d950:	3d 20 10 03 	lis     r9,4099
1000d954:	81 49 dc 90 	lwz     r10,-9072(r9)
1000d958:	3d 20 10 03 	lis     r9,4099
1000d95c:	81 29 dc 88 	lwz     r9,-9080(r9)
1000d960:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1000d964:	7d 43 53 78 	mr      r3,r10
1000d968:	7d 24 4b 78 	mr      r4,r9
1000d96c:	48 01 fc 31 	bl      1002d59c <realloc@plt>
1000d970:	7c 6a 1b 78 	mr      r10,r3
1000d974:	3d 20 10 03 	lis     r9,4099
1000d978:	91 49 dc 90 	stw     r10,-9072(r9)
			}
		    if ( names == (char*) 0 || nameptrs == (char**) 0 )
1000d97c:	3d 20 10 03 	lis     r9,4099
1000d980:	81 29 dc 8c 	lwz     r9,-9076(r9)
1000d984:	2f 89 00 00 	cmpwi   cr7,r9,0
1000d988:	41 9e 00 14 	beq     cr7,1000d99c <ls+0x44c>
1000d98c:	3d 20 10 03 	lis     r9,4099
1000d990:	81 29 dc 90 	lwz     r9,-9072(r9)
1000d994:	2f 89 00 00 	cmpwi   cr7,r9,0
1000d998:	40 9e 00 20 	bne     cr7,1000d9b8 <ls+0x468>
			{
			syslog( LOG_ERR, "out of memory reallocating directory names" );
1000d99c:	38 60 00 03 	li      r3,3
1000d9a0:	3d 20 10 02 	lis     r9,4098
1000d9a4:	38 89 a7 08 	addi    r4,r9,-22776
1000d9a8:	4c c6 31 82 	crclr   4*cr1+eq
1000d9ac:	48 01 fd d9 	bl      1002d784 <syslog@plt>
			exit( 1 );
1000d9b0:	38 60 00 01 	li      r3,1
1000d9b4:	48 01 fc 21 	bl      1002d5d4 <exit@plt>
			}
		    for ( i = 0; i < maxnames; ++i )
1000d9b8:	39 20 00 00 	li      r9,0
1000d9bc:	91 3f 00 24 	stw     r9,36(r31)
1000d9c0:	48 00 00 3c 	b       1000d9fc <ls+0x4ac>
			nameptrs[i] = &names[i * ( MAXPATHLEN + 1 )];
1000d9c4:	3d 20 10 03 	lis     r9,4099
1000d9c8:	81 49 dc 90 	lwz     r10,-9072(r9)
1000d9cc:	81 3f 00 24 	lwz     r9,36(r31)
1000d9d0:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1000d9d4:	7d 2a 4a 14 	add     r9,r10,r9
1000d9d8:	3d 40 10 03 	lis     r10,4099
1000d9dc:	81 0a dc 8c 	lwz     r8,-9076(r10)
1000d9e0:	81 5f 00 24 	lwz     r10,36(r31)
1000d9e4:	1d 4a 10 01 	mulli   r10,r10,4097
1000d9e8:	7d 48 52 14 	add     r10,r8,r10
1000d9ec:	91 49 00 00 	stw     r10,0(r9)
		    if ( names == (char*) 0 || nameptrs == (char**) 0 )
			{
			syslog( LOG_ERR, "out of memory reallocating directory names" );
			exit( 1 );
			}
		    for ( i = 0; i < maxnames; ++i )
1000d9f0:	81 3f 00 24 	lwz     r9,36(r31)
1000d9f4:	39 29 00 01 	addi    r9,r9,1
1000d9f8:	91 3f 00 24 	stw     r9,36(r31)
1000d9fc:	3d 20 10 03 	lis     r9,4099
1000da00:	81 29 dc 88 	lwz     r9,-9080(r9)
1000da04:	81 5f 00 24 	lwz     r10,36(r31)
1000da08:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000da0c:	41 9c ff b8 	blt     cr7,1000d9c4 <ls+0x474>
			nameptrs[i] = &names[i * ( MAXPATHLEN + 1 )];
		    }
		namlen = NAMLEN(de);
1000da10:	81 3f 00 3c 	lwz     r9,60(r31)
1000da14:	39 29 00 0b 	addi    r9,r9,11
1000da18:	7d 23 4b 78 	mr      r3,r9
1000da1c:	48 01 fc 39 	bl      1002d654 <strlen@plt>
1000da20:	7c 69 1b 78 	mr      r9,r3
1000da24:	91 3f 00 40 	stw     r9,64(r31)
		(void) strncpy( nameptrs[nnames], de->d_name, namlen );
1000da28:	3d 20 10 03 	lis     r9,4099
1000da2c:	81 49 dc 90 	lwz     r10,-9072(r9)
1000da30:	81 3f 00 20 	lwz     r9,32(r31)
1000da34:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1000da38:	7d 2a 4a 14 	add     r9,r10,r9
1000da3c:	81 09 00 00 	lwz     r8,0(r9)
1000da40:	81 3f 00 3c 	lwz     r9,60(r31)
1000da44:	39 49 00 0b 	addi    r10,r9,11
1000da48:	81 3f 00 40 	lwz     r9,64(r31)
1000da4c:	7d 03 43 78 	mr      r3,r8
1000da50:	7d 44 53 78 	mr      r4,r10
1000da54:	7d 25 4b 78 	mr      r5,r9
1000da58:	48 01 fc 8d 	bl      1002d6e4 <strncpy@plt>
		nameptrs[nnames][namlen] = '\0';
1000da5c:	3d 20 10 03 	lis     r9,4099
1000da60:	81 49 dc 90 	lwz     r10,-9072(r9)
1000da64:	81 3f 00 20 	lwz     r9,32(r31)
1000da68:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1000da6c:	7d 2a 4a 14 	add     r9,r10,r9
1000da70:	81 49 00 00 	lwz     r10,0(r9)
1000da74:	81 3f 00 40 	lwz     r9,64(r31)
1000da78:	7d 2a 4a 14 	add     r9,r10,r9
1000da7c:	39 40 00 00 	li      r10,0
1000da80:	99 49 00 00 	stb     r10,0(r9)
		++nnames;
1000da84:	81 3f 00 20 	lwz     r9,32(r31)
1000da88:	39 29 00 01 	addi    r9,r9,1
1000da8c:	91 3f 00 20 	stw     r9,32(r31)
    <hr>",
		hc->encodedurl, hc->encodedurl );

	    /* Read in names. */
	    nnames = 0;
	    while ( ( de = readdir( dirp ) ) != 0 )     /* dirent or direct */
1000da90:	80 7f 00 30 	lwz     r3,48(r31)
1000da94:	48 01 fc c1 	bl      1002d754 <readdir@plt>
1000da98:	90 7f 00 3c 	stw     r3,60(r31)
1000da9c:	81 3f 00 3c 	lwz     r9,60(r31)
1000daa0:	2f 89 00 00 	cmpwi   cr7,r9,0
1000daa4:	40 9e fd f0 	bne     cr7,1000d894 <ls+0x344>
		namlen = NAMLEN(de);
		(void) strncpy( nameptrs[nnames], de->d_name, namlen );
		nameptrs[nnames][namlen] = '\0';
		++nnames;
		}
	    closedir( dirp );
1000daa8:	80 7f 00 30 	lwz     r3,48(r31)
1000daac:	48 01 fd 69 	bl      1002d814 <closedir@plt>

	    /* Sort the names. */
	    qsort( nameptrs, nnames, sizeof(*nameptrs), name_compare );
1000dab0:	3d 20 10 03 	lis     r9,4099
1000dab4:	81 49 dc 90 	lwz     r10,-9072(r9)
1000dab8:	81 3f 00 20 	lwz     r9,32(r31)
1000dabc:	7d 43 53 78 	mr      r3,r10
1000dac0:	7d 24 4b 78 	mr      r4,r9
1000dac4:	38 a0 00 04 	li      r5,4
1000dac8:	3d 20 10 01 	lis     r9,4097
1000dacc:	38 c9 d4 e8 	addi    r6,r9,-11032
1000dad0:	48 01 fd 05 	bl      1002d7d4 <qsort@plt>

	    /* Generate output. */
	    for ( i = 0; i < nnames; ++i )
1000dad4:	39 20 00 00 	li      r9,0
1000dad8:	91 3f 00 24 	stw     r9,36(r31)
1000dadc:	48 00 07 a0 	b       1000e27c <ls+0xd2c>
		{
		httpd_realloc_str(
		    &name, &maxname,
		    strlen( hc->expnfilename ) + 1 + strlen( nameptrs[i] ) );
1000dae0:	81 3f 11 20 	lwz     r9,4384(r31)
1000dae4:	81 29 00 bc 	lwz     r9,188(r9)
1000dae8:	7d 23 4b 78 	mr      r3,r9
1000daec:	48 01 fb 69 	bl      1002d654 <strlen@plt>
1000daf0:	7c 7c 1b 78 	mr      r28,r3
1000daf4:	3d 20 10 03 	lis     r9,4099
1000daf8:	81 49 dc 90 	lwz     r10,-9072(r9)
1000dafc:	81 3f 00 24 	lwz     r9,36(r31)
1000db00:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1000db04:	7d 2a 4a 14 	add     r9,r10,r9
1000db08:	81 29 00 00 	lwz     r9,0(r9)
1000db0c:	7d 23 4b 78 	mr      r3,r9
1000db10:	48 01 fb 45 	bl      1002d654 <strlen@plt>
1000db14:	7c 69 1b 78 	mr      r9,r3
1000db18:	7d 3c 4a 14 	add     r9,r28,r9
	    qsort( nameptrs, nnames, sizeof(*nameptrs), name_compare );

	    /* Generate output. */
	    for ( i = 0; i < nnames; ++i )
		{
		httpd_realloc_str(
1000db1c:	39 29 00 01 	addi    r9,r9,1
1000db20:	3d 40 10 03 	lis     r10,4099
1000db24:	38 6a dc 94 	addi    r3,r10,-9068
1000db28:	3d 40 10 03 	lis     r10,4099
1000db2c:	38 8a dc 98 	addi    r4,r10,-9064
1000db30:	7d 25 4b 78 	mr      r5,r9
1000db34:	4b ff a7 e5 	bl      10008318 <httpd_realloc_str>
		    &name, &maxname,
		    strlen( hc->expnfilename ) + 1 + strlen( nameptrs[i] ) );
		httpd_realloc_str(
		    &rname, &maxrname,
		    strlen( hc->origfilename ) + 1 + strlen( nameptrs[i] ) );
1000db38:	81 3f 11 20 	lwz     r9,4384(r31)
1000db3c:	81 29 00 b8 	lwz     r9,184(r9)
1000db40:	7d 23 4b 78 	mr      r3,r9
1000db44:	48 01 fb 11 	bl      1002d654 <strlen@plt>
1000db48:	7c 7c 1b 78 	mr      r28,r3
1000db4c:	3d 20 10 03 	lis     r9,4099
1000db50:	81 49 dc 90 	lwz     r10,-9072(r9)
1000db54:	81 3f 00 24 	lwz     r9,36(r31)
1000db58:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1000db5c:	7d 2a 4a 14 	add     r9,r10,r9
1000db60:	81 29 00 00 	lwz     r9,0(r9)
1000db64:	7d 23 4b 78 	mr      r3,r9
1000db68:	48 01 fa ed 	bl      1002d654 <strlen@plt>
1000db6c:	7c 69 1b 78 	mr      r9,r3
1000db70:	7d 3c 4a 14 	add     r9,r28,r9
	    for ( i = 0; i < nnames; ++i )
		{
		httpd_realloc_str(
		    &name, &maxname,
		    strlen( hc->expnfilename ) + 1 + strlen( nameptrs[i] ) );
		httpd_realloc_str(
1000db74:	39 29 00 01 	addi    r9,r9,1
1000db78:	3d 40 10 03 	lis     r10,4099
1000db7c:	38 6a dc 9c 	addi    r3,r10,-9060
1000db80:	3d 40 10 03 	lis     r10,4099
1000db84:	38 8a dc a0 	addi    r4,r10,-9056
1000db88:	7d 25 4b 78 	mr      r5,r9
1000db8c:	4b ff a7 8d 	bl      10008318 <httpd_realloc_str>
		    &rname, &maxrname,
		    strlen( hc->origfilename ) + 1 + strlen( nameptrs[i] ) );
		if ( hc->expnfilename[0] == '\0' ||
1000db90:	81 3f 11 20 	lwz     r9,4384(r31)
1000db94:	81 29 00 bc 	lwz     r9,188(r9)
1000db98:	89 29 00 00 	lbz     r9,0(r9)
1000db9c:	55 29 06 3e 	clrlwi  r9,r9,24
1000dba0:	2f 89 00 00 	cmpwi   cr7,r9,0
1000dba4:	41 9e 00 28 	beq     cr7,1000dbcc <ls+0x67c>
		     strcmp( hc->expnfilename, "." ) == 0 )
1000dba8:	81 3f 11 20 	lwz     r9,4384(r31)
1000dbac:	81 29 00 bc 	lwz     r9,188(r9)
1000dbb0:	7d 23 4b 78 	mr      r3,r9
1000dbb4:	3d 20 10 02 	lis     r9,4098
1000dbb8:	38 89 91 4c 	addi    r4,r9,-28340
1000dbbc:	48 01 f8 21 	bl      1002d3dc <strcmp@plt>
1000dbc0:	7c 69 1b 78 	mr      r9,r3
		    &name, &maxname,
		    strlen( hc->expnfilename ) + 1 + strlen( nameptrs[i] ) );
		httpd_realloc_str(
		    &rname, &maxrname,
		    strlen( hc->origfilename ) + 1 + strlen( nameptrs[i] ) );
		if ( hc->expnfilename[0] == '\0' ||
1000dbc4:	2f 89 00 00 	cmpwi   cr7,r9,0
1000dbc8:	40 9e 00 60 	bne     cr7,1000dc28 <ls+0x6d8>
		     strcmp( hc->expnfilename, "." ) == 0 )
		    {
		    (void) strcpy( name, nameptrs[i] );
1000dbcc:	3d 20 10 03 	lis     r9,4099
1000dbd0:	81 49 dc 94 	lwz     r10,-9068(r9)
1000dbd4:	3d 20 10 03 	lis     r9,4099
1000dbd8:	81 09 dc 90 	lwz     r8,-9072(r9)
1000dbdc:	81 3f 00 24 	lwz     r9,36(r31)
1000dbe0:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1000dbe4:	7d 28 4a 14 	add     r9,r8,r9
1000dbe8:	81 29 00 00 	lwz     r9,0(r9)
1000dbec:	7d 43 53 78 	mr      r3,r10
1000dbf0:	7d 24 4b 78 	mr      r4,r9
1000dbf4:	48 01 f9 71 	bl      1002d564 <strcpy@plt>
		    (void) strcpy( rname, nameptrs[i] );
1000dbf8:	3d 20 10 03 	lis     r9,4099
1000dbfc:	81 49 dc 9c 	lwz     r10,-9060(r9)
1000dc00:	3d 20 10 03 	lis     r9,4099
1000dc04:	81 09 dc 90 	lwz     r8,-9072(r9)
1000dc08:	81 3f 00 24 	lwz     r9,36(r31)
1000dc0c:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1000dc10:	7d 28 4a 14 	add     r9,r8,r9
1000dc14:	81 29 00 00 	lwz     r9,0(r9)
1000dc18:	7d 43 53 78 	mr      r3,r10
1000dc1c:	7d 24 4b 78 	mr      r4,r9
1000dc20:	48 01 f9 45 	bl      1002d564 <strcpy@plt>
1000dc24:	48 00 01 10 	b       1000dd34 <ls+0x7e4>
		    }
		else
		    {
		    (void) my_snprintf( name, maxname,
1000dc28:	3d 20 10 03 	lis     r9,4099
1000dc2c:	80 e9 dc 94 	lwz     r7,-9068(r9)
1000dc30:	3d 20 10 03 	lis     r9,4099
1000dc34:	81 09 dc 98 	lwz     r8,-9064(r9)
1000dc38:	81 3f 11 20 	lwz     r9,4384(r31)
1000dc3c:	81 49 00 bc 	lwz     r10,188(r9)
			"%s/%s", hc->expnfilename, nameptrs[i] );
1000dc40:	3d 20 10 03 	lis     r9,4099
1000dc44:	80 c9 dc 90 	lwz     r6,-9072(r9)
1000dc48:	81 3f 00 24 	lwz     r9,36(r31)
1000dc4c:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1000dc50:	7d 26 4a 14 	add     r9,r6,r9
		    (void) strcpy( name, nameptrs[i] );
		    (void) strcpy( rname, nameptrs[i] );
		    }
		else
		    {
		    (void) my_snprintf( name, maxname,
1000dc54:	81 29 00 00 	lwz     r9,0(r9)
1000dc58:	7c e3 3b 78 	mr      r3,r7
1000dc5c:	7d 04 43 78 	mr      r4,r8
1000dc60:	3d 00 10 02 	lis     r8,4098
1000dc64:	38 a8 91 50 	addi    r5,r8,-28336
1000dc68:	7d 46 53 78 	mr      r6,r10
1000dc6c:	7d 27 4b 78 	mr      r7,r9
1000dc70:	4c c6 31 82 	crclr   4*cr1+eq
1000dc74:	48 00 38 e1 	bl      10011554 <my_snprintf>
			"%s/%s", hc->expnfilename, nameptrs[i] );
		    if ( strcmp( hc->origfilename, "." ) == 0 )
1000dc78:	81 3f 11 20 	lwz     r9,4384(r31)
1000dc7c:	81 29 00 b8 	lwz     r9,184(r9)
1000dc80:	7d 23 4b 78 	mr      r3,r9
1000dc84:	3d 20 10 02 	lis     r9,4098
1000dc88:	38 89 91 4c 	addi    r4,r9,-28340
1000dc8c:	48 01 f7 51 	bl      1002d3dc <strcmp@plt>
1000dc90:	7c 69 1b 78 	mr      r9,r3
1000dc94:	2f 89 00 00 	cmpwi   cr7,r9,0
1000dc98:	40 9e 00 4c 	bne     cr7,1000dce4 <ls+0x794>
			(void) my_snprintf( rname, maxrname,
1000dc9c:	3d 20 10 03 	lis     r9,4099
1000dca0:	81 09 dc 9c 	lwz     r8,-9060(r9)
1000dca4:	3d 20 10 03 	lis     r9,4099
1000dca8:	81 49 dc a0 	lwz     r10,-9056(r9)
			    "%s", nameptrs[i] );
1000dcac:	3d 20 10 03 	lis     r9,4099
1000dcb0:	80 e9 dc 90 	lwz     r7,-9072(r9)
1000dcb4:	81 3f 00 24 	lwz     r9,36(r31)
1000dcb8:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1000dcbc:	7d 27 4a 14 	add     r9,r7,r9
		else
		    {
		    (void) my_snprintf( name, maxname,
			"%s/%s", hc->expnfilename, nameptrs[i] );
		    if ( strcmp( hc->origfilename, "." ) == 0 )
			(void) my_snprintf( rname, maxrname,
1000dcc0:	81 29 00 00 	lwz     r9,0(r9)
1000dcc4:	7d 03 43 78 	mr      r3,r8
1000dcc8:	7d 44 53 78 	mr      r4,r10
1000dccc:	3d 40 10 02 	lis     r10,4098
1000dcd0:	38 aa a7 34 	addi    r5,r10,-22732
1000dcd4:	7d 26 4b 78 	mr      r6,r9
1000dcd8:	4c c6 31 82 	crclr   4*cr1+eq
1000dcdc:	48 00 38 79 	bl      10011554 <my_snprintf>
1000dce0:	48 00 00 54 	b       1000dd34 <ls+0x7e4>
			    "%s", nameptrs[i] );
		    else
			(void) my_snprintf( rname, maxrname,
1000dce4:	3d 20 10 03 	lis     r9,4099
1000dce8:	80 e9 dc 9c 	lwz     r7,-9060(r9)
1000dcec:	3d 20 10 03 	lis     r9,4099
1000dcf0:	81 09 dc a0 	lwz     r8,-9056(r9)
1000dcf4:	81 3f 11 20 	lwz     r9,4384(r31)
1000dcf8:	81 49 00 b8 	lwz     r10,184(r9)
			    "%s%s", hc->origfilename, nameptrs[i] );
1000dcfc:	3d 20 10 03 	lis     r9,4099
1000dd00:	80 c9 dc 90 	lwz     r6,-9072(r9)
1000dd04:	81 3f 00 24 	lwz     r9,36(r31)
1000dd08:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1000dd0c:	7d 26 4a 14 	add     r9,r6,r9
			"%s/%s", hc->expnfilename, nameptrs[i] );
		    if ( strcmp( hc->origfilename, "." ) == 0 )
			(void) my_snprintf( rname, maxrname,
			    "%s", nameptrs[i] );
		    else
			(void) my_snprintf( rname, maxrname,
1000dd10:	81 29 00 00 	lwz     r9,0(r9)
1000dd14:	7c e3 3b 78 	mr      r3,r7
1000dd18:	7d 04 43 78 	mr      r4,r8
1000dd1c:	3d 00 10 02 	lis     r8,4098
1000dd20:	38 a8 a7 38 	addi    r5,r8,-22728
1000dd24:	7d 46 53 78 	mr      r6,r10
1000dd28:	7d 27 4b 78 	mr      r7,r9
1000dd2c:	4c c6 31 82 	crclr   4*cr1+eq
1000dd30:	48 00 38 25 	bl      10011554 <my_snprintf>
			    "%s%s", hc->origfilename, nameptrs[i] );
		    }
		httpd_realloc_str(
		    &encrname, &maxencrname, 3 * strlen( rname ) + 1 );
1000dd34:	3d 20 10 03 	lis     r9,4099
1000dd38:	81 29 dc 9c 	lwz     r9,-9060(r9)
1000dd3c:	7d 23 4b 78 	mr      r3,r9
1000dd40:	48 01 f9 15 	bl      1002d654 <strlen@plt>
1000dd44:	7c 69 1b 78 	mr      r9,r3
1000dd48:	1d 29 00 03 	mulli   r9,r9,3
			    "%s", nameptrs[i] );
		    else
			(void) my_snprintf( rname, maxrname,
			    "%s%s", hc->origfilename, nameptrs[i] );
		    }
		httpd_realloc_str(
1000dd4c:	39 29 00 01 	addi    r9,r9,1
1000dd50:	3d 40 10 03 	lis     r10,4099
1000dd54:	38 6a dc a4 	addi    r3,r10,-9052
1000dd58:	3d 40 10 03 	lis     r10,4099
1000dd5c:	38 8a dc a8 	addi    r4,r10,-9048
1000dd60:	7d 25 4b 78 	mr      r5,r9
1000dd64:	4b ff a5 b5 	bl      10008318 <httpd_realloc_str>
		    &encrname, &maxencrname, 3 * strlen( rname ) + 1 );
		strencode( encrname, maxencrname, rname );
1000dd68:	3d 20 10 03 	lis     r9,4099
1000dd6c:	81 09 dc a4 	lwz     r8,-9052(r9)
1000dd70:	3d 20 10 03 	lis     r9,4099
1000dd74:	81 29 dc a8 	lwz     r9,-9048(r9)
1000dd78:	7d 2a 4b 78 	mr      r10,r9
1000dd7c:	3d 20 10 03 	lis     r9,4099
1000dd80:	81 29 dc 9c 	lwz     r9,-9060(r9)
1000dd84:	7d 03 43 78 	mr      r3,r8
1000dd88:	7d 44 53 78 	mr      r4,r10
1000dd8c:	7d 25 4b 78 	mr      r5,r9
1000dd90:	4b ff bb 39 	bl      100098c8 <strencode>

		if ( stat( name, &sb ) < 0 || lstat( name, &lsb ) < 0 )
1000dd94:	3d 20 10 03 	lis     r9,4099
1000dd98:	81 49 dc 94 	lwz     r10,-9068(r9)
1000dd9c:	39 3f 00 50 	addi    r9,r31,80
1000dda0:	7d 43 53 78 	mr      r3,r10
1000dda4:	7d 24 4b 78 	mr      r4,r9
1000dda8:	48 00 9e 4d 	bl      10017bf4 <__stat>
1000ddac:	7c 69 1b 78 	mr      r9,r3
1000ddb0:	2f 89 00 00 	cmpwi   cr7,r9,0
1000ddb4:	41 9c 00 28 	blt     cr7,1000dddc <ls+0x88c>
1000ddb8:	3d 20 10 03 	lis     r9,4099
1000ddbc:	81 49 dc 94 	lwz     r10,-9068(r9)
1000ddc0:	39 3f 00 a8 	addi    r9,r31,168
1000ddc4:	7d 43 53 78 	mr      r3,r10
1000ddc8:	7d 24 4b 78 	mr      r4,r9
1000ddcc:	48 00 9e 3d 	bl      10017c08 <__lstat>
1000ddd0:	7c 69 1b 78 	mr      r9,r3
1000ddd4:	2f 89 00 00 	cmpwi   cr7,r9,0
1000ddd8:	40 9c 00 08 	bge     cr7,1000dde0 <ls+0x890>
		    continue;
1000dddc:	48 00 04 94 	b       1000e270 <ls+0xd20>

		linkprefix = "";
1000dde0:	3d 20 10 02 	lis     r9,4098
1000dde4:	39 29 8e d4 	addi    r9,r9,-28972
1000dde8:	91 3f 00 28 	stw     r9,40(r31)
		lnk[0] = '\0';
1000ddec:	39 20 00 00 	li      r9,0
1000ddf0:	99 3f 01 14 	stb     r9,276(r31)
		/* Break down mode word.  First the file type. */
		switch ( lsb.st_mode & S_IFMT )
1000ddf4:	81 3f 00 b8 	lwz     r9,184(r31)
1000ddf8:	55 29 04 26 	rlwinm  r9,r9,0,16,19
1000ddfc:	2b 89 60 00 	cmplwi  cr7,r9,24576
1000de00:	41 9e 00 80 	beq     cr7,1000de80 <ls+0x930>
1000de04:	2b 89 60 00 	cmplwi  cr7,r9,24576
1000de08:	41 9d 00 20 	bgt     cr7,1000de28 <ls+0x8d8>
1000de0c:	2b 89 20 00 	cmplwi  cr7,r9,8192
1000de10:	41 9e 00 58 	beq     cr7,1000de68 <ls+0x918>
1000de14:	2b 89 40 00 	cmplwi  cr7,r9,16384
1000de18:	41 9e 00 5c 	beq     cr7,1000de74 <ls+0x924>
1000de1c:	2b 89 10 00 	cmplwi  cr7,r9,4096
1000de20:	41 9e 00 3c 	beq     cr7,1000de5c <ls+0x90c>
1000de24:	48 00 00 e0 	b       1000df04 <ls+0x9b4>
1000de28:	39 40 00 00 	li      r10,0
1000de2c:	61 4a a0 00 	ori     r10,r10,40960
1000de30:	7f 89 50 00 	cmpw    cr7,r9,r10
1000de34:	41 9e 00 70 	beq     cr7,1000dea4 <ls+0x954>
1000de38:	39 40 00 00 	li      r10,0
1000de3c:	61 4a c0 00 	ori     r10,r10,49152
1000de40:	7f 89 50 00 	cmpw    cr7,r9,r10
1000de44:	41 9e 00 54 	beq     cr7,1000de98 <ls+0x948>
1000de48:	39 40 00 00 	li      r10,0
1000de4c:	61 4a 80 00 	ori     r10,r10,32768
1000de50:	7f 89 50 00 	cmpw    cr7,r9,r10
1000de54:	41 9e 00 38 	beq     cr7,1000de8c <ls+0x93c>
1000de58:	48 00 00 ac 	b       1000df04 <ls+0x9b4>
		    {
		    case S_IFIFO:  modestr[0] = 'p'; break;
1000de5c:	39 20 00 70 	li      r9,112
1000de60:	99 3f 01 00 	stb     r9,256(r31)
1000de64:	48 00 00 ac 	b       1000df10 <ls+0x9c0>
		    case S_IFCHR:  modestr[0] = 'c'; break;
1000de68:	39 20 00 63 	li      r9,99
1000de6c:	99 3f 01 00 	stb     r9,256(r31)
1000de70:	48 00 00 a0 	b       1000df10 <ls+0x9c0>
		    case S_IFDIR:  modestr[0] = 'd'; break;
1000de74:	39 20 00 64 	li      r9,100
1000de78:	99 3f 01 00 	stb     r9,256(r31)
1000de7c:	48 00 00 94 	b       1000df10 <ls+0x9c0>
		    case S_IFBLK:  modestr[0] = 'b'; break;
1000de80:	39 20 00 62 	li      r9,98
1000de84:	99 3f 01 00 	stb     r9,256(r31)
1000de88:	48 00 00 88 	b       1000df10 <ls+0x9c0>
		    case S_IFREG:  modestr[0] = '-'; break;
1000de8c:	39 20 00 2d 	li      r9,45
1000de90:	99 3f 01 00 	stb     r9,256(r31)
1000de94:	48 00 00 7c 	b       1000df10 <ls+0x9c0>
		    case S_IFSOCK: modestr[0] = 's'; break;
1000de98:	39 20 00 73 	li      r9,115
1000de9c:	99 3f 01 00 	stb     r9,256(r31)
1000dea0:	48 00 00 70 	b       1000df10 <ls+0x9c0>
		    case S_IFLNK:  modestr[0] = 'l';
1000dea4:	39 20 00 6c 	li      r9,108
1000dea8:	99 3f 01 00 	stb     r9,256(r31)
		    linklen = readlink( name, lnk, sizeof(lnk) - 1 );
1000deac:	3d 20 10 03 	lis     r9,4099
1000deb0:	81 49 dc 94 	lwz     r10,-9068(r9)
1000deb4:	39 3f 01 14 	addi    r9,r31,276
1000deb8:	7d 43 53 78 	mr      r3,r10
1000debc:	7d 24 4b 78 	mr      r4,r9
1000dec0:	38 a0 10 00 	li      r5,4096
1000dec4:	48 01 f6 39 	bl      1002d4fc <readlink@plt>
1000dec8:	90 7f 00 44 	stw     r3,68(r31)
		    if ( linklen != -1 )
1000decc:	81 5f 00 44 	lwz     r10,68(r31)
1000ded0:	39 20 ff ff 	li      r9,-1
1000ded4:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000ded8:	41 9e 00 28 	beq     cr7,1000df00 <ls+0x9b0>
			{
			lnk[linklen] = '\0';
1000dedc:	39 5f 01 14 	addi    r10,r31,276
1000dee0:	81 3f 00 44 	lwz     r9,68(r31)
1000dee4:	7d 2a 4a 14 	add     r9,r10,r9
1000dee8:	39 40 00 00 	li      r10,0
1000deec:	99 49 00 00 	stb     r10,0(r9)
			linkprefix = " -&gt; ";
1000def0:	3d 20 10 02 	lis     r9,4098
1000def4:	39 29 a7 40 	addi    r9,r9,-22720
1000def8:	91 3f 00 28 	stw     r9,40(r31)
			}
		    break;
1000defc:	48 00 00 14 	b       1000df10 <ls+0x9c0>
1000df00:	48 00 00 10 	b       1000df10 <ls+0x9c0>
		    default:       modestr[0] = '?'; break;
1000df04:	39 20 00 3f 	li      r9,63
1000df08:	99 3f 01 00 	stb     r9,256(r31)
1000df0c:	60 00 00 00 	nop
		    }
		/* Now the world permissions.  Owner and group permissions
		** are not of interest to web clients.
		*/
		modestr[1] = ( lsb.st_mode & S_IROTH ) ? 'r' : '-';
1000df10:	81 3f 00 b8 	lwz     r9,184(r31)
1000df14:	55 29 07 7a 	rlwinm  r9,r9,0,29,29
1000df18:	2f 89 00 00 	cmpwi   cr7,r9,0
1000df1c:	41 9e 00 0c 	beq     cr7,1000df28 <ls+0x9d8>
1000df20:	39 20 00 72 	li      r9,114
1000df24:	48 00 00 08 	b       1000df2c <ls+0x9dc>
1000df28:	39 20 00 2d 	li      r9,45
1000df2c:	99 3f 01 01 	stb     r9,257(r31)
		modestr[2] = ( lsb.st_mode & S_IWOTH ) ? 'w' : '-';
1000df30:	81 3f 00 b8 	lwz     r9,184(r31)
1000df34:	55 29 07 bc 	rlwinm  r9,r9,0,30,30
1000df38:	2f 89 00 00 	cmpwi   cr7,r9,0
1000df3c:	41 9e 00 0c 	beq     cr7,1000df48 <ls+0x9f8>
1000df40:	39 20 00 77 	li      r9,119
1000df44:	48 00 00 08 	b       1000df4c <ls+0x9fc>
1000df48:	39 20 00 2d 	li      r9,45
1000df4c:	99 3f 01 02 	stb     r9,258(r31)
		modestr[3] = ( lsb.st_mode & S_IXOTH ) ? 'x' : '-';
1000df50:	81 3f 00 b8 	lwz     r9,184(r31)
1000df54:	55 29 07 fe 	clrlwi  r9,r9,31
1000df58:	2f 89 00 00 	cmpwi   cr7,r9,0
1000df5c:	41 9e 00 0c 	beq     cr7,1000df68 <ls+0xa18>
1000df60:	39 20 00 78 	li      r9,120
1000df64:	48 00 00 08 	b       1000df6c <ls+0xa1c>
1000df68:	39 20 00 2d 	li      r9,45
1000df6c:	99 3f 01 03 	stb     r9,259(r31)
		modestr[4] = '\0';
1000df70:	39 20 00 00 	li      r9,0
1000df74:	99 3f 01 04 	stb     r9,260(r31)
		** running under chroot(), they would require a copy
		** of /etc/passwd and /etc/group, which we want to avoid.
		*/

		/* Get time string. */
		now = time( (time_t*) 0 );
1000df78:	38 60 00 00 	li      r3,0
1000df7c:	48 01 f4 f9 	bl      1002d474 <time@plt>
1000df80:	90 7f 00 48 	stw     r3,72(r31)
		timestr = ctime( &lsb.st_mtime );
1000df84:	39 3f 00 a8 	addi    r9,r31,168
1000df88:	39 29 00 40 	addi    r9,r9,64
1000df8c:	7d 23 4b 78 	mr      r3,r9
1000df90:	48 01 f5 2d 	bl      1002d4bc <ctime@plt>
1000df94:	90 7f 00 4c 	stw     r3,76(r31)
		timestr[ 0] = timestr[ 4];
1000df98:	81 3f 00 4c 	lwz     r9,76(r31)
1000df9c:	89 29 00 04 	lbz     r9,4(r9)
1000dfa0:	55 2a 06 3e 	clrlwi  r10,r9,24
1000dfa4:	81 3f 00 4c 	lwz     r9,76(r31)
1000dfa8:	99 49 00 00 	stb     r10,0(r9)
		timestr[ 1] = timestr[ 5];
1000dfac:	81 3f 00 4c 	lwz     r9,76(r31)
1000dfb0:	39 29 00 01 	addi    r9,r9,1
1000dfb4:	81 5f 00 4c 	lwz     r10,76(r31)
1000dfb8:	89 4a 00 05 	lbz     r10,5(r10)
1000dfbc:	55 4a 06 3e 	clrlwi  r10,r10,24
1000dfc0:	99 49 00 00 	stb     r10,0(r9)
		timestr[ 2] = timestr[ 6];
1000dfc4:	81 3f 00 4c 	lwz     r9,76(r31)
1000dfc8:	39 29 00 02 	addi    r9,r9,2
1000dfcc:	81 5f 00 4c 	lwz     r10,76(r31)
1000dfd0:	89 4a 00 06 	lbz     r10,6(r10)
1000dfd4:	55 4a 06 3e 	clrlwi  r10,r10,24
1000dfd8:	99 49 00 00 	stb     r10,0(r9)
		timestr[ 3] = ' ';
1000dfdc:	81 3f 00 4c 	lwz     r9,76(r31)
1000dfe0:	39 29 00 03 	addi    r9,r9,3
1000dfe4:	39 40 00 20 	li      r10,32
1000dfe8:	99 49 00 00 	stb     r10,0(r9)
		timestr[ 4] = timestr[ 8];
1000dfec:	81 3f 00 4c 	lwz     r9,76(r31)
1000dff0:	39 29 00 04 	addi    r9,r9,4
1000dff4:	81 5f 00 4c 	lwz     r10,76(r31)
1000dff8:	89 4a 00 08 	lbz     r10,8(r10)
1000dffc:	55 4a 06 3e 	clrlwi  r10,r10,24
1000e000:	99 49 00 00 	stb     r10,0(r9)
		timestr[ 5] = timestr[ 9];
1000e004:	81 3f 00 4c 	lwz     r9,76(r31)
1000e008:	39 29 00 05 	addi    r9,r9,5
1000e00c:	81 5f 00 4c 	lwz     r10,76(r31)
1000e010:	89 4a 00 09 	lbz     r10,9(r10)
1000e014:	55 4a 06 3e 	clrlwi  r10,r10,24
1000e018:	99 49 00 00 	stb     r10,0(r9)
		timestr[ 6] = ' ';
1000e01c:	81 3f 00 4c 	lwz     r9,76(r31)
1000e020:	39 29 00 06 	addi    r9,r9,6
1000e024:	39 40 00 20 	li      r10,32
1000e028:	99 49 00 00 	stb     r10,0(r9)
		if ( now - lsb.st_mtime > 60*60*24*182 )        /* 1/2 year */
1000e02c:	81 3f 00 e8 	lwz     r9,232(r31)
1000e030:	81 5f 00 48 	lwz     r10,72(r31)
1000e034:	7d 49 50 50 	subf    r10,r9,r10
1000e038:	3d 20 00 ef 	lis     r9,239
1000e03c:	61 29 f1 00 	ori     r9,r9,61696
1000e040:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000e044:	40 9d 00 78 	ble     cr7,1000e0bc <ls+0xb6c>
		    {
		    timestr[ 7] = ' ';
1000e048:	81 3f 00 4c 	lwz     r9,76(r31)
1000e04c:	39 29 00 07 	addi    r9,r9,7
1000e050:	39 40 00 20 	li      r10,32
1000e054:	99 49 00 00 	stb     r10,0(r9)
		    timestr[ 8] = timestr[20];
1000e058:	81 3f 00 4c 	lwz     r9,76(r31)
1000e05c:	39 29 00 08 	addi    r9,r9,8
1000e060:	81 5f 00 4c 	lwz     r10,76(r31)
1000e064:	89 4a 00 14 	lbz     r10,20(r10)
1000e068:	55 4a 06 3e 	clrlwi  r10,r10,24
1000e06c:	99 49 00 00 	stb     r10,0(r9)
		    timestr[ 9] = timestr[21];
1000e070:	81 3f 00 4c 	lwz     r9,76(r31)
1000e074:	39 29 00 09 	addi    r9,r9,9
1000e078:	81 5f 00 4c 	lwz     r10,76(r31)
1000e07c:	89 4a 00 15 	lbz     r10,21(r10)
1000e080:	55 4a 06 3e 	clrlwi  r10,r10,24
1000e084:	99 49 00 00 	stb     r10,0(r9)
		    timestr[10] = timestr[22];
1000e088:	81 3f 00 4c 	lwz     r9,76(r31)
1000e08c:	39 29 00 0a 	addi    r9,r9,10
1000e090:	81 5f 00 4c 	lwz     r10,76(r31)
1000e094:	89 4a 00 16 	lbz     r10,22(r10)
1000e098:	55 4a 06 3e 	clrlwi  r10,r10,24
1000e09c:	99 49 00 00 	stb     r10,0(r9)
		    timestr[11] = timestr[23];
1000e0a0:	81 3f 00 4c 	lwz     r9,76(r31)
1000e0a4:	39 29 00 0b 	addi    r9,r9,11
1000e0a8:	81 5f 00 4c 	lwz     r10,76(r31)
1000e0ac:	89 4a 00 17 	lbz     r10,23(r10)
1000e0b0:	55 4a 06 3e 	clrlwi  r10,r10,24
1000e0b4:	99 49 00 00 	stb     r10,0(r9)
1000e0b8:	48 00 00 74 	b       1000e12c <ls+0xbdc>
		    }
		else
		    {
		    timestr[ 7] = timestr[11];
1000e0bc:	81 3f 00 4c 	lwz     r9,76(r31)
1000e0c0:	39 29 00 07 	addi    r9,r9,7
1000e0c4:	81 5f 00 4c 	lwz     r10,76(r31)
1000e0c8:	89 4a 00 0b 	lbz     r10,11(r10)
1000e0cc:	55 4a 06 3e 	clrlwi  r10,r10,24
1000e0d0:	99 49 00 00 	stb     r10,0(r9)
		    timestr[ 8] = timestr[12];
1000e0d4:	81 3f 00 4c 	lwz     r9,76(r31)
1000e0d8:	39 29 00 08 	addi    r9,r9,8
1000e0dc:	81 5f 00 4c 	lwz     r10,76(r31)
1000e0e0:	89 4a 00 0c 	lbz     r10,12(r10)
1000e0e4:	55 4a 06 3e 	clrlwi  r10,r10,24
1000e0e8:	99 49 00 00 	stb     r10,0(r9)
		    timestr[ 9] = ':';
1000e0ec:	81 3f 00 4c 	lwz     r9,76(r31)
1000e0f0:	39 29 00 09 	addi    r9,r9,9
1000e0f4:	39 40 00 3a 	li      r10,58
1000e0f8:	99 49 00 00 	stb     r10,0(r9)
		    timestr[10] = timestr[14];
1000e0fc:	81 3f 00 4c 	lwz     r9,76(r31)
1000e100:	39 29 00 0a 	addi    r9,r9,10
1000e104:	81 5f 00 4c 	lwz     r10,76(r31)
1000e108:	89 4a 00 0e 	lbz     r10,14(r10)
1000e10c:	55 4a 06 3e 	clrlwi  r10,r10,24
1000e110:	99 49 00 00 	stb     r10,0(r9)
		    timestr[11] = timestr[15];
1000e114:	81 3f 00 4c 	lwz     r9,76(r31)
1000e118:	39 29 00 0b 	addi    r9,r9,11
1000e11c:	81 5f 00 4c 	lwz     r10,76(r31)
1000e120:	89 4a 00 0f 	lbz     r10,15(r10)
1000e124:	55 4a 06 3e 	clrlwi  r10,r10,24
1000e128:	99 49 00 00 	stb     r10,0(r9)
		    }
		timestr[12] = '\0';
1000e12c:	81 3f 00 4c 	lwz     r9,76(r31)
1000e130:	39 29 00 0c 	addi    r9,r9,12
1000e134:	39 40 00 00 	li      r10,0
1000e138:	99 49 00 00 	stb     r10,0(r9)

		/* The ls -F file class. */
		switch ( sb.st_mode & S_IFMT )
1000e13c:	81 3f 00 60 	lwz     r9,96(r31)
1000e140:	55 29 04 26 	rlwinm  r9,r9,0,16,19
1000e144:	39 40 00 00 	li      r10,0
1000e148:	61 4a a0 00 	ori     r10,r10,40960
1000e14c:	7f 89 50 00 	cmpw    cr7,r9,r10
1000e150:	41 9e 00 3c 	beq     cr7,1000e18c <ls+0xc3c>
1000e154:	39 40 00 00 	li      r10,0
1000e158:	61 4a c0 00 	ori     r10,r10,49152
1000e15c:	7f 89 50 00 	cmpw    cr7,r9,r10
1000e160:	41 9e 00 1c 	beq     cr7,1000e17c <ls+0xc2c>
1000e164:	2b 89 40 00 	cmplwi  cr7,r9,16384
1000e168:	40 9e 00 34 	bne     cr7,1000e19c <ls+0xc4c>
		    {
		    case S_IFDIR:  fileclass = "/"; break;
1000e16c:	3d 20 10 02 	lis     r9,4098
1000e170:	39 29 a7 48 	addi    r9,r9,-22712
1000e174:	91 3f 00 2c 	stw     r9,44(r31)
1000e178:	48 00 00 50 	b       1000e1c8 <ls+0xc78>
		    case S_IFSOCK: fileclass = "="; break;
1000e17c:	3d 20 10 02 	lis     r9,4098
1000e180:	39 29 a7 4c 	addi    r9,r9,-22708
1000e184:	91 3f 00 2c 	stw     r9,44(r31)
1000e188:	48 00 00 40 	b       1000e1c8 <ls+0xc78>
		    case S_IFLNK:  fileclass = "@"; break;
1000e18c:	3d 20 10 02 	lis     r9,4098
1000e190:	39 29 a7 50 	addi    r9,r9,-22704
1000e194:	91 3f 00 2c 	stw     r9,44(r31)
1000e198:	48 00 00 30 	b       1000e1c8 <ls+0xc78>
		    default:
		    fileclass = ( sb.st_mode & S_IXOTH ) ? "*" : "";
1000e19c:	81 3f 00 60 	lwz     r9,96(r31)
1000e1a0:	55 29 07 fe 	clrlwi  r9,r9,31
1000e1a4:	2f 89 00 00 	cmpwi   cr7,r9,0
1000e1a8:	41 9e 00 10 	beq     cr7,1000e1b8 <ls+0xc68>
1000e1ac:	3d 20 10 02 	lis     r9,4098
1000e1b0:	39 29 a7 54 	addi    r9,r9,-22700
1000e1b4:	48 00 00 0c 	b       1000e1c0 <ls+0xc70>
1000e1b8:	3d 20 10 02 	lis     r9,4098
1000e1bc:	39 29 8e d4 	addi    r9,r9,-28972
1000e1c0:	91 3f 00 2c 	stw     r9,44(r31)
		    break;
1000e1c4:	60 00 00 00 	nop
		    }

		/* And print. */
		(void)  fprintf( fp,
		   "%s %3ld  %10lld  %s  <a href=\"/%.500s%s\">%.80s</a>%s%s%s\n",
		    modestr, (long) lsb.st_nlink, (long long) lsb.st_size,
1000e1c8:	81 3f 00 bc 	lwz     r9,188(r31)
		    fileclass = ( sb.st_mode & S_IXOTH ) ? "*" : "";
		    break;
		    }

		/* And print. */
		(void)  fprintf( fp,
1000e1cc:	7d 28 4b 78 	mr      r8,r9
		   "%s %3ld  %10lld  %s  <a href=\"/%.500s%s\">%.80s</a>%s%s%s\n",
		    modestr, (long) lsb.st_nlink, (long long) lsb.st_size,
1000e1d0:	81 3f 00 d4 	lwz     r9,212(r31)
		    fileclass = ( sb.st_mode & S_IXOTH ) ? "*" : "";
		    break;
		    }

		/* And print. */
		(void)  fprintf( fp,
1000e1d4:	7d 3e 4b 78 	mr      r30,r9
1000e1d8:	7d 29 fe 70 	srawi   r9,r9,31
1000e1dc:	7d 3d 4b 78 	mr      r29,r9
1000e1e0:	3d 20 10 03 	lis     r9,4099
1000e1e4:	81 49 dc a4 	lwz     r10,-9052(r9)
		   "%s %3ld  %10lld  %s  <a href=\"/%.500s%s\">%.80s</a>%s%s%s\n",
		    modestr, (long) lsb.st_nlink, (long long) lsb.st_size,
		    timestr, encrname, S_ISDIR(sb.st_mode) ? "/" : "",
1000e1e8:	81 3f 00 60 	lwz     r9,96(r31)
1000e1ec:	55 29 04 26 	rlwinm  r9,r9,0,16,19
		    fileclass = ( sb.st_mode & S_IXOTH ) ? "*" : "";
		    break;
		    }

		/* And print. */
		(void)  fprintf( fp,
1000e1f0:	2b 89 40 00 	cmplwi  cr7,r9,16384
1000e1f4:	40 9e 00 10 	bne     cr7,1000e204 <ls+0xcb4>
1000e1f8:	3d 20 10 02 	lis     r9,4098
1000e1fc:	39 29 a7 48 	addi    r9,r9,-22712
1000e200:	48 00 00 0c 	b       1000e20c <ls+0xcbc>
1000e204:	3d 20 10 02 	lis     r9,4098
1000e208:	39 29 8e d4 	addi    r9,r9,-28972
		   "%s %3ld  %10lld  %s  <a href=\"/%.500s%s\">%.80s</a>%s%s%s\n",
		    modestr, (long) lsb.st_nlink, (long long) lsb.st_size,
		    timestr, encrname, S_ISDIR(sb.st_mode) ? "/" : "",
		    nameptrs[i], linkprefix, lnk, fileclass );
1000e20c:	3c e0 10 03 	lis     r7,4099
1000e210:	80 c7 dc 90 	lwz     r6,-9072(r7)
1000e214:	80 ff 00 24 	lwz     r7,36(r31)
1000e218:	54 e7 10 3a 	rlwinm  r7,r7,2,0,29
1000e21c:	7c e6 3a 14 	add     r7,r6,r7
		    fileclass = ( sb.st_mode & S_IXOTH ) ? "*" : "";
		    break;
		    }

		/* And print. */
		(void)  fprintf( fp,
1000e220:	80 c7 00 00 	lwz     r6,0(r7)
1000e224:	38 ff 01 00 	addi    r7,r31,256
1000e228:	91 21 00 08 	stw     r9,8(r1)
1000e22c:	90 c1 00 0c 	stw     r6,12(r1)
1000e230:	81 3f 00 28 	lwz     r9,40(r31)
1000e234:	91 21 00 10 	stw     r9,16(r1)
1000e238:	39 3f 01 14 	addi    r9,r31,276
1000e23c:	91 21 00 14 	stw     r9,20(r1)
1000e240:	81 3f 00 2c 	lwz     r9,44(r31)
1000e244:	91 21 00 18 	stw     r9,24(r1)
1000e248:	80 7f 00 38 	lwz     r3,56(r31)
1000e24c:	3d 20 10 02 	lis     r9,4098
1000e250:	38 89 a7 58 	addi    r4,r9,-22696
1000e254:	7c e5 3b 78 	mr      r5,r7
1000e258:	7d 06 43 78 	mr      r6,r8
1000e25c:	7f a7 eb 78 	mr      r7,r29
1000e260:	7f c8 f3 78 	mr      r8,r30
1000e264:	81 3f 00 4c 	lwz     r9,76(r31)
1000e268:	4c c6 31 82 	crclr   4*cr1+eq
1000e26c:	48 01 f4 11 	bl      1002d67c <fprintf@plt>

	    /* Sort the names. */
	    qsort( nameptrs, nnames, sizeof(*nameptrs), name_compare );

	    /* Generate output. */
	    for ( i = 0; i < nnames; ++i )
1000e270:	81 3f 00 24 	lwz     r9,36(r31)
1000e274:	39 29 00 01 	addi    r9,r9,1
1000e278:	91 3f 00 24 	stw     r9,36(r31)
1000e27c:	81 5f 00 24 	lwz     r10,36(r31)
1000e280:	81 3f 00 20 	lwz     r9,32(r31)
1000e284:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000e288:	41 9c f8 58 	blt     cr7,1000dae0 <ls+0x590>
		    modestr, (long) lsb.st_nlink, (long long) lsb.st_size,
		    timestr, encrname, S_ISDIR(sb.st_mode) ? "/" : "",
		    nameptrs[i], linkprefix, lnk, fileclass );
		}

	    (void) fprintf( fp, "    </pre>\n  </body>\n</html>\n" );
1000e28c:	3d 20 10 02 	lis     r9,4098
1000e290:	38 69 a7 94 	addi    r3,r9,-22636
1000e294:	38 80 00 01 	li      r4,1
1000e298:	38 a0 00 1d 	li      r5,29
1000e29c:	80 df 00 38 	lwz     r6,56(r31)
1000e2a0:	48 01 f2 95 	bl      1002d534 <fwrite@plt>
	    (void) fclose( fp );
1000e2a4:	80 7f 00 38 	lwz     r3,56(r31)
1000e2a8:	48 01 f1 c5 	bl      1002d46c <fclose@plt>
	    exit( 0 );
1000e2ac:	38 60 00 00 	li      r3,0
1000e2b0:	48 01 f3 25 	bl      1002d5d4 <exit@plt>
	    }

	/* Parent process. */
	closedir( dirp );
1000e2b4:	80 7f 00 30 	lwz     r3,48(r31)
1000e2b8:	48 01 f5 5d 	bl      1002d814 <closedir@plt>
	syslog( LOG_DEBUG, "spawned indexing process %d for directory '%.200s'", r, hc->expnfilename );
1000e2bc:	81 3f 11 20 	lwz     r9,4384(r31)
1000e2c0:	81 29 00 bc 	lwz     r9,188(r9)
1000e2c4:	38 60 00 07 	li      r3,7
1000e2c8:	3d 40 10 02 	lis     r10,4098
1000e2cc:	38 8a a7 b4 	addi    r4,r10,-22604
1000e2d0:	80 bf 00 34 	lwz     r5,52(r31)
1000e2d4:	7d 26 4b 78 	mr      r6,r9
1000e2d8:	4c c6 31 82 	crclr   4*cr1+eq
1000e2dc:	48 01 f4 a9 	bl      1002d784 <syslog@plt>
#ifdef CGI_TIMELIMIT
	/* Schedule a kill for the child process, in case it runs too long */
	client_data.i = r;
1000e2e0:	81 3f 00 34 	lwz     r9,52(r31)
1000e2e4:	91 3f 11 18 	stw     r9,4376(r31)
	if ( tmr_create( (struct timeval*) 0, cgi_kill, client_data, CGI_TIMELIMIT * 1000L, 0 ) == (Timer*) 0 )
1000e2e8:	81 3f 11 18 	lwz     r9,4376(r31)
1000e2ec:	91 3f 11 24 	stw     r9,4388(r31)
1000e2f0:	39 3f 11 24 	addi    r9,r31,4388
1000e2f4:	38 60 00 00 	li      r3,0
1000e2f8:	3d 40 10 01 	lis     r10,4097
1000e2fc:	38 8a d4 24 	addi    r4,r10,-11228
1000e300:	7d 25 4b 78 	mr      r5,r9
1000e304:	38 c0 75 30 	li      r6,30000
1000e308:	38 e0 00 00 	li      r7,0
1000e30c:	48 00 56 29 	bl      10013934 <tmr_create>
1000e310:	7c 69 1b 78 	mr      r9,r3
1000e314:	2f 89 00 00 	cmpwi   cr7,r9,0
1000e318:	40 9e 00 20 	bne     cr7,1000e338 <ls+0xde8>
	    {
	    syslog( LOG_CRIT, "tmr_create(cgi_kill ls) failed" );
1000e31c:	38 60 00 02 	li      r3,2
1000e320:	3d 20 10 02 	lis     r9,4098
1000e324:	38 89 a7 e8 	addi    r4,r9,-22552
1000e328:	4c c6 31 82 	crclr   4*cr1+eq
1000e32c:	48 01 f4 59 	bl      1002d784 <syslog@plt>
	    exit( 1 );
1000e330:	38 60 00 01 	li      r3,1
1000e334:	48 01 f2 a1 	bl      1002d5d4 <exit@plt>
	    }
#endif /* CGI_TIMELIMIT */
	hc->status = 200;
1000e338:	81 3f 11 20 	lwz     r9,4384(r31)
1000e33c:	39 40 00 c8 	li      r10,200
1000e340:	91 49 00 a0 	stw     r10,160(r9)
	hc->bytes_sent = CGI_BYTECOUNT;
1000e344:	81 3f 11 20 	lwz     r9,4384(r31)
1000e348:	39 40 61 a8 	li      r10,25000
1000e34c:	91 49 00 a8 	stw     r10,168(r9)
	hc->should_linger = 0;
1000e350:	81 3f 11 20 	lwz     r9,4384(r31)
1000e354:	39 40 00 00 	li      r10,0
1000e358:	91 49 01 64 	stw     r10,356(r9)
1000e35c:	48 00 00 58 	b       1000e3b4 <ls+0xe64>
	}
    else
	{
	closedir( dirp );
1000e360:	80 7f 00 30 	lwz     r3,48(r31)
1000e364:	48 01 f4 b1 	bl      1002d814 <closedir@plt>
	httpd_send_err(
1000e368:	3d 20 10 03 	lis     r9,4099
1000e36c:	83 a9 c1 3c 	lwz     r29,-16068(r9)
1000e370:	3d 20 10 03 	lis     r9,4099
1000e374:	83 c9 c1 40 	lwz     r30,-16064(r9)
1000e378:	81 3f 11 20 	lwz     r9,4384(r31)
1000e37c:	81 29 00 9c 	lwz     r9,156(r9)
1000e380:	7d 23 4b 78 	mr      r3,r9
1000e384:	4b ff b2 65 	bl      100095e8 <httpd_method_str>
1000e388:	7c 69 1b 78 	mr      r9,r3
1000e38c:	80 7f 11 20 	lwz     r3,4384(r31)
1000e390:	38 80 01 f5 	li      r4,501
1000e394:	7f a5 eb 78 	mr      r5,r29
1000e398:	3d 40 10 02 	lis     r10,4098
1000e39c:	38 ca 8e d4 	addi    r6,r10,-28972
1000e3a0:	7f c7 f3 78 	mr      r7,r30
1000e3a4:	7d 28 4b 78 	mr      r8,r9
1000e3a8:	4b ff a4 4d 	bl      100087f4 <httpd_send_err>
	    hc, 501, err501title, "", err501form, httpd_method_str( hc->method ) );
	return -1;
1000e3ac:	39 20 ff ff 	li      r9,-1
1000e3b0:	48 00 00 08 	b       1000e3b8 <ls+0xe68>
	}

    return 0;
1000e3b4:	39 20 00 00 	li      r9,0
    }
1000e3b8:	7d 23 4b 78 	mr      r3,r9
1000e3bc:	39 7f 11 40 	addi    r11,r31,4416
1000e3c0:	80 0b 00 04 	lwz     r0,4(r11)
1000e3c4:	7c 08 03 a6 	mtlr    r0
1000e3c8:	83 8b ff f0 	lwz     r28,-16(r11)
1000e3cc:	83 ab ff f4 	lwz     r29,-12(r11)
1000e3d0:	83 cb ff f8 	lwz     r30,-8(r11)
1000e3d4:	83 eb ff fc 	lwz     r31,-4(r11)
1000e3d8:	7d 61 5b 78 	mr      r1,r11
1000e3dc:	4e 80 00 20 	blr

1000e3e0 <build_env>:
#endif /* GENERATE_INDEXES */


static char*
build_env( char* fmt, char* arg )
    {
1000e3e0:	94 21 ff d0 	stwu    r1,-48(r1)
1000e3e4:	7c 08 02 a6 	mflr    r0
1000e3e8:	90 01 00 34 	stw     r0,52(r1)
1000e3ec:	93 c1 00 28 	stw     r30,40(r1)
1000e3f0:	93 e1 00 2c 	stw     r31,44(r1)
1000e3f4:	7c 3f 0b 78 	mr      r31,r1
1000e3f8:	90 7f 00 18 	stw     r3,24(r31)
1000e3fc:	90 9f 00 1c 	stw     r4,28(r31)
    char* cp;
    size_t size;
    static char* buf;
    static size_t maxbuf = 0;

    size = strlen( fmt ) + strlen( arg );
1000e400:	80 7f 00 18 	lwz     r3,24(r31)
1000e404:	48 01 f2 51 	bl      1002d654 <strlen@plt>
1000e408:	7c 7e 1b 78 	mr      r30,r3
1000e40c:	80 7f 00 1c 	lwz     r3,28(r31)
1000e410:	48 01 f2 45 	bl      1002d654 <strlen@plt>
1000e414:	7c 69 1b 78 	mr      r9,r3
1000e418:	7d 3e 4a 14 	add     r9,r30,r9
1000e41c:	91 3f 00 08 	stw     r9,8(r31)
    if ( size > maxbuf )
1000e420:	3d 20 10 03 	lis     r9,4099
1000e424:	81 29 dc ac 	lwz     r9,-9044(r9)
1000e428:	81 5f 00 08 	lwz     r10,8(r31)
1000e42c:	7f 8a 48 40 	cmplw   cr7,r10,r9
1000e430:	40 9d 00 1c 	ble     cr7,1000e44c <build_env+0x6c>
	httpd_realloc_str( &buf, &maxbuf, size );
1000e434:	3d 20 10 03 	lis     r9,4099
1000e438:	38 69 dc b0 	addi    r3,r9,-9040
1000e43c:	3d 20 10 03 	lis     r9,4099
1000e440:	38 89 dc ac 	addi    r4,r9,-9044
1000e444:	80 bf 00 08 	lwz     r5,8(r31)
1000e448:	4b ff 9e d1 	bl      10008318 <httpd_realloc_str>
    (void) my_snprintf( buf, maxbuf, fmt, arg );
1000e44c:	3d 20 10 03 	lis     r9,4099
1000e450:	81 49 dc b0 	lwz     r10,-9040(r9)
1000e454:	3d 20 10 03 	lis     r9,4099
1000e458:	81 29 dc ac 	lwz     r9,-9044(r9)
1000e45c:	7d 43 53 78 	mr      r3,r10
1000e460:	7d 24 4b 78 	mr      r4,r9
1000e464:	80 bf 00 18 	lwz     r5,24(r31)
1000e468:	80 df 00 1c 	lwz     r6,28(r31)
1000e46c:	4c c6 31 82 	crclr   4*cr1+eq
1000e470:	48 00 30 e5 	bl      10011554 <my_snprintf>
    cp = strdup( buf );
1000e474:	3d 20 10 03 	lis     r9,4099
1000e478:	81 29 dc b0 	lwz     r9,-9040(r9)
1000e47c:	7d 23 4b 78 	mr      r3,r9
1000e480:	48 01 ef bd 	bl      1002d43c <strdup@plt>
1000e484:	7c 69 1b 78 	mr      r9,r3
1000e488:	91 3f 00 0c 	stw     r9,12(r31)
    if ( cp == (char*) 0 )
1000e48c:	81 3f 00 0c 	lwz     r9,12(r31)
1000e490:	2f 89 00 00 	cmpwi   cr7,r9,0
1000e494:	40 9e 00 20 	bne     cr7,1000e4b4 <build_env+0xd4>
	{
	syslog( LOG_ERR, "out of memory copying environment variable" );
1000e498:	38 60 00 03 	li      r3,3
1000e49c:	3d 20 10 02 	lis     r9,4098
1000e4a0:	38 89 a8 08 	addi    r4,r9,-22520
1000e4a4:	4c c6 31 82 	crclr   4*cr1+eq
1000e4a8:	48 01 f2 dd 	bl      1002d784 <syslog@plt>
	exit( 1 );
1000e4ac:	38 60 00 01 	li      r3,1
1000e4b0:	48 01 f1 25 	bl      1002d5d4 <exit@plt>
	}
    return cp;
1000e4b4:	81 3f 00 0c 	lwz     r9,12(r31)
    }
1000e4b8:	7d 23 4b 78 	mr      r3,r9
1000e4bc:	39 7f 00 30 	addi    r11,r31,48
1000e4c0:	80 0b 00 04 	lwz     r0,4(r11)
1000e4c4:	7c 08 03 a6 	mtlr    r0
1000e4c8:	83 cb ff f8 	lwz     r30,-8(r11)
1000e4cc:	83 eb ff fc 	lwz     r31,-4(r11)
1000e4d0:	7d 61 5b 78 	mr      r1,r11
1000e4d4:	4e 80 00 20 	blr

1000e4d8 <make_envp>:
** letting malicious clients overrun a buffer.  We don't have
** to worry about freeing stuff since we're a sub-process.
*/
static char**
make_envp( httpd_conn* hc )
    {
1000e4d8:	94 21 fe d0 	stwu    r1,-304(r1)
1000e4dc:	7c 08 02 a6 	mflr    r0
1000e4e0:	90 01 01 34 	stw     r0,308(r1)
1000e4e4:	93 c1 01 28 	stw     r30,296(r1)
1000e4e8:	93 e1 01 2c 	stw     r31,300(r1)
1000e4ec:	7c 3f 0b 78 	mr      r31,r1
1000e4f0:	90 7f 01 18 	stw     r3,280(r31)
    static char* envp[50];
    int envn;
    char* cp;
    char buf[256];

    envn = 0;
1000e4f4:	39 20 00 00 	li      r9,0
1000e4f8:	91 3f 00 08 	stw     r9,8(r31)
    envp[envn++] = build_env( "PATH=%s", CGI_PATH );
1000e4fc:	83 df 00 08 	lwz     r30,8(r31)
1000e500:	39 3e 00 01 	addi    r9,r30,1
1000e504:	91 3f 00 08 	stw     r9,8(r31)
1000e508:	3d 20 10 02 	lis     r9,4098
1000e50c:	38 69 a8 34 	addi    r3,r9,-22476
1000e510:	3d 20 10 02 	lis     r9,4098
1000e514:	38 89 a8 3c 	addi    r4,r9,-22468
1000e518:	4b ff fe c9 	bl      1000e3e0 <build_env>
1000e51c:	7c 6a 1b 78 	mr      r10,r3
1000e520:	3d 20 10 03 	lis     r9,4099
1000e524:	39 09 dc b4 	addi    r8,r9,-9036
1000e528:	57 c9 10 3a 	rlwinm  r9,r30,2,0,29
1000e52c:	7d 28 4a 14 	add     r9,r8,r9
1000e530:	91 49 00 00 	stw     r10,0(r9)
#ifdef CGI_LD_LIBRARY_PATH
    envp[envn++] = build_env( "LD_LIBRARY_PATH=%s", CGI_LD_LIBRARY_PATH );
#endif /* CGI_LD_LIBRARY_PATH */
    envp[envn++] = build_env( "SERVER_SOFTWARE=%s", SERVER_SOFTWARE );
1000e534:	83 df 00 08 	lwz     r30,8(r31)
1000e538:	39 3e 00 01 	addi    r9,r30,1
1000e53c:	91 3f 00 08 	stw     r9,8(r31)
1000e540:	3d 20 10 02 	lis     r9,4098
1000e544:	38 69 a8 64 	addi    r3,r9,-22428
1000e548:	3d 20 10 02 	lis     r9,4098
1000e54c:	38 89 89 6c 	addi    r4,r9,-30356
1000e550:	4b ff fe 91 	bl      1000e3e0 <build_env>
1000e554:	7c 6a 1b 78 	mr      r10,r3
1000e558:	3d 20 10 03 	lis     r9,4099
1000e55c:	39 09 dc b4 	addi    r8,r9,-9036
1000e560:	57 c9 10 3a 	rlwinm  r9,r30,2,0,29
1000e564:	7d 28 4a 14 	add     r9,r8,r9
1000e568:	91 49 00 00 	stw     r10,0(r9)
    if ( hc->hs->vhost && hc->hostname != (char*) 0 && hc->hostname[0] != '\0' )
1000e56c:	81 3f 01 18 	lwz     r9,280(r31)
1000e570:	81 29 00 04 	lwz     r9,4(r9)
1000e574:	81 29 00 3c 	lwz     r9,60(r9)
1000e578:	2f 89 00 00 	cmpwi   cr7,r9,0
1000e57c:	41 9e 00 3c 	beq     cr7,1000e5b8 <make_envp+0xe0>
1000e580:	81 3f 01 18 	lwz     r9,280(r31)
1000e584:	81 29 01 44 	lwz     r9,324(r9)
1000e588:	2f 89 00 00 	cmpwi   cr7,r9,0
1000e58c:	41 9e 00 2c 	beq     cr7,1000e5b8 <make_envp+0xe0>
1000e590:	81 3f 01 18 	lwz     r9,280(r31)
1000e594:	81 29 01 44 	lwz     r9,324(r9)
1000e598:	89 29 00 00 	lbz     r9,0(r9)
1000e59c:	55 29 06 3e 	clrlwi  r9,r9,24
1000e5a0:	2f 89 00 00 	cmpwi   cr7,r9,0
1000e5a4:	41 9e 00 14 	beq     cr7,1000e5b8 <make_envp+0xe0>
	cp = hc->hostname;
1000e5a8:	81 3f 01 18 	lwz     r9,280(r31)
1000e5ac:	81 29 01 44 	lwz     r9,324(r9)
1000e5b0:	91 3f 00 0c 	stw     r9,12(r31)
1000e5b4:	48 00 00 84 	b       1000e638 <make_envp+0x160>
    else if ( hc->hdrhost != (char*) 0 && hc->hdrhost[0] != '\0' )
1000e5b8:	81 3f 01 18 	lwz     r9,280(r31)
1000e5bc:	81 29 00 ec 	lwz     r9,236(r9)
1000e5c0:	2f 89 00 00 	cmpwi   cr7,r9,0
1000e5c4:	41 9e 00 2c 	beq     cr7,1000e5f0 <make_envp+0x118>
1000e5c8:	81 3f 01 18 	lwz     r9,280(r31)
1000e5cc:	81 29 00 ec 	lwz     r9,236(r9)
1000e5d0:	89 29 00 00 	lbz     r9,0(r9)
1000e5d4:	55 29 06 3e 	clrlwi  r9,r9,24
1000e5d8:	2f 89 00 00 	cmpwi   cr7,r9,0
1000e5dc:	41 9e 00 14 	beq     cr7,1000e5f0 <make_envp+0x118>
	cp = hc->hdrhost;
1000e5e0:	81 3f 01 18 	lwz     r9,280(r31)
1000e5e4:	81 29 00 ec 	lwz     r9,236(r9)
1000e5e8:	91 3f 00 0c 	stw     r9,12(r31)
1000e5ec:	48 00 00 4c 	b       1000e638 <make_envp+0x160>
    else if ( hc->reqhost != (char*) 0 && hc->reqhost[0] != '\0' )
1000e5f0:	81 3f 01 18 	lwz     r9,280(r31)
1000e5f4:	81 29 00 e8 	lwz     r9,232(r9)
1000e5f8:	2f 89 00 00 	cmpwi   cr7,r9,0
1000e5fc:	41 9e 00 2c 	beq     cr7,1000e628 <make_envp+0x150>
1000e600:	81 3f 01 18 	lwz     r9,280(r31)
1000e604:	81 29 00 e8 	lwz     r9,232(r9)
1000e608:	89 29 00 00 	lbz     r9,0(r9)
1000e60c:	55 29 06 3e 	clrlwi  r9,r9,24
1000e610:	2f 89 00 00 	cmpwi   cr7,r9,0
1000e614:	41 9e 00 14 	beq     cr7,1000e628 <make_envp+0x150>
	cp = hc->reqhost;
1000e618:	81 3f 01 18 	lwz     r9,280(r31)
1000e61c:	81 29 00 e8 	lwz     r9,232(r9)
1000e620:	91 3f 00 0c 	stw     r9,12(r31)
1000e624:	48 00 00 14 	b       1000e638 <make_envp+0x160>
    else
	cp = hc->hs->server_hostname;
1000e628:	81 3f 01 18 	lwz     r9,280(r31)
1000e62c:	81 29 00 04 	lwz     r9,4(r9)
1000e630:	81 29 00 04 	lwz     r9,4(r9)
1000e634:	91 3f 00 0c 	stw     r9,12(r31)
    if ( cp != (char*) 0 )
1000e638:	81 3f 00 0c 	lwz     r9,12(r31)
1000e63c:	2f 89 00 00 	cmpwi   cr7,r9,0
1000e640:	41 9e 00 38 	beq     cr7,1000e678 <make_envp+0x1a0>
	envp[envn++] = build_env( "SERVER_NAME=%s", cp );
1000e644:	83 df 00 08 	lwz     r30,8(r31)
1000e648:	39 3e 00 01 	addi    r9,r30,1
1000e64c:	91 3f 00 08 	stw     r9,8(r31)
1000e650:	3d 20 10 02 	lis     r9,4098
1000e654:	38 69 a8 78 	addi    r3,r9,-22408
1000e658:	80 9f 00 0c 	lwz     r4,12(r31)
1000e65c:	4b ff fd 85 	bl      1000e3e0 <build_env>
1000e660:	7c 6a 1b 78 	mr      r10,r3
1000e664:	3d 20 10 03 	lis     r9,4099
1000e668:	39 09 dc b4 	addi    r8,r9,-9036
1000e66c:	57 c9 10 3a 	rlwinm  r9,r30,2,0,29
1000e670:	7d 28 4a 14 	add     r9,r8,r9
1000e674:	91 49 00 00 	stw     r10,0(r9)
    envp[envn++] = "GATEWAY_INTERFACE=CGI/1.1";
1000e678:	81 3f 00 08 	lwz     r9,8(r31)
1000e67c:	39 49 00 01 	addi    r10,r9,1
1000e680:	91 5f 00 08 	stw     r10,8(r31)
1000e684:	3d 40 10 03 	lis     r10,4099
1000e688:	39 4a dc b4 	addi    r10,r10,-9036
1000e68c:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1000e690:	7d 2a 4a 14 	add     r9,r10,r9
1000e694:	3d 40 10 02 	lis     r10,4098
1000e698:	39 4a a8 88 	addi    r10,r10,-22392
1000e69c:	91 49 00 00 	stw     r10,0(r9)
    envp[envn++] = build_env("SERVER_PROTOCOL=%s", hc->protocol);
1000e6a0:	83 df 00 08 	lwz     r30,8(r31)
1000e6a4:	39 3e 00 01 	addi    r9,r30,1
1000e6a8:	91 3f 00 08 	stw     r9,8(r31)
1000e6ac:	81 3f 01 18 	lwz     r9,280(r31)
1000e6b0:	81 29 00 b4 	lwz     r9,180(r9)
1000e6b4:	3d 40 10 02 	lis     r10,4098
1000e6b8:	38 6a a8 a4 	addi    r3,r10,-22364
1000e6bc:	7d 24 4b 78 	mr      r4,r9
1000e6c0:	4b ff fd 21 	bl      1000e3e0 <build_env>
1000e6c4:	7c 6a 1b 78 	mr      r10,r3
1000e6c8:	3d 20 10 03 	lis     r9,4099
1000e6cc:	39 09 dc b4 	addi    r8,r9,-9036
1000e6d0:	57 c9 10 3a 	rlwinm  r9,r30,2,0,29
1000e6d4:	7d 28 4a 14 	add     r9,r8,r9
1000e6d8:	91 49 00 00 	stw     r10,0(r9)
    (void) my_snprintf( buf, sizeof(buf), "%d", (int) hc->hs->port );
1000e6dc:	81 3f 01 18 	lwz     r9,280(r31)
1000e6e0:	81 29 00 04 	lwz     r9,4(r9)
1000e6e4:	a1 29 00 08 	lhz     r9,8(r9)
1000e6e8:	55 29 04 3e 	clrlwi  r9,r9,16
1000e6ec:	39 5f 00 18 	addi    r10,r31,24
1000e6f0:	7d 43 53 78 	mr      r3,r10
1000e6f4:	38 80 01 00 	li      r4,256
1000e6f8:	3d 40 10 02 	lis     r10,4098
1000e6fc:	38 aa a8 b8 	addi    r5,r10,-22344
1000e700:	7d 26 4b 78 	mr      r6,r9
1000e704:	4c c6 31 82 	crclr   4*cr1+eq
1000e708:	48 00 2e 4d 	bl      10011554 <my_snprintf>
    envp[envn++] = build_env( "SERVER_PORT=%s", buf );
1000e70c:	83 df 00 08 	lwz     r30,8(r31)
1000e710:	39 3e 00 01 	addi    r9,r30,1
1000e714:	91 3f 00 08 	stw     r9,8(r31)
1000e718:	39 3f 00 18 	addi    r9,r31,24
1000e71c:	3d 40 10 02 	lis     r10,4098
1000e720:	38 6a a8 bc 	addi    r3,r10,-22340
1000e724:	7d 24 4b 78 	mr      r4,r9
1000e728:	4b ff fc b9 	bl      1000e3e0 <build_env>
1000e72c:	7c 6a 1b 78 	mr      r10,r3
1000e730:	3d 20 10 03 	lis     r9,4099
1000e734:	39 09 dc b4 	addi    r8,r9,-9036
1000e738:	57 c9 10 3a 	rlwinm  r9,r30,2,0,29
1000e73c:	7d 28 4a 14 	add     r9,r8,r9
1000e740:	91 49 00 00 	stw     r10,0(r9)
    envp[envn++] = build_env(
1000e744:	83 df 00 08 	lwz     r30,8(r31)
1000e748:	39 3e 00 01 	addi    r9,r30,1
1000e74c:	91 3f 00 08 	stw     r9,8(r31)
1000e750:	81 3f 01 18 	lwz     r9,280(r31)
1000e754:	81 29 00 9c 	lwz     r9,156(r9)
1000e758:	7d 23 4b 78 	mr      r3,r9
1000e75c:	4b ff ae 8d 	bl      100095e8 <httpd_method_str>
1000e760:	7c 69 1b 78 	mr      r9,r3
1000e764:	3d 40 10 02 	lis     r10,4098
1000e768:	38 6a a8 cc 	addi    r3,r10,-22324
1000e76c:	7d 24 4b 78 	mr      r4,r9
1000e770:	4b ff fc 71 	bl      1000e3e0 <build_env>
1000e774:	7c 6a 1b 78 	mr      r10,r3
1000e778:	3d 20 10 03 	lis     r9,4099
1000e77c:	39 09 dc b4 	addi    r8,r9,-9036
1000e780:	57 c9 10 3a 	rlwinm  r9,r30,2,0,29
1000e784:	7d 28 4a 14 	add     r9,r8,r9
1000e788:	91 49 00 00 	stw     r10,0(r9)
	"REQUEST_METHOD=%s", httpd_method_str( hc->method ) );
    if ( hc->pathinfo[0] != '\0' )
1000e78c:	81 3f 01 18 	lwz     r9,280(r31)
1000e790:	81 29 00 c4 	lwz     r9,196(r9)
1000e794:	89 29 00 00 	lbz     r9,0(r9)
1000e798:	55 29 06 3e 	clrlwi  r9,r9,24
1000e79c:	2f 89 00 00 	cmpwi   cr7,r9,0
1000e7a0:	41 9e 00 fc 	beq     cr7,1000e89c <make_envp+0x3c4>
	{
	char* cp2;
	size_t l;
	envp[envn++] = build_env( "PATH_INFO=/%s", hc->pathinfo );
1000e7a4:	83 df 00 08 	lwz     r30,8(r31)
1000e7a8:	39 3e 00 01 	addi    r9,r30,1
1000e7ac:	91 3f 00 08 	stw     r9,8(r31)
1000e7b0:	81 3f 01 18 	lwz     r9,280(r31)
1000e7b4:	81 29 00 c4 	lwz     r9,196(r9)
1000e7b8:	3d 40 10 02 	lis     r10,4098
1000e7bc:	38 6a a8 e0 	addi    r3,r10,-22304
1000e7c0:	7d 24 4b 78 	mr      r4,r9
1000e7c4:	4b ff fc 1d 	bl      1000e3e0 <build_env>
1000e7c8:	7c 6a 1b 78 	mr      r10,r3
1000e7cc:	3d 20 10 03 	lis     r9,4099
1000e7d0:	39 09 dc b4 	addi    r8,r9,-9036
1000e7d4:	57 c9 10 3a 	rlwinm  r9,r30,2,0,29
1000e7d8:	7d 28 4a 14 	add     r9,r8,r9
1000e7dc:	91 49 00 00 	stw     r10,0(r9)
	l = strlen( hc->hs->cwd ) + strlen( hc->pathinfo ) + 1;
1000e7e0:	81 3f 01 18 	lwz     r9,280(r31)
1000e7e4:	81 29 00 04 	lwz     r9,4(r9)
1000e7e8:	81 29 00 24 	lwz     r9,36(r9)
1000e7ec:	7d 23 4b 78 	mr      r3,r9
1000e7f0:	48 01 ee 65 	bl      1002d654 <strlen@plt>
1000e7f4:	7c 7e 1b 78 	mr      r30,r3
1000e7f8:	81 3f 01 18 	lwz     r9,280(r31)
1000e7fc:	81 29 00 c4 	lwz     r9,196(r9)
1000e800:	7d 23 4b 78 	mr      r3,r9
1000e804:	48 01 ee 51 	bl      1002d654 <strlen@plt>
1000e808:	7c 69 1b 78 	mr      r9,r3
1000e80c:	7d 3e 4a 14 	add     r9,r30,r9
1000e810:	39 29 00 01 	addi    r9,r9,1
1000e814:	91 3f 00 10 	stw     r9,16(r31)
	cp2 = NEW( char, l );
1000e818:	80 7f 00 10 	lwz     r3,16(r31)
1000e81c:	48 01 ed 89 	bl      1002d5a4 <malloc@plt>
1000e820:	7c 69 1b 78 	mr      r9,r3
1000e824:	91 3f 00 14 	stw     r9,20(r31)
	if ( cp2 != (char*) 0 )
1000e828:	81 3f 00 14 	lwz     r9,20(r31)
1000e82c:	2f 89 00 00 	cmpwi   cr7,r9,0
1000e830:	41 9e 00 6c 	beq     cr7,1000e89c <make_envp+0x3c4>
	    {
	    (void) my_snprintf( cp2, l, "%s%s", hc->hs->cwd, hc->pathinfo );
1000e834:	81 3f 01 18 	lwz     r9,280(r31)
1000e838:	81 29 00 04 	lwz     r9,4(r9)
1000e83c:	81 49 00 24 	lwz     r10,36(r9)
1000e840:	81 3f 01 18 	lwz     r9,280(r31)
1000e844:	81 29 00 c4 	lwz     r9,196(r9)
1000e848:	80 7f 00 14 	lwz     r3,20(r31)
1000e84c:	80 9f 00 10 	lwz     r4,16(r31)
1000e850:	3d 00 10 02 	lis     r8,4098
1000e854:	38 a8 a7 38 	addi    r5,r8,-22728
1000e858:	7d 46 53 78 	mr      r6,r10
1000e85c:	7d 27 4b 78 	mr      r7,r9
1000e860:	4c c6 31 82 	crclr   4*cr1+eq
1000e864:	48 00 2c f1 	bl      10011554 <my_snprintf>
	    envp[envn++] = build_env( "PATH_TRANSLATED=%s", cp2 );
1000e868:	83 df 00 08 	lwz     r30,8(r31)
1000e86c:	39 3e 00 01 	addi    r9,r30,1
1000e870:	91 3f 00 08 	stw     r9,8(r31)
1000e874:	3d 20 10 02 	lis     r9,4098
1000e878:	38 69 a8 f0 	addi    r3,r9,-22288
1000e87c:	80 9f 00 14 	lwz     r4,20(r31)
1000e880:	4b ff fb 61 	bl      1000e3e0 <build_env>
1000e884:	7c 6a 1b 78 	mr      r10,r3
1000e888:	3d 20 10 03 	lis     r9,4099
1000e88c:	39 09 dc b4 	addi    r8,r9,-9036
1000e890:	57 c9 10 3a 	rlwinm  r9,r30,2,0,29
1000e894:	7d 28 4a 14 	add     r9,r8,r9
1000e898:	91 49 00 00 	stw     r10,0(r9)
	    }
	}
    envp[envn++] = build_env(
1000e89c:	83 df 00 08 	lwz     r30,8(r31)
1000e8a0:	39 3e 00 01 	addi    r9,r30,1
1000e8a4:	91 3f 00 08 	stw     r9,8(r31)
	"SCRIPT_NAME=/%s", strcmp( hc->origfilename, "." ) == 0 ?
1000e8a8:	81 3f 01 18 	lwz     r9,280(r31)
1000e8ac:	81 29 00 b8 	lwz     r9,184(r9)
1000e8b0:	7d 23 4b 78 	mr      r3,r9
1000e8b4:	3d 20 10 02 	lis     r9,4098
1000e8b8:	38 89 91 4c 	addi    r4,r9,-28340
1000e8bc:	48 01 eb 21 	bl      1002d3dc <strcmp@plt>
1000e8c0:	7c 69 1b 78 	mr      r9,r3
	    {
	    (void) my_snprintf( cp2, l, "%s%s", hc->hs->cwd, hc->pathinfo );
	    envp[envn++] = build_env( "PATH_TRANSLATED=%s", cp2 );
	    }
	}
    envp[envn++] = build_env(
1000e8c4:	2f 89 00 00 	cmpwi   cr7,r9,0
1000e8c8:	41 9e 00 10 	beq     cr7,1000e8d8 <make_envp+0x400>
1000e8cc:	81 3f 01 18 	lwz     r9,280(r31)
1000e8d0:	81 29 00 b8 	lwz     r9,184(r9)
1000e8d4:	48 00 00 0c 	b       1000e8e0 <make_envp+0x408>
1000e8d8:	3d 20 10 02 	lis     r9,4098
1000e8dc:	39 29 8e d4 	addi    r9,r9,-28972
1000e8e0:	3d 40 10 02 	lis     r10,4098
1000e8e4:	38 6a a9 04 	addi    r3,r10,-22268
1000e8e8:	7d 24 4b 78 	mr      r4,r9
1000e8ec:	4b ff fa f5 	bl      1000e3e0 <build_env>
1000e8f0:	7c 6a 1b 78 	mr      r10,r3
1000e8f4:	3d 20 10 03 	lis     r9,4099
1000e8f8:	39 09 dc b4 	addi    r8,r9,-9036
1000e8fc:	57 c9 10 3a 	rlwinm  r9,r30,2,0,29
1000e900:	7d 28 4a 14 	add     r9,r8,r9
1000e904:	91 49 00 00 	stw     r10,0(r9)
	"SCRIPT_NAME=/%s", strcmp( hc->origfilename, "." ) == 0 ?
	"" : hc->origfilename );
    if ( hc->query[0] != '\0')
1000e908:	81 3f 01 18 	lwz     r9,280(r31)
1000e90c:	81 29 00 c8 	lwz     r9,200(r9)
1000e910:	89 29 00 00 	lbz     r9,0(r9)
1000e914:	55 29 06 3e 	clrlwi  r9,r9,24
1000e918:	2f 89 00 00 	cmpwi   cr7,r9,0
1000e91c:	41 9e 00 40 	beq     cr7,1000e95c <make_envp+0x484>
	envp[envn++] = build_env( "QUERY_STRING=%s", hc->query );
1000e920:	83 df 00 08 	lwz     r30,8(r31)
1000e924:	39 3e 00 01 	addi    r9,r30,1
1000e928:	91 3f 00 08 	stw     r9,8(r31)
1000e92c:	81 3f 01 18 	lwz     r9,280(r31)
1000e930:	81 29 00 c8 	lwz     r9,200(r9)
1000e934:	3d 40 10 02 	lis     r10,4098
1000e938:	38 6a a9 14 	addi    r3,r10,-22252
1000e93c:	7d 24 4b 78 	mr      r4,r9
1000e940:	4b ff fa a1 	bl      1000e3e0 <build_env>
1000e944:	7c 6a 1b 78 	mr      r10,r3
1000e948:	3d 20 10 03 	lis     r9,4099
1000e94c:	39 09 dc b4 	addi    r8,r9,-9036
1000e950:	57 c9 10 3a 	rlwinm  r9,r30,2,0,29
1000e954:	7d 28 4a 14 	add     r9,r8,r9
1000e958:	91 49 00 00 	stw     r10,0(r9)
    envp[envn++] = build_env(
1000e95c:	83 df 00 08 	lwz     r30,8(r31)
1000e960:	39 3e 00 01 	addi    r9,r30,1
1000e964:	91 3f 00 08 	stw     r9,8(r31)
1000e968:	81 3f 01 18 	lwz     r9,280(r31)
1000e96c:	39 29 00 08 	addi    r9,r9,8
1000e970:	7d 23 4b 78 	mr      r3,r9
1000e974:	48 00 29 d9 	bl      1001134c <httpd_ntoa>
1000e978:	7c 69 1b 78 	mr      r9,r3
1000e97c:	3d 40 10 02 	lis     r10,4098
1000e980:	38 6a a9 24 	addi    r3,r10,-22236
1000e984:	7d 24 4b 78 	mr      r4,r9
1000e988:	4b ff fa 59 	bl      1000e3e0 <build_env>
1000e98c:	7c 6a 1b 78 	mr      r10,r3
1000e990:	3d 20 10 03 	lis     r9,4099
1000e994:	39 09 dc b4 	addi    r8,r9,-9036
1000e998:	57 c9 10 3a 	rlwinm  r9,r30,2,0,29
1000e99c:	7d 28 4a 14 	add     r9,r8,r9
1000e9a0:	91 49 00 00 	stw     r10,0(r9)
	"REMOTE_ADDR=%s", httpd_ntoa( &hc->client_addr ) );
    if ( hc->referrer[0] != '\0' )
1000e9a4:	81 3f 01 18 	lwz     r9,280(r31)
1000e9a8:	81 29 00 cc 	lwz     r9,204(r9)
1000e9ac:	89 29 00 00 	lbz     r9,0(r9)
1000e9b0:	55 29 06 3e 	clrlwi  r9,r9,24
1000e9b4:	2f 89 00 00 	cmpwi   cr7,r9,0
1000e9b8:	41 9e 00 7c 	beq     cr7,1000ea34 <make_envp+0x55c>
	{
	envp[envn++] = build_env( "HTTP_REFERER=%s", hc->referrer );
1000e9bc:	83 df 00 08 	lwz     r30,8(r31)
1000e9c0:	39 3e 00 01 	addi    r9,r30,1
1000e9c4:	91 3f 00 08 	stw     r9,8(r31)
1000e9c8:	81 3f 01 18 	lwz     r9,280(r31)
1000e9cc:	81 29 00 cc 	lwz     r9,204(r9)
1000e9d0:	3d 40 10 02 	lis     r10,4098
1000e9d4:	38 6a a9 34 	addi    r3,r10,-22220
1000e9d8:	7d 24 4b 78 	mr      r4,r9
1000e9dc:	4b ff fa 05 	bl      1000e3e0 <build_env>
1000e9e0:	7c 6a 1b 78 	mr      r10,r3
1000e9e4:	3d 20 10 03 	lis     r9,4099
1000e9e8:	39 09 dc b4 	addi    r8,r9,-9036
1000e9ec:	57 c9 10 3a 	rlwinm  r9,r30,2,0,29
1000e9f0:	7d 28 4a 14 	add     r9,r8,r9
1000e9f4:	91 49 00 00 	stw     r10,0(r9)
	envp[envn++] = build_env( "HTTP_REFERRER=%s", hc->referrer );
1000e9f8:	83 df 00 08 	lwz     r30,8(r31)
1000e9fc:	39 3e 00 01 	addi    r9,r30,1
1000ea00:	91 3f 00 08 	stw     r9,8(r31)
1000ea04:	81 3f 01 18 	lwz     r9,280(r31)
1000ea08:	81 29 00 cc 	lwz     r9,204(r9)
1000ea0c:	3d 40 10 02 	lis     r10,4098
1000ea10:	38 6a a9 44 	addi    r3,r10,-22204
1000ea14:	7d 24 4b 78 	mr      r4,r9
1000ea18:	4b ff f9 c9 	bl      1000e3e0 <build_env>
1000ea1c:	7c 6a 1b 78 	mr      r10,r3
1000ea20:	3d 20 10 03 	lis     r9,4099
1000ea24:	39 09 dc b4 	addi    r8,r9,-9036
1000ea28:	57 c9 10 3a 	rlwinm  r9,r30,2,0,29
1000ea2c:	7d 28 4a 14 	add     r9,r8,r9
1000ea30:	91 49 00 00 	stw     r10,0(r9)
	}
    if ( hc->useragent[0] != '\0' )
1000ea34:	81 3f 01 18 	lwz     r9,280(r31)
1000ea38:	81 29 00 d0 	lwz     r9,208(r9)
1000ea3c:	89 29 00 00 	lbz     r9,0(r9)
1000ea40:	55 29 06 3e 	clrlwi  r9,r9,24
1000ea44:	2f 89 00 00 	cmpwi   cr7,r9,0
1000ea48:	41 9e 00 40 	beq     cr7,1000ea88 <make_envp+0x5b0>
	envp[envn++] = build_env( "HTTP_USER_AGENT=%s", hc->useragent );
1000ea4c:	83 df 00 08 	lwz     r30,8(r31)
1000ea50:	39 3e 00 01 	addi    r9,r30,1
1000ea54:	91 3f 00 08 	stw     r9,8(r31)
1000ea58:	81 3f 01 18 	lwz     r9,280(r31)
1000ea5c:	81 29 00 d0 	lwz     r9,208(r9)
1000ea60:	3d 40 10 02 	lis     r10,4098
1000ea64:	38 6a a9 58 	addi    r3,r10,-22184
1000ea68:	7d 24 4b 78 	mr      r4,r9
1000ea6c:	4b ff f9 75 	bl      1000e3e0 <build_env>
1000ea70:	7c 6a 1b 78 	mr      r10,r3
1000ea74:	3d 20 10 03 	lis     r9,4099
1000ea78:	39 09 dc b4 	addi    r8,r9,-9036
1000ea7c:	57 c9 10 3a 	rlwinm  r9,r30,2,0,29
1000ea80:	7d 28 4a 14 	add     r9,r8,r9
1000ea84:	91 49 00 00 	stw     r10,0(r9)
    if ( hc->accept[0] != '\0' )
1000ea88:	81 3f 01 18 	lwz     r9,280(r31)
1000ea8c:	81 29 00 d4 	lwz     r9,212(r9)
1000ea90:	89 29 00 00 	lbz     r9,0(r9)
1000ea94:	55 29 06 3e 	clrlwi  r9,r9,24
1000ea98:	2f 89 00 00 	cmpwi   cr7,r9,0
1000ea9c:	41 9e 00 40 	beq     cr7,1000eadc <make_envp+0x604>
	envp[envn++] = build_env( "HTTP_ACCEPT=%s", hc->accept );
1000eaa0:	83 df 00 08 	lwz     r30,8(r31)
1000eaa4:	39 3e 00 01 	addi    r9,r30,1
1000eaa8:	91 3f 00 08 	stw     r9,8(r31)
1000eaac:	81 3f 01 18 	lwz     r9,280(r31)
1000eab0:	81 29 00 d4 	lwz     r9,212(r9)
1000eab4:	3d 40 10 02 	lis     r10,4098
1000eab8:	38 6a a9 6c 	addi    r3,r10,-22164
1000eabc:	7d 24 4b 78 	mr      r4,r9
1000eac0:	4b ff f9 21 	bl      1000e3e0 <build_env>
1000eac4:	7c 6a 1b 78 	mr      r10,r3
1000eac8:	3d 20 10 03 	lis     r9,4099
1000eacc:	39 09 dc b4 	addi    r8,r9,-9036
1000ead0:	57 c9 10 3a 	rlwinm  r9,r30,2,0,29
1000ead4:	7d 28 4a 14 	add     r9,r8,r9
1000ead8:	91 49 00 00 	stw     r10,0(r9)
    if ( hc->accepte[0] != '\0' )
1000eadc:	81 3f 01 18 	lwz     r9,280(r31)
1000eae0:	81 29 00 d8 	lwz     r9,216(r9)
1000eae4:	89 29 00 00 	lbz     r9,0(r9)
1000eae8:	55 29 06 3e 	clrlwi  r9,r9,24
1000eaec:	2f 89 00 00 	cmpwi   cr7,r9,0
1000eaf0:	41 9e 00 40 	beq     cr7,1000eb30 <make_envp+0x658>
	envp[envn++] = build_env( "HTTP_ACCEPT_ENCODING=%s", hc->accepte );
1000eaf4:	83 df 00 08 	lwz     r30,8(r31)
1000eaf8:	39 3e 00 01 	addi    r9,r30,1
1000eafc:	91 3f 00 08 	stw     r9,8(r31)
1000eb00:	81 3f 01 18 	lwz     r9,280(r31)
1000eb04:	81 29 00 d8 	lwz     r9,216(r9)
1000eb08:	3d 40 10 02 	lis     r10,4098
1000eb0c:	38 6a a9 7c 	addi    r3,r10,-22148
1000eb10:	7d 24 4b 78 	mr      r4,r9
1000eb14:	4b ff f8 cd 	bl      1000e3e0 <build_env>
1000eb18:	7c 6a 1b 78 	mr      r10,r3
1000eb1c:	3d 20 10 03 	lis     r9,4099
1000eb20:	39 09 dc b4 	addi    r8,r9,-9036
1000eb24:	57 c9 10 3a 	rlwinm  r9,r30,2,0,29
1000eb28:	7d 28 4a 14 	add     r9,r8,r9
1000eb2c:	91 49 00 00 	stw     r10,0(r9)
    if ( hc->acceptl[0] != '\0' )
1000eb30:	81 3f 01 18 	lwz     r9,280(r31)
1000eb34:	81 29 00 dc 	lwz     r9,220(r9)
1000eb38:	89 29 00 00 	lbz     r9,0(r9)
1000eb3c:	55 29 06 3e 	clrlwi  r9,r9,24
1000eb40:	2f 89 00 00 	cmpwi   cr7,r9,0
1000eb44:	41 9e 00 40 	beq     cr7,1000eb84 <make_envp+0x6ac>
	envp[envn++] = build_env( "HTTP_ACCEPT_LANGUAGE=%s", hc->acceptl );
1000eb48:	83 df 00 08 	lwz     r30,8(r31)
1000eb4c:	39 3e 00 01 	addi    r9,r30,1
1000eb50:	91 3f 00 08 	stw     r9,8(r31)
1000eb54:	81 3f 01 18 	lwz     r9,280(r31)
1000eb58:	81 29 00 dc 	lwz     r9,220(r9)
1000eb5c:	3d 40 10 02 	lis     r10,4098
1000eb60:	38 6a a9 94 	addi    r3,r10,-22124
1000eb64:	7d 24 4b 78 	mr      r4,r9
1000eb68:	4b ff f8 79 	bl      1000e3e0 <build_env>
1000eb6c:	7c 6a 1b 78 	mr      r10,r3
1000eb70:	3d 20 10 03 	lis     r9,4099
1000eb74:	39 09 dc b4 	addi    r8,r9,-9036
1000eb78:	57 c9 10 3a 	rlwinm  r9,r30,2,0,29
1000eb7c:	7d 28 4a 14 	add     r9,r8,r9
1000eb80:	91 49 00 00 	stw     r10,0(r9)
    if ( hc->cookie[0] != '\0' )
1000eb84:	81 3f 01 18 	lwz     r9,280(r31)
1000eb88:	81 29 00 e0 	lwz     r9,224(r9)
1000eb8c:	89 29 00 00 	lbz     r9,0(r9)
1000eb90:	55 29 06 3e 	clrlwi  r9,r9,24
1000eb94:	2f 89 00 00 	cmpwi   cr7,r9,0
1000eb98:	41 9e 00 40 	beq     cr7,1000ebd8 <make_envp+0x700>
	envp[envn++] = build_env( "HTTP_COOKIE=%s", hc->cookie );
1000eb9c:	83 df 00 08 	lwz     r30,8(r31)
1000eba0:	39 3e 00 01 	addi    r9,r30,1
1000eba4:	91 3f 00 08 	stw     r9,8(r31)
1000eba8:	81 3f 01 18 	lwz     r9,280(r31)
1000ebac:	81 29 00 e0 	lwz     r9,224(r9)
1000ebb0:	3d 40 10 02 	lis     r10,4098
1000ebb4:	38 6a a9 ac 	addi    r3,r10,-22100
1000ebb8:	7d 24 4b 78 	mr      r4,r9
1000ebbc:	4b ff f8 25 	bl      1000e3e0 <build_env>
1000ebc0:	7c 6a 1b 78 	mr      r10,r3
1000ebc4:	3d 20 10 03 	lis     r9,4099
1000ebc8:	39 09 dc b4 	addi    r8,r9,-9036
1000ebcc:	57 c9 10 3a 	rlwinm  r9,r30,2,0,29
1000ebd0:	7d 28 4a 14 	add     r9,r8,r9
1000ebd4:	91 49 00 00 	stw     r10,0(r9)
    if ( hc->contenttype[0] != '\0' )
1000ebd8:	81 3f 01 18 	lwz     r9,280(r31)
1000ebdc:	81 29 00 e4 	lwz     r9,228(r9)
1000ebe0:	89 29 00 00 	lbz     r9,0(r9)
1000ebe4:	55 29 06 3e 	clrlwi  r9,r9,24
1000ebe8:	2f 89 00 00 	cmpwi   cr7,r9,0
1000ebec:	41 9e 00 40 	beq     cr7,1000ec2c <make_envp+0x754>
	envp[envn++] = build_env( "CONTENT_TYPE=%s", hc->contenttype );
1000ebf0:	83 df 00 08 	lwz     r30,8(r31)
1000ebf4:	39 3e 00 01 	addi    r9,r30,1
1000ebf8:	91 3f 00 08 	stw     r9,8(r31)
1000ebfc:	81 3f 01 18 	lwz     r9,280(r31)
1000ec00:	81 29 00 e4 	lwz     r9,228(r9)
1000ec04:	3d 40 10 02 	lis     r10,4098
1000ec08:	38 6a a9 bc 	addi    r3,r10,-22084
1000ec0c:	7d 24 4b 78 	mr      r4,r9
1000ec10:	4b ff f7 d1 	bl      1000e3e0 <build_env>
1000ec14:	7c 6a 1b 78 	mr      r10,r3
1000ec18:	3d 20 10 03 	lis     r9,4099
1000ec1c:	39 09 dc b4 	addi    r8,r9,-9036
1000ec20:	57 c9 10 3a 	rlwinm  r9,r30,2,0,29
1000ec24:	7d 28 4a 14 	add     r9,r8,r9
1000ec28:	91 49 00 00 	stw     r10,0(r9)
    if ( hc->hdrhost[0] != '\0' )
1000ec2c:	81 3f 01 18 	lwz     r9,280(r31)
1000ec30:	81 29 00 ec 	lwz     r9,236(r9)
1000ec34:	89 29 00 00 	lbz     r9,0(r9)
1000ec38:	55 29 06 3e 	clrlwi  r9,r9,24
1000ec3c:	2f 89 00 00 	cmpwi   cr7,r9,0
1000ec40:	41 9e 00 40 	beq     cr7,1000ec80 <make_envp+0x7a8>
	envp[envn++] = build_env( "HTTP_HOST=%s", hc->hdrhost );
1000ec44:	83 df 00 08 	lwz     r30,8(r31)
1000ec48:	39 3e 00 01 	addi    r9,r30,1
1000ec4c:	91 3f 00 08 	stw     r9,8(r31)
1000ec50:	81 3f 01 18 	lwz     r9,280(r31)
1000ec54:	81 29 00 ec 	lwz     r9,236(r9)
1000ec58:	3d 40 10 02 	lis     r10,4098
1000ec5c:	38 6a a9 cc 	addi    r3,r10,-22068
1000ec60:	7d 24 4b 78 	mr      r4,r9
1000ec64:	4b ff f7 7d 	bl      1000e3e0 <build_env>
1000ec68:	7c 6a 1b 78 	mr      r10,r3
1000ec6c:	3d 20 10 03 	lis     r9,4099
1000ec70:	39 09 dc b4 	addi    r8,r9,-9036
1000ec74:	57 c9 10 3a 	rlwinm  r9,r30,2,0,29
1000ec78:	7d 28 4a 14 	add     r9,r8,r9
1000ec7c:	91 49 00 00 	stw     r10,0(r9)
    if ( hc->contentlength != -1 )
1000ec80:	81 3f 01 18 	lwz     r9,280(r31)
1000ec84:	81 49 01 3c 	lwz     r10,316(r9)
1000ec88:	39 20 ff ff 	li      r9,-1
1000ec8c:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000ec90:	41 9e 00 64 	beq     cr7,1000ecf4 <make_envp+0x81c>
	{
	(void) my_snprintf(
	    buf, sizeof(buf), "%lu", (unsigned long) hc->contentlength );
1000ec94:	81 3f 01 18 	lwz     r9,280(r31)
1000ec98:	81 29 01 3c 	lwz     r9,316(r9)
	envp[envn++] = build_env( "CONTENT_TYPE=%s", hc->contenttype );
    if ( hc->hdrhost[0] != '\0' )
	envp[envn++] = build_env( "HTTP_HOST=%s", hc->hdrhost );
    if ( hc->contentlength != -1 )
	{
	(void) my_snprintf(
1000ec9c:	39 5f 00 18 	addi    r10,r31,24
1000eca0:	7d 43 53 78 	mr      r3,r10
1000eca4:	38 80 01 00 	li      r4,256
1000eca8:	3d 40 10 02 	lis     r10,4098
1000ecac:	38 aa a9 dc 	addi    r5,r10,-22052
1000ecb0:	7d 26 4b 78 	mr      r6,r9
1000ecb4:	4c c6 31 82 	crclr   4*cr1+eq
1000ecb8:	48 00 28 9d 	bl      10011554 <my_snprintf>
	    buf, sizeof(buf), "%lu", (unsigned long) hc->contentlength );
	envp[envn++] = build_env( "CONTENT_LENGTH=%s", buf );
1000ecbc:	83 df 00 08 	lwz     r30,8(r31)
1000ecc0:	39 3e 00 01 	addi    r9,r30,1
1000ecc4:	91 3f 00 08 	stw     r9,8(r31)
1000ecc8:	39 3f 00 18 	addi    r9,r31,24
1000eccc:	3d 40 10 02 	lis     r10,4098
1000ecd0:	38 6a a9 e0 	addi    r3,r10,-22048
1000ecd4:	7d 24 4b 78 	mr      r4,r9
1000ecd8:	4b ff f7 09 	bl      1000e3e0 <build_env>
1000ecdc:	7c 6a 1b 78 	mr      r10,r3
1000ece0:	3d 20 10 03 	lis     r9,4099
1000ece4:	39 09 dc b4 	addi    r8,r9,-9036
1000ece8:	57 c9 10 3a 	rlwinm  r9,r30,2,0,29
1000ecec:	7d 28 4a 14 	add     r9,r8,r9
1000ecf0:	91 49 00 00 	stw     r10,0(r9)
	}
    if ( hc->remoteuser[0] != '\0' )
1000ecf4:	81 3f 01 18 	lwz     r9,280(r31)
1000ecf8:	81 29 00 f8 	lwz     r9,248(r9)
1000ecfc:	89 29 00 00 	lbz     r9,0(r9)
1000ed00:	55 29 06 3e 	clrlwi  r9,r9,24
1000ed04:	2f 89 00 00 	cmpwi   cr7,r9,0
1000ed08:	41 9e 00 40 	beq     cr7,1000ed48 <make_envp+0x870>
	envp[envn++] = build_env( "REMOTE_USER=%s", hc->remoteuser );
1000ed0c:	83 df 00 08 	lwz     r30,8(r31)
1000ed10:	39 3e 00 01 	addi    r9,r30,1
1000ed14:	91 3f 00 08 	stw     r9,8(r31)
1000ed18:	81 3f 01 18 	lwz     r9,280(r31)
1000ed1c:	81 29 00 f8 	lwz     r9,248(r9)
1000ed20:	3d 40 10 02 	lis     r10,4098
1000ed24:	38 6a a9 f4 	addi    r3,r10,-22028
1000ed28:	7d 24 4b 78 	mr      r4,r9
1000ed2c:	4b ff f6 b5 	bl      1000e3e0 <build_env>
1000ed30:	7c 6a 1b 78 	mr      r10,r3
1000ed34:	3d 20 10 03 	lis     r9,4099
1000ed38:	39 09 dc b4 	addi    r8,r9,-9036
1000ed3c:	57 c9 10 3a 	rlwinm  r9,r30,2,0,29
1000ed40:	7d 28 4a 14 	add     r9,r8,r9
1000ed44:	91 49 00 00 	stw     r10,0(r9)
    if ( hc->authorization[0] != '\0' )
1000ed48:	81 3f 01 18 	lwz     r9,280(r31)
1000ed4c:	81 29 00 f4 	lwz     r9,244(r9)
1000ed50:	89 29 00 00 	lbz     r9,0(r9)
1000ed54:	55 29 06 3e 	clrlwi  r9,r9,24
1000ed58:	2f 89 00 00 	cmpwi   cr7,r9,0
1000ed5c:	41 9e 00 3c 	beq     cr7,1000ed98 <make_envp+0x8c0>
	envp[envn++] = build_env( "AUTH_TYPE=%s", "Basic" );
1000ed60:	83 df 00 08 	lwz     r30,8(r31)
1000ed64:	39 3e 00 01 	addi    r9,r30,1
1000ed68:	91 3f 00 08 	stw     r9,8(r31)
1000ed6c:	3d 20 10 02 	lis     r9,4098
1000ed70:	38 69 aa 04 	addi    r3,r9,-22012
1000ed74:	3d 20 10 02 	lis     r9,4098
1000ed78:	38 89 aa 14 	addi    r4,r9,-21996
1000ed7c:	4b ff f6 65 	bl      1000e3e0 <build_env>
1000ed80:	7c 6a 1b 78 	mr      r10,r3
1000ed84:	3d 20 10 03 	lis     r9,4099
1000ed88:	39 09 dc b4 	addi    r8,r9,-9036
1000ed8c:	57 c9 10 3a 	rlwinm  r9,r30,2,0,29
1000ed90:	7d 28 4a 14 	add     r9,r8,r9
1000ed94:	91 49 00 00 	stw     r10,0(r9)
	/* We only support Basic auth at the moment. */
    if ( getenv( "TZ" ) != (char*) 0 )
1000ed98:	3d 20 10 02 	lis     r9,4098
1000ed9c:	38 69 aa 1c 	addi    r3,r9,-21988
1000eda0:	48 01 e7 ed 	bl      1002d58c <getenv@plt>
1000eda4:	7c 69 1b 78 	mr      r9,r3
1000eda8:	2f 89 00 00 	cmpwi   cr7,r9,0
1000edac:	41 9e 00 48 	beq     cr7,1000edf4 <make_envp+0x91c>
	envp[envn++] = build_env( "TZ=%s", getenv( "TZ" ) );
1000edb0:	83 df 00 08 	lwz     r30,8(r31)
1000edb4:	39 3e 00 01 	addi    r9,r30,1
1000edb8:	91 3f 00 08 	stw     r9,8(r31)
1000edbc:	3d 20 10 02 	lis     r9,4098
1000edc0:	38 69 aa 1c 	addi    r3,r9,-21988
1000edc4:	48 01 e7 c9 	bl      1002d58c <getenv@plt>
1000edc8:	7c 69 1b 78 	mr      r9,r3
1000edcc:	3d 40 10 02 	lis     r10,4098
1000edd0:	38 6a aa 20 	addi    r3,r10,-21984
1000edd4:	7d 24 4b 78 	mr      r4,r9
1000edd8:	4b ff f6 09 	bl      1000e3e0 <build_env>
1000eddc:	7c 6a 1b 78 	mr      r10,r3
1000ede0:	3d 20 10 03 	lis     r9,4099
1000ede4:	39 09 dc b4 	addi    r8,r9,-9036
1000ede8:	57 c9 10 3a 	rlwinm  r9,r30,2,0,29
1000edec:	7d 28 4a 14 	add     r9,r8,r9
1000edf0:	91 49 00 00 	stw     r10,0(r9)
    envp[envn++] = build_env( "CGI_PATTERN=%s", hc->hs->cgi_pattern );
1000edf4:	83 df 00 08 	lwz     r30,8(r31)
1000edf8:	39 3e 00 01 	addi    r9,r30,1
1000edfc:	91 3f 00 08 	stw     r9,8(r31)
1000ee00:	81 3f 01 18 	lwz     r9,280(r31)
1000ee04:	81 29 00 04 	lwz     r9,4(r9)
1000ee08:	81 29 00 0c 	lwz     r9,12(r9)
1000ee0c:	3d 40 10 02 	lis     r10,4098
1000ee10:	38 6a aa 28 	addi    r3,r10,-21976
1000ee14:	7d 24 4b 78 	mr      r4,r9
1000ee18:	4b ff f5 c9 	bl      1000e3e0 <build_env>
1000ee1c:	7c 6a 1b 78 	mr      r10,r3
1000ee20:	3d 20 10 03 	lis     r9,4099
1000ee24:	39 09 dc b4 	addi    r8,r9,-9036
1000ee28:	57 c9 10 3a 	rlwinm  r9,r30,2,0,29
1000ee2c:	7d 28 4a 14 	add     r9,r8,r9
1000ee30:	91 49 00 00 	stw     r10,0(r9)

    envp[envn] = (char*) 0;
1000ee34:	3d 20 10 03 	lis     r9,4099
1000ee38:	39 49 dc b4 	addi    r10,r9,-9036
1000ee3c:	81 3f 00 08 	lwz     r9,8(r31)
1000ee40:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1000ee44:	7d 2a 4a 14 	add     r9,r10,r9
1000ee48:	39 40 00 00 	li      r10,0
1000ee4c:	91 49 00 00 	stw     r10,0(r9)
    return envp;
1000ee50:	3d 20 10 03 	lis     r9,4099
1000ee54:	39 29 dc b4 	addi    r9,r9,-9036
    }
1000ee58:	7d 23 4b 78 	mr      r3,r9
1000ee5c:	39 7f 01 30 	addi    r11,r31,304
1000ee60:	80 0b 00 04 	lwz     r0,4(r11)
1000ee64:	7c 08 03 a6 	mtlr    r0
1000ee68:	83 cb ff f8 	lwz     r30,-8(r11)
1000ee6c:	83 eb ff fc 	lwz     r31,-4(r11)
1000ee70:	7d 61 5b 78 	mr      r1,r11
1000ee74:	4e 80 00 20 	blr

1000ee78 <make_argp>:
** since we're a sub-process.  This gets done after make_envp() because we
** scribble on hc->query.
*/
static char**
make_argp( httpd_conn* hc )
    {
1000ee78:	94 21 ff d0 	stwu    r1,-48(r1)
1000ee7c:	7c 08 02 a6 	mflr    r0
1000ee80:	90 01 00 34 	stw     r0,52(r1)
1000ee84:	93 e1 00 2c 	stw     r31,44(r1)
1000ee88:	7c 3f 0b 78 	mr      r31,r1
1000ee8c:	90 7f 00 18 	stw     r3,24(r31)

    /* By allocating an arg slot for every character in the query, plus
    ** one for the filename and one for the NULL, we are guaranteed to
    ** have enough.  We could actually use strlen/2.
    */
    argp = NEW( char*, strlen( hc->query ) + 2 );
1000ee90:	81 3f 00 18 	lwz     r9,24(r31)
1000ee94:	81 29 00 c8 	lwz     r9,200(r9)
1000ee98:	7d 23 4b 78 	mr      r3,r9
1000ee9c:	48 01 e7 b9 	bl      1002d654 <strlen@plt>
1000eea0:	7c 69 1b 78 	mr      r9,r3
1000eea4:	39 29 00 02 	addi    r9,r9,2
1000eea8:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1000eeac:	7d 23 4b 78 	mr      r3,r9
1000eeb0:	48 01 e6 f5 	bl      1002d5a4 <malloc@plt>
1000eeb4:	7c 69 1b 78 	mr      r9,r3
1000eeb8:	91 3f 00 14 	stw     r9,20(r31)
    if ( argp == (char**) 0 )
1000eebc:	81 3f 00 14 	lwz     r9,20(r31)
1000eec0:	2f 89 00 00 	cmpwi   cr7,r9,0
1000eec4:	40 9e 00 0c 	bne     cr7,1000eed0 <make_argp+0x58>
	return (char**) 0;
1000eec8:	39 20 00 00 	li      r9,0
1000eecc:	48 00 01 6c 	b       1000f038 <make_argp+0x1c0>

    argp[0] = strrchr( hc->expnfilename, '/' );
1000eed0:	81 3f 00 18 	lwz     r9,24(r31)
1000eed4:	81 29 00 bc 	lwz     r9,188(r9)
1000eed8:	7d 23 4b 78 	mr      r3,r9
1000eedc:	38 80 00 2f 	li      r4,47
1000eee0:	48 01 e8 9d 	bl      1002d77c <strrchr@plt>
1000eee4:	7c 6a 1b 78 	mr      r10,r3
1000eee8:	81 3f 00 14 	lwz     r9,20(r31)
1000eeec:	91 49 00 00 	stw     r10,0(r9)
    if ( argp[0] != (char*) 0 )
1000eef0:	81 3f 00 14 	lwz     r9,20(r31)
1000eef4:	81 29 00 00 	lwz     r9,0(r9)
1000eef8:	2f 89 00 00 	cmpwi   cr7,r9,0
1000eefc:	41 9e 00 1c 	beq     cr7,1000ef18 <make_argp+0xa0>
	++argp[0];
1000ef00:	81 3f 00 14 	lwz     r9,20(r31)
1000ef04:	81 29 00 00 	lwz     r9,0(r9)
1000ef08:	39 49 00 01 	addi    r10,r9,1
1000ef0c:	81 3f 00 14 	lwz     r9,20(r31)
1000ef10:	91 49 00 00 	stw     r10,0(r9)
1000ef14:	48 00 00 14 	b       1000ef28 <make_argp+0xb0>
    else
	argp[0] = hc->expnfilename;
1000ef18:	81 3f 00 18 	lwz     r9,24(r31)
1000ef1c:	81 49 00 bc 	lwz     r10,188(r9)
1000ef20:	81 3f 00 14 	lwz     r9,20(r31)
1000ef24:	91 49 00 00 	stw     r10,0(r9)

    argn = 1;
1000ef28:	39 20 00 01 	li      r9,1
1000ef2c:	91 3f 00 08 	stw     r9,8(r31)
    /* According to the CGI spec at http://hoohoo.ncsa.uiuc.edu/cgi/cl.html,
    ** "The server should search the query information for a non-encoded =
    ** character to determine if the command line is to be used, if it finds
    ** one, the command line is not to be used."
    */
    if ( strchr( hc->query, '=' ) == (char*) 0 )
1000ef30:	81 3f 00 18 	lwz     r9,24(r31)
1000ef34:	81 29 00 c8 	lwz     r9,200(r9)
1000ef38:	7d 23 4b 78 	mr      r3,r9
1000ef3c:	38 80 00 3d 	li      r4,61
1000ef40:	48 01 e7 05 	bl      1002d644 <strchr@plt>
1000ef44:	7c 69 1b 78 	mr      r9,r3
1000ef48:	2f 89 00 00 	cmpwi   cr7,r9,0
1000ef4c:	40 9e 00 d0 	bne     cr7,1000f01c <make_argp+0x1a4>
	{
	for ( cp1 = cp2 = hc->query; *cp2 != '\0'; ++cp2 )
1000ef50:	81 3f 00 18 	lwz     r9,24(r31)
1000ef54:	81 29 00 c8 	lwz     r9,200(r9)
1000ef58:	91 3f 00 10 	stw     r9,16(r31)
1000ef5c:	81 3f 00 10 	lwz     r9,16(r31)
1000ef60:	91 3f 00 0c 	stw     r9,12(r31)
1000ef64:	48 00 00 68 	b       1000efcc <make_argp+0x154>
	    {
	    if ( *cp2 == '+' )
1000ef68:	81 3f 00 10 	lwz     r9,16(r31)
1000ef6c:	89 29 00 00 	lbz     r9,0(r9)
1000ef70:	55 29 06 3e 	clrlwi  r9,r9,24
1000ef74:	2b 89 00 2b 	cmplwi  cr7,r9,43
1000ef78:	40 9e 00 48 	bne     cr7,1000efc0 <make_argp+0x148>
		{
		*cp2 = '\0';
1000ef7c:	81 3f 00 10 	lwz     r9,16(r31)
1000ef80:	39 40 00 00 	li      r10,0
1000ef84:	99 49 00 00 	stb     r10,0(r9)
		strdecode( cp1, cp1 );
1000ef88:	80 7f 00 0c 	lwz     r3,12(r31)
1000ef8c:	80 9f 00 0c 	lwz     r4,12(r31)
1000ef90:	4b ff a7 c1 	bl      10009750 <strdecode>
		argp[argn++] = cp1;
1000ef94:	81 3f 00 08 	lwz     r9,8(r31)
1000ef98:	39 49 00 01 	addi    r10,r9,1
1000ef9c:	91 5f 00 08 	stw     r10,8(r31)
1000efa0:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1000efa4:	81 5f 00 14 	lwz     r10,20(r31)
1000efa8:	7d 2a 4a 14 	add     r9,r10,r9
1000efac:	81 5f 00 0c 	lwz     r10,12(r31)
1000efb0:	91 49 00 00 	stw     r10,0(r9)
		cp1 = cp2 + 1;
1000efb4:	81 3f 00 10 	lwz     r9,16(r31)
1000efb8:	39 29 00 01 	addi    r9,r9,1
1000efbc:	91 3f 00 0c 	stw     r9,12(r31)
    ** character to determine if the command line is to be used, if it finds
    ** one, the command line is not to be used."
    */
    if ( strchr( hc->query, '=' ) == (char*) 0 )
	{
	for ( cp1 = cp2 = hc->query; *cp2 != '\0'; ++cp2 )
1000efc0:	81 3f 00 10 	lwz     r9,16(r31)
1000efc4:	39 29 00 01 	addi    r9,r9,1
1000efc8:	91 3f 00 10 	stw     r9,16(r31)
1000efcc:	81 3f 00 10 	lwz     r9,16(r31)
1000efd0:	89 29 00 00 	lbz     r9,0(r9)
1000efd4:	55 29 06 3e 	clrlwi  r9,r9,24
1000efd8:	2f 89 00 00 	cmpwi   cr7,r9,0
1000efdc:	40 9e ff 8c 	bne     cr7,1000ef68 <make_argp+0xf0>
		strdecode( cp1, cp1 );
		argp[argn++] = cp1;
		cp1 = cp2 + 1;
		}
	    }
	if ( cp2 != cp1 )
1000efe0:	81 5f 00 10 	lwz     r10,16(r31)
1000efe4:	81 3f 00 0c 	lwz     r9,12(r31)
1000efe8:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000efec:	41 9e 00 30 	beq     cr7,1000f01c <make_argp+0x1a4>
	    {
	    strdecode( cp1, cp1 );
1000eff0:	80 7f 00 0c 	lwz     r3,12(r31)
1000eff4:	80 9f 00 0c 	lwz     r4,12(r31)
1000eff8:	4b ff a7 59 	bl      10009750 <strdecode>
	    argp[argn++] = cp1;
1000effc:	81 3f 00 08 	lwz     r9,8(r31)
1000f000:	39 49 00 01 	addi    r10,r9,1
1000f004:	91 5f 00 08 	stw     r10,8(r31)
1000f008:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1000f00c:	81 5f 00 14 	lwz     r10,20(r31)
1000f010:	7d 2a 4a 14 	add     r9,r10,r9
1000f014:	81 5f 00 0c 	lwz     r10,12(r31)
1000f018:	91 49 00 00 	stw     r10,0(r9)
	    }
	}

    argp[argn] = (char*) 0;
1000f01c:	81 3f 00 08 	lwz     r9,8(r31)
1000f020:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1000f024:	81 5f 00 14 	lwz     r10,20(r31)
1000f028:	7d 2a 4a 14 	add     r9,r10,r9
1000f02c:	39 40 00 00 	li      r10,0
1000f030:	91 49 00 00 	stw     r10,0(r9)
    return argp;
1000f034:	81 3f 00 14 	lwz     r9,20(r31)
    }
1000f038:	7d 23 4b 78 	mr      r3,r9
1000f03c:	39 7f 00 30 	addi    r11,r31,48
1000f040:	80 0b 00 04 	lwz     r0,4(r11)
1000f044:	7c 08 03 a6 	mtlr    r0
1000f048:	83 eb ff fc 	lwz     r31,-4(r11)
1000f04c:	7d 61 5b 78 	mr      r1,r11
1000f050:	4e 80 00 20 	blr

1000f054 <cgi_interpose_input>:
** directly is that we have already read part of the data into our
** buffer.
*/
static void
cgi_interpose_input( httpd_conn* hc, int wfd )
    {
1000f054:	94 21 fb d0 	stwu    r1,-1072(r1)
1000f058:	7c 08 02 a6 	mflr    r0
1000f05c:	90 01 04 34 	stw     r0,1076(r1)
1000f060:	93 e1 04 2c 	stw     r31,1068(r1)
1000f064:	7c 3f 0b 78 	mr      r31,r1
1000f068:	90 7f 04 18 	stw     r3,1048(r31)
1000f06c:	90 9f 04 1c 	stw     r4,1052(r31)
    size_t c;
    ssize_t r;
    char buf[1024];

    c = hc->read_idx - hc->checked_idx;
1000f070:	81 3f 04 18 	lwz     r9,1048(r31)
1000f074:	81 49 00 90 	lwz     r10,144(r9)
1000f078:	81 3f 04 18 	lwz     r9,1048(r31)
1000f07c:	81 29 00 94 	lwz     r9,148(r9)
1000f080:	7d 29 50 50 	subf    r9,r9,r10
1000f084:	91 3f 00 08 	stw     r9,8(r31)
    if ( c > 0 )
1000f088:	81 3f 00 08 	lwz     r9,8(r31)
1000f08c:	2f 89 00 00 	cmpwi   cr7,r9,0
1000f090:	41 9e 00 40 	beq     cr7,1000f0d0 <cgi_interpose_input+0x7c>
	{
	if ( httpd_write_fully( wfd, &(hc->read_buf[hc->checked_idx]), c ) != c )
1000f094:	81 3f 04 18 	lwz     r9,1048(r31)
1000f098:	81 49 00 88 	lwz     r10,136(r9)
1000f09c:	81 3f 04 18 	lwz     r9,1048(r31)
1000f0a0:	81 29 00 94 	lwz     r9,148(r9)
1000f0a4:	7d 2a 4a 14 	add     r9,r10,r9
1000f0a8:	80 7f 04 1c 	lwz     r3,1052(r31)
1000f0ac:	7d 24 4b 78 	mr      r4,r9
1000f0b0:	80 bf 00 08 	lwz     r5,8(r31)
1000f0b4:	48 00 26 51 	bl      10011704 <httpd_write_fully>
1000f0b8:	7c 69 1b 78 	mr      r9,r3
1000f0bc:	7d 2a 4b 78 	mr      r10,r9
1000f0c0:	81 3f 00 08 	lwz     r9,8(r31)
1000f0c4:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000f0c8:	41 9e 00 08 	beq     cr7,1000f0d0 <cgi_interpose_input+0x7c>
	    return;
1000f0cc:	48 00 00 ec 	b       1000f1b8 <cgi_interpose_input+0x164>
	}
    while ( c < hc->contentlength )
1000f0d0:	48 00 00 cc 	b       1000f19c <cgi_interpose_input+0x148>
	{
	r = read( hc->conn_fd, buf, MIN( sizeof(buf), hc->contentlength - c ) );
1000f0d4:	81 3f 04 18 	lwz     r9,1048(r31)
1000f0d8:	81 09 01 c0 	lwz     r8,448(r9)
1000f0dc:	81 3f 04 18 	lwz     r9,1048(r31)
1000f0e0:	81 49 01 3c 	lwz     r10,316(r9)
1000f0e4:	81 3f 00 08 	lwz     r9,8(r31)
1000f0e8:	7d 29 50 50 	subf    r9,r9,r10
1000f0ec:	2b 89 04 00 	cmplwi  cr7,r9,1024
1000f0f0:	40 9d 00 08 	ble     cr7,1000f0f8 <cgi_interpose_input+0xa4>
1000f0f4:	39 20 04 00 	li      r9,1024
1000f0f8:	39 5f 00 10 	addi    r10,r31,16
1000f0fc:	7d 03 43 78 	mr      r3,r8
1000f100:	7d 44 53 78 	mr      r4,r10
1000f104:	7d 25 4b 78 	mr      r5,r9
1000f108:	48 01 e2 dd 	bl      1002d3e4 <read@plt>
1000f10c:	90 7f 00 0c 	stw     r3,12(r31)
	if ( r < 0 && ( errno == EINTR || errno == EAGAIN ) )
1000f110:	81 3f 00 0c 	lwz     r9,12(r31)
1000f114:	2f 89 00 00 	cmpwi   cr7,r9,0
1000f118:	40 9c 00 38 	bge     cr7,1000f150 <cgi_interpose_input+0xfc>
1000f11c:	48 01 e5 c1 	bl      1002d6dc <__errno_location@plt>
1000f120:	7c 69 1b 78 	mr      r9,r3
1000f124:	81 29 00 00 	lwz     r9,0(r9)
1000f128:	2f 89 00 04 	cmpwi   cr7,r9,4
1000f12c:	41 9e 00 18 	beq     cr7,1000f144 <cgi_interpose_input+0xf0>
1000f130:	48 01 e5 ad 	bl      1002d6dc <__errno_location@plt>
1000f134:	7c 69 1b 78 	mr      r9,r3
1000f138:	81 29 00 00 	lwz     r9,0(r9)
1000f13c:	2f 89 00 0b 	cmpwi   cr7,r9,11
1000f140:	40 9e 00 10 	bne     cr7,1000f150 <cgi_interpose_input+0xfc>
	    {
	    sleep( 1 );
1000f144:	38 60 00 01 	li      r3,1
1000f148:	48 01 e3 55 	bl      1002d49c <sleep@plt>
	    continue;
1000f14c:	48 00 00 50 	b       1000f19c <cgi_interpose_input+0x148>
	    }
	if ( r <= 0 )
1000f150:	81 3f 00 0c 	lwz     r9,12(r31)
1000f154:	2f 89 00 00 	cmpwi   cr7,r9,0
1000f158:	41 9d 00 08 	bgt     cr7,1000f160 <cgi_interpose_input+0x10c>
	    return;
1000f15c:	48 00 00 5c 	b       1000f1b8 <cgi_interpose_input+0x164>
	if ( httpd_write_fully( wfd, buf, r ) != r )
1000f160:	81 3f 00 0c 	lwz     r9,12(r31)
1000f164:	39 5f 00 10 	addi    r10,r31,16
1000f168:	80 7f 04 1c 	lwz     r3,1052(r31)
1000f16c:	7d 44 53 78 	mr      r4,r10
1000f170:	7d 25 4b 78 	mr      r5,r9
1000f174:	48 00 25 91 	bl      10011704 <httpd_write_fully>
1000f178:	7c 6a 1b 78 	mr      r10,r3
1000f17c:	81 3f 00 0c 	lwz     r9,12(r31)
1000f180:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000f184:	41 9e 00 08 	beq     cr7,1000f18c <cgi_interpose_input+0x138>
	    return;
1000f188:	48 00 00 30 	b       1000f1b8 <cgi_interpose_input+0x164>
	c += r;
1000f18c:	81 3f 00 0c 	lwz     r9,12(r31)
1000f190:	81 5f 00 08 	lwz     r10,8(r31)
1000f194:	7d 2a 4a 14 	add     r9,r10,r9
1000f198:	91 3f 00 08 	stw     r9,8(r31)
    if ( c > 0 )
	{
	if ( httpd_write_fully( wfd, &(hc->read_buf[hc->checked_idx]), c ) != c )
	    return;
	}
    while ( c < hc->contentlength )
1000f19c:	81 3f 04 18 	lwz     r9,1048(r31)
1000f1a0:	81 49 01 3c 	lwz     r10,316(r9)
1000f1a4:	81 3f 00 08 	lwz     r9,8(r31)
1000f1a8:	7f 8a 48 40 	cmplw   cr7,r10,r9
1000f1ac:	41 9d ff 28 	bgt     cr7,1000f0d4 <cgi_interpose_input+0x80>
	    return;
	if ( httpd_write_fully( wfd, buf, r ) != r )
	    return;
	c += r;
	}
    post_post_garbage_hack( hc );
1000f1b0:	80 7f 04 18 	lwz     r3,1048(r31)
1000f1b4:	48 00 00 1d 	bl      1000f1d0 <post_post_garbage_hack>
    }
1000f1b8:	39 7f 04 30 	addi    r11,r31,1072
1000f1bc:	80 0b 00 04 	lwz     r0,4(r11)
1000f1c0:	7c 08 03 a6 	mtlr    r0
1000f1c4:	83 eb ff fc 	lwz     r31,-4(r11)
1000f1c8:	7d 61 5b 78 	mr      r1,r11
1000f1cc:	4e 80 00 20 	blr

1000f1d0 <post_post_garbage_hack>:
** unacceptably expensive.  The eventual fix will come when interposing
** gets integrated into the main loop as a tasklet instead of a process.
*/
static void
post_post_garbage_hack( httpd_conn* hc )
    {
1000f1d0:	94 21 ff d0 	stwu    r1,-48(r1)
1000f1d4:	7c 08 02 a6 	mflr    r0
1000f1d8:	90 01 00 34 	stw     r0,52(r1)
1000f1dc:	93 e1 00 2c 	stw     r31,44(r1)
1000f1e0:	7c 3f 0b 78 	mr      r31,r1
1000f1e4:	90 7f 00 18 	stw     r3,24(r31)
    char buf[2];

    /* If we are in a sub-process, turn on no-delay mode in case we
    ** previously cleared it.
    */
    if ( sub_process )
1000f1e8:	3d 20 10 03 	lis     r9,4099
1000f1ec:	81 29 db 28 	lwz     r9,-9432(r9)
1000f1f0:	2f 89 00 00 	cmpwi   cr7,r9,0
1000f1f4:	41 9e 00 14 	beq     cr7,1000f208 <post_post_garbage_hack+0x38>
	httpd_set_ndelay( hc->conn_fd );
1000f1f8:	81 3f 00 18 	lwz     r9,24(r31)
1000f1fc:	81 29 01 c0 	lwz     r9,448(r9)
1000f200:	7d 23 4b 78 	mr      r3,r9
1000f204:	4b ff 8a a5 	bl      10007ca8 <httpd_set_ndelay>
    /* And read up to 2 bytes. */
    (void) read( hc->conn_fd, buf, sizeof(buf) );
1000f208:	81 3f 00 18 	lwz     r9,24(r31)
1000f20c:	81 29 01 c0 	lwz     r9,448(r9)
1000f210:	7d 23 4b 78 	mr      r3,r9
1000f214:	39 3f 00 08 	addi    r9,r31,8
1000f218:	7d 24 4b 78 	mr      r4,r9
1000f21c:	38 a0 00 02 	li      r5,2
1000f220:	48 01 e1 c5 	bl      1002d3e4 <read@plt>
    }
1000f224:	39 7f 00 30 	addi    r11,r31,48
1000f228:	80 0b 00 04 	lwz     r0,4(r11)
1000f22c:	7c 08 03 a6 	mtlr    r0
1000f230:	83 eb ff fc 	lwz     r31,-4(r11)
1000f234:	7d 61 5b 78 	mr      r1,r11
1000f238:	4e 80 00 20 	blr

1000f23c <cgi_interpose_output>:
** and check for the special ones before writing the status.  Then we write
** out the saved headers and proceed to echo the rest of the response.
*/
static void
cgi_interpose_output( httpd_conn* hc, int rfd )
    {
1000f23c:	94 21 fb c0 	stwu    r1,-1088(r1)
1000f240:	7c 08 02 a6 	mflr    r0
1000f244:	90 01 04 44 	stw     r0,1092(r1)
1000f248:	93 c1 04 38 	stw     r30,1080(r1)
1000f24c:	93 e1 04 3c 	stw     r31,1084(r1)
1000f250:	7c 3f 0b 78 	mr      r31,r1
1000f254:	90 7f 04 28 	stw     r3,1064(r31)
1000f258:	90 9f 04 2c 	stw     r4,1068(r31)
    char* cp;

    /* Make sure the connection is in blocking mode.  It should already
    ** be blocking, but we might as well be sure.
    */
    httpd_clear_ndelay( hc->conn_fd );
1000f25c:	81 3f 04 28 	lwz     r9,1064(r31)
1000f260:	81 29 01 c0 	lwz     r9,448(r9)
1000f264:	7d 23 4b 78 	mr      r3,r9
1000f268:	4b ff 8a c9 	bl      10007d30 <httpd_clear_ndelay>

    /* Slurp in all headers. */
    headers_size = 0;
1000f26c:	39 20 00 00 	li      r9,0
1000f270:	91 3f 04 20 	stw     r9,1056(r31)
    httpd_realloc_str( &headers, &headers_size, 500 );
1000f274:	39 5f 04 24 	addi    r10,r31,1060
1000f278:	39 3f 04 20 	addi    r9,r31,1056
1000f27c:	7d 43 53 78 	mr      r3,r10
1000f280:	7d 24 4b 78 	mr      r4,r9
1000f284:	38 a0 01 f4 	li      r5,500
1000f288:	4b ff 90 91 	bl      10008318 <httpd_realloc_str>
    headers_len = 0;
1000f28c:	39 20 00 00 	li      r9,0
1000f290:	91 3f 00 08 	stw     r9,8(r31)
    for (;;)
	{
	r = read( rfd, buf, sizeof(buf) );
1000f294:	39 3f 00 20 	addi    r9,r31,32
1000f298:	80 7f 04 2c 	lwz     r3,1068(r31)
1000f29c:	7d 24 4b 78 	mr      r4,r9
1000f2a0:	38 a0 04 00 	li      r5,1024
1000f2a4:	48 01 e1 41 	bl      1002d3e4 <read@plt>
1000f2a8:	90 7f 00 18 	stw     r3,24(r31)
	if ( r < 0 && ( errno == EINTR || errno == EAGAIN ) )
1000f2ac:	81 3f 00 18 	lwz     r9,24(r31)
1000f2b0:	2f 89 00 00 	cmpwi   cr7,r9,0
1000f2b4:	40 9c 00 38 	bge     cr7,1000f2ec <cgi_interpose_output+0xb0>
1000f2b8:	48 01 e4 25 	bl      1002d6dc <__errno_location@plt>
1000f2bc:	7c 69 1b 78 	mr      r9,r3
1000f2c0:	81 29 00 00 	lwz     r9,0(r9)
1000f2c4:	2f 89 00 04 	cmpwi   cr7,r9,4
1000f2c8:	41 9e 00 18 	beq     cr7,1000f2e0 <cgi_interpose_output+0xa4>
1000f2cc:	48 01 e4 11 	bl      1002d6dc <__errno_location@plt>
1000f2d0:	7c 69 1b 78 	mr      r9,r3
1000f2d4:	81 29 00 00 	lwz     r9,0(r9)
1000f2d8:	2f 89 00 0b 	cmpwi   cr7,r9,11
1000f2dc:	40 9e 00 10 	bne     cr7,1000f2ec <cgi_interpose_output+0xb0>
	    {
	    sleep( 1 );
1000f2e0:	38 60 00 01 	li      r3,1
1000f2e4:	48 01 e1 b9 	bl      1002d49c <sleep@plt>
	    continue;
1000f2e8:	48 00 00 d8 	b       1000f3c0 <cgi_interpose_output+0x184>
	    }
	if ( r <= 0 )
1000f2ec:	81 3f 00 18 	lwz     r9,24(r31)
1000f2f0:	2f 89 00 00 	cmpwi   cr7,r9,0
1000f2f4:	41 9d 00 18 	bgt     cr7,1000f30c <cgi_interpose_output+0xd0>
	    {
	    br = &(headers[headers_len]);
1000f2f8:	81 5f 04 24 	lwz     r10,1060(r31)
1000f2fc:	81 3f 00 08 	lwz     r9,8(r31)
1000f300:	7d 2a 4a 14 	add     r9,r10,r9
1000f304:	91 3f 00 0c 	stw     r9,12(r31)
	    break;
1000f308:	48 00 00 bc 	b       1000f3c4 <cgi_interpose_output+0x188>
	    }
	httpd_realloc_str( &headers, &headers_size, headers_len + r );
1000f30c:	81 5f 00 18 	lwz     r10,24(r31)
1000f310:	81 3f 00 08 	lwz     r9,8(r31)
1000f314:	7d 2a 4a 14 	add     r9,r10,r9
1000f318:	39 1f 04 24 	addi    r8,r31,1060
1000f31c:	39 5f 04 20 	addi    r10,r31,1056
1000f320:	7d 03 43 78 	mr      r3,r8
1000f324:	7d 44 53 78 	mr      r4,r10
1000f328:	7d 25 4b 78 	mr      r5,r9
1000f32c:	4b ff 8f ed 	bl      10008318 <httpd_realloc_str>
	(void) memmove( &(headers[headers_len]), buf, r );
1000f330:	81 5f 04 24 	lwz     r10,1060(r31)
1000f334:	81 3f 00 08 	lwz     r9,8(r31)
1000f338:	7d 0a 4a 14 	add     r8,r10,r9
1000f33c:	81 3f 00 18 	lwz     r9,24(r31)
1000f340:	39 5f 00 20 	addi    r10,r31,32
1000f344:	7d 03 43 78 	mr      r3,r8
1000f348:	7d 44 53 78 	mr      r4,r10
1000f34c:	7d 25 4b 78 	mr      r5,r9
1000f350:	48 01 e0 d5 	bl      1002d424 <memmove@plt>
	headers_len += r;
1000f354:	81 3f 00 18 	lwz     r9,24(r31)
1000f358:	81 5f 00 08 	lwz     r10,8(r31)
1000f35c:	7d 2a 4a 14 	add     r9,r10,r9
1000f360:	91 3f 00 08 	stw     r9,8(r31)
	headers[headers_len] = '\0';
1000f364:	81 5f 04 24 	lwz     r10,1060(r31)
1000f368:	81 3f 00 08 	lwz     r9,8(r31)
1000f36c:	7d 2a 4a 14 	add     r9,r10,r9
1000f370:	39 40 00 00 	li      r10,0
1000f374:	99 49 00 00 	stb     r10,0(r9)
	if ( ( br = strstr( headers, "\015\012\015\012" ) ) != (char*) 0 ||
1000f378:	81 3f 04 24 	lwz     r9,1060(r31)
1000f37c:	7d 23 4b 78 	mr      r3,r9
1000f380:	3d 20 10 02 	lis     r9,4098
1000f384:	38 89 aa 38 	addi    r4,r9,-21960
1000f388:	48 01 e0 4d 	bl      1002d3d4 <strstr@plt>
1000f38c:	90 7f 00 0c 	stw     r3,12(r31)
1000f390:	81 3f 00 0c 	lwz     r9,12(r31)
1000f394:	2f 89 00 00 	cmpwi   cr7,r9,0
1000f398:	40 9e 00 2c 	bne     cr7,1000f3c4 <cgi_interpose_output+0x188>
	     ( br = strstr( headers, "\012\012" ) ) != (char*) 0 )
1000f39c:	81 3f 04 24 	lwz     r9,1060(r31)
	    }
	httpd_realloc_str( &headers, &headers_size, headers_len + r );
	(void) memmove( &(headers[headers_len]), buf, r );
	headers_len += r;
	headers[headers_len] = '\0';
	if ( ( br = strstr( headers, "\015\012\015\012" ) ) != (char*) 0 ||
1000f3a0:	7d 23 4b 78 	mr      r3,r9
1000f3a4:	3d 20 10 02 	lis     r9,4098
1000f3a8:	38 89 aa 40 	addi    r4,r9,-21952
1000f3ac:	48 01 e0 29 	bl      1002d3d4 <strstr@plt>
1000f3b0:	90 7f 00 0c 	stw     r3,12(r31)
1000f3b4:	81 3f 00 0c 	lwz     r9,12(r31)
1000f3b8:	2f 89 00 00 	cmpwi   cr7,r9,0
1000f3bc:	40 9e 00 08 	bne     cr7,1000f3c4 <cgi_interpose_output+0x188>
	     ( br = strstr( headers, "\012\012" ) ) != (char*) 0 )
	    break;
	}
1000f3c0:	4b ff fe d4 	b       1000f294 <cgi_interpose_output+0x58>

    /* If there were no headers, bail. */
    if ( headers[0] == '\0' )
1000f3c4:	81 3f 04 24 	lwz     r9,1060(r31)
1000f3c8:	89 29 00 00 	lbz     r9,0(r9)
1000f3cc:	55 29 06 3e 	clrlwi  r9,r9,24
1000f3d0:	2f 89 00 00 	cmpwi   cr7,r9,0
1000f3d4:	41 9e 03 d8 	beq     cr7,1000f7ac <cgi_interpose_output+0x570>

    /* Figure out the status.  Look for a Status: or Location: header;
    ** else if there's an HTTP header line, get it from there; else
    ** default to 200.
    */
    status = 200;
1000f3d8:	39 20 00 c8 	li      r9,200
1000f3dc:	91 3f 00 10 	stw     r9,16(r31)
    if ( strncmp( headers, "HTTP/", 5 ) == 0 )
1000f3e0:	81 3f 04 24 	lwz     r9,1060(r31)
1000f3e4:	7d 23 4b 78 	mr      r3,r9
1000f3e8:	3d 20 10 02 	lis     r9,4098
1000f3ec:	38 89 aa 44 	addi    r4,r9,-21948
1000f3f0:	38 a0 00 05 	li      r5,5
1000f3f4:	48 01 e4 01 	bl      1002d7f4 <strncmp@plt>
1000f3f8:	7c 69 1b 78 	mr      r9,r3
1000f3fc:	2f 89 00 00 	cmpwi   cr7,r9,0
1000f400:	40 9e 00 38 	bne     cr7,1000f438 <cgi_interpose_output+0x1fc>
	{
	cp = headers;
1000f404:	81 3f 04 24 	lwz     r9,1060(r31)
1000f408:	91 3f 00 1c 	stw     r9,28(r31)
	cp += strcspn( cp, " \t" );
1000f40c:	80 7f 00 1c 	lwz     r3,28(r31)
1000f410:	3d 20 10 02 	lis     r9,4098
1000f414:	38 89 93 50 	addi    r4,r9,-27824
1000f418:	48 01 df dd 	bl      1002d3f4 <strcspn@plt>
1000f41c:	7c 69 1b 78 	mr      r9,r3
1000f420:	81 5f 00 1c 	lwz     r10,28(r31)
1000f424:	7d 2a 4a 14 	add     r9,r10,r9
1000f428:	91 3f 00 1c 	stw     r9,28(r31)
	status = atoi( cp );
1000f42c:	80 7f 00 1c 	lwz     r3,28(r31)
1000f430:	48 01 e3 9d 	bl      1002d7cc <atoi@plt>
1000f434:	90 7f 00 10 	stw     r3,16(r31)
	}
    if ( ( cp = strstr( headers, "Location:" ) ) != (char*) 0 &&
1000f438:	81 3f 04 24 	lwz     r9,1060(r31)
1000f43c:	7d 23 4b 78 	mr      r3,r9
1000f440:	3d 20 10 02 	lis     r9,4098
1000f444:	38 89 aa 4c 	addi    r4,r9,-21940
1000f448:	48 01 df 8d 	bl      1002d3d4 <strstr@plt>
1000f44c:	90 7f 00 1c 	stw     r3,28(r31)
1000f450:	81 3f 00 1c 	lwz     r9,28(r31)
1000f454:	2f 89 00 00 	cmpwi   cr7,r9,0
1000f458:	41 9e 00 44 	beq     cr7,1000f49c <cgi_interpose_output+0x260>
1000f45c:	81 5f 00 1c 	lwz     r10,28(r31)
1000f460:	81 3f 00 0c 	lwz     r9,12(r31)
1000f464:	7f 8a 48 40 	cmplw   cr7,r10,r9
1000f468:	40 9c 00 34 	bge     cr7,1000f49c <cgi_interpose_output+0x260>
	 cp < br &&
	 ( cp == headers || *(cp-1) == '\012' ) )
1000f46c:	81 3f 04 24 	lwz     r9,1060(r31)
	cp = headers;
	cp += strcspn( cp, " \t" );
	status = atoi( cp );
	}
    if ( ( cp = strstr( headers, "Location:" ) ) != (char*) 0 &&
	 cp < br &&
1000f470:	81 5f 00 1c 	lwz     r10,28(r31)
1000f474:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000f478:	41 9e 00 1c 	beq     cr7,1000f494 <cgi_interpose_output+0x258>
	 ( cp == headers || *(cp-1) == '\012' ) )
1000f47c:	81 3f 00 1c 	lwz     r9,28(r31)
1000f480:	39 29 ff ff 	addi    r9,r9,-1
1000f484:	89 29 00 00 	lbz     r9,0(r9)
1000f488:	55 29 06 3e 	clrlwi  r9,r9,24
1000f48c:	2b 89 00 0a 	cmplwi  cr7,r9,10
1000f490:	40 9e 00 0c 	bne     cr7,1000f49c <cgi_interpose_output+0x260>
	status = 302;
1000f494:	39 20 01 2e 	li      r9,302
1000f498:	91 3f 00 10 	stw     r9,16(r31)
    if ( ( cp = strstr( headers, "Status:" ) ) != (char*) 0 &&
1000f49c:	81 3f 04 24 	lwz     r9,1060(r31)
1000f4a0:	7d 23 4b 78 	mr      r3,r9
1000f4a4:	3d 20 10 02 	lis     r9,4098
1000f4a8:	38 89 aa 58 	addi    r4,r9,-21928
1000f4ac:	48 01 df 29 	bl      1002d3d4 <strstr@plt>
1000f4b0:	90 7f 00 1c 	stw     r3,28(r31)
1000f4b4:	81 3f 00 1c 	lwz     r9,28(r31)
1000f4b8:	2f 89 00 00 	cmpwi   cr7,r9,0
1000f4bc:	41 9e 00 74 	beq     cr7,1000f530 <cgi_interpose_output+0x2f4>
1000f4c0:	81 5f 00 1c 	lwz     r10,28(r31)
1000f4c4:	81 3f 00 0c 	lwz     r9,12(r31)
1000f4c8:	7f 8a 48 40 	cmplw   cr7,r10,r9
1000f4cc:	40 9c 00 64 	bge     cr7,1000f530 <cgi_interpose_output+0x2f4>
	 cp < br &&
	 ( cp == headers || *(cp-1) == '\012' ) )
1000f4d0:	81 3f 04 24 	lwz     r9,1060(r31)
    if ( ( cp = strstr( headers, "Location:" ) ) != (char*) 0 &&
	 cp < br &&
	 ( cp == headers || *(cp-1) == '\012' ) )
	status = 302;
    if ( ( cp = strstr( headers, "Status:" ) ) != (char*) 0 &&
	 cp < br &&
1000f4d4:	81 5f 00 1c 	lwz     r10,28(r31)
1000f4d8:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000f4dc:	41 9e 00 1c 	beq     cr7,1000f4f8 <cgi_interpose_output+0x2bc>
	 ( cp == headers || *(cp-1) == '\012' ) )
1000f4e0:	81 3f 00 1c 	lwz     r9,28(r31)
1000f4e4:	39 29 ff ff 	addi    r9,r9,-1
1000f4e8:	89 29 00 00 	lbz     r9,0(r9)
1000f4ec:	55 29 06 3e 	clrlwi  r9,r9,24
1000f4f0:	2b 89 00 0a 	cmplwi  cr7,r9,10
1000f4f4:	40 9e 00 3c 	bne     cr7,1000f530 <cgi_interpose_output+0x2f4>
	{
	cp += 7;
1000f4f8:	81 3f 00 1c 	lwz     r9,28(r31)
1000f4fc:	39 29 00 07 	addi    r9,r9,7
1000f500:	91 3f 00 1c 	stw     r9,28(r31)
	cp += strspn( cp, " \t" );
1000f504:	80 7f 00 1c 	lwz     r3,28(r31)
1000f508:	3d 20 10 02 	lis     r9,4098
1000f50c:	38 89 93 50 	addi    r4,r9,-27824
1000f510:	48 01 e3 0d 	bl      1002d81c <strspn@plt>
1000f514:	7c 69 1b 78 	mr      r9,r3
1000f518:	81 5f 00 1c 	lwz     r10,28(r31)
1000f51c:	7d 2a 4a 14 	add     r9,r10,r9
1000f520:	91 3f 00 1c 	stw     r9,28(r31)
	status = atoi( cp );
1000f524:	80 7f 00 1c 	lwz     r3,28(r31)
1000f528:	48 01 e2 a5 	bl      1002d7cc <atoi@plt>
1000f52c:	90 7f 00 10 	stw     r3,16(r31)
	}

    /* Write the status line. */
    switch ( status )
1000f530:	81 3f 00 10 	lwz     r9,16(r31)
1000f534:	2f 89 01 93 	cmpwi   cr7,r9,403
1000f538:	41 9e 00 d4 	beq     cr7,1000f60c <cgi_interpose_output+0x3d0>
1000f53c:	2f 89 01 93 	cmpwi   cr7,r9,403
1000f540:	41 9d 00 3c 	bgt     cr7,1000f57c <cgi_interpose_output+0x340>
1000f544:	2f 89 01 30 	cmpwi   cr7,r9,304
1000f548:	41 9e 00 94 	beq     cr7,1000f5dc <cgi_interpose_output+0x3a0>
1000f54c:	2f 89 01 30 	cmpwi   cr7,r9,304
1000f550:	41 9d 00 18 	bgt     cr7,1000f568 <cgi_interpose_output+0x32c>
1000f554:	2f 89 00 c8 	cmpwi   cr7,r9,200
1000f558:	41 9e 00 64 	beq     cr7,1000f5bc <cgi_interpose_output+0x380>
1000f55c:	2f 89 01 2e 	cmpwi   cr7,r9,302
1000f560:	41 9e 00 6c 	beq     cr7,1000f5cc <cgi_interpose_output+0x390>
1000f564:	48 00 01 18 	b       1000f67c <cgi_interpose_output+0x440>
1000f568:	2f 89 01 90 	cmpwi   cr7,r9,400
1000f56c:	41 9e 00 80 	beq     cr7,1000f5ec <cgi_interpose_output+0x3b0>
1000f570:	2f 89 01 91 	cmpwi   cr7,r9,401
1000f574:	41 9e 00 88 	beq     cr7,1000f5fc <cgi_interpose_output+0x3c0>
1000f578:	48 00 01 04 	b       1000f67c <cgi_interpose_output+0x440>
1000f57c:	2f 89 01 c3 	cmpwi   cr7,r9,451
1000f580:	41 9e 00 bc 	beq     cr7,1000f63c <cgi_interpose_output+0x400>
1000f584:	2f 89 01 c3 	cmpwi   cr7,r9,451
1000f588:	41 9d 00 18 	bgt     cr7,1000f5a0 <cgi_interpose_output+0x364>
1000f58c:	2f 89 01 94 	cmpwi   cr7,r9,404
1000f590:	41 9e 00 8c 	beq     cr7,1000f61c <cgi_interpose_output+0x3e0>
1000f594:	2f 89 01 98 	cmpwi   cr7,r9,408
1000f598:	41 9e 00 94 	beq     cr7,1000f62c <cgi_interpose_output+0x3f0>
1000f59c:	48 00 00 e0 	b       1000f67c <cgi_interpose_output+0x440>
1000f5a0:	2f 89 01 f5 	cmpwi   cr7,r9,501
1000f5a4:	41 9e 00 b8 	beq     cr7,1000f65c <cgi_interpose_output+0x420>
1000f5a8:	2f 89 01 f7 	cmpwi   cr7,r9,503
1000f5ac:	41 9e 00 c0 	beq     cr7,1000f66c <cgi_interpose_output+0x430>
1000f5b0:	2f 89 01 f4 	cmpwi   cr7,r9,500
1000f5b4:	41 9e 00 98 	beq     cr7,1000f64c <cgi_interpose_output+0x410>
1000f5b8:	48 00 00 c4 	b       1000f67c <cgi_interpose_output+0x440>
	{
	case 200: title = ok200title; break;
1000f5bc:	3d 20 10 03 	lis     r9,4099
1000f5c0:	81 29 c1 04 	lwz     r9,-16124(r9)
1000f5c4:	91 3f 00 14 	stw     r9,20(r31)
1000f5c8:	48 00 00 c4 	b       1000f68c <cgi_interpose_output+0x450>
	case 302: title = err302title; break;
1000f5cc:	3d 20 10 03 	lis     r9,4099
1000f5d0:	81 29 c1 0c 	lwz     r9,-16116(r9)
1000f5d4:	91 3f 00 14 	stw     r9,20(r31)
1000f5d8:	48 00 00 b4 	b       1000f68c <cgi_interpose_output+0x450>
	case 304: title = err304title; break;
1000f5dc:	3d 20 10 03 	lis     r9,4099
1000f5e0:	81 29 c1 14 	lwz     r9,-16108(r9)
1000f5e4:	91 3f 00 14 	stw     r9,20(r31)
1000f5e8:	48 00 00 a4 	b       1000f68c <cgi_interpose_output+0x450>
	case 400: title = httpd_err400title; break;
1000f5ec:	3d 20 10 03 	lis     r9,4099
1000f5f0:	81 29 d3 38 	lwz     r9,-11464(r9)
1000f5f4:	91 3f 00 14 	stw     r9,20(r31)
1000f5f8:	48 00 00 94 	b       1000f68c <cgi_interpose_output+0x450>
#ifdef AUTH_FILE
	case 401: title = err401title; break;
1000f5fc:	3d 20 10 03 	lis     r9,4099
1000f600:	81 29 c1 18 	lwz     r9,-16104(r9)
1000f604:	91 3f 00 14 	stw     r9,20(r31)
1000f608:	48 00 00 84 	b       1000f68c <cgi_interpose_output+0x450>
#endif /* AUTH_FILE */
	case 403: title = err403title; break;
1000f60c:	3d 20 10 03 	lis     r9,4099
1000f610:	81 29 c1 20 	lwz     r9,-16096(r9)
1000f614:	91 3f 00 14 	stw     r9,20(r31)
1000f618:	48 00 00 74 	b       1000f68c <cgi_interpose_output+0x450>
	case 404: title = err404title; break;
1000f61c:	3d 20 10 03 	lis     r9,4099
1000f620:	81 29 c1 24 	lwz     r9,-16092(r9)
1000f624:	91 3f 00 14 	stw     r9,20(r31)
1000f628:	48 00 00 64 	b       1000f68c <cgi_interpose_output+0x450>
	case 408: title = httpd_err408title; break;
1000f62c:	3d 20 10 03 	lis     r9,4099
1000f630:	81 29 d3 40 	lwz     r9,-11456(r9)
1000f634:	91 3f 00 14 	stw     r9,20(r31)
1000f638:	48 00 00 54 	b       1000f68c <cgi_interpose_output+0x450>
	case 451: title = err451title; break;
1000f63c:	3d 20 10 03 	lis     r9,4099
1000f640:	81 29 c1 2c 	lwz     r9,-16084(r9)
1000f644:	91 3f 00 14 	stw     r9,20(r31)
1000f648:	48 00 00 44 	b       1000f68c <cgi_interpose_output+0x450>
	case 500: title = err500title; break;
1000f64c:	3d 20 10 03 	lis     r9,4099
1000f650:	81 29 c1 34 	lwz     r9,-16076(r9)
1000f654:	91 3f 00 14 	stw     r9,20(r31)
1000f658:	48 00 00 34 	b       1000f68c <cgi_interpose_output+0x450>
	case 501: title = err501title; break;
1000f65c:	3d 20 10 03 	lis     r9,4099
1000f660:	81 29 c1 3c 	lwz     r9,-16068(r9)
1000f664:	91 3f 00 14 	stw     r9,20(r31)
1000f668:	48 00 00 24 	b       1000f68c <cgi_interpose_output+0x450>
	case 503: title = httpd_err503title; break;
1000f66c:	3d 20 10 03 	lis     r9,4099
1000f670:	81 29 d3 48 	lwz     r9,-11448(r9)
1000f674:	91 3f 00 14 	stw     r9,20(r31)
1000f678:	48 00 00 14 	b       1000f68c <cgi_interpose_output+0x450>
	default: title = "Something"; break;
1000f67c:	3d 20 10 02 	lis     r9,4098
1000f680:	39 29 aa 60 	addi    r9,r9,-21920
1000f684:	91 3f 00 14 	stw     r9,20(r31)
1000f688:	60 00 00 00 	nop
	}
    (void) my_snprintf( buf, sizeof(buf), "HTTP/1.0 %d %s\015\012", status, title );
1000f68c:	39 3f 00 20 	addi    r9,r31,32
1000f690:	7d 23 4b 78 	mr      r3,r9
1000f694:	38 80 04 00 	li      r4,1024
1000f698:	3d 20 10 02 	lis     r9,4098
1000f69c:	38 a9 aa 6c 	addi    r5,r9,-21908
1000f6a0:	80 df 00 10 	lwz     r6,16(r31)
1000f6a4:	80 ff 00 14 	lwz     r7,20(r31)
1000f6a8:	4c c6 31 82 	crclr   4*cr1+eq
1000f6ac:	48 00 1e a9 	bl      10011554 <my_snprintf>
    (void) httpd_write_fully( hc->conn_fd, buf, strlen( buf ) );
1000f6b0:	81 3f 04 28 	lwz     r9,1064(r31)
1000f6b4:	83 c9 01 c0 	lwz     r30,448(r9)
1000f6b8:	39 3f 00 20 	addi    r9,r31,32
1000f6bc:	7d 23 4b 78 	mr      r3,r9
1000f6c0:	48 01 df 95 	bl      1002d654 <strlen@plt>
1000f6c4:	7c 69 1b 78 	mr      r9,r3
1000f6c8:	39 5f 00 20 	addi    r10,r31,32
1000f6cc:	7f c3 f3 78 	mr      r3,r30
1000f6d0:	7d 44 53 78 	mr      r4,r10
1000f6d4:	7d 25 4b 78 	mr      r5,r9
1000f6d8:	48 00 20 2d 	bl      10011704 <httpd_write_fully>

    /* Write the saved headers. */
    (void) httpd_write_fully( hc->conn_fd, headers, headers_len );
1000f6dc:	81 3f 04 28 	lwz     r9,1064(r31)
1000f6e0:	81 49 01 c0 	lwz     r10,448(r9)
1000f6e4:	81 3f 04 24 	lwz     r9,1060(r31)
1000f6e8:	7d 43 53 78 	mr      r3,r10
1000f6ec:	7d 24 4b 78 	mr      r4,r9
1000f6f0:	80 bf 00 08 	lwz     r5,8(r31)
1000f6f4:	48 00 20 11 	bl      10011704 <httpd_write_fully>

    /* Echo the rest of the output. */
    for (;;)
	{
	r = read( rfd, buf, sizeof(buf) );
1000f6f8:	39 3f 00 20 	addi    r9,r31,32
1000f6fc:	80 7f 04 2c 	lwz     r3,1068(r31)
1000f700:	7d 24 4b 78 	mr      r4,r9
1000f704:	38 a0 04 00 	li      r5,1024
1000f708:	48 01 dc dd 	bl      1002d3e4 <read@plt>
1000f70c:	90 7f 00 18 	stw     r3,24(r31)
	if ( r < 0 && ( errno == EINTR || errno == EAGAIN ) )
1000f710:	81 3f 00 18 	lwz     r9,24(r31)
1000f714:	2f 89 00 00 	cmpwi   cr7,r9,0
1000f718:	40 9c 00 38 	bge     cr7,1000f750 <cgi_interpose_output+0x514>
1000f71c:	48 01 df c1 	bl      1002d6dc <__errno_location@plt>
1000f720:	7c 69 1b 78 	mr      r9,r3
1000f724:	81 29 00 00 	lwz     r9,0(r9)
1000f728:	2f 89 00 04 	cmpwi   cr7,r9,4
1000f72c:	41 9e 00 18 	beq     cr7,1000f744 <cgi_interpose_output+0x508>
1000f730:	48 01 df ad 	bl      1002d6dc <__errno_location@plt>
1000f734:	7c 69 1b 78 	mr      r9,r3
1000f738:	81 29 00 00 	lwz     r9,0(r9)
1000f73c:	2f 89 00 0b 	cmpwi   cr7,r9,11
1000f740:	40 9e 00 10 	bne     cr7,1000f750 <cgi_interpose_output+0x514>
	    {
	    sleep( 1 );
1000f744:	38 60 00 01 	li      r3,1
1000f748:	48 01 dd 55 	bl      1002d49c <sleep@plt>
	    continue;
1000f74c:	48 00 00 48 	b       1000f794 <cgi_interpose_output+0x558>
	    }
	if ( r <= 0 )
1000f750:	81 3f 00 18 	lwz     r9,24(r31)
1000f754:	2f 89 00 00 	cmpwi   cr7,r9,0
1000f758:	41 9d 00 08 	bgt     cr7,1000f760 <cgi_interpose_output+0x524>
	    break;
1000f75c:	48 00 00 3c 	b       1000f798 <cgi_interpose_output+0x55c>
	if ( httpd_write_fully( hc->conn_fd, buf, r ) != r )
1000f760:	81 3f 04 28 	lwz     r9,1064(r31)
1000f764:	81 09 01 c0 	lwz     r8,448(r9)
1000f768:	81 3f 00 18 	lwz     r9,24(r31)
1000f76c:	39 5f 00 20 	addi    r10,r31,32
1000f770:	7d 03 43 78 	mr      r3,r8
1000f774:	7d 44 53 78 	mr      r4,r10
1000f778:	7d 25 4b 78 	mr      r5,r9
1000f77c:	48 00 1f 89 	bl      10011704 <httpd_write_fully>
1000f780:	7c 6a 1b 78 	mr      r10,r3
1000f784:	81 3f 00 18 	lwz     r9,24(r31)
1000f788:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000f78c:	41 9e 00 08 	beq     cr7,1000f794 <cgi_interpose_output+0x558>
	    break;
1000f790:	48 00 00 08 	b       1000f798 <cgi_interpose_output+0x55c>
	}
1000f794:	4b ff ff 64 	b       1000f6f8 <cgi_interpose_output+0x4bc>
    shutdown( hc->conn_fd, SHUT_WR );
1000f798:	81 3f 04 28 	lwz     r9,1064(r31)
1000f79c:	81 29 01 c0 	lwz     r9,448(r9)
1000f7a0:	7d 23 4b 78 	mr      r3,r9
1000f7a4:	38 80 00 01 	li      r4,1
1000f7a8:	48 01 e0 5d 	bl      1002d804 <shutdown@plt>
    }
1000f7ac:	39 7f 04 40 	addi    r11,r31,1088
1000f7b0:	80 0b 00 04 	lwz     r0,4(r11)
1000f7b4:	7c 08 03 a6 	mtlr    r0
1000f7b8:	83 cb ff f8 	lwz     r30,-8(r11)
1000f7bc:	83 eb ff fc 	lwz     r31,-4(r11)
1000f7c0:	7d 61 5b 78 	mr      r1,r11
1000f7c4:	4e 80 00 20 	blr

1000f7c8 <cgi_child>:


/* CGI child process. */
static void
cgi_child( httpd_conn* hc )
    {
1000f7c8:	94 21 fe 80 	stwu    r1,-384(r1)
1000f7cc:	7c 08 02 a6 	mflr    r0
1000f7d0:	90 01 01 84 	stw     r0,388(r1)
1000f7d4:	93 e1 01 7c 	stw     r31,380(r1)
1000f7d8:	7c 3f 0b 78 	mr      r31,r1
1000f7dc:	90 7f 01 68 	stw     r3,360(r31)
    int r;
    char** argp;
    char** envp;
    char* binary;
    char* directory;
    int fidx=0;
1000f7e0:	39 20 00 00 	li      r9,0
1000f7e4:	91 3f 00 14 	stw     r9,20(r31)
    ** *not* inherit the close-on-exec flag, its flag is always clear.
    ** However, Linux messes this up and does copy the flag to the
    ** dup()'d descriptor, so we have to clear it.  This could be
    ** ifdeffed for Linux only.
    */
    (void) fcntl( hc->conn_fd, F_SETFD, 0 );
1000f7e8:	81 3f 01 68 	lwz     r9,360(r31)
1000f7ec:	81 29 01 c0 	lwz     r9,448(r9)
1000f7f0:	7d 23 4b 78 	mr      r3,r9
1000f7f4:	38 80 00 02 	li      r4,2
1000f7f8:	38 a0 00 00 	li      r5,0
1000f7fc:	4c c6 31 82 	crclr   4*cr1+eq
1000f800:	48 01 de 95 	bl      1002d694 <fcntl@plt>
    ** mess with it.  All other open descriptors should be either
    ** the listen socket(s), sockets from accept(), or the file-logging
    ** fd, and all of those are set to close-on-exec, so we don't
    ** have to close anything else.
    */
    closelog();
1000f804:	48 01 de 31 	bl      1002d634 <closelog@plt>
    ** below don't screw things up.  We arbitrarily pick fd 3 - if there
    ** was already something on it, we clobber it, but that doesn't matter
    ** since at this point the only fd of interest is the connection.
    ** All others will be closed on exec.
    */
    if ( hc->conn_fd == STDIN_FILENO || hc->conn_fd == STDOUT_FILENO || hc->conn_fd == STDERR_FILENO )
1000f808:	81 3f 01 68 	lwz     r9,360(r31)
1000f80c:	81 29 01 c0 	lwz     r9,448(r9)
1000f810:	2f 89 00 00 	cmpwi   cr7,r9,0
1000f814:	41 9e 00 24 	beq     cr7,1000f838 <cgi_child+0x70>
1000f818:	81 3f 01 68 	lwz     r9,360(r31)
1000f81c:	81 29 01 c0 	lwz     r9,448(r9)
1000f820:	2f 89 00 01 	cmpwi   cr7,r9,1
1000f824:	41 9e 00 14 	beq     cr7,1000f838 <cgi_child+0x70>
1000f828:	81 3f 01 68 	lwz     r9,360(r31)
1000f82c:	81 29 01 c0 	lwz     r9,448(r9)
1000f830:	2f 89 00 02 	cmpwi   cr7,r9,2
1000f834:	40 9e 00 34 	bne     cr7,1000f868 <cgi_child+0xa0>
	{
	int newfd = dup2( hc->conn_fd, STDERR_FILENO + 1 );
1000f838:	81 3f 01 68 	lwz     r9,360(r31)
1000f83c:	81 29 01 c0 	lwz     r9,448(r9)
1000f840:	7d 23 4b 78 	mr      r3,r9
1000f844:	38 80 00 03 	li      r4,3
1000f848:	48 01 db 85 	bl      1002d3cc <dup2@plt>
1000f84c:	90 7f 00 18 	stw     r3,24(r31)
	if ( newfd >= 0 )
1000f850:	81 3f 00 18 	lwz     r9,24(r31)
1000f854:	2f 89 00 00 	cmpwi   cr7,r9,0
1000f858:	41 9c 00 10 	blt     cr7,1000f868 <cgi_child+0xa0>
	    hc->conn_fd = newfd;
1000f85c:	81 3f 01 68 	lwz     r9,360(r31)
1000f860:	81 5f 00 18 	lwz     r10,24(r31)
1000f864:	91 49 01 c0 	stw     r10,448(r9)
    */
    /* (void) fcntl( hc->conn_fd, F_SETFD, 1 ); */

#ifdef CGI_NICE
    /* Set priority. */
    (void) nice( CGI_NICE );
1000f868:	38 60 ff f6 	li      r3,-10
1000f86c:	48 01 dd 89 	bl      1002d5f4 <nice@plt>
	    }
	}
*/
    /* Default behavior for SIGPIPE. */
#ifdef HAVE_SIGSET
    (void) sigset( SIGPIPE, SIG_DFL );
1000f870:	38 60 00 0d 	li      r3,13
1000f874:	38 80 00 00 	li      r4,0
1000f878:	4c c6 31 82 	crclr   4*cr1+eq
1000f87c:	48 01 db b1 	bl      1002d42c <sigset@plt>
  //  (void) fflush( hc->hs->logfp );
//#endif
  //  }
    //else
    //syslog(LOG_INFO,"The MONTH is %s",hc->query);
    send_mime(hc,200,"","","","application/json;charset=utf-8",(off_t)-1,(time_t)0);
1000f880:	80 7f 01 68 	lwz     r3,360(r31)
1000f884:	38 80 00 c8 	li      r4,200
1000f888:	3d 20 10 02 	lis     r9,4098
1000f88c:	38 a9 8e d4 	addi    r5,r9,-28972
1000f890:	3d 20 10 02 	lis     r9,4098
1000f894:	38 c9 8e d4 	addi    r6,r9,-28972
1000f898:	3d 20 10 02 	lis     r9,4098
1000f89c:	38 e9 8e d4 	addi    r7,r9,-28972
1000f8a0:	3d 20 10 02 	lis     r9,4098
1000f8a4:	39 09 aa 80 	addi    r8,r9,-21888
1000f8a8:	39 20 ff ff 	li      r9,-1
1000f8ac:	39 40 00 00 	li      r10,0
1000f8b0:	4b ff 85 09 	bl      10007db8 <send_mime>
	json_object_set_new(obj,"conn_fd",json_integer(hc->conn_fd));
	json_object_set_new(obj,"rr is",json_integer(rr));
	json_object_set_new(obj,"ccc is",json_integer(c));
	str=json_dumps(obj,JSON_PRESERVE_ORDER);
    add_response(hc,str);*/
	char *instr=NULL,errstr[200];
1000f8b4:	39 20 00 00 	li      r9,0
1000f8b8:	91 3f 00 08 	stw     r9,8(r31)
	json_t *jsonobj;
	json_t *jsonecho;
	json_t *jsonres;
	jsonobj=json_object();
1000f8bc:	48 01 db c1 	bl      1002d47c <json_object@plt>
1000f8c0:	90 7f 00 1c 	stw     r3,28(r31)
	jsonecho=json_object();
1000f8c4:	48 01 db b9 	bl      1002d47c <json_object@plt>
1000f8c8:	90 7f 00 20 	stw     r3,32(r31)
	jsonres=json_object();
1000f8cc:	48 01 db b1 	bl      1002d47c <json_object@plt>
1000f8d0:	90 7f 00 24 	stw     r3,36(r31)
	if((jsonecho==(json_t*)0)||(jsonobj==(json_t *)0)||(jsonres==(json_t*)0))
1000f8d4:	81 3f 00 20 	lwz     r9,32(r31)
1000f8d8:	2f 89 00 00 	cmpwi   cr7,r9,0
1000f8dc:	41 9e 00 1c 	beq     cr7,1000f8f8 <cgi_child+0x130>
1000f8e0:	81 3f 00 1c 	lwz     r9,28(r31)
1000f8e4:	2f 89 00 00 	cmpwi   cr7,r9,0
1000f8e8:	41 9e 00 10 	beq     cr7,1000f8f8 <cgi_child+0x130>
1000f8ec:	81 3f 00 24 	lwz     r9,36(r31)
1000f8f0:	2f 89 00 00 	cmpwi   cr7,r9,0
1000f8f4:	40 9e 00 60 	bne     cr7,1000f954 <cgi_child+0x18c>
	{
		char data[100]="{\"status\":\"ERROR\",\"error\":\"Json init error\"}";
1000f8f8:	3d 20 10 02 	lis     r9,4098
1000f8fc:	39 29 aa f0 	addi    r9,r9,-21776
1000f900:	39 1f 00 f8 	addi    r8,r31,248
1000f904:	7d 2a 4b 78 	mr      r10,r9
1000f908:	39 20 00 2d 	li      r9,45
1000f90c:	7d 03 43 78 	mr      r3,r8
1000f910:	7d 44 53 78 	mr      r4,r10
1000f914:	7d 25 4b 78 	mr      r5,r9
1000f918:	48 01 db 3d 	bl      1002d454 <memcpy@plt>
1000f91c:	39 5f 01 25 	addi    r10,r31,293
1000f920:	39 20 00 37 	li      r9,55
1000f924:	7d 43 53 78 	mr      r3,r10
1000f928:	38 80 00 00 	li      r4,0
1000f92c:	7d 25 4b 78 	mr      r5,r9
1000f930:	48 01 dd 95 	bl      1002d6c4 <memset@plt>
		add_response(hc,data);
1000f934:	39 3f 00 f8 	addi    r9,r31,248
1000f938:	80 7f 01 68 	lwz     r3,360(r31)
1000f93c:	7d 24 4b 78 	mr      r4,r9
1000f940:	4b ff 82 29 	bl      10007b68 <add_response>
    	httpd_write_response( hc );	
1000f944:	80 7f 01 68 	lwz     r3,360(r31)
1000f948:	4b ff 82 cd 	bl      10007c14 <httpd_write_response>
		_exit(0);
1000f94c:	38 60 00 00 	li      r3,0
1000f950:	48 01 da c5 	bl      1002d414 <_exit@plt>
	}
	char *str;
	unsigned char flag=0;
1000f954:	39 20 00 00 	li      r9,0
1000f958:	99 3f 00 0c 	stb     r9,12(r31)
	if(lighandle)
1000f95c:	3d 20 10 03 	lis     r9,4099
1000f960:	81 29 d3 6c 	lwz     r9,-11412(r9)
1000f964:	2f 89 00 00 	cmpwi   cr7,r9,0
1000f968:	41 9e 03 08 	beq     cr7,1000fc70 <cgi_child+0x4a8>
	{
		if(hc->method==1)
1000f96c:	81 3f 01 68 	lwz     r9,360(r31)
1000f970:	81 29 00 9c 	lwz     r9,156(r9)
1000f974:	2f 89 00 01 	cmpwi   cr7,r9,1
1000f978:	40 9e 00 50 	bne     cr7,1000f9c8 <cgi_child+0x200>
		{
			instr=NEW(char,1000);
1000f97c:	38 60 03 e8 	li      r3,1000
1000f980:	48 01 dc 25 	bl      1002d5a4 <malloc@plt>
1000f984:	7c 69 1b 78 	mr      r9,r3
1000f988:	91 3f 00 08 	stw     r9,8(r31)
			strdecode(instr,hc->query);
1000f98c:	81 3f 01 68 	lwz     r9,360(r31)
1000f990:	81 29 00 c8 	lwz     r9,200(r9)
1000f994:	80 7f 00 08 	lwz     r3,8(r31)
1000f998:	7d 24 4b 78 	mr      r4,r9
1000f99c:	4b ff 9d b5 	bl      10009750 <strdecode>
			//json_object_set_new(jsonobj,"mothod",json_string("Get"));
			flag=LiguoWeb_GET_Method(instr,jsonobj,jsonecho,jsonres,errstr);
1000f9a0:	39 3f 00 30 	addi    r9,r31,48
1000f9a4:	80 7f 00 08 	lwz     r3,8(r31)
1000f9a8:	80 9f 00 1c 	lwz     r4,28(r31)
1000f9ac:	80 bf 00 20 	lwz     r5,32(r31)
1000f9b0:	80 df 00 24 	lwz     r6,36(r31)
1000f9b4:	7d 27 4b 78 	mr      r7,r9
1000f9b8:	48 00 58 b5 	bl      1001526c <LiguoWeb_GET_Method>
1000f9bc:	7c 69 1b 78 	mr      r9,r3
1000f9c0:	99 3f 00 0c 	stb     r9,12(r31)
1000f9c4:	48 00 01 c0 	b       1000fb84 <cgi_child+0x3bc>
		}	
		else if(hc->method==3)
1000f9c8:	81 3f 01 68 	lwz     r9,360(r31)
1000f9cc:	81 29 00 9c 	lwz     r9,156(r9)
1000f9d0:	2f 89 00 03 	cmpwi   cr7,r9,3
1000f9d4:	40 9e 01 74 	bne     cr7,1000fb48 <cgi_child+0x380>
		{
			instr=NEW(unsigned char,hc->contentlength+1);
1000f9d8:	81 3f 01 68 	lwz     r9,360(r31)
1000f9dc:	81 29 01 3c 	lwz     r9,316(r9)
1000f9e0:	39 29 00 01 	addi    r9,r9,1
1000f9e4:	7d 23 4b 78 	mr      r3,r9
1000f9e8:	48 01 db bd 	bl      1002d5a4 <malloc@plt>
1000f9ec:	7c 69 1b 78 	mr      r9,r3
1000f9f0:	91 3f 00 08 	stw     r9,8(r31)
			//json_object_set_new(jsonobj,"mothod",json_string("Post"));
			if(instr!=(unsigned char*)0)
1000f9f4:	81 3f 00 08 	lwz     r9,8(r31)
1000f9f8:	2f 89 00 00 	cmpwi   cr7,r9,0
1000f9fc:	41 9e 01 88 	beq     cr7,1000fb84 <cgi_child+0x3bc>
			{
				size_t num=0;
1000fa00:	39 20 00 00 	li      r9,0
1000fa04:	91 3f 00 10 	stw     r9,16(r31)
				ssize_t rrr=0;
1000fa08:	39 20 00 00 	li      r9,0
1000fa0c:	91 3f 00 28 	stw     r9,40(r31)
				num=hc->read_idx-hc->checked_idx;
1000fa10:	81 3f 01 68 	lwz     r9,360(r31)
1000fa14:	81 49 00 90 	lwz     r10,144(r9)
1000fa18:	81 3f 01 68 	lwz     r9,360(r31)
1000fa1c:	81 29 00 94 	lwz     r9,148(r9)
1000fa20:	7d 29 50 50 	subf    r9,r9,r10
1000fa24:	91 3f 00 10 	stw     r9,16(r31)
				memcpy(instr,&hc->read_buf[hc->checked_idx],num);
1000fa28:	81 3f 01 68 	lwz     r9,360(r31)
1000fa2c:	81 49 00 88 	lwz     r10,136(r9)
1000fa30:	81 3f 01 68 	lwz     r9,360(r31)
1000fa34:	81 29 00 94 	lwz     r9,148(r9)
1000fa38:	7d 2a 4a 14 	add     r9,r10,r9
1000fa3c:	80 7f 00 08 	lwz     r3,8(r31)
1000fa40:	7d 24 4b 78 	mr      r4,r9
1000fa44:	80 bf 00 10 	lwz     r5,16(r31)
1000fa48:	48 01 da 0d 	bl      1002d454 <memcpy@plt>
			
				while(num<hc->contentlength)
1000fa4c:	48 00 00 a8 	b       1000faf4 <cgi_child+0x32c>
				{
					rrr=read(hc->conn_fd,&instr[num],MIN(1024,hc->contentlength-num));
1000fa50:	81 3f 01 68 	lwz     r9,360(r31)
1000fa54:	81 09 01 c0 	lwz     r8,448(r9)
1000fa58:	81 5f 00 08 	lwz     r10,8(r31)
1000fa5c:	81 3f 00 10 	lwz     r9,16(r31)
1000fa60:	7d 4a 4a 14 	add     r10,r10,r9
1000fa64:	81 3f 01 68 	lwz     r9,360(r31)
1000fa68:	80 e9 01 3c 	lwz     r7,316(r9)
1000fa6c:	81 3f 00 10 	lwz     r9,16(r31)
1000fa70:	7d 29 38 50 	subf    r9,r9,r7
1000fa74:	2b 89 04 00 	cmplwi  cr7,r9,1024
1000fa78:	40 9d 00 08 	ble     cr7,1000fa80 <cgi_child+0x2b8>
1000fa7c:	39 20 04 00 	li      r9,1024
1000fa80:	7d 03 43 78 	mr      r3,r8
1000fa84:	7d 44 53 78 	mr      r4,r10
1000fa88:	7d 25 4b 78 	mr      r5,r9
1000fa8c:	48 01 d9 59 	bl      1002d3e4 <read@plt>
1000fa90:	90 7f 00 28 	stw     r3,40(r31)
					if(rrr<0||(errno==EINTR||errno==EAGAIN))
1000fa94:	81 3f 00 28 	lwz     r9,40(r31)
1000fa98:	2f 89 00 00 	cmpwi   cr7,r9,0
1000fa9c:	41 9c 00 2c 	blt     cr7,1000fac8 <cgi_child+0x300>
1000faa0:	48 01 dc 3d 	bl      1002d6dc <__errno_location@plt>
1000faa4:	7c 69 1b 78 	mr      r9,r3
1000faa8:	81 29 00 00 	lwz     r9,0(r9)
1000faac:	2f 89 00 04 	cmpwi   cr7,r9,4
1000fab0:	41 9e 00 18 	beq     cr7,1000fac8 <cgi_child+0x300>
1000fab4:	48 01 dc 29 	bl      1002d6dc <__errno_location@plt>
1000fab8:	7c 69 1b 78 	mr      r9,r3
1000fabc:	81 29 00 00 	lwz     r9,0(r9)
1000fac0:	2f 89 00 0b 	cmpwi   cr7,r9,11
1000fac4:	40 9e 00 10 	bne     cr7,1000fad4 <cgi_child+0x30c>
					{
						sleep(1);
1000fac8:	38 60 00 01 	li      r3,1
1000facc:	48 01 d9 d1 	bl      1002d49c <sleep@plt>
             			continue;
1000fad0:	48 00 00 24 	b       1000faf4 <cgi_child+0x32c>
					}
					if(rrr<=0)
1000fad4:	81 3f 00 28 	lwz     r9,40(r31)
1000fad8:	2f 89 00 00 	cmpwi   cr7,r9,0
1000fadc:	41 9d 00 08 	bgt     cr7,1000fae4 <cgi_child+0x31c>
					{
						break;
1000fae0:	48 00 00 28 	b       1000fb08 <cgi_child+0x340>
					}
					num+=rrr;
1000fae4:	81 3f 00 28 	lwz     r9,40(r31)
1000fae8:	81 5f 00 10 	lwz     r10,16(r31)
1000faec:	7d 2a 4a 14 	add     r9,r10,r9
1000faf0:	91 3f 00 10 	stw     r9,16(r31)
				size_t num=0;
				ssize_t rrr=0;
				num=hc->read_idx-hc->checked_idx;
				memcpy(instr,&hc->read_buf[hc->checked_idx],num);
			
				while(num<hc->contentlength)
1000faf4:	81 3f 01 68 	lwz     r9,360(r31)
1000faf8:	81 49 01 3c 	lwz     r10,316(r9)
1000fafc:	81 3f 00 10 	lwz     r9,16(r31)
1000fb00:	7f 8a 48 40 	cmplw   cr7,r10,r9
1000fb04:	41 9d ff 4c 	bgt     cr7,1000fa50 <cgi_child+0x288>
					{
						break;
					}
					num+=rrr;
				}
				instr[hc->contentlength]='\0';
1000fb08:	81 3f 01 68 	lwz     r9,360(r31)
1000fb0c:	81 29 01 3c 	lwz     r9,316(r9)
1000fb10:	81 5f 00 08 	lwz     r10,8(r31)
1000fb14:	7d 2a 4a 14 	add     r9,r10,r9
1000fb18:	39 40 00 00 	li      r10,0
1000fb1c:	99 49 00 00 	stb     r10,0(r9)
				flag=LiguoWeb_POST_Method(instr,jsonobj,jsonecho,jsonres,errstr);
1000fb20:	39 3f 00 30 	addi    r9,r31,48
1000fb24:	80 7f 00 08 	lwz     r3,8(r31)
1000fb28:	80 9f 00 1c 	lwz     r4,28(r31)
1000fb2c:	80 bf 00 20 	lwz     r5,32(r31)
1000fb30:	80 df 00 24 	lwz     r6,36(r31)
1000fb34:	7d 27 4b 78 	mr      r7,r9
1000fb38:	48 00 58 11 	bl      10015348 <LiguoWeb_POST_Method>
1000fb3c:	7c 69 1b 78 	mr      r9,r3
1000fb40:	99 3f 00 0c 	stb     r9,12(r31)
1000fb44:	48 00 00 40 	b       1000fb84 <cgi_child+0x3bc>
			}
		}
		else
		{
			instr=NEW(char,5);
1000fb48:	38 60 00 05 	li      r3,5
1000fb4c:	48 01 da 59 	bl      1002d5a4 <malloc@plt>
1000fb50:	7c 69 1b 78 	mr      r9,r3
1000fb54:	91 3f 00 08 	stw     r9,8(r31)
			strcpy(errstr,"Error of Method");
1000fb58:	39 3f 00 30 	addi    r9,r31,48
1000fb5c:	3d 40 10 02 	lis     r10,4098
1000fb60:	39 4a aa a0 	addi    r10,r10,-21856
1000fb64:	80 ca 00 00 	lwz     r6,0(r10)
1000fb68:	80 ea 00 04 	lwz     r7,4(r10)
1000fb6c:	81 0a 00 08 	lwz     r8,8(r10)
1000fb70:	81 4a 00 0c 	lwz     r10,12(r10)
1000fb74:	90 c9 00 00 	stw     r6,0(r9)
1000fb78:	90 e9 00 04 	stw     r7,4(r9)
1000fb7c:	91 09 00 08 	stw     r8,8(r9)
1000fb80:	91 49 00 0c 	stw     r10,12(r9)
			//json_object_set_new(jsonobj,"mothod",json_string("unknow"));
		}	
		if(!instr)
1000fb84:	81 3f 00 08 	lwz     r9,8(r31)
1000fb88:	2f 89 00 00 	cmpwi   cr7,r9,0
1000fb8c:	40 9e 00 4c 	bne     cr7,1000fbd8 <cgi_child+0x410>
		{
			json_object_set_new(jsonobj,"status",json_string("ERROR"));
1000fb90:	3d 20 10 02 	lis     r9,4098
1000fb94:	38 69 aa b0 	addi    r3,r9,-21840
1000fb98:	48 01 da 55 	bl      1002d5ec <json_string@plt>
1000fb9c:	7c 69 1b 78 	mr      r9,r3
1000fba0:	80 7f 00 1c 	lwz     r3,28(r31)
1000fba4:	3d 40 10 02 	lis     r10,4098
1000fba8:	38 8a aa b8 	addi    r4,r10,-21832
1000fbac:	7d 25 4b 78 	mr      r5,r9
1000fbb0:	48 01 da 2d 	bl      1002d5dc <json_object_set_new@plt>
			json_object_set_new(jsonobj,"error",json_string("malloc fail"));
1000fbb4:	3d 20 10 02 	lis     r9,4098
1000fbb8:	38 69 aa c0 	addi    r3,r9,-21824
1000fbbc:	48 01 da 31 	bl      1002d5ec <json_string@plt>
1000fbc0:	7c 69 1b 78 	mr      r9,r3
1000fbc4:	80 7f 00 1c 	lwz     r3,28(r31)
1000fbc8:	3d 40 10 02 	lis     r10,4098
1000fbcc:	38 8a aa cc 	addi    r4,r10,-21812
1000fbd0:	7d 25 4b 78 	mr      r5,r9
1000fbd4:	48 01 da 09 	bl      1002d5dc <json_object_set_new@plt>
		}
		if(flag)
1000fbd8:	89 3f 00 0c 	lbz     r9,12(r31)
1000fbdc:	55 29 06 3e 	clrlwi  r9,r9,24
1000fbe0:	2f 89 00 00 	cmpwi   cr7,r9,0
1000fbe4:	41 9e 00 2c 	beq     cr7,1000fc10 <cgi_child+0x448>
		{
			json_object_set_new(jsonobj,"status",json_string("SUCCESS"));
1000fbe8:	3d 20 10 02 	lis     r9,4098
1000fbec:	38 69 aa d4 	addi    r3,r9,-21804
1000fbf0:	48 01 d9 fd 	bl      1002d5ec <json_string@plt>
1000fbf4:	7c 69 1b 78 	mr      r9,r3
1000fbf8:	80 7f 00 1c 	lwz     r3,28(r31)
1000fbfc:	3d 40 10 02 	lis     r10,4098
1000fc00:	38 8a aa b8 	addi    r4,r10,-21832
1000fc04:	7d 25 4b 78 	mr      r5,r9
1000fc08:	48 01 d9 d5 	bl      1002d5dc <json_object_set_new@plt>
1000fc0c:	48 00 00 4c 	b       1000fc58 <cgi_child+0x490>
			//json_object_set_new(jsonobj,"data",json_string(outstr));
		}
		else
		{
			json_object_set_new(jsonobj,"status",json_string("ERROR"));
1000fc10:	3d 20 10 02 	lis     r9,4098
1000fc14:	38 69 aa b0 	addi    r3,r9,-21840
1000fc18:	48 01 d9 d5 	bl      1002d5ec <json_string@plt>
1000fc1c:	7c 69 1b 78 	mr      r9,r3
1000fc20:	80 7f 00 1c 	lwz     r3,28(r31)
1000fc24:	3d 40 10 02 	lis     r10,4098
1000fc28:	38 8a aa b8 	addi    r4,r10,-21832
1000fc2c:	7d 25 4b 78 	mr      r5,r9
1000fc30:	48 01 d9 ad 	bl      1002d5dc <json_object_set_new@plt>
			json_object_set_new(jsonobj,"error",json_string(errstr));
1000fc34:	39 3f 00 30 	addi    r9,r31,48
1000fc38:	7d 23 4b 78 	mr      r3,r9
1000fc3c:	48 01 d9 b1 	bl      1002d5ec <json_string@plt>
1000fc40:	7c 69 1b 78 	mr      r9,r3
1000fc44:	80 7f 00 1c 	lwz     r3,28(r31)
1000fc48:	3d 40 10 02 	lis     r10,4098
1000fc4c:	38 8a aa cc 	addi    r4,r10,-21812
1000fc50:	7d 25 4b 78 	mr      r5,r9
1000fc54:	48 01 d9 89 	bl      1002d5dc <json_object_set_new@plt>
		}
		//str=json_dumps(jsonobj,JSON_PRESERVE_ORDER);
		//add_response(hc,str);
    	//httpd_write_response( hc );
		if(instr)
1000fc58:	81 3f 00 08 	lwz     r9,8(r31)
1000fc5c:	2f 89 00 00 	cmpwi   cr7,r9,0
1000fc60:	41 9e 00 58 	beq     cr7,1000fcb8 <cgi_child+0x4f0>
		{
			free(instr);
1000fc64:	80 7f 00 08 	lwz     r3,8(r31)
1000fc68:	48 01 d7 cd 	bl      1002d434 <free@plt>
1000fc6c:	48 00 00 4c 	b       1000fcb8 <cgi_child+0x4f0>
		}
	}
	else
	{
		json_object_set_new(jsonobj,"status",json_string("ERROR"));
1000fc70:	3d 20 10 02 	lis     r9,4098
1000fc74:	38 69 aa b0 	addi    r3,r9,-21840
1000fc78:	48 01 d9 75 	bl      1002d5ec <json_string@plt>
1000fc7c:	7c 69 1b 78 	mr      r9,r3
1000fc80:	80 7f 00 1c 	lwz     r3,28(r31)
1000fc84:	3d 40 10 02 	lis     r10,4098
1000fc88:	38 8a aa b8 	addi    r4,r10,-21832
1000fc8c:	7d 25 4b 78 	mr      r5,r9
1000fc90:	48 01 d9 4d 	bl      1002d5dc <json_object_set_new@plt>
		json_object_set_new(jsonobj,"error",json_string("Device Init failed"));
1000fc94:	3d 20 10 02 	lis     r9,4098
1000fc98:	38 69 aa dc 	addi    r3,r9,-21796
1000fc9c:	48 01 d9 51 	bl      1002d5ec <json_string@plt>
1000fca0:	7c 69 1b 78 	mr      r9,r3
1000fca4:	80 7f 00 1c 	lwz     r3,28(r31)
1000fca8:	3d 40 10 02 	lis     r10,4098
1000fcac:	38 8a aa cc 	addi    r4,r10,-21812
1000fcb0:	7d 25 4b 78 	mr      r5,r9
1000fcb4:	48 01 d9 29 	bl      1002d5dc <json_object_set_new@plt>
	}
	str=json_dumps(jsonobj,JSON_PRESERVE_ORDER);
1000fcb8:	80 7f 00 1c 	lwz     r3,28(r31)
1000fcbc:	38 80 01 00 	li      r4,256
1000fcc0:	48 01 da f5 	bl      1002d7b4 <json_dumps@plt>
1000fcc4:	90 7f 00 2c 	stw     r3,44(r31)
    add_response(hc,str);
1000fcc8:	80 7f 01 68 	lwz     r3,360(r31)
1000fccc:	80 9f 00 2c 	lwz     r4,44(r31)
1000fcd0:	4b ff 7e 99 	bl      10007b68 <add_response>
    httpd_write_response( hc );
1000fcd4:	80 7f 01 68 	lwz     r3,360(r31)
1000fcd8:	4b ff 7f 3d 	bl      10007c14 <httpd_write_response>
	json_decref(jsonobj);
1000fcdc:	80 7f 00 1c 	lwz     r3,28(r31)
1000fce0:	4b ff 73 d9 	bl      100070b8 <json_decref>
	json_decref(jsonecho);
1000fce4:	80 7f 00 20 	lwz     r3,32(r31)
1000fce8:	4b ff 73 d1 	bl      100070b8 <json_decref>
	json_decref(jsonres);
1000fcec:	80 7f 00 24 	lwz     r3,36(r31)
1000fcf0:	4b ff 73 c9 	bl      100070b8 <json_decref>
	free(str);
1000fcf4:	80 7f 00 2c 	lwz     r3,44(r31)
1000fcf8:	48 01 d7 3d 	bl      1002d434 <free@plt>
	if(str!=NULL)
1000fcfc:	81 3f 00 2c 	lwz     r9,44(r31)
1000fd00:	2f 89 00 00 	cmpwi   cr7,r9,0
1000fd04:	41 9e 00 0c 	beq     cr7,1000fd10 <cgi_child+0x548>
	{
		str=NULL;
1000fd08:	39 20 00 00 	li      r9,0
1000fd0c:	91 3f 00 2c 	stw     r9,44(r31)
	}
    _exit( 0 );
1000fd10:	38 60 00 00 	li      r3,0
1000fd14:	48 01 d7 01 	bl      1002d414 <_exit@plt>

1000fd18 <cgi>:
}


static int
cgi( httpd_conn* hc )
    {
1000fd18:	94 21 ff d0 	stwu    r1,-48(r1)
1000fd1c:	7c 08 02 a6 	mflr    r0
1000fd20:	90 01 00 34 	stw     r0,52(r1)
1000fd24:	93 e1 00 2c 	stw     r31,44(r1)
1000fd28:	7c 3f 0b 78 	mr      r31,r1
1000fd2c:	90 7f 00 18 	stw     r3,24(r31)
    int r;
    ClientData client_data;

    if ( hc->hs->cgi_limit != 0 && hc->hs->cgi_count >= hc->hs->cgi_limit )
1000fd30:	81 3f 00 18 	lwz     r9,24(r31)
1000fd34:	81 29 00 04 	lwz     r9,4(r9)
1000fd38:	81 29 00 10 	lwz     r9,16(r9)
1000fd3c:	2f 89 00 00 	cmpwi   cr7,r9,0
1000fd40:	41 9e 00 64 	beq     cr7,1000fda4 <cgi+0x8c>
1000fd44:	81 3f 00 18 	lwz     r9,24(r31)
1000fd48:	81 29 00 04 	lwz     r9,4(r9)
1000fd4c:	81 49 00 14 	lwz     r10,20(r9)
1000fd50:	81 3f 00 18 	lwz     r9,24(r31)
1000fd54:	81 29 00 04 	lwz     r9,4(r9)
1000fd58:	81 29 00 10 	lwz     r9,16(r9)
1000fd5c:	7f 8a 48 00 	cmpw    cr7,r10,r9
1000fd60:	41 9c 00 44 	blt     cr7,1000fda4 <cgi+0x8c>
	{
	httpd_send_err(
1000fd64:	3d 20 10 03 	lis     r9,4099
1000fd68:	81 09 d3 48 	lwz     r8,-11448(r9)
1000fd6c:	3d 20 10 03 	lis     r9,4099
1000fd70:	81 49 d3 4c 	lwz     r10,-11444(r9)
1000fd74:	81 3f 00 18 	lwz     r9,24(r31)
1000fd78:	81 29 00 ac 	lwz     r9,172(r9)
1000fd7c:	80 7f 00 18 	lwz     r3,24(r31)
1000fd80:	38 80 01 f7 	li      r4,503
1000fd84:	7d 05 43 78 	mr      r5,r8
1000fd88:	3d 00 10 02 	lis     r8,4098
1000fd8c:	38 c8 8e d4 	addi    r6,r8,-28972
1000fd90:	7d 47 53 78 	mr      r7,r10
1000fd94:	7d 28 4b 78 	mr      r8,r9
1000fd98:	4b ff 8a 5d 	bl      100087f4 <httpd_send_err>
	    hc, 503, httpd_err503title, "", httpd_err503form,
	    hc->encodedurl );
	return -1;
1000fd9c:	39 20 ff ff 	li      r9,-1
1000fda0:	48 00 01 40 	b       1000fee0 <cgi+0x1c8>
	}
    ++hc->hs->cgi_count;
1000fda4:	81 3f 00 18 	lwz     r9,24(r31)
1000fda8:	81 29 00 04 	lwz     r9,4(r9)
1000fdac:	81 49 00 14 	lwz     r10,20(r9)
1000fdb0:	39 4a 00 01 	addi    r10,r10,1
1000fdb4:	91 49 00 14 	stw     r10,20(r9)
    httpd_clear_ndelay( hc->conn_fd );
1000fdb8:	81 3f 00 18 	lwz     r9,24(r31)
1000fdbc:	81 29 01 c0 	lwz     r9,448(r9)
1000fdc0:	7d 23 4b 78 	mr      r3,r9
1000fdc4:	4b ff 7f 6d 	bl      10007d30 <httpd_clear_ndelay>
    r = fork( );
1000fdc8:	48 01 d9 7d 	bl      1002d744 <fork@plt>
1000fdcc:	90 7f 00 08 	stw     r3,8(r31)
    if ( r < 0 )
1000fdd0:	81 3f 00 08 	lwz     r9,8(r31)
1000fdd4:	2f 89 00 00 	cmpwi   cr7,r9,0
1000fdd8:	40 9c 00 58 	bge     cr7,1000fe30 <cgi+0x118>
	{
	syslog( LOG_ERR, "fork - %m" );
1000fddc:	38 60 00 03 	li      r3,3
1000fde0:	3d 20 10 02 	lis     r9,4098
1000fde4:	38 89 a5 5c 	addi    r4,r9,-23204
1000fde8:	4c c6 31 82 	crclr   4*cr1+eq
1000fdec:	48 01 d9 99 	bl      1002d784 <syslog@plt>
	httpd_send_err(
1000fdf0:	3d 20 10 03 	lis     r9,4099
1000fdf4:	81 09 c1 34 	lwz     r8,-16076(r9)
1000fdf8:	3d 20 10 03 	lis     r9,4099
1000fdfc:	81 49 c1 38 	lwz     r10,-16072(r9)
1000fe00:	81 3f 00 18 	lwz     r9,24(r31)
1000fe04:	81 29 00 ac 	lwz     r9,172(r9)
1000fe08:	80 7f 00 18 	lwz     r3,24(r31)
1000fe0c:	38 80 01 f4 	li      r4,500
1000fe10:	7d 05 43 78 	mr      r5,r8
1000fe14:	3d 00 10 02 	lis     r8,4098
1000fe18:	38 c8 8e d4 	addi    r6,r8,-28972
1000fe1c:	7d 47 53 78 	mr      r7,r10
1000fe20:	7d 28 4b 78 	mr      r8,r9
1000fe24:	4b ff 89 d1 	bl      100087f4 <httpd_send_err>
	    hc, 500, err500title, "", err500form, hc->encodedurl );
	return -1;
1000fe28:	39 20 ff ff 	li      r9,-1
1000fe2c:	48 00 00 b4 	b       1000fee0 <cgi+0x1c8>
	}
    if ( r == 0 )
1000fe30:	81 3f 00 08 	lwz     r9,8(r31)
1000fe34:	2f 89 00 00 	cmpwi   cr7,r9,0
1000fe38:	40 9e 00 28 	bne     cr7,1000fe60 <cgi+0x148>
	{

	sub_process = 1;
1000fe3c:	3d 20 10 03 	lis     r9,4099
1000fe40:	39 40 00 01 	li      r10,1
1000fe44:	91 49 db 28 	stw     r10,-9432(r9)
	httpd_unlisten( hc->hs );
1000fe48:	81 3f 00 18 	lwz     r9,24(r31)
1000fe4c:	81 29 00 04 	lwz     r9,4(r9)
1000fe50:	7d 23 4b 78 	mr      r3,r9
1000fe54:	4b ff 7c 85 	bl      10007ad8 <httpd_unlisten>
	cgi_child( hc );
1000fe58:	80 7f 00 18 	lwz     r3,24(r31)
1000fe5c:	4b ff f9 6d 	bl      1000f7c8 <cgi_child>
	//cgi_child(hc);
    /* Parent process. */
    //syslog( LOG_DEBUG, "spawned CGI process %d for file '%.200s'", r, hc->expnfilename );
#ifdef CGI_TIMELIMIT
    /* Schedule a kill for the child process, in case it runs too long */
    client_data.i = r;
1000fe60:	81 3f 00 08 	lwz     r9,8(r31)
1000fe64:	91 3f 00 0c 	stw     r9,12(r31)
    if ( tmr_create( (struct timeval*) 0, cgi_kill, client_data, CGI_TIMELIMIT * 1000L, 0 ) == (Timer*) 0 )
1000fe68:	81 3f 00 0c 	lwz     r9,12(r31)
1000fe6c:	91 3f 00 1c 	stw     r9,28(r31)
1000fe70:	39 3f 00 1c 	addi    r9,r31,28
1000fe74:	38 60 00 00 	li      r3,0
1000fe78:	3d 40 10 01 	lis     r10,4097
1000fe7c:	38 8a d4 24 	addi    r4,r10,-11228
1000fe80:	7d 25 4b 78 	mr      r5,r9
1000fe84:	38 c0 75 30 	li      r6,30000
1000fe88:	38 e0 00 00 	li      r7,0
1000fe8c:	48 00 3a a9 	bl      10013934 <tmr_create>
1000fe90:	7c 69 1b 78 	mr      r9,r3
1000fe94:	2f 89 00 00 	cmpwi   cr7,r9,0
1000fe98:	40 9e 00 20 	bne     cr7,1000feb8 <cgi+0x1a0>
	{
	syslog( LOG_CRIT, "tmr_create(cgi_kill child) failed" );
1000fe9c:	38 60 00 02 	li      r3,2
1000fea0:	3d 20 10 02 	lis     r9,4098
1000fea4:	38 89 ab 54 	addi    r4,r9,-21676
1000fea8:	4c c6 31 82 	crclr   4*cr1+eq
1000feac:	48 01 d8 d9 	bl      1002d784 <syslog@plt>
	exit( 1 );
1000feb0:	38 60 00 01 	li      r3,1
1000feb4:	48 01 d7 21 	bl      1002d5d4 <exit@plt>
	}
#endif /* CGI_TIMELIMIT */
    hc->status = 200;
1000feb8:	81 3f 00 18 	lwz     r9,24(r31)
1000febc:	39 40 00 c8 	li      r10,200
1000fec0:	91 49 00 a0 	stw     r10,160(r9)
    hc->bytes_sent = CGI_BYTECOUNT;
1000fec4:	81 3f 00 18 	lwz     r9,24(r31)
1000fec8:	39 40 61 a8 	li      r10,25000
1000fecc:	91 49 00 a8 	stw     r10,168(r9)
    hc->should_linger = 0;
1000fed0:	81 3f 00 18 	lwz     r9,24(r31)
1000fed4:	39 40 00 00 	li      r10,0
1000fed8:	91 49 01 64 	stw     r10,356(r9)

    return 0;
1000fedc:	39 20 00 00 	li      r9,0
    }
1000fee0:	7d 23 4b 78 	mr      r3,r9
1000fee4:	39 7f 00 30 	addi    r11,r31,48
1000fee8:	80 0b 00 04 	lwz     r0,4(r11)
1000feec:	7c 08 03 a6 	mtlr    r0
1000fef0:	83 eb ff fc 	lwz     r31,-4(r11)
1000fef4:	7d 61 5b 78 	mr      r1,r11
1000fef8:	4e 80 00 20 	blr

1000fefc <really_start_request>:


static int
really_start_request( httpd_conn* hc, struct timeval* nowP )
    {
1000fefc:	94 21 ff c0 	stwu    r1,-64(r1)
1000ff00:	7c 08 02 a6 	mflr    r0
1000ff04:	90 01 00 44 	stw     r0,68(r1)
1000ff08:	93 a1 00 34 	stw     r29,52(r1)
1000ff0c:	93 c1 00 38 	stw     r30,56(r1)
1000ff10:	93 e1 00 3c 	stw     r31,60(r1)
1000ff14:	7c 3f 0b 78 	mr      r31,r1
1000ff18:	90 7f 00 28 	stw     r3,40(r31)
1000ff1c:	90 9f 00 2c 	stw     r4,44(r31)
#endif /* AUTH_FILE */
    size_t expnlen, indxlen;
    char* cp;
    char* pi;

    expnlen = strlen( hc->expnfilename );
1000ff20:	81 3f 00 28 	lwz     r9,40(r31)
1000ff24:	81 29 00 bc 	lwz     r9,188(r9)
1000ff28:	7d 23 4b 78 	mr      r3,r9
1000ff2c:	48 01 d7 29 	bl      1002d654 <strlen@plt>
1000ff30:	90 7f 00 0c 	stw     r3,12(r31)

    /* Stat the file. */
    if ( stat( hc->expnfilename, &hc->sb ) < 0 )
1000ff34:	81 3f 00 28 	lwz     r9,40(r31)
1000ff38:	81 49 00 bc 	lwz     r10,188(r9)
1000ff3c:	81 3f 00 28 	lwz     r9,40(r31)
1000ff40:	39 29 01 68 	addi    r9,r9,360
1000ff44:	7d 43 53 78 	mr      r3,r10
1000ff48:	7d 24 4b 78 	mr      r4,r9
1000ff4c:	48 00 7c a9 	bl      10017bf4 <__stat>
1000ff50:	7c 69 1b 78 	mr      r9,r3
1000ff54:	2f 89 00 00 	cmpwi   cr7,r9,0
1000ff58:	40 9c 00 44 	bge     cr7,1000ff9c <really_start_request+0xa0>
	{
	httpd_send_err( hc, 500, err500title, "", err500form, hc->encodedurl );
1000ff5c:	3d 20 10 03 	lis     r9,4099
1000ff60:	81 09 c1 34 	lwz     r8,-16076(r9)
1000ff64:	3d 20 10 03 	lis     r9,4099
1000ff68:	81 49 c1 38 	lwz     r10,-16072(r9)
1000ff6c:	81 3f 00 28 	lwz     r9,40(r31)
1000ff70:	81 29 00 ac 	lwz     r9,172(r9)
1000ff74:	80 7f 00 28 	lwz     r3,40(r31)
1000ff78:	38 80 01 f4 	li      r4,500
1000ff7c:	7d 05 43 78 	mr      r5,r8
1000ff80:	3d 00 10 02 	lis     r8,4098
1000ff84:	38 c8 8e d4 	addi    r6,r8,-28972
1000ff88:	7d 47 53 78 	mr      r7,r10
1000ff8c:	7d 28 4b 78 	mr      r8,r9
1000ff90:	4b ff 88 65 	bl      100087f4 <httpd_send_err>
	return -1;
1000ff94:	39 20 ff ff 	li      r9,-1
1000ff98:	48 00 0b 38 	b       10010ad0 <really_start_request+0xbd4>
    /* Is it world-readable or world-executable?  We check explicitly instead
    ** of just trying to open it, so that no one ever gets surprised by
    ** a file that's not set world-readable and yet somehow is
    ** readable by the HTTP server and therefore the *whole* world.
    */
    if ( ! ( hc->sb.st_mode & ( S_IROTH | S_IXOTH ) ) )
1000ff9c:	81 3f 00 28 	lwz     r9,40(r31)
1000ffa0:	81 29 01 78 	lwz     r9,376(r9)
1000ffa4:	71 29 00 05 	andi.   r9,r9,5
1000ffa8:	2f 89 00 00 	cmpwi   cr7,r9,0
1000ffac:	40 9e 00 78 	bne     cr7,10010024 <really_start_request+0x128>
	{
	syslog(
1000ffb0:	81 3f 00 28 	lwz     r9,40(r31)
1000ffb4:	39 29 00 08 	addi    r9,r9,8
1000ffb8:	7d 23 4b 78 	mr      r3,r9
1000ffbc:	48 00 13 91 	bl      1001134c <httpd_ntoa>
1000ffc0:	7c 6a 1b 78 	mr      r10,r3
1000ffc4:	81 3f 00 28 	lwz     r9,40(r31)
1000ffc8:	81 29 00 ac 	lwz     r9,172(r9)
1000ffcc:	38 60 00 06 	li      r3,6
1000ffd0:	3d 00 10 02 	lis     r8,4098
1000ffd4:	38 88 ab 78 	addi    r4,r8,-21640
1000ffd8:	7d 45 53 78 	mr      r5,r10
1000ffdc:	7d 26 4b 78 	mr      r6,r9
1000ffe0:	4c c6 31 82 	crclr   4*cr1+eq
1000ffe4:	48 01 d7 a1 	bl      1002d784 <syslog@plt>
	    LOG_INFO,
	    "%.80s URL \"%.80s\" resolves to a non world-readable file",
	    httpd_ntoa( &hc->client_addr ), hc->encodedurl );
	httpd_send_err(
1000ffe8:	3d 20 10 03 	lis     r9,4099
1000ffec:	81 49 c1 20 	lwz     r10,-16096(r9)
1000fff0:	81 3f 00 28 	lwz     r9,40(r31)
1000fff4:	81 29 00 ac 	lwz     r9,172(r9)
1000fff8:	80 7f 00 28 	lwz     r3,40(r31)
1000fffc:	38 80 01 93 	li      r4,403
10010000:	7d 45 53 78 	mr      r5,r10
10010004:	3d 40 10 02 	lis     r10,4098
10010008:	38 ca 8e d4 	addi    r6,r10,-28972
1001000c:	3d 40 10 02 	lis     r10,4098
10010010:	38 ea ab b0 	addi    r7,r10,-21584
10010014:	7d 28 4b 78 	mr      r8,r9
10010018:	4b ff 87 dd 	bl      100087f4 <httpd_send_err>
	    hc, 403, err403title, "",
	    ERROR_FORM( err403form, "The requested URL '%.80s' resolves to a file that is not world-readable.\n" ),
	    hc->encodedurl );
	return -1;
1001001c:	39 20 ff ff 	li      r9,-1
10010020:	48 00 0a b0 	b       10010ad0 <really_start_request+0xbd4>
	}

    /* Is it a directory? */
    if ( S_ISDIR(hc->sb.st_mode) )
10010024:	81 3f 00 28 	lwz     r9,40(r31)
10010028:	81 29 01 78 	lwz     r9,376(r9)
1001002c:	55 29 04 26 	rlwinm  r9,r9,0,16,19
10010030:	2b 89 40 00 	cmplwi  cr7,r9,16384
10010034:	40 9e 04 98 	bne     cr7,100104cc <really_start_request+0x5d0>
	{
	/* If there's pathinfo, it's just a non-existent file. */
	if ( hc->pathinfo[0] != '\0' )
10010038:	81 3f 00 28 	lwz     r9,40(r31)
1001003c:	81 29 00 c4 	lwz     r9,196(r9)
10010040:	89 29 00 00 	lbz     r9,0(r9)
10010044:	55 29 06 3e 	clrlwi  r9,r9,24
10010048:	2f 89 00 00 	cmpwi   cr7,r9,0
1001004c:	41 9e 00 44 	beq     cr7,10010090 <really_start_request+0x194>
	    {
	    httpd_send_err( hc, 404, err404title, "", err404form, hc->encodedurl );
10010050:	3d 20 10 03 	lis     r9,4099
10010054:	81 09 c1 24 	lwz     r8,-16092(r9)
10010058:	3d 20 10 03 	lis     r9,4099
1001005c:	81 49 c1 28 	lwz     r10,-16088(r9)
10010060:	81 3f 00 28 	lwz     r9,40(r31)
10010064:	81 29 00 ac 	lwz     r9,172(r9)
10010068:	80 7f 00 28 	lwz     r3,40(r31)
1001006c:	38 80 01 94 	li      r4,404
10010070:	7d 05 43 78 	mr      r5,r8
10010074:	3d 00 10 02 	lis     r8,4098
10010078:	38 c8 8e d4 	addi    r6,r8,-28972
1001007c:	7d 47 53 78 	mr      r7,r10
10010080:	7d 28 4b 78 	mr      r8,r9
10010084:	4b ff 87 71 	bl      100087f4 <httpd_send_err>
	    return -1;
10010088:	39 20 ff ff 	li      r9,-1
1001008c:	48 00 0a 44 	b       10010ad0 <really_start_request+0xbd4>

	/* Special handling for directory URLs that don't end in a slash.
	** We send back an explicit redirect with the slash, because
	** otherwise many clients can't build relative URLs properly.
	*/
	if ( strcmp( hc->origfilename, "" ) != 0 &&
10010090:	81 3f 00 28 	lwz     r9,40(r31)
10010094:	81 29 00 b8 	lwz     r9,184(r9)
10010098:	89 29 00 00 	lbz     r9,0(r9)
1001009c:	55 29 06 3e 	clrlwi  r9,r9,24
100100a0:	2f 89 00 00 	cmpwi   cr7,r9,0
100100a4:	41 9e 00 6c 	beq     cr7,10010110 <really_start_request+0x214>
	     strcmp( hc->origfilename, "." ) != 0 &&
100100a8:	81 3f 00 28 	lwz     r9,40(r31)
100100ac:	81 29 00 b8 	lwz     r9,184(r9)
100100b0:	7d 23 4b 78 	mr      r3,r9
100100b4:	3d 20 10 02 	lis     r9,4098
100100b8:	38 89 91 4c 	addi    r4,r9,-28340
100100bc:	48 01 d3 21 	bl      1002d3dc <strcmp@plt>
100100c0:	7c 69 1b 78 	mr      r9,r3

	/* Special handling for directory URLs that don't end in a slash.
	** We send back an explicit redirect with the slash, because
	** otherwise many clients can't build relative URLs properly.
	*/
	if ( strcmp( hc->origfilename, "" ) != 0 &&
100100c4:	2f 89 00 00 	cmpwi   cr7,r9,0
100100c8:	41 9e 00 48 	beq     cr7,10010110 <really_start_request+0x214>
	     strcmp( hc->origfilename, "." ) != 0 &&
	     hc->origfilename[strlen( hc->origfilename ) - 1] != '/' )
100100cc:	81 3f 00 28 	lwz     r9,40(r31)
100100d0:	83 c9 00 b8 	lwz     r30,184(r9)
100100d4:	81 3f 00 28 	lwz     r9,40(r31)
100100d8:	81 29 00 b8 	lwz     r9,184(r9)
100100dc:	7d 23 4b 78 	mr      r3,r9
100100e0:	48 01 d5 75 	bl      1002d654 <strlen@plt>
100100e4:	7c 69 1b 78 	mr      r9,r3
100100e8:	39 29 ff ff 	addi    r9,r9,-1
100100ec:	7d 3e 4a 14 	add     r9,r30,r9
100100f0:	89 29 00 00 	lbz     r9,0(r9)
100100f4:	55 29 06 3e 	clrlwi  r9,r9,24
	/* Special handling for directory URLs that don't end in a slash.
	** We send back an explicit redirect with the slash, because
	** otherwise many clients can't build relative URLs properly.
	*/
	if ( strcmp( hc->origfilename, "" ) != 0 &&
	     strcmp( hc->origfilename, "." ) != 0 &&
100100f8:	2b 89 00 2f 	cmplwi  cr7,r9,47
100100fc:	41 9e 00 14 	beq     cr7,10010110 <really_start_request+0x214>
	     hc->origfilename[strlen( hc->origfilename ) - 1] != '/' )
	    {
	    send_dirredirect( hc );
10010100:	80 7f 00 28 	lwz     r3,40(r31)
10010104:	4b ff 92 cd 	bl      100093d0 <send_dirredirect>
	    return -1;
10010108:	39 20 ff ff 	li      r9,-1
1001010c:	48 00 09 c4 	b       10010ad0 <really_start_request+0xbd4>
	    }

	/* Check for an index file. */
	for ( i = 0; i < sizeof(index_names) / sizeof(char*); ++i )
10010110:	39 20 00 00 	li      r9,0
10010114:	91 3f 00 08 	stw     r9,8(r31)
10010118:	48 00 01 ac 	b       100102c4 <really_start_request+0x3c8>
	    {
	    httpd_realloc_str(
		&indexname, &maxindexname,
		expnlen + 1 + strlen( index_names[i] ) );
1001011c:	3d 20 10 03 	lis     r9,4099
10010120:	39 49 d1 b0 	addi    r10,r9,-11856
10010124:	81 3f 00 08 	lwz     r9,8(r31)
10010128:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1001012c:	7d 2a 4a 14 	add     r9,r10,r9
10010130:	81 29 00 00 	lwz     r9,0(r9)
10010134:	7d 23 4b 78 	mr      r3,r9
10010138:	48 01 d5 1d 	bl      1002d654 <strlen@plt>
1001013c:	7c 6a 1b 78 	mr      r10,r3
10010140:	81 3f 00 0c 	lwz     r9,12(r31)
10010144:	7d 2a 4a 14 	add     r9,r10,r9
	    }

	/* Check for an index file. */
	for ( i = 0; i < sizeof(index_names) / sizeof(char*); ++i )
	    {
	    httpd_realloc_str(
10010148:	39 29 00 01 	addi    r9,r9,1
1001014c:	3d 40 10 03 	lis     r10,4099
10010150:	38 6a dd 7c 	addi    r3,r10,-8836
10010154:	3d 40 10 03 	lis     r10,4099
10010158:	38 8a dd 80 	addi    r4,r10,-8832
1001015c:	7d 25 4b 78 	mr      r5,r9
10010160:	4b ff 81 b9 	bl      10008318 <httpd_realloc_str>
		&indexname, &maxindexname,
		expnlen + 1 + strlen( index_names[i] ) );
	    (void) strcpy( indexname, hc->expnfilename );
10010164:	3d 20 10 03 	lis     r9,4099
10010168:	81 49 dd 7c 	lwz     r10,-8836(r9)
1001016c:	81 3f 00 28 	lwz     r9,40(r31)
10010170:	81 29 00 bc 	lwz     r9,188(r9)
10010174:	7d 43 53 78 	mr      r3,r10
10010178:	7d 24 4b 78 	mr      r4,r9
1001017c:	48 01 d3 e9 	bl      1002d564 <strcpy@plt>
	    indxlen = strlen( indexname );
10010180:	3d 20 10 03 	lis     r9,4099
10010184:	81 29 dd 7c 	lwz     r9,-8836(r9)
10010188:	7d 23 4b 78 	mr      r3,r9
1001018c:	48 01 d4 c9 	bl      1002d654 <strlen@plt>
10010190:	90 7f 00 10 	stw     r3,16(r31)
	    if ( indxlen == 0 || indexname[indxlen - 1] != '/' )
10010194:	81 3f 00 10 	lwz     r9,16(r31)
10010198:	2f 89 00 00 	cmpwi   cr7,r9,0
1001019c:	41 9e 00 28 	beq     cr7,100101c4 <really_start_request+0x2c8>
100101a0:	3d 20 10 03 	lis     r9,4099
100101a4:	81 49 dd 7c 	lwz     r10,-8836(r9)
100101a8:	81 3f 00 10 	lwz     r9,16(r31)
100101ac:	39 29 ff ff 	addi    r9,r9,-1
100101b0:	7d 2a 4a 14 	add     r9,r10,r9
100101b4:	89 29 00 00 	lbz     r9,0(r9)
100101b8:	55 29 06 3e 	clrlwi  r9,r9,24
100101bc:	2b 89 00 2f 	cmplwi  cr7,r9,47
100101c0:	41 9e 00 24 	beq     cr7,100101e4 <really_start_request+0x2e8>
		(void) strcat( indexname, "/" );
100101c4:	3d 20 10 03 	lis     r9,4099
100101c8:	83 c9 dd 7c 	lwz     r30,-8836(r9)
100101cc:	7f c3 f3 78 	mr      r3,r30
100101d0:	48 01 d4 85 	bl      1002d654 <strlen@plt>
100101d4:	7c 69 1b 78 	mr      r9,r3
100101d8:	7d 3e 4a 14 	add     r9,r30,r9
100101dc:	39 40 2f 00 	li      r10,12032
100101e0:	b1 49 00 00 	sth     r10,0(r9)
	    if ( strcmp( indexname, "./" ) == 0 )
100101e4:	3d 20 10 03 	lis     r9,4099
100101e8:	81 29 dd 7c 	lwz     r9,-8836(r9)
100101ec:	7d 23 4b 78 	mr      r3,r9
100101f0:	3d 20 10 02 	lis     r9,4098
100101f4:	38 89 95 20 	addi    r4,r9,-27360
100101f8:	48 01 d1 e5 	bl      1002d3dc <strcmp@plt>
100101fc:	7c 69 1b 78 	mr      r9,r3
10010200:	2f 89 00 00 	cmpwi   cr7,r9,0
10010204:	40 9e 00 14 	bne     cr7,10010218 <really_start_request+0x31c>
		indexname[0] = '\0';
10010208:	3d 20 10 03 	lis     r9,4099
1001020c:	81 29 dd 7c 	lwz     r9,-8836(r9)
10010210:	39 40 00 00 	li      r10,0
10010214:	99 49 00 00 	stb     r10,0(r9)
	    (void) strcat( indexname, index_names[i] );
10010218:	3d 20 10 03 	lis     r9,4099
1001021c:	81 49 dd 7c 	lwz     r10,-8836(r9)
10010220:	3d 20 10 03 	lis     r9,4099
10010224:	39 09 d1 b0 	addi    r8,r9,-11856
10010228:	81 3f 00 08 	lwz     r9,8(r31)
1001022c:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10010230:	7d 28 4a 14 	add     r9,r8,r9
10010234:	81 29 00 00 	lwz     r9,0(r9)
10010238:	7d 43 53 78 	mr      r3,r10
1001023c:	7d 24 4b 78 	mr      r4,r9
10010240:	48 01 d3 15 	bl      1002d554 <strcat@plt>
	    if ( stat( indexname, &hc->sb ) >= 0 )
10010244:	3d 20 10 03 	lis     r9,4099
10010248:	81 49 dd 7c 	lwz     r10,-8836(r9)
1001024c:	81 3f 00 28 	lwz     r9,40(r31)
10010250:	39 29 01 68 	addi    r9,r9,360
10010254:	7d 43 53 78 	mr      r3,r10
10010258:	7d 24 4b 78 	mr      r4,r9
1001025c:	48 00 79 99 	bl      10017bf4 <__stat>
10010260:	7c 69 1b 78 	mr      r9,r3
10010264:	2f 89 00 00 	cmpwi   cr7,r9,0
10010268:	41 9c 00 50 	blt     cr7,100102b8 <really_start_request+0x3bc>
		goto got_one;
1001026c:	60 00 00 00 	nop

	got_one: ;
	/* Got an index file.  Expand symlinks again.  More pathinfo means
	** something went wrong.
	*/
	cp = expand_symlinks( indexname, &pi, hc->hs->no_symlink_check, hc->tildemapped );
10010270:	3d 20 10 03 	lis     r9,4099
10010274:	80 e9 dd 7c 	lwz     r7,-8836(r9)
10010278:	81 3f 00 28 	lwz     r9,40(r31)
1001027c:	81 29 00 04 	lwz     r9,4(r9)
10010280:	81 49 00 38 	lwz     r10,56(r9)
10010284:	81 3f 00 28 	lwz     r9,40(r31)
10010288:	81 29 01 54 	lwz     r9,340(r9)
1001028c:	39 1f 00 18 	addi    r8,r31,24
10010290:	7c e3 3b 78 	mr      r3,r7
10010294:	7d 04 43 78 	mr      r4,r8
10010298:	7d 45 53 78 	mr      r5,r10
1001029c:	7d 26 4b 78 	mr      r6,r9
100102a0:	4b ff 9a 55 	bl      10009cf4 <expand_symlinks>
100102a4:	90 7f 00 14 	stw     r3,20(r31)
	if ( cp == (char*) 0 || pi[0] != '\0' )
100102a8:	81 3f 00 14 	lwz     r9,20(r31)
100102ac:	2f 89 00 00 	cmpwi   cr7,r9,0
100102b0:	41 9e 01 14 	beq     cr7,100103c4 <really_start_request+0x4c8>
100102b4:	48 00 00 fc 	b       100103b0 <really_start_request+0x4b4>
	    send_dirredirect( hc );
	    return -1;
	    }

	/* Check for an index file. */
	for ( i = 0; i < sizeof(index_names) / sizeof(char*); ++i )
100102b8:	81 3f 00 08 	lwz     r9,8(r31)
100102bc:	39 29 00 01 	addi    r9,r9,1
100102c0:	91 3f 00 08 	stw     r9,8(r31)
100102c4:	81 3f 00 08 	lwz     r9,8(r31)
100102c8:	2b 89 00 05 	cmplwi  cr7,r9,5
100102cc:	40 9d fe 50 	ble     cr7,1001011c <really_start_request+0x220>
	    }

	/* Nope, no index file, so it's an actual directory request. */
#ifdef GENERATE_INDEXES
	/* Directories must be readable for indexing. */
	if ( ! ( hc->sb.st_mode & S_IROTH ) )
100102d0:	81 3f 00 28 	lwz     r9,40(r31)
100102d4:	81 29 01 78 	lwz     r9,376(r9)
100102d8:	55 29 07 7a 	rlwinm  r9,r9,0,29,29
100102dc:	2f 89 00 00 	cmpwi   cr7,r9,0
100102e0:	40 9e 00 78 	bne     cr7,10010358 <really_start_request+0x45c>
	    {
	    syslog(
100102e4:	81 3f 00 28 	lwz     r9,40(r31)
100102e8:	39 29 00 08 	addi    r9,r9,8
100102ec:	7d 23 4b 78 	mr      r3,r9
100102f0:	48 00 10 5d 	bl      1001134c <httpd_ntoa>
100102f4:	7c 6a 1b 78 	mr      r10,r3
100102f8:	81 3f 00 28 	lwz     r9,40(r31)
100102fc:	81 29 00 ac 	lwz     r9,172(r9)
10010300:	38 60 00 06 	li      r3,6
10010304:	3d 00 10 02 	lis     r8,4098
10010308:	38 88 ab fc 	addi    r4,r8,-21508
1001030c:	7d 45 53 78 	mr      r5,r10
10010310:	7d 26 4b 78 	mr      r6,r9
10010314:	4c c6 31 82 	crclr   4*cr1+eq
10010318:	48 01 d4 6d 	bl      1002d784 <syslog@plt>
		LOG_INFO,
		"%.80s URL \"%.80s\" tried to index a directory with indexing disabled",
		httpd_ntoa( &hc->client_addr ), hc->encodedurl );
	    httpd_send_err(
1001031c:	3d 20 10 03 	lis     r9,4099
10010320:	81 49 c1 20 	lwz     r10,-16096(r9)
10010324:	81 3f 00 28 	lwz     r9,40(r31)
10010328:	81 29 00 ac 	lwz     r9,172(r9)
1001032c:	80 7f 00 28 	lwz     r3,40(r31)
10010330:	38 80 01 93 	li      r4,403
10010334:	7d 45 53 78 	mr      r5,r10
10010338:	3d 40 10 02 	lis     r10,4098
1001033c:	38 ca 8e d4 	addi    r6,r10,-28972
10010340:	3d 40 10 02 	lis     r10,4098
10010344:	38 ea ac 40 	addi    r7,r10,-21440
10010348:	7d 28 4b 78 	mr      r8,r9
1001034c:	4b ff 84 a9 	bl      100087f4 <httpd_send_err>
		hc, 403, err403title, "",
		ERROR_FORM( err403form, "The requested URL '%.80s' resolves to a directory that has indexing disabled.\n" ),
		hc->encodedurl );
	    return -1;
10010350:	39 20 ff ff 	li      r9,-1
10010354:	48 00 07 7c 	b       10010ad0 <really_start_request+0xbd4>
	    }
#ifdef AUTH_FILE
	/* Check authorization for this directory. */
	if ( auth_check( hc, hc->expnfilename ) == -1 )
10010358:	81 3f 00 28 	lwz     r9,40(r31)
1001035c:	81 29 00 bc 	lwz     r9,188(r9)
10010360:	80 7f 00 28 	lwz     r3,40(r31)
10010364:	7d 24 4b 78 	mr      r4,r9
10010368:	4b ff 89 cd 	bl      10008d34 <auth_check>
1001036c:	7c 6a 1b 78 	mr      r10,r3
10010370:	39 20 ff ff 	li      r9,-1
10010374:	7f 8a 48 00 	cmpw    cr7,r10,r9
10010378:	40 9e 00 0c 	bne     cr7,10010384 <really_start_request+0x488>
	    return -1;
1001037c:	39 20 ff ff 	li      r9,-1
10010380:	48 00 07 50 	b       10010ad0 <really_start_request+0xbd4>
#endif /* AUTH_FILE */
	/* Referrer check. */
	if ( ! check_referrer( hc ) )
10010384:	80 7f 00 28 	lwz     r3,40(r31)
10010388:	48 00 0b ad 	bl      10010f34 <check_referrer>
1001038c:	7c 69 1b 78 	mr      r9,r3
10010390:	2f 89 00 00 	cmpwi   cr7,r9,0
10010394:	40 9e 00 0c 	bne     cr7,100103a0 <really_start_request+0x4a4>
	    return -1;
10010398:	39 20 ff ff 	li      r9,-1
1001039c:	48 00 07 34 	b       10010ad0 <really_start_request+0xbd4>
	/* Ok, generate an index. */
	return ls( hc );
100103a0:	80 7f 00 28 	lwz     r3,40(r31)
100103a4:	4b ff d1 ad 	bl      1000d550 <ls>
100103a8:	7c 69 1b 78 	mr      r9,r3
100103ac:	48 00 07 24 	b       10010ad0 <really_start_request+0xbd4>
	got_one: ;
	/* Got an index file.  Expand symlinks again.  More pathinfo means
	** something went wrong.
	*/
	cp = expand_symlinks( indexname, &pi, hc->hs->no_symlink_check, hc->tildemapped );
	if ( cp == (char*) 0 || pi[0] != '\0' )
100103b0:	81 3f 00 18 	lwz     r9,24(r31)
100103b4:	89 29 00 00 	lbz     r9,0(r9)
100103b8:	55 29 06 3e 	clrlwi  r9,r9,24
100103bc:	2f 89 00 00 	cmpwi   cr7,r9,0
100103c0:	41 9e 00 44 	beq     cr7,10010404 <really_start_request+0x508>
	    {
	    httpd_send_err( hc, 500, err500title, "", err500form, hc->encodedurl );
100103c4:	3d 20 10 03 	lis     r9,4099
100103c8:	81 09 c1 34 	lwz     r8,-16076(r9)
100103cc:	3d 20 10 03 	lis     r9,4099
100103d0:	81 49 c1 38 	lwz     r10,-16072(r9)
100103d4:	81 3f 00 28 	lwz     r9,40(r31)
100103d8:	81 29 00 ac 	lwz     r9,172(r9)
100103dc:	80 7f 00 28 	lwz     r3,40(r31)
100103e0:	38 80 01 f4 	li      r4,500
100103e4:	7d 05 43 78 	mr      r5,r8
100103e8:	3d 00 10 02 	lis     r8,4098
100103ec:	38 c8 8e d4 	addi    r6,r8,-28972
100103f0:	7d 47 53 78 	mr      r7,r10
100103f4:	7d 28 4b 78 	mr      r8,r9
100103f8:	4b ff 83 fd 	bl      100087f4 <httpd_send_err>
	    return -1;
100103fc:	39 20 ff ff 	li      r9,-1
10010400:	48 00 06 d0 	b       10010ad0 <really_start_request+0xbd4>
	    }
	expnlen = strlen( cp );
10010404:	80 7f 00 14 	lwz     r3,20(r31)
10010408:	48 01 d2 4d 	bl      1002d654 <strlen@plt>
1001040c:	90 7f 00 0c 	stw     r3,12(r31)
	httpd_realloc_str( &hc->expnfilename, &hc->maxexpnfilename, expnlen );
10010410:	81 3f 00 28 	lwz     r9,40(r31)
10010414:	39 49 00 bc 	addi    r10,r9,188
10010418:	81 3f 00 28 	lwz     r9,40(r31)
1001041c:	39 29 01 08 	addi    r9,r9,264
10010420:	7d 43 53 78 	mr      r3,r10
10010424:	7d 24 4b 78 	mr      r4,r9
10010428:	80 bf 00 0c 	lwz     r5,12(r31)
1001042c:	4b ff 7e ed 	bl      10008318 <httpd_realloc_str>
	(void) strcpy( hc->expnfilename, cp );
10010430:	81 3f 00 28 	lwz     r9,40(r31)
10010434:	81 29 00 bc 	lwz     r9,188(r9)
10010438:	7d 23 4b 78 	mr      r3,r9
1001043c:	80 9f 00 14 	lwz     r4,20(r31)
10010440:	48 01 d1 25 	bl      1002d564 <strcpy@plt>

	/* Now, is the index version world-readable or world-executable? */
	if ( ! ( hc->sb.st_mode & ( S_IROTH | S_IXOTH ) ) )
10010444:	81 3f 00 28 	lwz     r9,40(r31)
10010448:	81 29 01 78 	lwz     r9,376(r9)
1001044c:	71 29 00 05 	andi.   r9,r9,5
10010450:	2f 89 00 00 	cmpwi   cr7,r9,0
10010454:	40 9e 00 78 	bne     cr7,100104cc <really_start_request+0x5d0>
	    {
	    syslog(
10010458:	81 3f 00 28 	lwz     r9,40(r31)
1001045c:	39 29 00 08 	addi    r9,r9,8
10010460:	7d 23 4b 78 	mr      r3,r9
10010464:	48 00 0e e9 	bl      1001134c <httpd_ntoa>
10010468:	7c 6a 1b 78 	mr      r10,r3
1001046c:	81 3f 00 28 	lwz     r9,40(r31)
10010470:	81 29 00 ac 	lwz     r9,172(r9)
10010474:	38 60 00 06 	li      r3,6
10010478:	3d 00 10 02 	lis     r8,4098
1001047c:	38 88 ac 90 	addi    r4,r8,-21360
10010480:	7d 45 53 78 	mr      r5,r10
10010484:	7d 26 4b 78 	mr      r6,r9
10010488:	4c c6 31 82 	crclr   4*cr1+eq
1001048c:	48 01 d2 f9 	bl      1002d784 <syslog@plt>
		LOG_INFO,
		"%.80s URL \"%.80s\" resolves to a non-world-readable index file",
		httpd_ntoa( &hc->client_addr ), hc->encodedurl );
	    httpd_send_err(
10010490:	3d 20 10 03 	lis     r9,4099
10010494:	81 49 c1 20 	lwz     r10,-16096(r9)
10010498:	81 3f 00 28 	lwz     r9,40(r31)
1001049c:	81 29 00 ac 	lwz     r9,172(r9)
100104a0:	80 7f 00 28 	lwz     r3,40(r31)
100104a4:	38 80 01 93 	li      r4,403
100104a8:	7d 45 53 78 	mr      r5,r10
100104ac:	3d 40 10 02 	lis     r10,4098
100104b0:	38 ca 8e d4 	addi    r6,r10,-28972
100104b4:	3d 40 10 02 	lis     r10,4098
100104b8:	38 ea ac d0 	addi    r7,r10,-21296
100104bc:	7d 28 4b 78 	mr      r8,r9
100104c0:	4b ff 83 35 	bl      100087f4 <httpd_send_err>
		hc, 403, err403title, "",
		ERROR_FORM( err403form, "The requested URL '%.80s' resolves to an index file that is not world-readable.\n" ),
		hc->encodedurl );
	    return -1;
100104c4:	39 20 ff ff 	li      r9,-1
100104c8:	48 00 06 08 	b       10010ad0 <really_start_request+0xbd4>
	    }
	}

#ifdef AUTH_FILE
    /* Check authorization for this directory. */
    httpd_realloc_str( &dirname, &maxdirname, expnlen );
100104cc:	3d 20 10 03 	lis     r9,4099
100104d0:	38 69 dd 84 	addi    r3,r9,-8828
100104d4:	3d 20 10 03 	lis     r9,4099
100104d8:	38 89 dd 88 	addi    r4,r9,-8824
100104dc:	80 bf 00 0c 	lwz     r5,12(r31)
100104e0:	4b ff 7e 39 	bl      10008318 <httpd_realloc_str>
    (void) strcpy( dirname, hc->expnfilename );
100104e4:	3d 20 10 03 	lis     r9,4099
100104e8:	81 49 dd 84 	lwz     r10,-8828(r9)
100104ec:	81 3f 00 28 	lwz     r9,40(r31)
100104f0:	81 29 00 bc 	lwz     r9,188(r9)
100104f4:	7d 43 53 78 	mr      r3,r10
100104f8:	7d 24 4b 78 	mr      r4,r9
100104fc:	48 01 d0 69 	bl      1002d564 <strcpy@plt>
    cp = strrchr( dirname, '/' );
10010500:	3d 20 10 03 	lis     r9,4099
10010504:	81 29 dd 84 	lwz     r9,-8828(r9)
10010508:	7d 23 4b 78 	mr      r3,r9
1001050c:	38 80 00 2f 	li      r4,47
10010510:	48 01 d2 6d 	bl      1002d77c <strrchr@plt>
10010514:	90 7f 00 14 	stw     r3,20(r31)
    if ( cp == (char*) 0 )
10010518:	81 3f 00 14 	lwz     r9,20(r31)
1001051c:	2f 89 00 00 	cmpwi   cr7,r9,0
10010520:	40 9e 00 18 	bne     cr7,10010538 <really_start_request+0x63c>
	(void) strcpy( dirname, "." );
10010524:	3d 20 10 03 	lis     r9,4099
10010528:	81 29 dd 84 	lwz     r9,-8828(r9)
1001052c:	39 40 2e 00 	li      r10,11776
10010530:	b1 49 00 00 	sth     r10,0(r9)
10010534:	48 00 00 10 	b       10010544 <really_start_request+0x648>
    else
	*cp = '\0';
10010538:	81 3f 00 14 	lwz     r9,20(r31)
1001053c:	39 40 00 00 	li      r10,0
10010540:	99 49 00 00 	stb     r10,0(r9)
    if ( auth_check( hc, dirname ) == -1 )
10010544:	3d 20 10 03 	lis     r9,4099
10010548:	81 29 dd 84 	lwz     r9,-8828(r9)
1001054c:	80 7f 00 28 	lwz     r3,40(r31)
10010550:	7d 24 4b 78 	mr      r4,r9
10010554:	4b ff 87 e1 	bl      10008d34 <auth_check>
10010558:	7c 6a 1b 78 	mr      r10,r3
1001055c:	39 20 ff ff 	li      r9,-1
10010560:	7f 8a 48 00 	cmpw    cr7,r10,r9
10010564:	40 9e 00 0c 	bne     cr7,10010570 <really_start_request+0x674>
	return -1;
10010568:	39 20 ff ff 	li      r9,-1
1001056c:	48 00 05 64 	b       10010ad0 <really_start_request+0xbd4>

    /* Check if the filename is the AUTH_FILE itself - that's verboten. */
    if ( expnlen == sizeof(AUTH_FILE) - 1 )
10010570:	81 3f 00 0c 	lwz     r9,12(r31)
10010574:	2f 89 00 09 	cmpwi   cr7,r9,9
10010578:	40 9e 00 9c 	bne     cr7,10010614 <really_start_request+0x718>
	{
	if ( strcmp( hc->expnfilename, AUTH_FILE ) == 0 )
1001057c:	81 3f 00 28 	lwz     r9,40(r31)
10010580:	81 29 00 bc 	lwz     r9,188(r9)
10010584:	7d 23 4b 78 	mr      r3,r9
10010588:	3d 20 10 02 	lis     r9,4098
1001058c:	38 89 91 58 	addi    r4,r9,-28328
10010590:	48 01 ce 4d 	bl      1002d3dc <strcmp@plt>
10010594:	7c 69 1b 78 	mr      r9,r3
10010598:	2f 89 00 00 	cmpwi   cr7,r9,0
1001059c:	40 9e 01 4c 	bne     cr7,100106e8 <really_start_request+0x7ec>
	    {
	    syslog(
100105a0:	81 3f 00 28 	lwz     r9,40(r31)
100105a4:	39 29 00 08 	addi    r9,r9,8
100105a8:	7d 23 4b 78 	mr      r3,r9
100105ac:	48 00 0d a1 	bl      1001134c <httpd_ntoa>
100105b0:	7c 6a 1b 78 	mr      r10,r3
100105b4:	81 3f 00 28 	lwz     r9,40(r31)
100105b8:	81 29 00 ac 	lwz     r9,172(r9)
100105bc:	38 60 00 05 	li      r3,5
100105c0:	3d 00 10 02 	lis     r8,4098
100105c4:	38 88 ad 24 	addi    r4,r8,-21212
100105c8:	7d 45 53 78 	mr      r5,r10
100105cc:	7d 26 4b 78 	mr      r6,r9
100105d0:	4c c6 31 82 	crclr   4*cr1+eq
100105d4:	48 01 d1 b1 	bl      1002d784 <syslog@plt>
		LOG_NOTICE,
		"%.80s URL \"%.80s\" tried to retrieve an auth file",
		httpd_ntoa( &hc->client_addr ), hc->encodedurl );
	    httpd_send_err(
100105d8:	3d 20 10 03 	lis     r9,4099
100105dc:	81 49 c1 20 	lwz     r10,-16096(r9)
100105e0:	81 3f 00 28 	lwz     r9,40(r31)
100105e4:	81 29 00 ac 	lwz     r9,172(r9)
100105e8:	80 7f 00 28 	lwz     r3,40(r31)
100105ec:	38 80 01 93 	li      r4,403
100105f0:	7d 45 53 78 	mr      r5,r10
100105f4:	3d 40 10 02 	lis     r10,4098
100105f8:	38 ca 8e d4 	addi    r6,r10,-28972
100105fc:	3d 40 10 02 	lis     r10,4098
10010600:	38 ea ad 58 	addi    r7,r10,-21160
10010604:	7d 28 4b 78 	mr      r8,r9
10010608:	4b ff 81 ed 	bl      100087f4 <httpd_send_err>
		hc, 403, err403title, "",
		ERROR_FORM( err403form, "The requested URL '%.80s' is an authorization file, retrieving it is not permitted.\n" ),
		hc->encodedurl );
	    return -1;
1001060c:	39 20 ff ff 	li      r9,-1
10010610:	48 00 04 c0 	b       10010ad0 <really_start_request+0xbd4>
	    }
	}
    else if ( expnlen >= sizeof(AUTH_FILE) &&
10010614:	81 3f 00 0c 	lwz     r9,12(r31)
10010618:	2b 89 00 09 	cmplwi  cr7,r9,9
1001061c:	40 9d 00 cc 	ble     cr7,100106e8 <really_start_request+0x7ec>
	      strcmp( &(hc->expnfilename[expnlen - sizeof(AUTH_FILE) + 1]), AUTH_FILE ) == 0 &&
10010620:	81 3f 00 28 	lwz     r9,40(r31)
10010624:	81 49 00 bc 	lwz     r10,188(r9)
10010628:	81 3f 00 0c 	lwz     r9,12(r31)
1001062c:	39 29 ff f7 	addi    r9,r9,-9
10010630:	7d 2a 4a 14 	add     r9,r10,r9
10010634:	7d 23 4b 78 	mr      r3,r9
10010638:	3d 20 10 02 	lis     r9,4098
1001063c:	38 89 91 58 	addi    r4,r9,-28328
10010640:	48 01 cd 9d 	bl      1002d3dc <strcmp@plt>
10010644:	7c 69 1b 78 	mr      r9,r3
		ERROR_FORM( err403form, "The requested URL '%.80s' is an authorization file, retrieving it is not permitted.\n" ),
		hc->encodedurl );
	    return -1;
	    }
	}
    else if ( expnlen >= sizeof(AUTH_FILE) &&
10010648:	2f 89 00 00 	cmpwi   cr7,r9,0
1001064c:	40 9e 00 9c 	bne     cr7,100106e8 <really_start_request+0x7ec>
	      strcmp( &(hc->expnfilename[expnlen - sizeof(AUTH_FILE) + 1]), AUTH_FILE ) == 0 &&
	      hc->expnfilename[expnlen - sizeof(AUTH_FILE)] == '/' )
10010650:	81 3f 00 28 	lwz     r9,40(r31)
10010654:	81 49 00 bc 	lwz     r10,188(r9)
10010658:	81 3f 00 0c 	lwz     r9,12(r31)
1001065c:	39 29 ff f6 	addi    r9,r9,-10
10010660:	7d 2a 4a 14 	add     r9,r10,r9
10010664:	89 29 00 00 	lbz     r9,0(r9)
10010668:	55 29 06 3e 	clrlwi  r9,r9,24
		hc->encodedurl );
	    return -1;
	    }
	}
    else if ( expnlen >= sizeof(AUTH_FILE) &&
	      strcmp( &(hc->expnfilename[expnlen - sizeof(AUTH_FILE) + 1]), AUTH_FILE ) == 0 &&
1001066c:	2b 89 00 2f 	cmplwi  cr7,r9,47
10010670:	40 9e 00 78 	bne     cr7,100106e8 <really_start_request+0x7ec>
	      hc->expnfilename[expnlen - sizeof(AUTH_FILE)] == '/' )
	{
	syslog(
10010674:	81 3f 00 28 	lwz     r9,40(r31)
10010678:	39 29 00 08 	addi    r9,r9,8
1001067c:	7d 23 4b 78 	mr      r3,r9
10010680:	48 00 0c cd 	bl      1001134c <httpd_ntoa>
10010684:	7c 6a 1b 78 	mr      r10,r3
10010688:	81 3f 00 28 	lwz     r9,40(r31)
1001068c:	81 29 00 ac 	lwz     r9,172(r9)
10010690:	38 60 00 05 	li      r3,5
10010694:	3d 00 10 02 	lis     r8,4098
10010698:	38 88 ad 24 	addi    r4,r8,-21212
1001069c:	7d 45 53 78 	mr      r5,r10
100106a0:	7d 26 4b 78 	mr      r6,r9
100106a4:	4c c6 31 82 	crclr   4*cr1+eq
100106a8:	48 01 d0 dd 	bl      1002d784 <syslog@plt>
	    LOG_NOTICE,
	    "%.80s URL \"%.80s\" tried to retrieve an auth file",
	    httpd_ntoa( &hc->client_addr ), hc->encodedurl );
	httpd_send_err(
100106ac:	3d 20 10 03 	lis     r9,4099
100106b0:	81 49 c1 20 	lwz     r10,-16096(r9)
100106b4:	81 3f 00 28 	lwz     r9,40(r31)
100106b8:	81 29 00 ac 	lwz     r9,172(r9)
100106bc:	80 7f 00 28 	lwz     r3,40(r31)
100106c0:	38 80 01 93 	li      r4,403
100106c4:	7d 45 53 78 	mr      r5,r10
100106c8:	3d 40 10 02 	lis     r10,4098
100106cc:	38 ca 8e d4 	addi    r6,r10,-28972
100106d0:	3d 40 10 02 	lis     r10,4098
100106d4:	38 ea ad 58 	addi    r7,r10,-21160
100106d8:	7d 28 4b 78 	mr      r8,r9
100106dc:	4b ff 81 19 	bl      100087f4 <httpd_send_err>
	    hc, 403, err403title, "",
	    ERROR_FORM( err403form, "The requested URL '%.80s' is an authorization file, retrieving it is not permitted.\n" ),
	    hc->encodedurl );
	return -1;
100106e0:	39 20 ff ff 	li      r9,-1
100106e4:	48 00 03 ec 	b       10010ad0 <really_start_request+0xbd4>
	}
#endif /* AUTH_FILE */

    /* Referrer check. */
    if ( ! check_referrer( hc ) )
100106e8:	80 7f 00 28 	lwz     r3,40(r31)
100106ec:	48 00 08 49 	bl      10010f34 <check_referrer>
100106f0:	7c 69 1b 78 	mr      r9,r3
100106f4:	2f 89 00 00 	cmpwi   cr7,r9,0
100106f8:	40 9e 00 0c 	bne     cr7,10010704 <really_start_request+0x808>
	return -1;
100106fc:	39 20 ff ff 	li      r9,-1
10010700:	48 00 03 d0 	b       10010ad0 <really_start_request+0xbd4>

    /* Is it world-executable and in the CGI area? */
    if ( hc->hs->cgi_pattern != (char*) 0 &&
10010704:	81 3f 00 28 	lwz     r9,40(r31)
10010708:	81 29 00 04 	lwz     r9,4(r9)
1001070c:	81 29 00 0c 	lwz     r9,12(r9)
10010710:	2f 89 00 00 	cmpwi   cr7,r9,0
10010714:	41 9e 00 54 	beq     cr7,10010768 <really_start_request+0x86c>
	 ( hc->sb.st_mode & S_IXOTH ) &&
10010718:	81 3f 00 28 	lwz     r9,40(r31)
1001071c:	81 29 01 78 	lwz     r9,376(r9)
10010720:	55 29 07 fe 	clrlwi  r9,r9,31
    /* Referrer check. */
    if ( ! check_referrer( hc ) )
	return -1;

    /* Is it world-executable and in the CGI area? */
    if ( hc->hs->cgi_pattern != (char*) 0 &&
10010724:	2f 89 00 00 	cmpwi   cr7,r9,0
10010728:	41 9e 00 40 	beq     cr7,10010768 <really_start_request+0x86c>
	 ( hc->sb.st_mode & S_IXOTH ) &&
	 match( hc->hs->cgi_pattern, hc->expnfilename ) )
1001072c:	81 3f 00 28 	lwz     r9,40(r31)
10010730:	81 29 00 04 	lwz     r9,4(r9)
10010734:	81 49 00 0c 	lwz     r10,12(r9)
10010738:	81 3f 00 28 	lwz     r9,40(r31)
1001073c:	81 29 00 bc 	lwz     r9,188(r9)
10010740:	7d 43 53 78 	mr      r3,r10
10010744:	7d 24 4b 78 	mr      r4,r9
10010748:	48 00 3b dd 	bl      10014324 <match>
1001074c:	7c 69 1b 78 	mr      r9,r3
    if ( ! check_referrer( hc ) )
	return -1;

    /* Is it world-executable and in the CGI area? */
    if ( hc->hs->cgi_pattern != (char*) 0 &&
	 ( hc->sb.st_mode & S_IXOTH ) &&
10010750:	2f 89 00 00 	cmpwi   cr7,r9,0
10010754:	41 9e 00 14 	beq     cr7,10010768 <really_start_request+0x86c>
	 match( hc->hs->cgi_pattern, hc->expnfilename ) )
	return cgi( hc );
10010758:	80 7f 00 28 	lwz     r3,40(r31)
1001075c:	4b ff f5 bd 	bl      1000fd18 <cgi>
10010760:	7c 69 1b 78 	mr      r9,r3
10010764:	48 00 03 6c 	b       10010ad0 <really_start_request+0xbd4>

    /* It's not CGI.  If it's executable or there's pathinfo, someone's
    ** trying to either serve or run a non-CGI file as CGI.   Either case
    ** is prohibited.
    */
    if ( hc->sb.st_mode & S_IXOTH )
10010768:	81 3f 00 28 	lwz     r9,40(r31)
1001076c:	81 29 01 78 	lwz     r9,376(r9)
10010770:	55 29 07 fe 	clrlwi  r9,r9,31
10010774:	2f 89 00 00 	cmpwi   cr7,r9,0
10010778:	41 9e 00 78 	beq     cr7,100107f0 <really_start_request+0x8f4>
	{
	syslog(
1001077c:	81 3f 00 28 	lwz     r9,40(r31)
10010780:	39 29 00 08 	addi    r9,r9,8
10010784:	7d 23 4b 78 	mr      r3,r9
10010788:	48 00 0b c5 	bl      1001134c <httpd_ntoa>
1001078c:	7c 6a 1b 78 	mr      r10,r3
10010790:	81 3f 00 28 	lwz     r9,40(r31)
10010794:	81 29 00 ac 	lwz     r9,172(r9)
10010798:	38 60 00 05 	li      r3,5
1001079c:	3d 00 10 02 	lis     r8,4098
100107a0:	38 88 ad b0 	addi    r4,r8,-21072
100107a4:	7d 45 53 78 	mr      r5,r10
100107a8:	7d 26 4b 78 	mr      r6,r9
100107ac:	4c c6 31 82 	crclr   4*cr1+eq
100107b0:	48 01 cf d5 	bl      1002d784 <syslog@plt>
	    LOG_NOTICE, "%.80s URL \"%.80s\" is executable but isn't CGI",
	    httpd_ntoa( &hc->client_addr ), hc->encodedurl );
	httpd_send_err(
100107b4:	3d 20 10 03 	lis     r9,4099
100107b8:	81 49 c1 20 	lwz     r10,-16096(r9)
100107bc:	81 3f 00 28 	lwz     r9,40(r31)
100107c0:	81 29 00 ac 	lwz     r9,172(r9)
100107c4:	80 7f 00 28 	lwz     r3,40(r31)
100107c8:	38 80 01 93 	li      r4,403
100107cc:	7d 45 53 78 	mr      r5,r10
100107d0:	3d 40 10 02 	lis     r10,4098
100107d4:	38 ca 8e d4 	addi    r6,r10,-28972
100107d8:	3d 40 10 02 	lis     r10,4098
100107dc:	38 ea ad e0 	addi    r7,r10,-21024
100107e0:	7d 28 4b 78 	mr      r8,r9
100107e4:	4b ff 80 11 	bl      100087f4 <httpd_send_err>
	    hc, 403, err403title, "",
	    ERROR_FORM( err403form, "The requested URL '%.80s' resolves to a file which is marked executable but is not a CGI file; retrieving it is forbidden.\n" ),
	    hc->encodedurl );
	return -1;
100107e8:	39 20 ff ff 	li      r9,-1
100107ec:	48 00 02 e4 	b       10010ad0 <really_start_request+0xbd4>
	}
    if ( hc->pathinfo[0] != '\0' )
100107f0:	81 3f 00 28 	lwz     r9,40(r31)
100107f4:	81 29 00 c4 	lwz     r9,196(r9)
100107f8:	89 29 00 00 	lbz     r9,0(r9)
100107fc:	55 29 06 3e 	clrlwi  r9,r9,24
10010800:	2f 89 00 00 	cmpwi   cr7,r9,0
10010804:	41 9e 00 78 	beq     cr7,1001087c <really_start_request+0x980>
	{
	syslog(
10010808:	81 3f 00 28 	lwz     r9,40(r31)
1001080c:	39 29 00 08 	addi    r9,r9,8
10010810:	7d 23 4b 78 	mr      r3,r9
10010814:	48 00 0b 39 	bl      1001134c <httpd_ntoa>
10010818:	7c 6a 1b 78 	mr      r10,r3
1001081c:	81 3f 00 28 	lwz     r9,40(r31)
10010820:	81 29 00 ac 	lwz     r9,172(r9)
10010824:	38 60 00 06 	li      r3,6
10010828:	3d 00 10 02 	lis     r8,4098
1001082c:	38 88 ae 5c 	addi    r4,r8,-20900
10010830:	7d 45 53 78 	mr      r5,r10
10010834:	7d 26 4b 78 	mr      r6,r9
10010838:	4c c6 31 82 	crclr   4*cr1+eq
1001083c:	48 01 cf 49 	bl      1002d784 <syslog@plt>
	    LOG_INFO, "%.80s URL \"%.80s\" has pathinfo but isn't CGI",
	    httpd_ntoa( &hc->client_addr ), hc->encodedurl );
	httpd_send_err(
10010840:	3d 20 10 03 	lis     r9,4099
10010844:	81 49 c1 20 	lwz     r10,-16096(r9)
10010848:	81 3f 00 28 	lwz     r9,40(r31)
1001084c:	81 29 00 ac 	lwz     r9,172(r9)
10010850:	80 7f 00 28 	lwz     r3,40(r31)
10010854:	38 80 01 93 	li      r4,403
10010858:	7d 45 53 78 	mr      r5,r10
1001085c:	3d 40 10 02 	lis     r10,4098
10010860:	38 ca 8e d4 	addi    r6,r10,-28972
10010864:	3d 40 10 02 	lis     r10,4098
10010868:	38 ea ae 8c 	addi    r7,r10,-20852
1001086c:	7d 28 4b 78 	mr      r8,r9
10010870:	4b ff 7f 85 	bl      100087f4 <httpd_send_err>
	    hc, 403, err403title, "",
	    ERROR_FORM( err403form, "The requested URL '%.80s' resolves to a file plus CGI-style pathinfo, but the file is not a valid CGI file.\n" ),
	    hc->encodedurl );
	return -1;
10010874:	39 20 ff ff 	li      r9,-1
10010878:	48 00 02 58 	b       10010ad0 <really_start_request+0xbd4>
	}

    if ( hc->method != METHOD_GET && hc->method != METHOD_HEAD )
1001087c:	81 3f 00 28 	lwz     r9,40(r31)
10010880:	81 29 00 9c 	lwz     r9,156(r9)
10010884:	2f 89 00 01 	cmpwi   cr7,r9,1
10010888:	41 9e 00 60 	beq     cr7,100108e8 <really_start_request+0x9ec>
1001088c:	81 3f 00 28 	lwz     r9,40(r31)
10010890:	81 29 00 9c 	lwz     r9,156(r9)
10010894:	2f 89 00 02 	cmpwi   cr7,r9,2
10010898:	41 9e 00 50 	beq     cr7,100108e8 <really_start_request+0x9ec>
	{
	httpd_send_err(
1001089c:	3d 20 10 03 	lis     r9,4099
100108a0:	83 a9 c1 3c 	lwz     r29,-16068(r9)
100108a4:	3d 20 10 03 	lis     r9,4099
100108a8:	83 c9 c1 40 	lwz     r30,-16064(r9)
100108ac:	81 3f 00 28 	lwz     r9,40(r31)
100108b0:	81 29 00 9c 	lwz     r9,156(r9)
100108b4:	7d 23 4b 78 	mr      r3,r9
100108b8:	4b ff 8d 31 	bl      100095e8 <httpd_method_str>
100108bc:	7c 69 1b 78 	mr      r9,r3
100108c0:	80 7f 00 28 	lwz     r3,40(r31)
100108c4:	38 80 01 f5 	li      r4,501
100108c8:	7f a5 eb 78 	mr      r5,r29
100108cc:	3d 40 10 02 	lis     r10,4098
100108d0:	38 ca 8e d4 	addi    r6,r10,-28972
100108d4:	7f c7 f3 78 	mr      r7,r30
100108d8:	7d 28 4b 78 	mr      r8,r9
100108dc:	4b ff 7f 19 	bl      100087f4 <httpd_send_err>
	    hc, 501, err501title, "", err501form, httpd_method_str( hc->method ) );
	return -1;
100108e0:	39 20 ff ff 	li      r9,-1
100108e4:	48 00 01 ec 	b       10010ad0 <really_start_request+0xbd4>
	}

    /* Fill in last_byte_index, if necessary. */
    if ( hc->got_range &&
100108e8:	81 3f 00 28 	lwz     r9,40(r31)
100108ec:	81 29 01 50 	lwz     r9,336(r9)
100108f0:	2f 89 00 00 	cmpwi   cr7,r9,0
100108f4:	41 9e 00 44 	beq     cr7,10010938 <really_start_request+0xa3c>
	 ( hc->last_byte_index == -1 || hc->last_byte_index >= hc->sb.st_size ) )
100108f8:	81 3f 00 28 	lwz     r9,40(r31)
100108fc:	81 49 01 5c 	lwz     r10,348(r9)
	    hc, 501, err501title, "", err501form, httpd_method_str( hc->method ) );
	return -1;
	}

    /* Fill in last_byte_index, if necessary. */
    if ( hc->got_range &&
10010900:	39 20 ff ff 	li      r9,-1
10010904:	7f 8a 48 00 	cmpw    cr7,r10,r9
10010908:	41 9e 00 1c 	beq     cr7,10010924 <really_start_request+0xa28>
	 ( hc->last_byte_index == -1 || hc->last_byte_index >= hc->sb.st_size ) )
1001090c:	81 3f 00 28 	lwz     r9,40(r31)
10010910:	81 49 01 5c 	lwz     r10,348(r9)
10010914:	81 3f 00 28 	lwz     r9,40(r31)
10010918:	81 29 01 94 	lwz     r9,404(r9)
1001091c:	7f 8a 48 00 	cmpw    cr7,r10,r9
10010920:	41 9c 00 18 	blt     cr7,10010938 <really_start_request+0xa3c>
	hc->last_byte_index = hc->sb.st_size - 1;
10010924:	81 3f 00 28 	lwz     r9,40(r31)
10010928:	81 29 01 94 	lwz     r9,404(r9)
1001092c:	39 49 ff ff 	addi    r10,r9,-1
10010930:	81 3f 00 28 	lwz     r9,40(r31)
10010934:	91 49 01 5c 	stw     r10,348(r9)

    figure_mime( hc );
10010938:	80 7f 00 28 	lwz     r3,40(r31)
1001093c:	4b ff c6 09 	bl      1000cf44 <figure_mime>

    if ( hc->method == METHOD_HEAD )
10010940:	81 3f 00 28 	lwz     r9,40(r31)
10010944:	81 29 00 9c 	lwz     r9,156(r9)
10010948:	2f 89 00 02 	cmpwi   cr7,r9,2
1001094c:	40 9e 00 4c 	bne     cr7,10010998 <really_start_request+0xa9c>
	{
	send_mime(
10010950:	3d 20 10 03 	lis     r9,4099
10010954:	80 c9 c1 04 	lwz     r6,-16124(r9)
10010958:	81 3f 00 28 	lwz     r9,40(r31)
1001095c:	80 e9 00 c0 	lwz     r7,192(r9)
10010960:	81 3f 00 28 	lwz     r9,40(r31)
10010964:	81 09 01 40 	lwz     r8,320(r9)
10010968:	81 3f 00 28 	lwz     r9,40(r31)
1001096c:	81 29 01 94 	lwz     r9,404(r9)
10010970:	81 5f 00 28 	lwz     r10,40(r31)
10010974:	81 4a 01 a8 	lwz     r10,424(r10)
10010978:	80 7f 00 28 	lwz     r3,40(r31)
1001097c:	38 80 00 c8 	li      r4,200
10010980:	7c c5 33 78 	mr      r5,r6
10010984:	7c e6 3b 78 	mr      r6,r7
10010988:	3c e0 10 02 	lis     r7,4098
1001098c:	38 e7 8e d4 	addi    r7,r7,-28972
10010990:	4b ff 74 29 	bl      10007db8 <send_mime>
10010994:	48 00 01 38 	b       10010acc <really_start_request+0xbd0>
	    hc, 200, ok200title, hc->encodings, "", hc->type, hc->sb.st_size,
	    hc->sb.st_mtime );
	}
    else if ( hc->if_modified_since != (time_t) -1 &&
10010998:	81 3f 00 28 	lwz     r9,40(r31)
1001099c:	81 49 01 34 	lwz     r10,308(r9)
100109a0:	39 20 ff ff 	li      r9,-1
100109a4:	7f 8a 48 00 	cmpw    cr7,r10,r9
100109a8:	41 9e 00 64 	beq     cr7,10010a0c <really_start_request+0xb10>
	 hc->if_modified_since >= hc->sb.st_mtime )
100109ac:	81 3f 00 28 	lwz     r9,40(r31)
100109b0:	81 49 01 34 	lwz     r10,308(r9)
100109b4:	81 3f 00 28 	lwz     r9,40(r31)
100109b8:	81 29 01 a8 	lwz     r9,424(r9)
	{
	send_mime(
	    hc, 200, ok200title, hc->encodings, "", hc->type, hc->sb.st_size,
	    hc->sb.st_mtime );
	}
    else if ( hc->if_modified_since != (time_t) -1 &&
100109bc:	7f 8a 48 00 	cmpw    cr7,r10,r9
100109c0:	41 9c 00 4c 	blt     cr7,10010a0c <really_start_request+0xb10>
	 hc->if_modified_since >= hc->sb.st_mtime )
	{
	send_mime(
100109c4:	3d 20 10 03 	lis     r9,4099
100109c8:	80 e9 c1 14 	lwz     r7,-16108(r9)
100109cc:	81 3f 00 28 	lwz     r9,40(r31)
100109d0:	81 09 00 c0 	lwz     r8,192(r9)
100109d4:	81 3f 00 28 	lwz     r9,40(r31)
100109d8:	81 29 01 40 	lwz     r9,320(r9)
100109dc:	81 5f 00 28 	lwz     r10,40(r31)
100109e0:	81 4a 01 a8 	lwz     r10,424(r10)
100109e4:	80 7f 00 28 	lwz     r3,40(r31)
100109e8:	38 80 01 30 	li      r4,304
100109ec:	7c e5 3b 78 	mr      r5,r7
100109f0:	7d 06 43 78 	mr      r6,r8
100109f4:	3d 00 10 02 	lis     r8,4098
100109f8:	38 e8 8e d4 	addi    r7,r8,-28972
100109fc:	7d 28 4b 78 	mr      r8,r9
10010a00:	39 20 ff ff 	li      r9,-1
10010a04:	4b ff 73 b5 	bl      10007db8 <send_mime>
10010a08:	48 00 00 c4 	b       10010acc <really_start_request+0xbd0>
	    hc, 304, err304title, hc->encodings, "", hc->type, (off_t) -1,
	    hc->sb.st_mtime );
	}
    else
	{
	hc->file_address = mmc_map( hc->expnfilename, &(hc->sb), nowP );
10010a0c:	81 3f 00 28 	lwz     r9,40(r31)
10010a10:	81 49 00 bc 	lwz     r10,188(r9)
10010a14:	81 3f 00 28 	lwz     r9,40(r31)
10010a18:	39 29 01 68 	addi    r9,r9,360
10010a1c:	7d 43 53 78 	mr      r3,r10
10010a20:	7d 24 4b 78 	mr      r4,r9
10010a24:	80 bf 00 2c 	lwz     r5,44(r31)
10010a28:	48 00 1b 0d 	bl      10012534 <mmc_map>
10010a2c:	7c 6a 1b 78 	mr      r10,r3
10010a30:	81 3f 00 28 	lwz     r9,40(r31)
10010a34:	91 49 01 c4 	stw     r10,452(r9)
	if ( hc->file_address == (char*) 0 )
10010a38:	81 3f 00 28 	lwz     r9,40(r31)
10010a3c:	81 29 01 c4 	lwz     r9,452(r9)
10010a40:	2f 89 00 00 	cmpwi   cr7,r9,0
10010a44:	40 9e 00 44 	bne     cr7,10010a88 <really_start_request+0xb8c>
	    {
	    httpd_send_err( hc, 500, err500title, "", err500form, hc->encodedurl );
10010a48:	3d 20 10 03 	lis     r9,4099
10010a4c:	81 09 c1 34 	lwz     r8,-16076(r9)
10010a50:	3d 20 10 03 	lis     r9,4099
10010a54:	81 49 c1 38 	lwz     r10,-16072(r9)
10010a58:	81 3f 00 28 	lwz     r9,40(r31)
10010a5c:	81 29 00 ac 	lwz     r9,172(r9)
10010a60:	80 7f 00 28 	lwz     r3,40(r31)
10010a64:	38 80 01 f4 	li      r4,500
10010a68:	7d 05 43 78 	mr      r5,r8
10010a6c:	3d 00 10 02 	lis     r8,4098
10010a70:	38 c8 8e d4 	addi    r6,r8,-28972
10010a74:	7d 47 53 78 	mr      r7,r10
10010a78:	7d 28 4b 78 	mr      r8,r9
10010a7c:	4b ff 7d 79 	bl      100087f4 <httpd_send_err>
	    return -1;
10010a80:	39 20 ff ff 	li      r9,-1
10010a84:	48 00 00 4c 	b       10010ad0 <really_start_request+0xbd4>
	    }
	send_mime(
10010a88:	3d 20 10 03 	lis     r9,4099
10010a8c:	80 c9 c1 04 	lwz     r6,-16124(r9)
10010a90:	81 3f 00 28 	lwz     r9,40(r31)
10010a94:	80 e9 00 c0 	lwz     r7,192(r9)
10010a98:	81 3f 00 28 	lwz     r9,40(r31)
10010a9c:	81 09 01 40 	lwz     r8,320(r9)
10010aa0:	81 3f 00 28 	lwz     r9,40(r31)
10010aa4:	81 29 01 94 	lwz     r9,404(r9)
10010aa8:	81 5f 00 28 	lwz     r10,40(r31)
10010aac:	81 4a 01 a8 	lwz     r10,424(r10)
10010ab0:	80 7f 00 28 	lwz     r3,40(r31)
10010ab4:	38 80 00 c8 	li      r4,200
10010ab8:	7c c5 33 78 	mr      r5,r6
10010abc:	7c e6 3b 78 	mr      r6,r7
10010ac0:	3c e0 10 02 	lis     r7,4098
10010ac4:	38 e7 8e d4 	addi    r7,r7,-28972
10010ac8:	4b ff 72 f1 	bl      10007db8 <send_mime>
	    hc, 200, ok200title, hc->encodings, "", hc->type, hc->sb.st_size,
	    hc->sb.st_mtime );
	}

    return 0;
10010acc:	39 20 00 00 	li      r9,0
    }
10010ad0:	7d 23 4b 78 	mr      r3,r9
10010ad4:	39 7f 00 40 	addi    r11,r31,64
10010ad8:	80 0b 00 04 	lwz     r0,4(r11)
10010adc:	7c 08 03 a6 	mtlr    r0
10010ae0:	83 ab ff f4 	lwz     r29,-12(r11)
10010ae4:	83 cb ff f8 	lwz     r30,-8(r11)
10010ae8:	83 eb ff fc 	lwz     r31,-4(r11)
10010aec:	7d 61 5b 78 	mr      r1,r11
10010af0:	4e 80 00 20 	blr

10010af4 <httpd_start_request>:


int
httpd_start_request( httpd_conn* hc, struct timeval* nowP )
    {
10010af4:	94 21 ff d0 	stwu    r1,-48(r1)
10010af8:	7c 08 02 a6 	mflr    r0
10010afc:	90 01 00 34 	stw     r0,52(r1)
10010b00:	93 e1 00 2c 	stw     r31,44(r1)
10010b04:	7c 3f 0b 78 	mr      r31,r1
10010b08:	90 7f 00 18 	stw     r3,24(r31)
10010b0c:	90 9f 00 1c 	stw     r4,28(r31)
    int r;

    /* Really start the request. */
    r = really_start_request( hc, nowP );
10010b10:	80 7f 00 18 	lwz     r3,24(r31)
10010b14:	80 9f 00 1c 	lwz     r4,28(r31)
10010b18:	4b ff f3 e5 	bl      1000fefc <really_start_request>
10010b1c:	90 7f 00 08 	stw     r3,8(r31)

    /* And return the status. */
    return r;
10010b20:	81 3f 00 08 	lwz     r9,8(r31)
    }
10010b24:	7d 23 4b 78 	mr      r3,r9
10010b28:	39 7f 00 30 	addi    r11,r31,48
10010b2c:	80 0b 00 04 	lwz     r0,4(r11)
10010b30:	7c 08 03 a6 	mtlr    r0
10010b34:	83 eb ff fc 	lwz     r31,-4(r11)
10010b38:	7d 61 5b 78 	mr      r1,r11
10010b3c:	4e 80 00 20 	blr

10010b40 <make_log_entry>:


static void
make_log_entry( httpd_conn* hc, struct timeval* nowP )
    {
10010b40:	94 21 fd 90 	stwu    r1,-624(r1)
10010b44:	7c 08 02 a6 	mflr    r0
10010b48:	90 01 02 74 	stw     r0,628(r1)
10010b4c:	93 a1 02 64 	stw     r29,612(r1)
10010b50:	93 c1 02 68 	stw     r30,616(r1)
10010b54:	93 e1 02 6c 	stw     r31,620(r1)
10010b58:	7c 3f 0b 78 	mr      r31,r1
10010b5c:	90 7f 02 58 	stw     r3,600(r31)
10010b60:	90 9f 02 5c 	stw     r4,604(r31)
    char* ru;
    char url[305];
    char bytes[40];

    if ( hc->hs->no_log )
10010b64:	81 3f 02 58 	lwz     r9,600(r31)
10010b68:	81 29 00 04 	lwz     r9,4(r9)
10010b6c:	81 29 00 30 	lwz     r9,48(r9)
10010b70:	2f 89 00 00 	cmpwi   cr7,r9,0
10010b74:	40 9e 03 a0 	bne     cr7,10010f14 <make_log_entry+0x3d4>
    ** syslogd puts it in.  The included syslogtocern script turns the
    ** results into true CERN format.
    */

    /* Format remote user. */
    if ( hc->remoteuser[0] != '\0' )
10010b78:	81 3f 02 58 	lwz     r9,600(r31)
10010b7c:	81 29 00 f8 	lwz     r9,248(r9)
10010b80:	89 29 00 00 	lbz     r9,0(r9)
10010b84:	55 29 06 3e 	clrlwi  r9,r9,24
10010b88:	2f 89 00 00 	cmpwi   cr7,r9,0
10010b8c:	41 9e 00 14 	beq     cr7,10010ba0 <make_log_entry+0x60>
	ru = hc->remoteuser;
10010b90:	81 3f 02 58 	lwz     r9,600(r31)
10010b94:	81 29 00 f8 	lwz     r9,248(r9)
10010b98:	91 3f 00 18 	stw     r9,24(r31)
10010b9c:	48 00 00 10 	b       10010bac <make_log_entry+0x6c>
    else
	ru = "-";
10010ba0:	3d 20 10 02 	lis     r9,4098
10010ba4:	39 29 ae fc 	addi    r9,r9,-20740
10010ba8:	91 3f 00 18 	stw     r9,24(r31)
    /* If we're vhosting, prepend the hostname to the url.  This is
    ** a little weird, perhaps writing separate log files for
    ** each vhost would make more sense.
    */
    if ( hc->hs->vhost && ! hc->tildemapped )
10010bac:	81 3f 02 58 	lwz     r9,600(r31)
10010bb0:	81 29 00 04 	lwz     r9,4(r9)
10010bb4:	81 29 00 3c 	lwz     r9,60(r9)
10010bb8:	2f 89 00 00 	cmpwi   cr7,r9,0
10010bbc:	41 9e 00 6c 	beq     cr7,10010c28 <make_log_entry+0xe8>
10010bc0:	81 3f 02 58 	lwz     r9,600(r31)
10010bc4:	81 29 01 54 	lwz     r9,340(r9)
10010bc8:	2f 89 00 00 	cmpwi   cr7,r9,0
10010bcc:	40 9e 00 5c 	bne     cr7,10010c28 <make_log_entry+0xe8>
	(void) my_snprintf( url, sizeof(url),
	    "/%.100s%.200s",
	    hc->hostname == (char*) 0 ? hc->hs->server_hostname : hc->hostname,
10010bd0:	81 3f 02 58 	lwz     r9,600(r31)
10010bd4:	81 29 01 44 	lwz     r9,324(r9)
    /* If we're vhosting, prepend the hostname to the url.  This is
    ** a little weird, perhaps writing separate log files for
    ** each vhost would make more sense.
    */
    if ( hc->hs->vhost && ! hc->tildemapped )
	(void) my_snprintf( url, sizeof(url),
10010bd8:	2f 89 00 00 	cmpwi   cr7,r9,0
10010bdc:	40 9e 00 14 	bne     cr7,10010bf0 <make_log_entry+0xb0>
	    "/%.100s%.200s",
	    hc->hostname == (char*) 0 ? hc->hs->server_hostname : hc->hostname,
10010be0:	81 3f 02 58 	lwz     r9,600(r31)
10010be4:	81 29 00 04 	lwz     r9,4(r9)
    /* If we're vhosting, prepend the hostname to the url.  This is
    ** a little weird, perhaps writing separate log files for
    ** each vhost would make more sense.
    */
    if ( hc->hs->vhost && ! hc->tildemapped )
	(void) my_snprintf( url, sizeof(url),
10010be8:	81 29 00 04 	lwz     r9,4(r9)
10010bec:	48 00 00 0c 	b       10010bf8 <make_log_entry+0xb8>
10010bf0:	81 3f 02 58 	lwz     r9,600(r31)
10010bf4:	81 29 01 44 	lwz     r9,324(r9)
10010bf8:	81 5f 02 58 	lwz     r10,600(r31)
10010bfc:	81 4a 00 ac 	lwz     r10,172(r10)
10010c00:	39 1f 00 2c 	addi    r8,r31,44
10010c04:	7d 03 43 78 	mr      r3,r8
10010c08:	38 80 01 31 	li      r4,305
10010c0c:	3d 00 10 02 	lis     r8,4098
10010c10:	38 a8 af 00 	addi    r5,r8,-20736
10010c14:	7d 26 4b 78 	mr      r6,r9
10010c18:	7d 47 53 78 	mr      r7,r10
10010c1c:	4c c6 31 82 	crclr   4*cr1+eq
10010c20:	48 00 09 35 	bl      10011554 <my_snprintf>
10010c24:	48 00 00 2c 	b       10010c50 <make_log_entry+0x110>
	    "/%.100s%.200s",
	    hc->hostname == (char*) 0 ? hc->hs->server_hostname : hc->hostname,
	    hc->encodedurl );
    else
	(void) my_snprintf( url, sizeof(url),
10010c28:	81 3f 02 58 	lwz     r9,600(r31)
10010c2c:	81 29 00 ac 	lwz     r9,172(r9)
10010c30:	39 5f 00 2c 	addi    r10,r31,44
10010c34:	7d 43 53 78 	mr      r3,r10
10010c38:	38 80 01 31 	li      r4,305
10010c3c:	3d 40 10 02 	lis     r10,4098
10010c40:	38 aa af 10 	addi    r5,r10,-20720
10010c44:	7d 26 4b 78 	mr      r6,r9
10010c48:	4c c6 31 82 	crclr   4*cr1+eq
10010c4c:	48 00 09 09 	bl      10011554 <my_snprintf>
	    "%.200s", hc->encodedurl );
    /* Format the bytes. */
    if ( hc->bytes_sent >= 0 )
10010c50:	81 3f 02 58 	lwz     r9,600(r31)
10010c54:	81 29 00 a8 	lwz     r9,168(r9)
10010c58:	2f 89 00 00 	cmpwi   cr7,r9,0
10010c5c:	41 9c 00 40 	blt     cr7,10010c9c <make_log_entry+0x15c>
	(void) my_snprintf(
	    bytes, sizeof(bytes), "%lld", (long long) hc->bytes_sent );
10010c60:	81 3f 02 58 	lwz     r9,600(r31)
10010c64:	81 29 00 a8 	lwz     r9,168(r9)
    else
	(void) my_snprintf( url, sizeof(url),
	    "%.200s", hc->encodedurl );
    /* Format the bytes. */
    if ( hc->bytes_sent >= 0 )
	(void) my_snprintf(
10010c68:	7d 3e 4b 78 	mr      r30,r9
10010c6c:	7d 29 fe 70 	srawi   r9,r9,31
10010c70:	7d 3d 4b 78 	mr      r29,r9
10010c74:	39 3f 01 60 	addi    r9,r31,352
10010c78:	7d 23 4b 78 	mr      r3,r9
10010c7c:	38 80 00 28 	li      r4,40
10010c80:	3d 20 10 02 	lis     r9,4098
10010c84:	38 a9 af 18 	addi    r5,r9,-20712
10010c88:	7f a7 eb 78 	mr      r7,r29
10010c8c:	7f c8 f3 78 	mr      r8,r30
10010c90:	4c c6 31 82 	crclr   4*cr1+eq
10010c94:	48 00 08 c1 	bl      10011554 <my_snprintf>
10010c98:	48 00 00 10 	b       10010ca8 <make_log_entry+0x168>
	    bytes, sizeof(bytes), "%lld", (long long) hc->bytes_sent );
    else
	(void) strcpy( bytes, "-" );
10010c9c:	39 3f 01 60 	addi    r9,r31,352
10010ca0:	39 40 2d 00 	li      r10,11520
10010ca4:	b1 49 00 00 	sth     r10,0(r9)

    /* Logfile or syslog? */
    if ( hc->hs->logfp != (FILE*) 0 )
10010ca8:	81 3f 02 58 	lwz     r9,600(r31)
10010cac:	81 29 00 04 	lwz     r9,4(r9)
10010cb0:	81 29 00 34 	lwz     r9,52(r9)
10010cb4:	2f 89 00 00 	cmpwi   cr7,r9,0
10010cb8:	41 9e 01 e4 	beq     cr7,10010e9c <make_log_entry+0x35c>
	{
	time_t now;
	struct tm* t;
	const char* cernfmt_nozone = "%d/%b/%Y:%H:%M:%S";
10010cbc:	3d 20 10 02 	lis     r9,4098
10010cc0:	39 29 af 20 	addi    r9,r9,-20704
10010cc4:	91 3f 00 24 	stw     r9,36(r31)
	int zone;
	char sign;
	char date[100];

	/* Get the current time, if necessary. */
	if ( nowP != (struct timeval*) 0 )
10010cc8:	81 3f 02 5c 	lwz     r9,604(r31)
10010ccc:	2f 89 00 00 	cmpwi   cr7,r9,0
10010cd0:	41 9e 00 14 	beq     cr7,10010ce4 <make_log_entry+0x1a4>
	    now = nowP->tv_sec;
10010cd4:	81 3f 02 5c 	lwz     r9,604(r31)
10010cd8:	81 29 00 00 	lwz     r9,0(r9)
10010cdc:	91 3f 01 88 	stw     r9,392(r31)
10010ce0:	48 00 00 14 	b       10010cf4 <make_log_entry+0x1b4>
	else
	    now = time( (time_t*) 0 );
10010ce4:	38 60 00 00 	li      r3,0
10010ce8:	48 01 c7 8d 	bl      1002d474 <time@plt>
10010cec:	7c 69 1b 78 	mr      r9,r3
10010cf0:	91 3f 01 88 	stw     r9,392(r31)
	/* Format the time, forcing a numeric timezone (some log analyzers
	** are stoooopid about this).
	*/
	t = localtime( &now );
10010cf4:	39 3f 01 88 	addi    r9,r31,392
10010cf8:	7d 23 4b 78 	mr      r3,r9
10010cfc:	48 01 c9 31 	bl      1002d62c <localtime@plt>
10010d00:	90 7f 00 28 	stw     r3,40(r31)
	(void) strftime( date_nozone, sizeof(date_nozone), cernfmt_nozone, t );
10010d04:	39 3f 01 f0 	addi    r9,r31,496
10010d08:	7d 23 4b 78 	mr      r3,r9
10010d0c:	38 80 00 64 	li      r4,100
10010d10:	80 bf 00 24 	lwz     r5,36(r31)
10010d14:	80 df 00 28 	lwz     r6,40(r31)
10010d18:	48 01 c9 0d 	bl      1002d624 <strftime@plt>
#ifdef HAVE_TM_GMTOFF
	zone = t->tm_gmtoff / 60L;
10010d1c:	81 3f 00 28 	lwz     r9,40(r31)
10010d20:	81 29 00 24 	lwz     r9,36(r9)
10010d24:	3d 40 88 88 	lis     r10,-30584
10010d28:	61 4a 88 89 	ori     r10,r10,34953
10010d2c:	7d 49 50 96 	mulhw   r10,r9,r10
10010d30:	7d 4a 4a 14 	add     r10,r10,r9
10010d34:	7d 4a 2e 70 	srawi   r10,r10,5
10010d38:	7d 29 fe 70 	srawi   r9,r9,31
10010d3c:	7d 29 50 50 	subf    r9,r9,r10
10010d40:	91 3f 00 1c 	stw     r9,28(r31)
#else
	zone = -timezone / 60L;
	/* Probably have to add something about daylight time here. */
#endif
	if ( zone >= 0 )
10010d44:	81 3f 00 1c 	lwz     r9,28(r31)
10010d48:	2f 89 00 00 	cmpwi   cr7,r9,0
10010d4c:	41 9c 00 10 	blt     cr7,10010d5c <make_log_entry+0x21c>
	    sign = '+';
10010d50:	39 20 00 2b 	li      r9,43
10010d54:	99 3f 00 20 	stb     r9,32(r31)
10010d58:	48 00 00 18 	b       10010d70 <make_log_entry+0x230>
	else
	    {
	    sign = '-';
10010d5c:	39 20 00 2d 	li      r9,45
10010d60:	99 3f 00 20 	stb     r9,32(r31)
	    zone = -zone;
10010d64:	81 3f 00 1c 	lwz     r9,28(r31)
10010d68:	7d 29 00 d0 	neg     r9,r9
10010d6c:	91 3f 00 1c 	stw     r9,28(r31)
	    }
	zone = ( zone / 60 ) * 100 + zone % 60;
10010d70:	81 3f 00 1c 	lwz     r9,28(r31)
10010d74:	3d 40 88 88 	lis     r10,-30584
10010d78:	61 4a 88 89 	ori     r10,r10,34953
10010d7c:	7d 49 50 96 	mulhw   r10,r9,r10
10010d80:	7d 4a 4a 14 	add     r10,r10,r9
10010d84:	7d 4a 2e 70 	srawi   r10,r10,5
10010d88:	7d 29 fe 70 	srawi   r9,r9,31
10010d8c:	7d 29 50 50 	subf    r9,r9,r10
10010d90:	1d 09 00 64 	mulli   r8,r9,100
10010d94:	81 3f 00 1c 	lwz     r9,28(r31)
10010d98:	3d 40 88 88 	lis     r10,-30584
10010d9c:	61 4a 88 89 	ori     r10,r10,34953
10010da0:	7d 49 50 96 	mulhw   r10,r9,r10
10010da4:	7d 4a 4a 14 	add     r10,r10,r9
10010da8:	7d 47 2e 70 	srawi   r7,r10,5
10010dac:	7d 2a fe 70 	srawi   r10,r9,31
10010db0:	7d 4a 38 50 	subf    r10,r10,r7
10010db4:	1d 4a 00 3c 	mulli   r10,r10,60
10010db8:	7d 4a 48 50 	subf    r10,r10,r9
10010dbc:	7d 28 52 14 	add     r9,r8,r10
10010dc0:	91 3f 00 1c 	stw     r9,28(r31)
	(void) my_snprintf( date, sizeof(date),
10010dc4:	89 3f 00 20 	lbz     r9,32(r31)
10010dc8:	55 29 06 3e 	clrlwi  r9,r9,24
10010dcc:	39 1f 01 8c 	addi    r8,r31,396
10010dd0:	39 5f 01 f0 	addi    r10,r31,496
10010dd4:	7d 03 43 78 	mr      r3,r8
10010dd8:	38 80 00 64 	li      r4,100
10010ddc:	3d 00 10 02 	lis     r8,4098
10010de0:	38 a8 af 34 	addi    r5,r8,-20684
10010de4:	7d 46 53 78 	mr      r6,r10
10010de8:	7d 27 4b 78 	mr      r7,r9
10010dec:	81 1f 00 1c 	lwz     r8,28(r31)
10010df0:	4c c6 31 82 	crclr   4*cr1+eq
10010df4:	48 00 07 61 	bl      10011554 <my_snprintf>
	    "%s %c%04d", date_nozone, sign, zone );
	/* And write the log entry. */
	(void) fprintf( hc->hs->logfp,
10010df8:	81 3f 02 58 	lwz     r9,600(r31)
10010dfc:	81 29 00 04 	lwz     r9,4(r9)
10010e00:	83 a9 00 34 	lwz     r29,52(r9)
10010e04:	81 3f 02 58 	lwz     r9,600(r31)
10010e08:	39 29 00 08 	addi    r9,r9,8
10010e0c:	7d 23 4b 78 	mr      r3,r9
10010e10:	48 00 05 3d 	bl      1001134c <httpd_ntoa>
10010e14:	7c 7e 1b 78 	mr      r30,r3
10010e18:	81 3f 02 58 	lwz     r9,600(r31)
10010e1c:	81 29 00 9c 	lwz     r9,156(r9)
10010e20:	7d 23 4b 78 	mr      r3,r9
10010e24:	4b ff 87 c5 	bl      100095e8 <httpd_method_str>
10010e28:	7c 68 1b 78 	mr      r8,r3
10010e2c:	81 3f 02 58 	lwz     r9,600(r31)
10010e30:	81 49 00 b4 	lwz     r10,180(r9)
10010e34:	81 3f 02 58 	lwz     r9,600(r31)
10010e38:	80 89 00 a0 	lwz     r4,160(r9)
10010e3c:	81 3f 02 58 	lwz     r9,600(r31)
10010e40:	80 a9 00 cc 	lwz     r5,204(r9)
10010e44:	81 3f 02 58 	lwz     r9,600(r31)
10010e48:	80 c9 00 d0 	lwz     r6,208(r9)
10010e4c:	38 ff 01 8c 	addi    r7,r31,396
10010e50:	39 3f 00 2c 	addi    r9,r31,44
10010e54:	90 81 00 08 	stw     r4,8(r1)
10010e58:	38 9f 01 60 	addi    r4,r31,352
10010e5c:	90 81 00 0c 	stw     r4,12(r1)
10010e60:	90 a1 00 10 	stw     r5,16(r1)
10010e64:	90 c1 00 14 	stw     r6,20(r1)
10010e68:	7f a3 eb 78 	mr      r3,r29
10010e6c:	3c c0 10 02 	lis     r6,4098
10010e70:	38 86 af 40 	addi    r4,r6,-20672
10010e74:	7f c5 f3 78 	mr      r5,r30
10010e78:	80 df 00 18 	lwz     r6,24(r31)
10010e7c:	4c c6 31 82 	crclr   4*cr1+eq
10010e80:	48 01 c7 fd 	bl      1002d67c <fprintf@plt>
	    "%.80s - %.80s [%s] \"%.80s %.300s %.80s\" %d %s \"%.200s\" \"%.200s\"\n",
	    httpd_ntoa( &hc->client_addr ), ru, date,
	    httpd_method_str( hc->method ), url, hc->protocol,
	    hc->status, bytes, hc->referrer, hc->useragent );
#ifdef FLUSH_LOG_EVERY_TIME
	(void) fflush( hc->hs->logfp );
10010e84:	81 3f 02 58 	lwz     r9,600(r31)
10010e88:	81 29 00 04 	lwz     r9,4(r9)
10010e8c:	81 29 00 34 	lwz     r9,52(r9)
10010e90:	7d 23 4b 78 	mr      r3,r9
10010e94:	48 01 c5 69 	bl      1002d3fc <fflush@plt>
10010e98:	48 00 00 7c 	b       10010f14 <make_log_entry+0x3d4>
#endif
	}
    else
	syslog( LOG_INFO,
10010e9c:	81 3f 02 58 	lwz     r9,600(r31)
10010ea0:	39 29 00 08 	addi    r9,r9,8
10010ea4:	7d 23 4b 78 	mr      r3,r9
10010ea8:	48 00 04 a5 	bl      1001134c <httpd_ntoa>
10010eac:	7c 7e 1b 78 	mr      r30,r3
10010eb0:	81 3f 02 58 	lwz     r9,600(r31)
10010eb4:	81 29 00 9c 	lwz     r9,156(r9)
10010eb8:	7d 23 4b 78 	mr      r3,r9
10010ebc:	4b ff 87 2d 	bl      100095e8 <httpd_method_str>
10010ec0:	7c 67 1b 78 	mr      r7,r3
10010ec4:	81 3f 02 58 	lwz     r9,600(r31)
10010ec8:	81 29 00 b4 	lwz     r9,180(r9)
10010ecc:	81 5f 02 58 	lwz     r10,600(r31)
10010ed0:	81 4a 00 a0 	lwz     r10,160(r10)
10010ed4:	81 1f 02 58 	lwz     r8,600(r31)
10010ed8:	80 a8 00 cc 	lwz     r5,204(r8)
10010edc:	81 1f 02 58 	lwz     r8,600(r31)
10010ee0:	80 c8 00 d0 	lwz     r6,208(r8)
10010ee4:	39 1f 00 2c 	addi    r8,r31,44
10010ee8:	38 9f 01 60 	addi    r4,r31,352
10010eec:	90 81 00 08 	stw     r4,8(r1)
10010ef0:	90 a1 00 0c 	stw     r5,12(r1)
10010ef4:	90 c1 00 10 	stw     r6,16(r1)
10010ef8:	38 60 00 06 	li      r3,6
10010efc:	3c c0 10 02 	lis     r6,4098
10010f00:	38 86 af 84 	addi    r4,r6,-20604
10010f04:	7f c5 f3 78 	mr      r5,r30
10010f08:	80 df 00 18 	lwz     r6,24(r31)
10010f0c:	4c c6 31 82 	crclr   4*cr1+eq
10010f10:	48 01 c8 75 	bl      1002d784 <syslog@plt>
	    "%.80s - %.80s \"%.80s %.200s %.80s\" %d %s \"%.200s\" \"%.200s\"",
	    httpd_ntoa( &hc->client_addr ), ru,
	    httpd_method_str( hc->method ), url, hc->protocol,
	    hc->status, bytes, hc->referrer, hc->useragent );
    }
10010f14:	39 7f 02 70 	addi    r11,r31,624
10010f18:	80 0b 00 04 	lwz     r0,4(r11)
10010f1c:	7c 08 03 a6 	mtlr    r0
10010f20:	83 ab ff f4 	lwz     r29,-12(r11)
10010f24:	83 cb ff f8 	lwz     r30,-8(r11)
10010f28:	83 eb ff fc 	lwz     r31,-4(r11)
10010f2c:	7d 61 5b 78 	mr      r1,r11
10010f30:	4e 80 00 20 	blr

10010f34 <check_referrer>:


/* Returns 1 if ok to serve the url, 0 if not. */
static int
check_referrer( httpd_conn* hc )
    {
10010f34:	94 21 ff d0 	stwu    r1,-48(r1)
10010f38:	7c 08 02 a6 	mflr    r0
10010f3c:	90 01 00 34 	stw     r0,52(r1)
10010f40:	93 e1 00 2c 	stw     r31,44(r1)
10010f44:	7c 3f 0b 78 	mr      r31,r1
10010f48:	90 7f 00 18 	stw     r3,24(r31)
    int r;
    char* cp;

    /* Are we doing referrer checking at all? */
    if ( hc->hs->url_pattern == (char*) 0 )
10010f4c:	81 3f 00 18 	lwz     r9,24(r31)
10010f50:	81 29 00 04 	lwz     r9,4(r9)
10010f54:	81 29 00 44 	lwz     r9,68(r9)
10010f58:	2f 89 00 00 	cmpwi   cr7,r9,0
10010f5c:	40 9e 00 0c 	bne     cr7,10010f68 <check_referrer+0x34>
	return 1;
10010f60:	39 20 00 01 	li      r9,1
10010f64:	48 00 00 f8 	b       1001105c <check_referrer+0x128>

    r = really_check_referrer( hc );
10010f68:	80 7f 00 18 	lwz     r3,24(r31)
10010f6c:	48 00 01 0d 	bl      10011078 <really_check_referrer>
10010f70:	90 7f 00 0c 	stw     r3,12(r31)

    if ( ! r )
10010f74:	81 3f 00 0c 	lwz     r9,12(r31)
10010f78:	2f 89 00 00 	cmpwi   cr7,r9,0
10010f7c:	40 9e 00 dc 	bne     cr7,10011058 <check_referrer+0x124>
	{
	if ( hc->hs->vhost && hc->hostname != (char*) 0 )
10010f80:	81 3f 00 18 	lwz     r9,24(r31)
10010f84:	81 29 00 04 	lwz     r9,4(r9)
10010f88:	81 29 00 3c 	lwz     r9,60(r9)
10010f8c:	2f 89 00 00 	cmpwi   cr7,r9,0
10010f90:	41 9e 00 24 	beq     cr7,10010fb4 <check_referrer+0x80>
10010f94:	81 3f 00 18 	lwz     r9,24(r31)
10010f98:	81 29 01 44 	lwz     r9,324(r9)
10010f9c:	2f 89 00 00 	cmpwi   cr7,r9,0
10010fa0:	41 9e 00 14 	beq     cr7,10010fb4 <check_referrer+0x80>
	    cp = hc->hostname;
10010fa4:	81 3f 00 18 	lwz     r9,24(r31)
10010fa8:	81 29 01 44 	lwz     r9,324(r9)
10010fac:	91 3f 00 08 	stw     r9,8(r31)
10010fb0:	48 00 00 14 	b       10010fc4 <check_referrer+0x90>
	else
	    cp = hc->hs->server_hostname;
10010fb4:	81 3f 00 18 	lwz     r9,24(r31)
10010fb8:	81 29 00 04 	lwz     r9,4(r9)
10010fbc:	81 29 00 04 	lwz     r9,4(r9)
10010fc0:	91 3f 00 08 	stw     r9,8(r31)
	if ( cp == (char*) 0 )
10010fc4:	81 3f 00 08 	lwz     r9,8(r31)
10010fc8:	2f 89 00 00 	cmpwi   cr7,r9,0
10010fcc:	40 9e 00 10 	bne     cr7,10010fdc <check_referrer+0xa8>
	    cp = "";
10010fd0:	3d 20 10 02 	lis     r9,4098
10010fd4:	39 29 8e d4 	addi    r9,r9,-28972
10010fd8:	91 3f 00 08 	stw     r9,8(r31)
	syslog(
10010fdc:	81 3f 00 18 	lwz     r9,24(r31)
10010fe0:	39 29 00 08 	addi    r9,r9,8
10010fe4:	7d 23 4b 78 	mr      r3,r9
10010fe8:	48 00 03 65 	bl      1001134c <httpd_ntoa>
10010fec:	7c 68 1b 78 	mr      r8,r3
10010ff0:	81 3f 00 18 	lwz     r9,24(r31)
10010ff4:	81 49 00 ac 	lwz     r10,172(r9)
10010ff8:	81 3f 00 18 	lwz     r9,24(r31)
10010ffc:	81 29 00 cc 	lwz     r9,204(r9)
10011000:	38 60 00 06 	li      r3,6
10011004:	3c e0 10 02 	lis     r7,4098
10011008:	38 87 af c0 	addi    r4,r7,-20544
1001100c:	7d 05 43 78 	mr      r5,r8
10011010:	80 df 00 08 	lwz     r6,8(r31)
10011014:	7d 47 53 78 	mr      r7,r10
10011018:	7d 28 4b 78 	mr      r8,r9
1001101c:	4c c6 31 82 	crclr   4*cr1+eq
10011020:	48 01 c7 65 	bl      1002d784 <syslog@plt>
	    LOG_INFO, "%.80s non-local referrer \"%.80s%.80s\" \"%.80s\"",
	    httpd_ntoa( &hc->client_addr ), cp, hc->encodedurl, hc->referrer );
	httpd_send_err(
10011024:	3d 20 10 03 	lis     r9,4099
10011028:	81 49 c1 20 	lwz     r10,-16096(r9)
1001102c:	81 3f 00 18 	lwz     r9,24(r31)
10011030:	81 29 00 ac 	lwz     r9,172(r9)
10011034:	80 7f 00 18 	lwz     r3,24(r31)
10011038:	38 80 01 93 	li      r4,403
1001103c:	7d 45 53 78 	mr      r5,r10
10011040:	3d 40 10 02 	lis     r10,4098
10011044:	38 ca 8e d4 	addi    r6,r10,-28972
10011048:	3d 40 10 02 	lis     r10,4098
1001104c:	38 ea af f0 	addi    r7,r10,-20496
10011050:	7d 28 4b 78 	mr      r8,r9
10011054:	4b ff 77 a1 	bl      100087f4 <httpd_send_err>
	    hc, 403, err403title, "",
	    ERROR_FORM( err403form, "You must supply a local referrer to get URL '%.80s' from this server.\n" ),
	    hc->encodedurl );
	}
    return r;
10011058:	81 3f 00 0c 	lwz     r9,12(r31)
    }
1001105c:	7d 23 4b 78 	mr      r3,r9
10011060:	39 7f 00 30 	addi    r11,r31,48
10011064:	80 0b 00 04 	lwz     r0,4(r11)
10011068:	7c 08 03 a6 	mtlr    r0
1001106c:	83 eb ff fc 	lwz     r31,-4(r11)
10011070:	7d 61 5b 78 	mr      r1,r11
10011074:	4e 80 00 20 	blr

10011078 <really_check_referrer>:


/* Returns 1 if ok to serve the url, 0 if not. */
static int
really_check_referrer( httpd_conn* hc )
    {
10011078:	94 21 ff c0 	stwu    r1,-64(r1)
1001107c:	7c 08 02 a6 	mflr    r0
10011080:	90 01 00 44 	stw     r0,68(r1)
10011084:	93 e1 00 3c 	stw     r31,60(r1)
10011088:	7c 3f 0b 78 	mr      r31,r1
1001108c:	90 7f 00 28 	stw     r3,40(r31)
    char* cp3;
    static char* refhost = (char*) 0;
    static size_t refhost_size = 0;
    char *lp;

    hs = hc->hs;
10011090:	81 3f 00 28 	lwz     r9,40(r31)
10011094:	81 29 00 04 	lwz     r9,4(r9)
10011098:	91 3f 00 18 	stw     r9,24(r31)

    /* Check for an empty referrer. */
    if ( hc->referrer == (char*) 0 || hc->referrer[0] == '\0' ||
1001109c:	81 3f 00 28 	lwz     r9,40(r31)
100110a0:	81 29 00 cc 	lwz     r9,204(r9)
100110a4:	2f 89 00 00 	cmpwi   cr7,r9,0
100110a8:	41 9e 00 44 	beq     cr7,100110ec <really_check_referrer+0x74>
100110ac:	81 3f 00 28 	lwz     r9,40(r31)
100110b0:	81 29 00 cc 	lwz     r9,204(r9)
100110b4:	89 29 00 00 	lbz     r9,0(r9)
100110b8:	55 29 06 3e 	clrlwi  r9,r9,24
100110bc:	2f 89 00 00 	cmpwi   cr7,r9,0
100110c0:	41 9e 00 2c 	beq     cr7,100110ec <really_check_referrer+0x74>
	 ( cp1 = strstr( hc->referrer, "//" ) ) == (char*) 0 )
100110c4:	81 3f 00 28 	lwz     r9,40(r31)
100110c8:	81 29 00 cc 	lwz     r9,204(r9)
    char *lp;

    hs = hc->hs;

    /* Check for an empty referrer. */
    if ( hc->referrer == (char*) 0 || hc->referrer[0] == '\0' ||
100110cc:	7d 23 4b 78 	mr      r3,r9
100110d0:	3d 20 10 02 	lis     r9,4098
100110d4:	38 89 95 1c 	addi    r4,r9,-27364
100110d8:	48 01 c2 fd 	bl      1002d3d4 <strstr@plt>
100110dc:	90 7f 00 08 	stw     r3,8(r31)
100110e0:	81 3f 00 08 	lwz     r9,8(r31)
100110e4:	2f 89 00 00 	cmpwi   cr7,r9,0
100110e8:	40 9e 00 4c 	bne     cr7,10011134 <really_check_referrer+0xbc>
	 ( cp1 = strstr( hc->referrer, "//" ) ) == (char*) 0 )
	{
	/* Disallow if we require a referrer and the url matches. */
	if ( hs->no_empty_referrers && match( hs->url_pattern, hc->origfilename ) )
100110ec:	81 3f 00 18 	lwz     r9,24(r31)
100110f0:	81 29 00 4c 	lwz     r9,76(r9)
100110f4:	2f 89 00 00 	cmpwi   cr7,r9,0
100110f8:	41 9e 00 34 	beq     cr7,1001112c <really_check_referrer+0xb4>
100110fc:	81 3f 00 18 	lwz     r9,24(r31)
10011100:	81 49 00 44 	lwz     r10,68(r9)
10011104:	81 3f 00 28 	lwz     r9,40(r31)
10011108:	81 29 00 b8 	lwz     r9,184(r9)
1001110c:	7d 43 53 78 	mr      r3,r10
10011110:	7d 24 4b 78 	mr      r4,r9
10011114:	48 00 32 11 	bl      10014324 <match>
10011118:	7c 69 1b 78 	mr      r9,r3
1001111c:	2f 89 00 00 	cmpwi   cr7,r9,0
10011120:	41 9e 00 0c 	beq     cr7,1001112c <really_check_referrer+0xb4>
	    return 0;
10011124:	39 20 00 00 	li      r9,0
10011128:	48 00 02 08 	b       10011330 <really_check_referrer+0x2b8>
	/* Otherwise ok. */
	return 1;
1001112c:	39 20 00 01 	li      r9,1
10011130:	48 00 02 00 	b       10011330 <really_check_referrer+0x2b8>
	}

    /* Extract referrer host. */
    cp1 += 2;
10011134:	81 3f 00 08 	lwz     r9,8(r31)
10011138:	39 29 00 02 	addi    r9,r9,2
1001113c:	91 3f 00 08 	stw     r9,8(r31)
    for ( cp2 = cp1; *cp2 != '/' && *cp2 != ':' && *cp2 != '\0'; ++cp2 )
10011140:	81 3f 00 08 	lwz     r9,8(r31)
10011144:	91 3f 00 0c 	stw     r9,12(r31)
10011148:	48 00 00 10 	b       10011158 <really_check_referrer+0xe0>
1001114c:	81 3f 00 0c 	lwz     r9,12(r31)
10011150:	39 29 00 01 	addi    r9,r9,1
10011154:	91 3f 00 0c 	stw     r9,12(r31)
10011158:	81 3f 00 0c 	lwz     r9,12(r31)
1001115c:	89 29 00 00 	lbz     r9,0(r9)
10011160:	55 29 06 3e 	clrlwi  r9,r9,24
10011164:	2b 89 00 2f 	cmplwi  cr7,r9,47
10011168:	41 9e 00 2c 	beq     cr7,10011194 <really_check_referrer+0x11c>
1001116c:	81 3f 00 0c 	lwz     r9,12(r31)
10011170:	89 29 00 00 	lbz     r9,0(r9)
10011174:	55 29 06 3e 	clrlwi  r9,r9,24
10011178:	2b 89 00 3a 	cmplwi  cr7,r9,58
1001117c:	41 9e 00 18 	beq     cr7,10011194 <really_check_referrer+0x11c>
10011180:	81 3f 00 0c 	lwz     r9,12(r31)
10011184:	89 29 00 00 	lbz     r9,0(r9)
10011188:	55 29 06 3e 	clrlwi  r9,r9,24
1001118c:	2f 89 00 00 	cmpwi   cr7,r9,0
10011190:	40 9e ff bc 	bne     cr7,1001114c <really_check_referrer+0xd4>
	continue;
    httpd_realloc_str( &refhost, &refhost_size, cp2 - cp1 );
10011194:	81 5f 00 0c 	lwz     r10,12(r31)
10011198:	81 3f 00 08 	lwz     r9,8(r31)
1001119c:	7d 29 50 50 	subf    r9,r9,r10
100111a0:	3d 40 10 03 	lis     r10,4099
100111a4:	38 6a dd 8c 	addi    r3,r10,-8820
100111a8:	3d 40 10 03 	lis     r10,4099
100111ac:	38 8a dd 90 	addi    r4,r10,-8816
100111b0:	7d 25 4b 78 	mr      r5,r9
100111b4:	4b ff 71 65 	bl      10008318 <httpd_realloc_str>
    for ( cp3 = refhost; cp1 < cp2; ++cp1, ++cp3 )
100111b8:	3d 20 10 03 	lis     r9,4099
100111bc:	81 29 dd 8c 	lwz     r9,-8820(r9)
100111c0:	91 3f 00 10 	stw     r9,16(r31)
100111c4:	48 00 00 8c 	b       10011250 <really_check_referrer+0x1d8>
	if ( isupper(*cp1) )
100111c8:	48 01 c6 65 	bl      1002d82c <__ctype_b_loc@plt>
100111cc:	7c 69 1b 78 	mr      r9,r3
100111d0:	81 49 00 00 	lwz     r10,0(r9)
100111d4:	81 3f 00 08 	lwz     r9,8(r31)
100111d8:	89 29 00 00 	lbz     r9,0(r9)
100111dc:	55 29 06 3e 	clrlwi  r9,r9,24
100111e0:	55 29 08 3c 	rlwinm  r9,r9,1,0,30
100111e4:	7d 2a 4a 14 	add     r9,r10,r9
100111e8:	a1 29 00 00 	lhz     r9,0(r9)
100111ec:	55 29 04 3e 	clrlwi  r9,r9,16
100111f0:	55 29 07 fe 	clrlwi  r9,r9,31
100111f4:	2f 89 00 00 	cmpwi   cr7,r9,0
100111f8:	41 9e 00 2c 	beq     cr7,10011224 <really_check_referrer+0x1ac>
	    *cp3 = tolower(*cp1);
100111fc:	81 3f 00 08 	lwz     r9,8(r31)
10011200:	89 29 00 00 	lbz     r9,0(r9)
10011204:	55 29 06 3e 	clrlwi  r9,r9,24
10011208:	7d 23 4b 78 	mr      r3,r9
1001120c:	48 01 c2 59 	bl      1002d464 <tolower@plt>
10011210:	7c 69 1b 78 	mr      r9,r3
10011214:	55 2a 06 3e 	clrlwi  r10,r9,24
10011218:	81 3f 00 10 	lwz     r9,16(r31)
1001121c:	99 49 00 00 	stb     r10,0(r9)
10011220:	48 00 00 18 	b       10011238 <really_check_referrer+0x1c0>
	else
	    *cp3 = *cp1;
10011224:	81 3f 00 08 	lwz     r9,8(r31)
10011228:	89 29 00 00 	lbz     r9,0(r9)
1001122c:	55 2a 06 3e 	clrlwi  r10,r9,24
10011230:	81 3f 00 10 	lwz     r9,16(r31)
10011234:	99 49 00 00 	stb     r10,0(r9)
    /* Extract referrer host. */
    cp1 += 2;
    for ( cp2 = cp1; *cp2 != '/' && *cp2 != ':' && *cp2 != '\0'; ++cp2 )
	continue;
    httpd_realloc_str( &refhost, &refhost_size, cp2 - cp1 );
    for ( cp3 = refhost; cp1 < cp2; ++cp1, ++cp3 )
10011238:	81 3f 00 08 	lwz     r9,8(r31)
1001123c:	39 29 00 01 	addi    r9,r9,1
10011240:	91 3f 00 08 	stw     r9,8(r31)
10011244:	81 3f 00 10 	lwz     r9,16(r31)
10011248:	39 29 00 01 	addi    r9,r9,1
1001124c:	91 3f 00 10 	stw     r9,16(r31)
10011250:	81 5f 00 08 	lwz     r10,8(r31)
10011254:	81 3f 00 0c 	lwz     r9,12(r31)
10011258:	7f 8a 48 40 	cmplw   cr7,r10,r9
1001125c:	41 9c ff 6c 	blt     cr7,100111c8 <really_check_referrer+0x150>
	if ( isupper(*cp1) )
	    *cp3 = tolower(*cp1);
	else
	    *cp3 = *cp1;
    *cp3 = '\0';
10011260:	81 3f 00 10 	lwz     r9,16(r31)
10011264:	39 40 00 00 	li      r10,0
10011268:	99 49 00 00 	stb     r10,0(r9)

    /* Local pattern? */
    if ( hs->local_pattern != (char*) 0 )
1001126c:	81 3f 00 18 	lwz     r9,24(r31)
10011270:	81 29 00 48 	lwz     r9,72(r9)
10011274:	2f 89 00 00 	cmpwi   cr7,r9,0
10011278:	41 9e 00 14 	beq     cr7,1001128c <really_check_referrer+0x214>
	lp = hs->local_pattern;
1001127c:	81 3f 00 18 	lwz     r9,24(r31)
10011280:	81 29 00 48 	lwz     r9,72(r9)
10011284:	91 3f 00 14 	stw     r9,20(r31)
10011288:	48 00 00 54 	b       100112dc <really_check_referrer+0x264>
    else
	{
	/* No local pattern.  What's our hostname? */
	if ( ! hs->vhost )
1001128c:	81 3f 00 18 	lwz     r9,24(r31)
10011290:	81 29 00 3c 	lwz     r9,60(r9)
10011294:	2f 89 00 00 	cmpwi   cr7,r9,0
10011298:	40 9e 00 24 	bne     cr7,100112bc <really_check_referrer+0x244>
	    {
	    /* Not vhosting, use the server name. */
	    lp = hs->server_hostname;
1001129c:	81 3f 00 18 	lwz     r9,24(r31)
100112a0:	81 29 00 04 	lwz     r9,4(r9)
100112a4:	91 3f 00 14 	stw     r9,20(r31)
	    if ( lp == (char*) 0 )
100112a8:	81 3f 00 14 	lwz     r9,20(r31)
100112ac:	2f 89 00 00 	cmpwi   cr7,r9,0
100112b0:	40 9e 00 2c 	bne     cr7,100112dc <really_check_referrer+0x264>
		/* Couldn't figure out local hostname - give up. */
		return 1;
100112b4:	39 20 00 01 	li      r9,1
100112b8:	48 00 00 78 	b       10011330 <really_check_referrer+0x2b8>
	    }
	else
	    {
	    /* We are vhosting, use the hostname on this connection. */
	    lp = hc->hostname;
100112bc:	81 3f 00 28 	lwz     r9,40(r31)
100112c0:	81 29 01 44 	lwz     r9,324(r9)
100112c4:	91 3f 00 14 	stw     r9,20(r31)
	    if ( lp == (char*) 0 )
100112c8:	81 3f 00 14 	lwz     r9,20(r31)
100112cc:	2f 89 00 00 	cmpwi   cr7,r9,0
100112d0:	40 9e 00 0c 	bne     cr7,100112dc <really_check_referrer+0x264>
		/* Oops, no hostname.  Maybe it's an old browser that
		** doesn't send a Host: header.  We could figure out
		** the default hostname for this IP address, but it's
		** not worth it for the few requests like this.
		*/
		return 1;
100112d4:	39 20 00 01 	li      r9,1
100112d8:	48 00 00 58 	b       10011330 <really_check_referrer+0x2b8>
	}

    /* If the referrer host doesn't match the local host pattern, and
    ** the filename does match the url pattern, it's an illegal reference.
    */
    if ( ! match( lp, refhost ) && match( hs->url_pattern, hc->origfilename ) )
100112dc:	3d 20 10 03 	lis     r9,4099
100112e0:	81 29 dd 8c 	lwz     r9,-8820(r9)
100112e4:	80 7f 00 14 	lwz     r3,20(r31)
100112e8:	7d 24 4b 78 	mr      r4,r9
100112ec:	48 00 30 39 	bl      10014324 <match>
100112f0:	7c 69 1b 78 	mr      r9,r3
100112f4:	2f 89 00 00 	cmpwi   cr7,r9,0
100112f8:	40 9e 00 34 	bne     cr7,1001132c <really_check_referrer+0x2b4>
100112fc:	81 3f 00 18 	lwz     r9,24(r31)
10011300:	81 49 00 44 	lwz     r10,68(r9)
10011304:	81 3f 00 28 	lwz     r9,40(r31)
10011308:	81 29 00 b8 	lwz     r9,184(r9)
1001130c:	7d 43 53 78 	mr      r3,r10
10011310:	7d 24 4b 78 	mr      r4,r9
10011314:	48 00 30 11 	bl      10014324 <match>
10011318:	7c 69 1b 78 	mr      r9,r3
1001131c:	2f 89 00 00 	cmpwi   cr7,r9,0
10011320:	41 9e 00 0c 	beq     cr7,1001132c <really_check_referrer+0x2b4>
	return 0;
10011324:	39 20 00 00 	li      r9,0
10011328:	48 00 00 08 	b       10011330 <really_check_referrer+0x2b8>
    /* Otherwise ok. */
    return 1;
1001132c:	39 20 00 01 	li      r9,1
    }
10011330:	7d 23 4b 78 	mr      r3,r9
10011334:	39 7f 00 40 	addi    r11,r31,64
10011338:	80 0b 00 04 	lwz     r0,4(r11)
1001133c:	7c 08 03 a6 	mtlr    r0
10011340:	83 eb ff fc 	lwz     r31,-4(r11)
10011344:	7d 61 5b 78 	mr      r1,r11
10011348:	4e 80 00 20 	blr

1001134c <httpd_ntoa>:


char*
httpd_ntoa( httpd_sockaddr* saP )
    {
1001134c:	94 21 ff d0 	stwu    r1,-48(r1)
10011350:	7c 08 02 a6 	mflr    r0
10011354:	90 01 00 34 	stw     r0,52(r1)
10011358:	93 c1 00 28 	stw     r30,40(r1)
1001135c:	93 e1 00 2c 	stw     r31,44(r1)
10011360:	7c 3f 0b 78 	mr      r31,r1
10011364:	90 7f 00 18 	stw     r3,24(r31)
#ifdef USE_IPV6
    static char str[200];

    if ( getnameinfo( &saP->sa, sockaddr_len( saP ), str, sizeof(str), 0, 0, NI_NUMERICHOST ) != 0 )
10011368:	83 df 00 18 	lwz     r30,24(r31)
1001136c:	80 7f 00 18 	lwz     r3,24(r31)
10011370:	48 00 01 8d 	bl      100114fc <sockaddr_len>
10011374:	7c 69 1b 78 	mr      r9,r3
10011378:	7f c3 f3 78 	mr      r3,r30
1001137c:	7d 24 4b 78 	mr      r4,r9
10011380:	3d 20 10 03 	lis     r9,4099
10011384:	38 a9 dd 94 	addi    r5,r9,-8812
10011388:	38 c0 00 c8 	li      r6,200
1001138c:	38 e0 00 00 	li      r7,0
10011390:	39 00 00 00 	li      r8,0
10011394:	39 20 00 01 	li      r9,1
10011398:	48 01 c1 4d 	bl      1002d4e4 <getnameinfo@plt>
1001139c:	7c 69 1b 78 	mr      r9,r3
100113a0:	2f 89 00 00 	cmpwi   cr7,r9,0
100113a4:	41 9e 00 28 	beq     cr7,100113cc <httpd_ntoa+0x80>
	{
	str[0] = '?';
100113a8:	3d 20 10 03 	lis     r9,4099
100113ac:	39 29 dd 94 	addi    r9,r9,-8812
100113b0:	39 40 00 3f 	li      r10,63
100113b4:	99 49 00 00 	stb     r10,0(r9)
	str[1] = '\0';
100113b8:	3d 20 10 03 	lis     r9,4099
100113bc:	39 29 dd 94 	addi    r9,r9,-8812
100113c0:	39 40 00 00 	li      r10,0
100113c4:	99 49 00 01 	stb     r10,1(r9)
100113c8:	48 00 00 b4 	b       1001147c <httpd_ntoa+0x130>
	}
    else if ( IN6_IS_ADDR_V4MAPPED( &saP->sa_in6.sin6_addr ) && strncmp( str, "::ffff:", 7 ) == 0 )
100113cc:	81 3f 00 18 	lwz     r9,24(r31)
100113d0:	39 29 00 08 	addi    r9,r9,8
100113d4:	91 3f 00 08 	stw     r9,8(r31)
100113d8:	81 3f 00 08 	lwz     r9,8(r31)
100113dc:	81 29 00 00 	lwz     r9,0(r9)
100113e0:	2f 89 00 00 	cmpwi   cr7,r9,0
100113e4:	40 9e 00 3c 	bne     cr7,10011420 <httpd_ntoa+0xd4>
100113e8:	81 3f 00 08 	lwz     r9,8(r31)
100113ec:	81 29 00 04 	lwz     r9,4(r9)
100113f0:	2f 89 00 00 	cmpwi   cr7,r9,0
100113f4:	40 9e 00 2c 	bne     cr7,10011420 <httpd_ntoa+0xd4>
100113f8:	81 3f 00 08 	lwz     r9,8(r31)
100113fc:	83 c9 00 08 	lwz     r30,8(r9)
10011400:	39 20 00 00 	li      r9,0
10011404:	61 23 ff ff 	ori     r3,r9,65535
10011408:	48 01 c3 55 	bl      1002d75c <htonl@plt>
1001140c:	7c 69 1b 78 	mr      r9,r3
10011410:	7f 9e 48 40 	cmplw   cr7,r30,r9
10011414:	40 9e 00 0c 	bne     cr7,10011420 <httpd_ntoa+0xd4>
10011418:	39 20 00 01 	li      r9,1
1001141c:	48 00 00 08 	b       10011424 <httpd_ntoa+0xd8>
10011420:	39 20 00 00 	li      r9,0
10011424:	2f 89 00 00 	cmpwi   cr7,r9,0
10011428:	41 9e 00 54 	beq     cr7,1001147c <httpd_ntoa+0x130>
1001142c:	3d 20 10 03 	lis     r9,4099
10011430:	38 69 dd 94 	addi    r3,r9,-8812
10011434:	3d 20 10 02 	lis     r9,4098
10011438:	38 89 b0 38 	addi    r4,r9,-20424
1001143c:	38 a0 00 07 	li      r5,7
10011440:	48 01 c3 b5 	bl      1002d7f4 <strncmp@plt>
10011444:	7c 69 1b 78 	mr      r9,r3
10011448:	2f 89 00 00 	cmpwi   cr7,r9,0
1001144c:	40 9e 00 30 	bne     cr7,1001147c <httpd_ntoa+0x130>
	/* Elide IPv6ish prefix for IPv4 addresses. */
	(void) ol_strcpy( str, &str[7] );
10011450:	3d 20 10 03 	lis     r9,4099
10011454:	38 69 dd 9b 	addi    r3,r9,-8805
10011458:	48 01 c1 fd 	bl      1002d654 <strlen@plt>
1001145c:	7c 69 1b 78 	mr      r9,r3
10011460:	39 29 00 01 	addi    r9,r9,1
10011464:	3d 40 10 03 	lis     r10,4099
10011468:	38 6a dd 94 	addi    r3,r10,-8812
1001146c:	3d 40 10 03 	lis     r10,4099
10011470:	38 8a dd 9b 	addi    r4,r10,-8805
10011474:	7d 25 4b 78 	mr      r5,r9
10011478:	48 01 bf ad 	bl      1002d424 <memmove@plt>

    return str;
1001147c:	3d 20 10 03 	lis     r9,4099
10011480:	39 29 dd 94 	addi    r9,r9,-8812
#else /* USE_IPV6 */

    return inet_ntoa( saP->sa_in.sin_addr );

#endif /* USE_IPV6 */
    }
10011484:	7d 23 4b 78 	mr      r3,r9
10011488:	39 7f 00 30 	addi    r11,r31,48
1001148c:	80 0b 00 04 	lwz     r0,4(r11)
10011490:	7c 08 03 a6 	mtlr    r0
10011494:	83 cb ff f8 	lwz     r30,-8(r11)
10011498:	83 eb ff fc 	lwz     r31,-4(r11)
1001149c:	7d 61 5b 78 	mr      r1,r11
100114a0:	4e 80 00 20 	blr

100114a4 <sockaddr_check>:


static int
sockaddr_check( httpd_sockaddr* saP )
    {
100114a4:	94 21 ff e0 	stwu    r1,-32(r1)
100114a8:	93 e1 00 1c 	stw     r31,28(r1)
100114ac:	7c 3f 0b 78 	mr      r31,r1
100114b0:	90 7f 00 08 	stw     r3,8(r31)
    switch ( saP->sa.sa_family )
100114b4:	81 3f 00 08 	lwz     r9,8(r31)
100114b8:	a1 29 00 00 	lhz     r9,0(r9)
100114bc:	55 29 04 3e 	clrlwi  r9,r9,16
100114c0:	2f 89 00 02 	cmpwi   cr7,r9,2
100114c4:	41 9e 00 10 	beq     cr7,100114d4 <sockaddr_check+0x30>
100114c8:	2f 89 00 0a 	cmpwi   cr7,r9,10
100114cc:	41 9e 00 10 	beq     cr7,100114dc <sockaddr_check+0x38>
100114d0:	48 00 00 14 	b       100114e4 <sockaddr_check+0x40>
	{
	case AF_INET: return 1;
100114d4:	39 20 00 01 	li      r9,1
100114d8:	48 00 00 10 	b       100114e8 <sockaddr_check+0x44>
#ifdef USE_IPV6
	case AF_INET6: return 1;
100114dc:	39 20 00 01 	li      r9,1
100114e0:	48 00 00 08 	b       100114e8 <sockaddr_check+0x44>
#endif /* USE_IPV6 */
	default:
	return 0;
100114e4:	39 20 00 00 	li      r9,0
	}
    }
100114e8:	7d 23 4b 78 	mr      r3,r9
100114ec:	39 7f 00 20 	addi    r11,r31,32
100114f0:	83 eb ff fc 	lwz     r31,-4(r11)
100114f4:	7d 61 5b 78 	mr      r1,r11
100114f8:	4e 80 00 20 	blr

100114fc <sockaddr_len>:


static size_t
sockaddr_len( httpd_sockaddr* saP )
    {
100114fc:	94 21 ff e0 	stwu    r1,-32(r1)
10011500:	93 e1 00 1c 	stw     r31,28(r1)
10011504:	7c 3f 0b 78 	mr      r31,r1
10011508:	90 7f 00 08 	stw     r3,8(r31)
    switch ( saP->sa.sa_family )
1001150c:	81 3f 00 08 	lwz     r9,8(r31)
10011510:	a1 29 00 00 	lhz     r9,0(r9)
10011514:	55 29 04 3e 	clrlwi  r9,r9,16
10011518:	2f 89 00 02 	cmpwi   cr7,r9,2
1001151c:	41 9e 00 10 	beq     cr7,1001152c <sockaddr_len+0x30>
10011520:	2f 89 00 0a 	cmpwi   cr7,r9,10
10011524:	41 9e 00 10 	beq     cr7,10011534 <sockaddr_len+0x38>
10011528:	48 00 00 14 	b       1001153c <sockaddr_len+0x40>
	{
	case AF_INET: return sizeof(struct sockaddr_in);
1001152c:	39 20 00 10 	li      r9,16
10011530:	48 00 00 10 	b       10011540 <sockaddr_len+0x44>
#ifdef USE_IPV6
	case AF_INET6: return sizeof(struct sockaddr_in6);
10011534:	39 20 00 1c 	li      r9,28
10011538:	48 00 00 08 	b       10011540 <sockaddr_len+0x44>
#endif /* USE_IPV6 */
	default:
	return 0;	/* shouldn't happen */
1001153c:	39 20 00 00 	li      r9,0
	}
    }
10011540:	7d 23 4b 78 	mr      r3,r9
10011544:	39 7f 00 20 	addi    r11,r31,32
10011548:	83 eb ff fc 	lwz     r31,-4(r11)
1001154c:	7d 61 5b 78 	mr      r1,r11
10011550:	4e 80 00 20 	blr

10011554 <my_snprintf>:
** vsnprintf(), it is probably vulnerable to buffer overruns.
** Upgrade!
*/
static int
my_snprintf( char* str, size_t size, const char* format, ... )
    {
10011554:	94 21 ff 70 	stwu    r1,-144(r1)
10011558:	7c 08 02 a6 	mflr    r0
1001155c:	90 01 00 94 	stw     r0,148(r1)
10011560:	93 e1 00 8c 	stw     r31,140(r1)
10011564:	7c 3f 0b 78 	mr      r31,r1
10011568:	90 7f 00 18 	stw     r3,24(r31)
1001156c:	90 9f 00 1c 	stw     r4,28(r31)
10011570:	90 df 00 24 	stw     r6,36(r31)
10011574:	90 ff 00 28 	stw     r7,40(r31)
10011578:	91 1f 00 2c 	stw     r8,44(r31)
1001157c:	91 3f 00 30 	stw     r9,48(r31)
10011580:	91 5f 00 34 	stw     r10,52(r31)
10011584:	40 86 00 24 	bne     cr1,100115a8 <my_snprintf+0x54>
10011588:	d8 3f 00 38 	stfd    f1,56(r31)
1001158c:	d8 5f 00 40 	stfd    f2,64(r31)
10011590:	d8 7f 00 48 	stfd    f3,72(r31)
10011594:	d8 9f 00 50 	stfd    f4,80(r31)
10011598:	d8 bf 00 58 	stfd    f5,88(r31)
1001159c:	d8 df 00 60 	stfd    f6,96(r31)
100115a0:	d8 ff 00 68 	stfd    f7,104(r31)
100115a4:	d9 1f 00 70 	stfd    f8,112(r31)
100115a8:	90 bf 00 78 	stw     r5,120(r31)
    va_list ap;
    int r;

    va_start( ap, format );
100115ac:	39 20 00 03 	li      r9,3
100115b0:	99 3f 00 0c 	stb     r9,12(r31)
100115b4:	39 20 00 00 	li      r9,0
100115b8:	99 3f 00 0d 	stb     r9,13(r31)
100115bc:	39 3f 00 98 	addi    r9,r31,152
100115c0:	91 3f 00 10 	stw     r9,16(r31)
100115c4:	39 3f 00 18 	addi    r9,r31,24
100115c8:	91 3f 00 14 	stw     r9,20(r31)
#ifdef HAVE_VSNPRINTF
    r = vsnprintf( str, size, format, ap );
100115cc:	39 3f 00 0c 	addi    r9,r31,12
100115d0:	80 7f 00 18 	lwz     r3,24(r31)
100115d4:	80 9f 00 1c 	lwz     r4,28(r31)
100115d8:	80 bf 00 78 	lwz     r5,120(r31)
100115dc:	7d 26 4b 78 	mr      r6,r9
100115e0:	48 01 c1 dd 	bl      1002d7bc <vsnprintf@plt>
100115e4:	90 7f 00 08 	stw     r3,8(r31)
#else /* HAVE_VSNPRINTF */
    r = vsprintf( str, format, ap );
#endif /* HAVE_VSNPRINTF */
    va_end( ap );
    return r;
100115e8:	81 3f 00 08 	lwz     r9,8(r31)
    }
100115ec:	7d 23 4b 78 	mr      r3,r9
100115f0:	39 7f 00 90 	addi    r11,r31,144
100115f4:	80 0b 00 04 	lwz     r0,4(r11)
100115f8:	7c 08 03 a6 	mtlr    r0
100115fc:	83 eb ff fc 	lwz     r31,-4(r11)
10011600:	7d 61 5b 78 	mr      r1,r11
10011604:	4e 80 00 20 	blr

10011608 <httpd_read_fully>:


/* Read the requested buffer completely, accounting for interruptions. */
int
httpd_read_fully( int fd, void* buf, size_t nbytes )
    {
10011608:	94 21 ff d0 	stwu    r1,-48(r1)
1001160c:	7c 08 02 a6 	mflr    r0
10011610:	90 01 00 34 	stw     r0,52(r1)
10011614:	93 e1 00 2c 	stw     r31,44(r1)
10011618:	7c 3f 0b 78 	mr      r31,r1
1001161c:	90 7f 00 18 	stw     r3,24(r31)
10011620:	90 9f 00 1c 	stw     r4,28(r31)
10011624:	90 bf 00 20 	stw     r5,32(r31)
    int nread;

    nread = 0;
10011628:	39 20 00 00 	li      r9,0
1001162c:	91 3f 00 08 	stw     r9,8(r31)
    while ( nread < nbytes )
10011630:	48 00 00 a4 	b       100116d4 <httpd_read_fully+0xcc>
	{
	int r;

	r = read( fd, (char*) buf + nread, nbytes - nread );
10011634:	81 3f 00 08 	lwz     r9,8(r31)
10011638:	81 5f 00 1c 	lwz     r10,28(r31)
1001163c:	7d 4a 4a 14 	add     r10,r10,r9
10011640:	81 3f 00 08 	lwz     r9,8(r31)
10011644:	81 1f 00 20 	lwz     r8,32(r31)
10011648:	7d 29 40 50 	subf    r9,r9,r8
1001164c:	80 7f 00 18 	lwz     r3,24(r31)
10011650:	7d 44 53 78 	mr      r4,r10
10011654:	7d 25 4b 78 	mr      r5,r9
10011658:	48 01 bd 8d 	bl      1002d3e4 <read@plt>
1001165c:	90 7f 00 0c 	stw     r3,12(r31)
	if ( r < 0 && ( errno == EINTR || errno == EAGAIN ) )
10011660:	81 3f 00 0c 	lwz     r9,12(r31)
10011664:	2f 89 00 00 	cmpwi   cr7,r9,0
10011668:	40 9c 00 38 	bge     cr7,100116a0 <httpd_read_fully+0x98>
1001166c:	48 01 c0 71 	bl      1002d6dc <__errno_location@plt>
10011670:	7c 69 1b 78 	mr      r9,r3
10011674:	81 29 00 00 	lwz     r9,0(r9)
10011678:	2f 89 00 04 	cmpwi   cr7,r9,4
1001167c:	41 9e 00 18 	beq     cr7,10011694 <httpd_read_fully+0x8c>
10011680:	48 01 c0 5d 	bl      1002d6dc <__errno_location@plt>
10011684:	7c 69 1b 78 	mr      r9,r3
10011688:	81 29 00 00 	lwz     r9,0(r9)
1001168c:	2f 89 00 0b 	cmpwi   cr7,r9,11
10011690:	40 9e 00 10 	bne     cr7,100116a0 <httpd_read_fully+0x98>
	    {
	    sleep( 1 );
10011694:	38 60 00 01 	li      r3,1
10011698:	48 01 be 05 	bl      1002d49c <sleep@plt>
	    continue;
1001169c:	48 00 00 38 	b       100116d4 <httpd_read_fully+0xcc>
	    }
	if ( r < 0 )
100116a0:	81 3f 00 0c 	lwz     r9,12(r31)
100116a4:	2f 89 00 00 	cmpwi   cr7,r9,0
100116a8:	40 9c 00 0c 	bge     cr7,100116b4 <httpd_read_fully+0xac>
	    return r;
100116ac:	81 3f 00 0c 	lwz     r9,12(r31)
100116b0:	48 00 00 38 	b       100116e8 <httpd_read_fully+0xe0>
	if ( r == 0 )
100116b4:	81 3f 00 0c 	lwz     r9,12(r31)
100116b8:	2f 89 00 00 	cmpwi   cr7,r9,0
100116bc:	40 9e 00 08 	bne     cr7,100116c4 <httpd_read_fully+0xbc>
	    break;
100116c0:	48 00 00 24 	b       100116e4 <httpd_read_fully+0xdc>
	nread += r;
100116c4:	81 5f 00 08 	lwz     r10,8(r31)
100116c8:	81 3f 00 0c 	lwz     r9,12(r31)
100116cc:	7d 2a 4a 14 	add     r9,r10,r9
100116d0:	91 3f 00 08 	stw     r9,8(r31)
httpd_read_fully( int fd, void* buf, size_t nbytes )
    {
    int nread;

    nread = 0;
    while ( nread < nbytes )
100116d4:	81 5f 00 08 	lwz     r10,8(r31)
100116d8:	81 3f 00 20 	lwz     r9,32(r31)
100116dc:	7f 8a 48 40 	cmplw   cr7,r10,r9
100116e0:	41 9c ff 54 	blt     cr7,10011634 <httpd_read_fully+0x2c>
	if ( r == 0 )
	    break;
	nread += r;
	}

    return nread;
100116e4:	81 3f 00 08 	lwz     r9,8(r31)
    }
100116e8:	7d 23 4b 78 	mr      r3,r9
100116ec:	39 7f 00 30 	addi    r11,r31,48
100116f0:	80 0b 00 04 	lwz     r0,4(r11)
100116f4:	7c 08 03 a6 	mtlr    r0
100116f8:	83 eb ff fc 	lwz     r31,-4(r11)
100116fc:	7d 61 5b 78 	mr      r1,r11
10011700:	4e 80 00 20 	blr

10011704 <httpd_write_fully>:


/* Write the requested buffer completely, accounting for interruptions. */
int
httpd_write_fully( int fd, const char* buf, size_t nbytes )
    {
10011704:	94 21 ff d0 	stwu    r1,-48(r1)
10011708:	7c 08 02 a6 	mflr    r0
1001170c:	90 01 00 34 	stw     r0,52(r1)
10011710:	93 e1 00 2c 	stw     r31,44(r1)
10011714:	7c 3f 0b 78 	mr      r31,r1
10011718:	90 7f 00 18 	stw     r3,24(r31)
1001171c:	90 9f 00 1c 	stw     r4,28(r31)
10011720:	90 bf 00 20 	stw     r5,32(r31)
    int nwritten;

    nwritten = 0;
10011724:	39 20 00 00 	li      r9,0
10011728:	91 3f 00 08 	stw     r9,8(r31)
    while ( nwritten < nbytes )
1001172c:	48 00 00 a4 	b       100117d0 <httpd_write_fully+0xcc>
	{
	int r;

	r = write( fd, buf + nwritten, nbytes - nwritten );
10011730:	81 3f 00 08 	lwz     r9,8(r31)
10011734:	81 5f 00 1c 	lwz     r10,28(r31)
10011738:	7d 4a 4a 14 	add     r10,r10,r9
1001173c:	81 3f 00 08 	lwz     r9,8(r31)
10011740:	81 1f 00 20 	lwz     r8,32(r31)
10011744:	7d 29 40 50 	subf    r9,r9,r8
10011748:	80 7f 00 18 	lwz     r3,24(r31)
1001174c:	7d 44 53 78 	mr      r4,r10
10011750:	7d 25 4b 78 	mr      r5,r9
10011754:	48 01 bf 21 	bl      1002d674 <write@plt>
10011758:	90 7f 00 0c 	stw     r3,12(r31)
	if ( r < 0 && ( errno == EINTR || errno == EAGAIN ) )
1001175c:	81 3f 00 0c 	lwz     r9,12(r31)
10011760:	2f 89 00 00 	cmpwi   cr7,r9,0
10011764:	40 9c 00 38 	bge     cr7,1001179c <httpd_write_fully+0x98>
10011768:	48 01 bf 75 	bl      1002d6dc <__errno_location@plt>
1001176c:	7c 69 1b 78 	mr      r9,r3
10011770:	81 29 00 00 	lwz     r9,0(r9)
10011774:	2f 89 00 04 	cmpwi   cr7,r9,4
10011778:	41 9e 00 18 	beq     cr7,10011790 <httpd_write_fully+0x8c>
1001177c:	48 01 bf 61 	bl      1002d6dc <__errno_location@plt>
10011780:	7c 69 1b 78 	mr      r9,r3
10011784:	81 29 00 00 	lwz     r9,0(r9)
10011788:	2f 89 00 0b 	cmpwi   cr7,r9,11
1001178c:	40 9e 00 10 	bne     cr7,1001179c <httpd_write_fully+0x98>
	    {
	    sleep( 1 );
10011790:	38 60 00 01 	li      r3,1
10011794:	48 01 bd 09 	bl      1002d49c <sleep@plt>
	    continue;
10011798:	48 00 00 38 	b       100117d0 <httpd_write_fully+0xcc>
	    }
	if ( r < 0 )
1001179c:	81 3f 00 0c 	lwz     r9,12(r31)
100117a0:	2f 89 00 00 	cmpwi   cr7,r9,0
100117a4:	40 9c 00 0c 	bge     cr7,100117b0 <httpd_write_fully+0xac>
	    return r;
100117a8:	81 3f 00 0c 	lwz     r9,12(r31)
100117ac:	48 00 00 38 	b       100117e4 <httpd_write_fully+0xe0>
	if ( r == 0 )
100117b0:	81 3f 00 0c 	lwz     r9,12(r31)
100117b4:	2f 89 00 00 	cmpwi   cr7,r9,0
100117b8:	40 9e 00 08 	bne     cr7,100117c0 <httpd_write_fully+0xbc>
	    break;
100117bc:	48 00 00 24 	b       100117e0 <httpd_write_fully+0xdc>
	nwritten += r;
100117c0:	81 5f 00 08 	lwz     r10,8(r31)
100117c4:	81 3f 00 0c 	lwz     r9,12(r31)
100117c8:	7d 2a 4a 14 	add     r9,r10,r9
100117cc:	91 3f 00 08 	stw     r9,8(r31)
httpd_write_fully( int fd, const char* buf, size_t nbytes )
    {
    int nwritten;

    nwritten = 0;
    while ( nwritten < nbytes )
100117d0:	81 5f 00 08 	lwz     r10,8(r31)
100117d4:	81 3f 00 20 	lwz     r9,32(r31)
100117d8:	7f 8a 48 40 	cmplw   cr7,r10,r9
100117dc:	41 9c ff 54 	blt     cr7,10011730 <httpd_write_fully+0x2c>
	if ( r == 0 )
	    break;
	nwritten += r;
	}

    return nwritten;
100117e0:	81 3f 00 08 	lwz     r9,8(r31)
    }
100117e4:	7d 23 4b 78 	mr      r3,r9
100117e8:	39 7f 00 30 	addi    r11,r31,48
100117ec:	80 0b 00 04 	lwz     r0,4(r11)
100117f0:	7c 08 03 a6 	mtlr    r0
100117f4:	83 eb ff fc 	lwz     r31,-4(r11)
100117f8:	7d 61 5b 78 	mr      r1,r11
100117fc:	4e 80 00 20 	blr

10011800 <httpd_logstats>:


/* Generate debugging statistics syslog message. */
void
httpd_logstats( long secs )
    {
10011800:	94 21 ff d0 	stwu    r1,-48(r1)
10011804:	7c 08 02 a6 	mflr    r0
10011808:	90 01 00 34 	stw     r0,52(r1)
1001180c:	93 e1 00 2c 	stw     r31,44(r1)
10011810:	7c 3f 0b 78 	mr      r31,r1
10011814:	90 7f 00 08 	stw     r3,8(r31)
    if ( str_alloc_count > 0 )
10011818:	3d 20 10 03 	lis     r9,4099
1001181c:	81 29 db 2c 	lwz     r9,-9428(r9)
10011820:	2f 89 00 00 	cmpwi   cr7,r9,0
10011824:	40 9d 00 8c 	ble     cr7,100118b0 <httpd_logstats+0xb0>
	syslog( LOG_NOTICE,
10011828:	3d 20 10 03 	lis     r9,4099
1001182c:	81 49 db 2c 	lwz     r10,-9428(r9)
10011830:	3d 20 10 03 	lis     r9,4099
10011834:	81 29 db 30 	lwz     r9,-9424(r9)
	    "  libhttpd - %d strings allocated, %lu bytes (%g bytes/str)",
	    str_alloc_count, (unsigned long) str_alloc_size,
	    (float) str_alloc_size / str_alloc_count );
10011838:	3d 00 10 03 	lis     r8,4099
1001183c:	80 e8 db 30 	lwz     r7,-9424(r8)
10011840:	3d 00 43 30 	lis     r8,17200
10011844:	3c c0 10 02 	lis     r6,4098
10011848:	c8 06 b0 c8 	lfd     f0,-20280(r6)
1001184c:	90 ff 00 14 	stw     r7,20(r31)
10011850:	91 1f 00 10 	stw     r8,16(r31)
10011854:	c9 bf 00 10 	lfd     f13,16(r31)
10011858:	fc 0d 00 28 	fsub    f0,f13,f0
1001185c:	fd a0 00 18 	frsp    f13,f0
10011860:	3d 00 10 03 	lis     r8,4099
10011864:	80 e8 db 2c 	lwz     r7,-9428(r8)
10011868:	3d 00 43 30 	lis     r8,17200
1001186c:	3c c0 10 02 	lis     r6,4098
10011870:	c8 06 b0 d0 	lfd     f0,-20272(r6)
10011874:	6c e7 80 00 	xoris   r7,r7,32768
10011878:	90 ff 00 1c 	stw     r7,28(r31)
1001187c:	91 1f 00 18 	stw     r8,24(r31)
10011880:	c9 9f 00 18 	lfd     f12,24(r31)
10011884:	fc 0c 00 28 	fsub    f0,f12,f0
10011888:	fc 00 00 18 	frsp    f0,f0
1001188c:	ec 0d 00 24 	fdivs   f0,f13,f0
/* Generate debugging statistics syslog message. */
void
httpd_logstats( long secs )
    {
    if ( str_alloc_count > 0 )
	syslog( LOG_NOTICE,
10011890:	38 60 00 05 	li      r3,5
10011894:	3d 00 10 02 	lis     r8,4098
10011898:	38 88 b0 40 	addi    r4,r8,-20416
1001189c:	7d 45 53 78 	mr      r5,r10
100118a0:	7d 26 4b 78 	mr      r6,r9
100118a4:	fc 20 00 90 	fmr     f1,f0
100118a8:	4c c6 32 42 	crset   4*cr1+eq
100118ac:	48 01 be d9 	bl      1002d784 <syslog@plt>
	    "  libhttpd - %d strings allocated, %lu bytes (%g bytes/str)",
	    str_alloc_count, (unsigned long) str_alloc_size,
	    (float) str_alloc_size / str_alloc_count );
    }
100118b0:	39 7f 00 30 	addi    r11,r31,48
100118b4:	80 0b 00 04 	lwz     r0,4(r11)
100118b8:	7c 08 03 a6 	mtlr    r0
100118bc:	83 eb ff fc 	lwz     r31,-4(r11)
100118c0:	7d 61 5b 78 	mr      r1,r11
100118c4:	4e 80 00 20 	blr

100118c8 <fdwatch_get_nfiles>:
/* Figure out how many file descriptors the system allows, and
** initialize the fdwatch data structures.  Returns -1 on failure.
*/
int
fdwatch_get_nfiles( void )
    {
100118c8:	94 21 ff e0 	stwu    r1,-32(r1)
100118cc:	7c 08 02 a6 	mflr    r0
100118d0:	90 01 00 24 	stw     r0,36(r1)
100118d4:	93 e1 00 1c 	stw     r31,28(r1)
100118d8:	7c 3f 0b 78 	mr      r31,r1
#ifdef RLIMIT_NOFILE
    struct rlimit rl;
#endif /* RLIMIT_NOFILE */

    /* Figure out how many fd's we can have. */
    nfiles = getdtablesize();
100118dc:	48 01 bc e1 	bl      1002d5bc <getdtablesize@plt>
100118e0:	7c 6a 1b 78 	mr      r10,r3
100118e4:	3d 20 10 03 	lis     r9,4099
100118e8:	91 49 de 5c 	stw     r10,-8612(r9)
#ifdef RLIMIT_NOFILE
    /* If we have getrlimit(), use that, and attempt to raise the limit. */
    if ( getrlimit( RLIMIT_NOFILE, &rl ) == 0 )
100118ec:	39 3f 00 0c 	addi    r9,r31,12
100118f0:	38 60 00 07 	li      r3,7
100118f4:	7d 24 4b 78 	mr      r4,r9
100118f8:	48 01 bb f5 	bl      1002d4ec <getrlimit@plt>
100118fc:	7c 69 1b 78 	mr      r9,r3
10011900:	2f 89 00 00 	cmpwi   cr7,r9,0
10011904:	40 9e 00 74 	bne     cr7,10011978 <fdwatch_get_nfiles+0xb0>
	{
	nfiles = rl.rlim_cur;
10011908:	81 3f 00 0c 	lwz     r9,12(r31)
1001190c:	7d 2a 4b 78 	mr      r10,r9
10011910:	3d 20 10 03 	lis     r9,4099
10011914:	91 49 de 5c 	stw     r10,-8612(r9)
	if ( rl.rlim_max == RLIM_INFINITY )
10011918:	81 5f 00 10 	lwz     r10,16(r31)
1001191c:	39 20 ff ff 	li      r9,-1
10011920:	7f 8a 48 00 	cmpw    cr7,r10,r9
10011924:	40 9e 00 10 	bne     cr7,10011934 <fdwatch_get_nfiles+0x6c>
	    rl.rlim_cur = 8192;         /* arbitrary */
10011928:	39 20 20 00 	li      r9,8192
1001192c:	91 3f 00 0c 	stw     r9,12(r31)
10011930:	48 00 00 1c 	b       1001194c <fdwatch_get_nfiles+0x84>
	else if ( rl.rlim_max > rl.rlim_cur )
10011934:	81 5f 00 10 	lwz     r10,16(r31)
10011938:	81 3f 00 0c 	lwz     r9,12(r31)
1001193c:	7f 8a 48 40 	cmplw   cr7,r10,r9
10011940:	40 9d 00 0c 	ble     cr7,1001194c <fdwatch_get_nfiles+0x84>
	    rl.rlim_cur = rl.rlim_max;
10011944:	81 3f 00 10 	lwz     r9,16(r31)
10011948:	91 3f 00 0c 	stw     r9,12(r31)
	if ( setrlimit( RLIMIT_NOFILE, &rl ) == 0 )
1001194c:	39 3f 00 0c 	addi    r9,r31,12
10011950:	38 60 00 07 	li      r3,7
10011954:	7d 24 4b 78 	mr      r4,r9
10011958:	48 01 bc 3d 	bl      1002d594 <setrlimit@plt>
1001195c:	7c 69 1b 78 	mr      r9,r3
10011960:	2f 89 00 00 	cmpwi   cr7,r9,0
10011964:	40 9e 00 14 	bne     cr7,10011978 <fdwatch_get_nfiles+0xb0>
	    nfiles = rl.rlim_cur;
10011968:	81 3f 00 0c 	lwz     r9,12(r31)
1001196c:	7d 2a 4b 78 	mr      r10,r9
10011970:	3d 20 10 03 	lis     r9,4099
10011974:	91 49 de 5c 	stw     r10,-8612(r9)
    /* If we use select(), then we must limit ourselves to FD_SETSIZE. */
    nfiles = MIN( nfiles, FD_SETSIZE );
#endif /* HAVE_SELECT && ! ( HAVE_POLL || HAVE_DEVPOLL || HAVE_KQUEUE ) */

    /* Initialize the fdwatch data structures. */
    nwatches = 0;
10011978:	3d 20 10 03 	lis     r9,4099
1001197c:	39 40 00 00 	li      r10,0
10011980:	91 49 de 60 	stw     r10,-8608(r9)
    fd_rw = (int*) malloc( sizeof(int) * nfiles );
10011984:	3d 20 10 03 	lis     r9,4099
10011988:	81 29 de 5c 	lwz     r9,-8612(r9)
1001198c:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10011990:	7d 23 4b 78 	mr      r3,r9
10011994:	48 01 bc 11 	bl      1002d5a4 <malloc@plt>
10011998:	7c 69 1b 78 	mr      r9,r3
1001199c:	7d 2a 4b 78 	mr      r10,r9
100119a0:	3d 20 10 03 	lis     r9,4099
100119a4:	91 49 de 64 	stw     r10,-8604(r9)
    fd_data = (void**) malloc( sizeof(void*) * nfiles );
100119a8:	3d 20 10 03 	lis     r9,4099
100119ac:	81 29 de 5c 	lwz     r9,-8612(r9)
100119b0:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
100119b4:	7d 23 4b 78 	mr      r3,r9
100119b8:	48 01 bb ed 	bl      1002d5a4 <malloc@plt>
100119bc:	7c 69 1b 78 	mr      r9,r3
100119c0:	7d 2a 4b 78 	mr      r10,r9
100119c4:	3d 20 10 03 	lis     r9,4099
100119c8:	91 49 de 68 	stw     r10,-8600(r9)
    if ( fd_rw == (int*) 0 || fd_data == (void**) 0 )
100119cc:	3d 20 10 03 	lis     r9,4099
100119d0:	81 29 de 64 	lwz     r9,-8604(r9)
100119d4:	2f 89 00 00 	cmpwi   cr7,r9,0
100119d8:	41 9e 00 14 	beq     cr7,100119ec <fdwatch_get_nfiles+0x124>
100119dc:	3d 20 10 03 	lis     r9,4099
100119e0:	81 29 de 68 	lwz     r9,-8600(r9)
100119e4:	2f 89 00 00 	cmpwi   cr7,r9,0
100119e8:	40 9e 00 0c 	bne     cr7,100119f4 <fdwatch_get_nfiles+0x12c>
	return -1;
100119ec:	39 20 ff ff 	li      r9,-1
100119f0:	48 00 00 7c 	b       10011a6c <fdwatch_get_nfiles+0x1a4>
    for ( i = 0; i < nfiles; ++i )
100119f4:	39 20 00 00 	li      r9,0
100119f8:	91 3f 00 08 	stw     r9,8(r31)
100119fc:	48 00 00 2c 	b       10011a28 <fdwatch_get_nfiles+0x160>
	fd_rw[i] = -1;
10011a00:	3d 20 10 03 	lis     r9,4099
10011a04:	81 49 de 64 	lwz     r10,-8604(r9)
10011a08:	81 3f 00 08 	lwz     r9,8(r31)
10011a0c:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10011a10:	7d 2a 4a 14 	add     r9,r10,r9
10011a14:	39 40 ff ff 	li      r10,-1
10011a18:	91 49 00 00 	stw     r10,0(r9)
    nwatches = 0;
    fd_rw = (int*) malloc( sizeof(int) * nfiles );
    fd_data = (void**) malloc( sizeof(void*) * nfiles );
    if ( fd_rw == (int*) 0 || fd_data == (void**) 0 )
	return -1;
    for ( i = 0; i < nfiles; ++i )
10011a1c:	81 3f 00 08 	lwz     r9,8(r31)
10011a20:	39 29 00 01 	addi    r9,r9,1
10011a24:	91 3f 00 08 	stw     r9,8(r31)
10011a28:	3d 20 10 03 	lis     r9,4099
10011a2c:	81 29 de 5c 	lwz     r9,-8612(r9)
10011a30:	81 5f 00 08 	lwz     r10,8(r31)
10011a34:	7f 8a 48 00 	cmpw    cr7,r10,r9
10011a38:	41 9c ff c8 	blt     cr7,10011a00 <fdwatch_get_nfiles+0x138>
	fd_rw[i] = -1;
    if ( INIT( nfiles ) == -1 )
10011a3c:	3d 20 10 03 	lis     r9,4099
10011a40:	81 29 de 5c 	lwz     r9,-8612(r9)
10011a44:	7d 23 4b 78 	mr      r3,r9
10011a48:	48 00 04 7d 	bl      10011ec4 <poll_init>
10011a4c:	7c 6a 1b 78 	mr      r10,r3
10011a50:	39 20 ff ff 	li      r9,-1
10011a54:	7f 8a 48 00 	cmpw    cr7,r10,r9
10011a58:	40 9e 00 0c 	bne     cr7,10011a64 <fdwatch_get_nfiles+0x19c>
	return -1;
10011a5c:	39 20 ff ff 	li      r9,-1
10011a60:	48 00 00 0c 	b       10011a6c <fdwatch_get_nfiles+0x1a4>

    return nfiles;
10011a64:	3d 20 10 03 	lis     r9,4099
10011a68:	81 29 de 5c 	lwz     r9,-8612(r9)
    }
10011a6c:	7d 23 4b 78 	mr      r3,r9
10011a70:	39 7f 00 20 	addi    r11,r31,32
10011a74:	80 0b 00 04 	lwz     r0,4(r11)
10011a78:	7c 08 03 a6 	mtlr    r0
10011a7c:	83 eb ff fc 	lwz     r31,-4(r11)
10011a80:	7d 61 5b 78 	mr      r1,r11
10011a84:	4e 80 00 20 	blr

10011a88 <fdwatch_add_fd>:


/* Add a descriptor to the watch list.  rw is either FDW_READ or FDW_WRITE.  */
void
fdwatch_add_fd( int fd, void* client_data, int rw )
    {
10011a88:	94 21 ff e0 	stwu    r1,-32(r1)
10011a8c:	7c 08 02 a6 	mflr    r0
10011a90:	90 01 00 24 	stw     r0,36(r1)
10011a94:	93 e1 00 1c 	stw     r31,28(r1)
10011a98:	7c 3f 0b 78 	mr      r31,r1
10011a9c:	90 7f 00 08 	stw     r3,8(r31)
10011aa0:	90 9f 00 0c 	stw     r4,12(r31)
10011aa4:	90 bf 00 10 	stw     r5,16(r31)
    if ( fd < 0 || fd >= nfiles || fd_rw[fd] != -1 )
10011aa8:	81 3f 00 08 	lwz     r9,8(r31)
10011aac:	2f 89 00 00 	cmpwi   cr7,r9,0
10011ab0:	41 9c 00 3c 	blt     cr7,10011aec <fdwatch_add_fd+0x64>
10011ab4:	3d 20 10 03 	lis     r9,4099
10011ab8:	81 29 de 5c 	lwz     r9,-8612(r9)
10011abc:	81 5f 00 08 	lwz     r10,8(r31)
10011ac0:	7f 8a 48 00 	cmpw    cr7,r10,r9
10011ac4:	40 9c 00 28 	bge     cr7,10011aec <fdwatch_add_fd+0x64>
10011ac8:	3d 20 10 03 	lis     r9,4099
10011acc:	81 49 de 64 	lwz     r10,-8604(r9)
10011ad0:	81 3f 00 08 	lwz     r9,8(r31)
10011ad4:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10011ad8:	7d 2a 4a 14 	add     r9,r10,r9
10011adc:	81 49 00 00 	lwz     r10,0(r9)
10011ae0:	39 20 ff ff 	li      r9,-1
10011ae4:	7f 8a 48 00 	cmpw    cr7,r10,r9
10011ae8:	41 9e 00 20 	beq     cr7,10011b08 <fdwatch_add_fd+0x80>
	{
	syslog( LOG_ERR, "bad fd (%d) passed to fdwatch_add_fd!", fd );
10011aec:	38 60 00 03 	li      r3,3
10011af0:	3d 20 10 02 	lis     r9,4098
10011af4:	38 89 b0 d8 	addi    r4,r9,-20264
10011af8:	80 bf 00 08 	lwz     r5,8(r31)
10011afc:	4c c6 31 82 	crclr   4*cr1+eq
10011b00:	48 01 bc 85 	bl      1002d784 <syslog@plt>
	return;
10011b04:	48 00 00 48 	b       10011b4c <fdwatch_add_fd+0xc4>
	}
    ADD_FD( fd, rw );
10011b08:	80 7f 00 08 	lwz     r3,8(r31)
10011b0c:	80 9f 00 10 	lwz     r4,16(r31)
10011b10:	48 00 04 e5 	bl      10011ff4 <poll_add_fd>
    fd_rw[fd] = rw;
10011b14:	3d 20 10 03 	lis     r9,4099
10011b18:	81 49 de 64 	lwz     r10,-8604(r9)
10011b1c:	81 3f 00 08 	lwz     r9,8(r31)
10011b20:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10011b24:	7d 2a 4a 14 	add     r9,r10,r9
10011b28:	81 5f 00 10 	lwz     r10,16(r31)
10011b2c:	91 49 00 00 	stw     r10,0(r9)
    fd_data[fd] = client_data;
10011b30:	3d 20 10 03 	lis     r9,4099
10011b34:	81 49 de 68 	lwz     r10,-8600(r9)
10011b38:	81 3f 00 08 	lwz     r9,8(r31)
10011b3c:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10011b40:	7d 2a 4a 14 	add     r9,r10,r9
10011b44:	81 5f 00 0c 	lwz     r10,12(r31)
10011b48:	91 49 00 00 	stw     r10,0(r9)
    }
10011b4c:	39 7f 00 20 	addi    r11,r31,32
10011b50:	80 0b 00 04 	lwz     r0,4(r11)
10011b54:	7c 08 03 a6 	mtlr    r0
10011b58:	83 eb ff fc 	lwz     r31,-4(r11)
10011b5c:	7d 61 5b 78 	mr      r1,r11
10011b60:	4e 80 00 20 	blr

10011b64 <fdwatch_del_fd>:


/* Remove a descriptor from the watch list. */
void
fdwatch_del_fd( int fd )
    {
10011b64:	94 21 ff e0 	stwu    r1,-32(r1)
10011b68:	7c 08 02 a6 	mflr    r0
10011b6c:	90 01 00 24 	stw     r0,36(r1)
10011b70:	93 e1 00 1c 	stw     r31,28(r1)
10011b74:	7c 3f 0b 78 	mr      r31,r1
10011b78:	90 7f 00 08 	stw     r3,8(r31)
    if ( fd < 0 || fd >= nfiles || fd_rw[fd] == -1 )
10011b7c:	81 3f 00 08 	lwz     r9,8(r31)
10011b80:	2f 89 00 00 	cmpwi   cr7,r9,0
10011b84:	41 9c 00 3c 	blt     cr7,10011bc0 <fdwatch_del_fd+0x5c>
10011b88:	3d 20 10 03 	lis     r9,4099
10011b8c:	81 29 de 5c 	lwz     r9,-8612(r9)
10011b90:	81 5f 00 08 	lwz     r10,8(r31)
10011b94:	7f 8a 48 00 	cmpw    cr7,r10,r9
10011b98:	40 9c 00 28 	bge     cr7,10011bc0 <fdwatch_del_fd+0x5c>
10011b9c:	3d 20 10 03 	lis     r9,4099
10011ba0:	81 49 de 64 	lwz     r10,-8604(r9)
10011ba4:	81 3f 00 08 	lwz     r9,8(r31)
10011ba8:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10011bac:	7d 2a 4a 14 	add     r9,r10,r9
10011bb0:	81 49 00 00 	lwz     r10,0(r9)
10011bb4:	39 20 ff ff 	li      r9,-1
10011bb8:	7f 8a 48 00 	cmpw    cr7,r10,r9
10011bbc:	40 9e 00 20 	bne     cr7,10011bdc <fdwatch_del_fd+0x78>
	{
	syslog( LOG_ERR, "bad fd (%d) passed to fdwatch_del_fd!", fd );
10011bc0:	38 60 00 03 	li      r3,3
10011bc4:	3d 20 10 02 	lis     r9,4098
10011bc8:	38 89 b1 00 	addi    r4,r9,-20224
10011bcc:	80 bf 00 08 	lwz     r5,8(r31)
10011bd0:	4c c6 31 82 	crclr   4*cr1+eq
10011bd4:	48 01 bb b1 	bl      1002d784 <syslog@plt>
	return;
10011bd8:	48 00 00 44 	b       10011c1c <fdwatch_del_fd+0xb8>
	}
    DEL_FD( fd );
10011bdc:	80 7f 00 08 	lwz     r3,8(r31)
10011be0:	48 00 05 2d 	bl      1001210c <poll_del_fd>
    fd_rw[fd] = -1;
10011be4:	3d 20 10 03 	lis     r9,4099
10011be8:	81 49 de 64 	lwz     r10,-8604(r9)
10011bec:	81 3f 00 08 	lwz     r9,8(r31)
10011bf0:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10011bf4:	7d 2a 4a 14 	add     r9,r10,r9
10011bf8:	39 40 ff ff 	li      r10,-1
10011bfc:	91 49 00 00 	stw     r10,0(r9)
    fd_data[fd] = (void*) 0;
10011c00:	3d 20 10 03 	lis     r9,4099
10011c04:	81 49 de 68 	lwz     r10,-8600(r9)
10011c08:	81 3f 00 08 	lwz     r9,8(r31)
10011c0c:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10011c10:	7d 2a 4a 14 	add     r9,r10,r9
10011c14:	39 40 00 00 	li      r10,0
10011c18:	91 49 00 00 	stw     r10,0(r9)
    }
10011c1c:	39 7f 00 20 	addi    r11,r31,32
10011c20:	80 0b 00 04 	lwz     r0,4(r11)
10011c24:	7c 08 03 a6 	mtlr    r0
10011c28:	83 eb ff fc 	lwz     r31,-4(r11)
10011c2c:	7d 61 5b 78 	mr      r1,r11
10011c30:	4e 80 00 20 	blr

10011c34 <fdwatch>:
** or 0 if the timeout expired, or -1 on errors.  A timeout of INFTIM means
** wait indefinitely.
*/
int
fdwatch( long timeout_msecs )
    {
10011c34:	94 21 ff e0 	stwu    r1,-32(r1)
10011c38:	7c 08 02 a6 	mflr    r0
10011c3c:	90 01 00 24 	stw     r0,36(r1)
10011c40:	93 e1 00 1c 	stw     r31,28(r1)
10011c44:	7c 3f 0b 78 	mr      r31,r1
10011c48:	90 7f 00 08 	stw     r3,8(r31)
    ++nwatches;
10011c4c:	3d 20 10 03 	lis     r9,4099
10011c50:	81 29 de 60 	lwz     r9,-8608(r9)
10011c54:	39 49 00 01 	addi    r10,r9,1
10011c58:	3d 20 10 03 	lis     r9,4099
10011c5c:	91 49 de 60 	stw     r10,-8608(r9)
    nreturned = WATCH( timeout_msecs );
10011c60:	80 7f 00 08 	lwz     r3,8(r31)
10011c64:	48 00 05 e5 	bl      10012248 <poll_watch>
10011c68:	7c 6a 1b 78 	mr      r10,r3
10011c6c:	3d 20 10 03 	lis     r9,4099
10011c70:	91 49 de 6c 	stw     r10,-8596(r9)
    next_ridx = 0;
10011c74:	3d 20 10 03 	lis     r9,4099
10011c78:	39 40 00 00 	li      r10,0
10011c7c:	91 49 de 70 	stw     r10,-8592(r9)
    return nreturned;
10011c80:	3d 20 10 03 	lis     r9,4099
10011c84:	81 29 de 6c 	lwz     r9,-8596(r9)
    }
10011c88:	7d 23 4b 78 	mr      r3,r9
10011c8c:	39 7f 00 20 	addi    r11,r31,32
10011c90:	80 0b 00 04 	lwz     r0,4(r11)
10011c94:	7c 08 03 a6 	mtlr    r0
10011c98:	83 eb ff fc 	lwz     r31,-4(r11)
10011c9c:	7d 61 5b 78 	mr      r1,r11
10011ca0:	4e 80 00 20 	blr

10011ca4 <fdwatch_check_fd>:


/* Check if a descriptor was ready. */
int
fdwatch_check_fd( int fd )
    {
10011ca4:	94 21 ff e0 	stwu    r1,-32(r1)
10011ca8:	7c 08 02 a6 	mflr    r0
10011cac:	90 01 00 24 	stw     r0,36(r1)
10011cb0:	93 e1 00 1c 	stw     r31,28(r1)
10011cb4:	7c 3f 0b 78 	mr      r31,r1
10011cb8:	90 7f 00 08 	stw     r3,8(r31)
    if ( fd < 0 || fd >= nfiles || fd_rw[fd] == -1 )
10011cbc:	81 3f 00 08 	lwz     r9,8(r31)
10011cc0:	2f 89 00 00 	cmpwi   cr7,r9,0
10011cc4:	41 9c 00 3c 	blt     cr7,10011d00 <fdwatch_check_fd+0x5c>
10011cc8:	3d 20 10 03 	lis     r9,4099
10011ccc:	81 29 de 5c 	lwz     r9,-8612(r9)
10011cd0:	81 5f 00 08 	lwz     r10,8(r31)
10011cd4:	7f 8a 48 00 	cmpw    cr7,r10,r9
10011cd8:	40 9c 00 28 	bge     cr7,10011d00 <fdwatch_check_fd+0x5c>
10011cdc:	3d 20 10 03 	lis     r9,4099
10011ce0:	81 49 de 64 	lwz     r10,-8604(r9)
10011ce4:	81 3f 00 08 	lwz     r9,8(r31)
10011ce8:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10011cec:	7d 2a 4a 14 	add     r9,r10,r9
10011cf0:	81 49 00 00 	lwz     r10,0(r9)
10011cf4:	39 20 ff ff 	li      r9,-1
10011cf8:	7f 8a 48 00 	cmpw    cr7,r10,r9
10011cfc:	40 9e 00 24 	bne     cr7,10011d20 <fdwatch_check_fd+0x7c>
	{
	syslog( LOG_ERR, "bad fd (%d) passed to fdwatch_check_fd!", fd );
10011d00:	38 60 00 03 	li      r3,3
10011d04:	3d 20 10 02 	lis     r9,4098
10011d08:	38 89 b1 28 	addi    r4,r9,-20184
10011d0c:	80 bf 00 08 	lwz     r5,8(r31)
10011d10:	4c c6 31 82 	crclr   4*cr1+eq
10011d14:	48 01 ba 71 	bl      1002d784 <syslog@plt>
	return 0;
10011d18:	39 20 00 00 	li      r9,0
10011d1c:	48 00 00 10 	b       10011d2c <fdwatch_check_fd+0x88>
	}
    return CHECK_FD( fd );
10011d20:	80 7f 00 08 	lwz     r3,8(r31)
10011d24:	48 00 06 41 	bl      10012364 <poll_check_fd>
10011d28:	7c 69 1b 78 	mr      r9,r3
    }
10011d2c:	7d 23 4b 78 	mr      r3,r9
10011d30:	39 7f 00 20 	addi    r11,r31,32
10011d34:	80 0b 00 04 	lwz     r0,4(r11)
10011d38:	7c 08 03 a6 	mtlr    r0
10011d3c:	83 eb ff fc 	lwz     r31,-4(r11)
10011d40:	7d 61 5b 78 	mr      r1,r11
10011d44:	4e 80 00 20 	blr

10011d48 <fdwatch_get_next_client_data>:


void*
fdwatch_get_next_client_data( void )
    {
10011d48:	94 21 ff e0 	stwu    r1,-32(r1)
10011d4c:	7c 08 02 a6 	mflr    r0
10011d50:	90 01 00 24 	stw     r0,36(r1)
10011d54:	93 e1 00 1c 	stw     r31,28(r1)
10011d58:	7c 3f 0b 78 	mr      r31,r1
    int fd;

    if ( next_ridx >= nreturned )
10011d5c:	3d 20 10 03 	lis     r9,4099
10011d60:	81 49 de 70 	lwz     r10,-8592(r9)
10011d64:	3d 20 10 03 	lis     r9,4099
10011d68:	81 29 de 6c 	lwz     r9,-8596(r9)
10011d6c:	7f 8a 48 00 	cmpw    cr7,r10,r9
10011d70:	41 9c 00 0c 	blt     cr7,10011d7c <fdwatch_get_next_client_data+0x34>
	return (void*) -1;
10011d74:	39 20 ff ff 	li      r9,-1
10011d78:	48 00 00 64 	b       10011ddc <fdwatch_get_next_client_data+0x94>
    fd = GET_FD( next_ridx++ );
10011d7c:	3d 20 10 03 	lis     r9,4099
10011d80:	81 29 de 70 	lwz     r9,-8592(r9)
10011d84:	39 09 00 01 	addi    r8,r9,1
10011d88:	3d 40 10 03 	lis     r10,4099
10011d8c:	91 0a de 70 	stw     r8,-8592(r10)
10011d90:	7d 23 4b 78 	mr      r3,r9
10011d94:	48 00 07 15 	bl      100124a8 <poll_get_fd>
10011d98:	90 7f 00 08 	stw     r3,8(r31)
    if ( fd < 0 || fd >= nfiles )
10011d9c:	81 3f 00 08 	lwz     r9,8(r31)
10011da0:	2f 89 00 00 	cmpwi   cr7,r9,0
10011da4:	41 9c 00 18 	blt     cr7,10011dbc <fdwatch_get_next_client_data+0x74>
10011da8:	3d 20 10 03 	lis     r9,4099
10011dac:	81 29 de 5c 	lwz     r9,-8612(r9)
10011db0:	81 5f 00 08 	lwz     r10,8(r31)
10011db4:	7f 8a 48 00 	cmpw    cr7,r10,r9
10011db8:	41 9c 00 0c 	blt     cr7,10011dc4 <fdwatch_get_next_client_data+0x7c>
	return (void*) 0;
10011dbc:	39 20 00 00 	li      r9,0
10011dc0:	48 00 00 1c 	b       10011ddc <fdwatch_get_next_client_data+0x94>
    return fd_data[fd];
10011dc4:	3d 20 10 03 	lis     r9,4099
10011dc8:	81 49 de 68 	lwz     r10,-8600(r9)
10011dcc:	81 3f 00 08 	lwz     r9,8(r31)
10011dd0:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10011dd4:	7d 2a 4a 14 	add     r9,r10,r9
10011dd8:	81 29 00 00 	lwz     r9,0(r9)
    }
10011ddc:	7d 23 4b 78 	mr      r3,r9
10011de0:	39 7f 00 20 	addi    r11,r31,32
10011de4:	80 0b 00 04 	lwz     r0,4(r11)
10011de8:	7c 08 03 a6 	mtlr    r0
10011dec:	83 eb ff fc 	lwz     r31,-4(r11)
10011df0:	7d 61 5b 78 	mr      r1,r11
10011df4:	4e 80 00 20 	blr

10011df8 <fdwatch_logstats>:


/* Generate debugging statistics syslog message. */
void
fdwatch_logstats( long secs )
    {
10011df8:	94 21 ff d0 	stwu    r1,-48(r1)
10011dfc:	7c 08 02 a6 	mflr    r0
10011e00:	90 01 00 34 	stw     r0,52(r1)
10011e04:	93 e1 00 2c 	stw     r31,44(r1)
10011e08:	7c 3f 0b 78 	mr      r31,r1
10011e0c:	90 7f 00 08 	stw     r3,8(r31)
    if ( secs > 0 )
10011e10:	81 3f 00 08 	lwz     r9,8(r31)
10011e14:	2f 89 00 00 	cmpwi   cr7,r9,0
10011e18:	40 9d 00 88 	ble     cr7,10011ea0 <fdwatch_logstats+0xa8>
	syslog(
10011e1c:	3d 20 10 03 	lis     r9,4099
10011e20:	81 29 de 60 	lwz     r9,-8608(r9)
	    LOG_NOTICE, "  fdwatch - %ld %ss (%g/sec)",
	    nwatches, WHICH, (float) nwatches / secs );
10011e24:	3d 40 10 03 	lis     r10,4099
10011e28:	81 0a de 60 	lwz     r8,-8608(r10)
10011e2c:	3d 40 43 30 	lis     r10,17200
10011e30:	3c e0 10 02 	lis     r7,4098
10011e34:	c8 07 b2 00 	lfd     f0,-19968(r7)
10011e38:	6d 08 80 00 	xoris   r8,r8,32768
10011e3c:	91 1f 00 14 	stw     r8,20(r31)
10011e40:	91 5f 00 10 	stw     r10,16(r31)
10011e44:	c9 bf 00 10 	lfd     f13,16(r31)
10011e48:	fc 0d 00 28 	fsub    f0,f13,f0
10011e4c:	fd a0 00 18 	frsp    f13,f0
10011e50:	81 1f 00 08 	lwz     r8,8(r31)
10011e54:	3d 40 43 30 	lis     r10,17200
10011e58:	3c e0 10 02 	lis     r7,4098
10011e5c:	c8 07 b2 00 	lfd     f0,-19968(r7)
10011e60:	6d 08 80 00 	xoris   r8,r8,32768
10011e64:	91 1f 00 1c 	stw     r8,28(r31)
10011e68:	91 5f 00 18 	stw     r10,24(r31)
10011e6c:	c9 9f 00 18 	lfd     f12,24(r31)
10011e70:	fc 0c 00 28 	fsub    f0,f12,f0
10011e74:	fc 00 00 18 	frsp    f0,f0
10011e78:	ec 0d 00 24 	fdivs   f0,f13,f0
/* Generate debugging statistics syslog message. */
void
fdwatch_logstats( long secs )
    {
    if ( secs > 0 )
	syslog(
10011e7c:	38 60 00 05 	li      r3,5
10011e80:	3d 40 10 02 	lis     r10,4098
10011e84:	38 8a b1 50 	addi    r4,r10,-20144
10011e88:	7d 25 4b 78 	mr      r5,r9
10011e8c:	3d 20 10 02 	lis     r9,4098
10011e90:	38 c9 b1 70 	addi    r6,r9,-20112
10011e94:	fc 20 00 90 	fmr     f1,f0
10011e98:	4c c6 32 42 	crset   4*cr1+eq
10011e9c:	48 01 b8 e9 	bl      1002d784 <syslog@plt>
	    LOG_NOTICE, "  fdwatch - %ld %ss (%g/sec)",
	    nwatches, WHICH, (float) nwatches / secs );
    nwatches = 0;
10011ea0:	3d 20 10 03 	lis     r9,4099
10011ea4:	39 40 00 00 	li      r10,0
10011ea8:	91 49 de 60 	stw     r10,-8608(r9)
    }
10011eac:	39 7f 00 30 	addi    r11,r31,48
10011eb0:	80 0b 00 04 	lwz     r0,4(r11)
10011eb4:	7c 08 03 a6 	mtlr    r0
10011eb8:	83 eb ff fc 	lwz     r31,-4(r11)
10011ebc:	7d 61 5b 78 	mr      r1,r11
10011ec0:	4e 80 00 20 	blr

10011ec4 <poll_init>:
static int* poll_rfdidx;


static int
poll_init( int nf )
    {
10011ec4:	94 21 ff d0 	stwu    r1,-48(r1)
10011ec8:	7c 08 02 a6 	mflr    r0
10011ecc:	90 01 00 34 	stw     r0,52(r1)
10011ed0:	93 e1 00 2c 	stw     r31,44(r1)
10011ed4:	7c 3f 0b 78 	mr      r31,r1
10011ed8:	90 7f 00 18 	stw     r3,24(r31)
    int i;

    pollfds = (struct pollfd*) malloc( sizeof(struct pollfd) * nf );
10011edc:	81 3f 00 18 	lwz     r9,24(r31)
10011ee0:	55 29 18 38 	rlwinm  r9,r9,3,0,28
10011ee4:	7d 23 4b 78 	mr      r3,r9
10011ee8:	48 01 b6 bd 	bl      1002d5a4 <malloc@plt>
10011eec:	7c 69 1b 78 	mr      r9,r3
10011ef0:	7d 2a 4b 78 	mr      r10,r9
10011ef4:	3d 20 10 03 	lis     r9,4099
10011ef8:	91 49 de 74 	stw     r10,-8588(r9)
    poll_fdidx = (int*) malloc( sizeof(int) * nf );
10011efc:	81 3f 00 18 	lwz     r9,24(r31)
10011f00:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10011f04:	7d 23 4b 78 	mr      r3,r9
10011f08:	48 01 b6 9d 	bl      1002d5a4 <malloc@plt>
10011f0c:	7c 69 1b 78 	mr      r9,r3
10011f10:	7d 2a 4b 78 	mr      r10,r9
10011f14:	3d 20 10 03 	lis     r9,4099
10011f18:	91 49 de 7c 	stw     r10,-8580(r9)
    poll_rfdidx = (int*) malloc( sizeof(int) * nf );
10011f1c:	81 3f 00 18 	lwz     r9,24(r31)
10011f20:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10011f24:	7d 23 4b 78 	mr      r3,r9
10011f28:	48 01 b6 7d 	bl      1002d5a4 <malloc@plt>
10011f2c:	7c 69 1b 78 	mr      r9,r3
10011f30:	7d 2a 4b 78 	mr      r10,r9
10011f34:	3d 20 10 03 	lis     r9,4099
10011f38:	91 49 de 80 	stw     r10,-8576(r9)
    if ( pollfds == (struct pollfd*) 0 || poll_fdidx == (int*) 0 ||
10011f3c:	3d 20 10 03 	lis     r9,4099
10011f40:	81 29 de 74 	lwz     r9,-8588(r9)
10011f44:	2f 89 00 00 	cmpwi   cr7,r9,0
10011f48:	41 9e 00 24 	beq     cr7,10011f6c <poll_init+0xa8>
10011f4c:	3d 20 10 03 	lis     r9,4099
10011f50:	81 29 de 7c 	lwz     r9,-8580(r9)
10011f54:	2f 89 00 00 	cmpwi   cr7,r9,0
10011f58:	41 9e 00 14 	beq     cr7,10011f6c <poll_init+0xa8>
	 poll_rfdidx == (int*) 0 )
10011f5c:	3d 20 10 03 	lis     r9,4099
10011f60:	81 29 de 80 	lwz     r9,-8576(r9)
    int i;

    pollfds = (struct pollfd*) malloc( sizeof(struct pollfd) * nf );
    poll_fdidx = (int*) malloc( sizeof(int) * nf );
    poll_rfdidx = (int*) malloc( sizeof(int) * nf );
    if ( pollfds == (struct pollfd*) 0 || poll_fdidx == (int*) 0 ||
10011f64:	2f 89 00 00 	cmpwi   cr7,r9,0
10011f68:	40 9e 00 0c 	bne     cr7,10011f74 <poll_init+0xb0>
	 poll_rfdidx == (int*) 0 )
	return -1;
10011f6c:	39 20 ff ff 	li      r9,-1
10011f70:	48 00 00 68 	b       10011fd8 <poll_init+0x114>
    for ( i = 0; i < nf; ++i )
10011f74:	39 20 00 00 	li      r9,0
10011f78:	91 3f 00 08 	stw     r9,8(r31)
10011f7c:	48 00 00 48 	b       10011fc4 <poll_init+0x100>
	pollfds[i].fd = poll_fdidx[i] = -1;
10011f80:	3d 20 10 03 	lis     r9,4099
10011f84:	81 49 de 74 	lwz     r10,-8588(r9)
10011f88:	81 3f 00 08 	lwz     r9,8(r31)
10011f8c:	55 29 18 38 	rlwinm  r9,r9,3,0,28
10011f90:	7d 4a 4a 14 	add     r10,r10,r9
10011f94:	3d 20 10 03 	lis     r9,4099
10011f98:	81 09 de 7c 	lwz     r8,-8580(r9)
10011f9c:	81 3f 00 08 	lwz     r9,8(r31)
10011fa0:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10011fa4:	7d 28 4a 14 	add     r9,r8,r9
10011fa8:	39 00 ff ff 	li      r8,-1
10011fac:	91 09 00 00 	stw     r8,0(r9)
10011fb0:	81 29 00 00 	lwz     r9,0(r9)
10011fb4:	91 2a 00 00 	stw     r9,0(r10)
    poll_fdidx = (int*) malloc( sizeof(int) * nf );
    poll_rfdidx = (int*) malloc( sizeof(int) * nf );
    if ( pollfds == (struct pollfd*) 0 || poll_fdidx == (int*) 0 ||
	 poll_rfdidx == (int*) 0 )
	return -1;
    for ( i = 0; i < nf; ++i )
10011fb8:	81 3f 00 08 	lwz     r9,8(r31)
10011fbc:	39 29 00 01 	addi    r9,r9,1
10011fc0:	91 3f 00 08 	stw     r9,8(r31)
10011fc4:	81 5f 00 08 	lwz     r10,8(r31)
10011fc8:	81 3f 00 18 	lwz     r9,24(r31)
10011fcc:	7f 8a 48 00 	cmpw    cr7,r10,r9
10011fd0:	41 9c ff b0 	blt     cr7,10011f80 <poll_init+0xbc>
	pollfds[i].fd = poll_fdidx[i] = -1;
    return 0;
10011fd4:	39 20 00 00 	li      r9,0
    }
10011fd8:	7d 23 4b 78 	mr      r3,r9
10011fdc:	39 7f 00 30 	addi    r11,r31,48
10011fe0:	80 0b 00 04 	lwz     r0,4(r11)
10011fe4:	7c 08 03 a6 	mtlr    r0
10011fe8:	83 eb ff fc 	lwz     r31,-4(r11)
10011fec:	7d 61 5b 78 	mr      r1,r11
10011ff0:	4e 80 00 20 	blr

10011ff4 <poll_add_fd>:


static void
poll_add_fd( int fd, int rw )
    {
10011ff4:	94 21 ff e0 	stwu    r1,-32(r1)
10011ff8:	7c 08 02 a6 	mflr    r0
10011ffc:	90 01 00 24 	stw     r0,36(r1)
10012000:	93 e1 00 1c 	stw     r31,28(r1)
10012004:	7c 3f 0b 78 	mr      r31,r1
10012008:	90 7f 00 08 	stw     r3,8(r31)
1001200c:	90 9f 00 0c 	stw     r4,12(r31)
    if ( npoll_fds >= nfiles )
10012010:	3d 20 10 03 	lis     r9,4099
10012014:	81 49 de 78 	lwz     r10,-8584(r9)
10012018:	3d 20 10 03 	lis     r9,4099
1001201c:	81 29 de 5c 	lwz     r9,-8612(r9)
10012020:	7f 8a 48 00 	cmpw    cr7,r10,r9
10012024:	41 9c 00 1c 	blt     cr7,10012040 <poll_add_fd+0x4c>
	{
	syslog( LOG_ERR, "too many fds in poll_add_fd!" );
10012028:	38 60 00 03 	li      r3,3
1001202c:	3d 20 10 02 	lis     r9,4098
10012030:	38 89 b1 78 	addi    r4,r9,-20104
10012034:	4c c6 31 82 	crclr   4*cr1+eq
10012038:	48 01 b7 4d 	bl      1002d784 <syslog@plt>
	return;
1001203c:	48 00 00 b8 	b       100120f4 <poll_add_fd+0x100>
	}
    pollfds[npoll_fds].fd = fd;
10012040:	3d 20 10 03 	lis     r9,4099
10012044:	81 49 de 74 	lwz     r10,-8588(r9)
10012048:	3d 20 10 03 	lis     r9,4099
1001204c:	81 29 de 78 	lwz     r9,-8584(r9)
10012050:	55 29 18 38 	rlwinm  r9,r9,3,0,28
10012054:	7d 2a 4a 14 	add     r9,r10,r9
10012058:	81 5f 00 08 	lwz     r10,8(r31)
1001205c:	91 49 00 00 	stw     r10,0(r9)
    switch ( rw )
10012060:	81 3f 00 0c 	lwz     r9,12(r31)
10012064:	2f 89 00 00 	cmpwi   cr7,r9,0
10012068:	41 9e 00 10 	beq     cr7,10012078 <poll_add_fd+0x84>
1001206c:	2f 89 00 01 	cmpwi   cr7,r9,1
10012070:	41 9e 00 2c 	beq     cr7,1001209c <poll_add_fd+0xa8>
	{
	case FDW_READ: pollfds[npoll_fds].events = POLLIN; break;
	case FDW_WRITE: pollfds[npoll_fds].events = POLLOUT; break;
	default: break;
10012074:	48 00 00 4c 	b       100120c0 <poll_add_fd+0xcc>
	return;
	}
    pollfds[npoll_fds].fd = fd;
    switch ( rw )
	{
	case FDW_READ: pollfds[npoll_fds].events = POLLIN; break;
10012078:	3d 20 10 03 	lis     r9,4099
1001207c:	81 49 de 74 	lwz     r10,-8588(r9)
10012080:	3d 20 10 03 	lis     r9,4099
10012084:	81 29 de 78 	lwz     r9,-8584(r9)
10012088:	55 29 18 38 	rlwinm  r9,r9,3,0,28
1001208c:	7d 2a 4a 14 	add     r9,r10,r9
10012090:	39 40 00 01 	li      r10,1
10012094:	b1 49 00 04 	sth     r10,4(r9)
10012098:	48 00 00 28 	b       100120c0 <poll_add_fd+0xcc>
	case FDW_WRITE: pollfds[npoll_fds].events = POLLOUT; break;
1001209c:	3d 20 10 03 	lis     r9,4099
100120a0:	81 49 de 74 	lwz     r10,-8588(r9)
100120a4:	3d 20 10 03 	lis     r9,4099
100120a8:	81 29 de 78 	lwz     r9,-8584(r9)
100120ac:	55 29 18 38 	rlwinm  r9,r9,3,0,28
100120b0:	7d 2a 4a 14 	add     r9,r10,r9
100120b4:	39 40 00 04 	li      r10,4
100120b8:	b1 49 00 04 	sth     r10,4(r9)
100120bc:	60 00 00 00 	nop
	default: break;
	}
    poll_fdidx[fd] = npoll_fds;
100120c0:	3d 20 10 03 	lis     r9,4099
100120c4:	81 49 de 7c 	lwz     r10,-8580(r9)
100120c8:	81 3f 00 08 	lwz     r9,8(r31)
100120cc:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
100120d0:	7d 2a 4a 14 	add     r9,r10,r9
100120d4:	3d 40 10 03 	lis     r10,4099
100120d8:	81 4a de 78 	lwz     r10,-8584(r10)
100120dc:	91 49 00 00 	stw     r10,0(r9)
    ++npoll_fds;
100120e0:	3d 20 10 03 	lis     r9,4099
100120e4:	81 29 de 78 	lwz     r9,-8584(r9)
100120e8:	39 49 00 01 	addi    r10,r9,1
100120ec:	3d 20 10 03 	lis     r9,4099
100120f0:	91 49 de 78 	stw     r10,-8584(r9)
    }
100120f4:	39 7f 00 20 	addi    r11,r31,32
100120f8:	80 0b 00 04 	lwz     r0,4(r11)
100120fc:	7c 08 03 a6 	mtlr    r0
10012100:	83 eb ff fc 	lwz     r31,-4(r11)
10012104:	7d 61 5b 78 	mr      r1,r11
10012108:	4e 80 00 20 	blr

1001210c <poll_del_fd>:


static void
poll_del_fd( int fd )
    {
1001210c:	94 21 ff d0 	stwu    r1,-48(r1)
10012110:	7c 08 02 a6 	mflr    r0
10012114:	90 01 00 34 	stw     r0,52(r1)
10012118:	93 e1 00 2c 	stw     r31,44(r1)
1001211c:	7c 3f 0b 78 	mr      r31,r1
10012120:	90 7f 00 18 	stw     r3,24(r31)
    int idx = poll_fdidx[fd];
10012124:	3d 20 10 03 	lis     r9,4099
10012128:	81 49 de 7c 	lwz     r10,-8580(r9)
1001212c:	81 3f 00 18 	lwz     r9,24(r31)
10012130:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10012134:	7d 2a 4a 14 	add     r9,r10,r9
10012138:	81 29 00 00 	lwz     r9,0(r9)
1001213c:	91 3f 00 08 	stw     r9,8(r31)

    if ( idx < 0 || idx >= nfiles )
10012140:	81 3f 00 08 	lwz     r9,8(r31)
10012144:	2f 89 00 00 	cmpwi   cr7,r9,0
10012148:	41 9c 00 18 	blt     cr7,10012160 <poll_del_fd+0x54>
1001214c:	3d 20 10 03 	lis     r9,4099
10012150:	81 29 de 5c 	lwz     r9,-8612(r9)
10012154:	81 5f 00 08 	lwz     r10,8(r31)
10012158:	7f 8a 48 00 	cmpw    cr7,r10,r9
1001215c:	41 9c 00 20 	blt     cr7,1001217c <poll_del_fd+0x70>
	{
	syslog( LOG_ERR, "bad idx (%d) in poll_del_fd!", idx );
10012160:	38 60 00 03 	li      r3,3
10012164:	3d 20 10 02 	lis     r9,4098
10012168:	38 89 b1 98 	addi    r4,r9,-20072
1001216c:	80 bf 00 08 	lwz     r5,8(r31)
10012170:	4c c6 31 82 	crclr   4*cr1+eq
10012174:	48 01 b6 11 	bl      1002d784 <syslog@plt>
	return;
10012178:	48 00 00 b8 	b       10012230 <poll_del_fd+0x124>
	}
    --npoll_fds;
1001217c:	3d 20 10 03 	lis     r9,4099
10012180:	81 29 de 78 	lwz     r9,-8584(r9)
10012184:	39 49 ff ff 	addi    r10,r9,-1
10012188:	3d 20 10 03 	lis     r9,4099
1001218c:	91 49 de 78 	stw     r10,-8584(r9)
    pollfds[idx] = pollfds[npoll_fds];
10012190:	3d 20 10 03 	lis     r9,4099
10012194:	81 49 de 74 	lwz     r10,-8588(r9)
10012198:	81 3f 00 08 	lwz     r9,8(r31)
1001219c:	55 29 18 38 	rlwinm  r9,r9,3,0,28
100121a0:	7d 2a 4a 14 	add     r9,r10,r9
100121a4:	3d 40 10 03 	lis     r10,4099
100121a8:	81 0a de 74 	lwz     r8,-8588(r10)
100121ac:	3d 40 10 03 	lis     r10,4099
100121b0:	81 4a de 78 	lwz     r10,-8584(r10)
100121b4:	55 4a 18 38 	rlwinm  r10,r10,3,0,28
100121b8:	7d 48 52 14 	add     r10,r8,r10
100121bc:	c8 0a 00 00 	lfd     f0,0(r10)
100121c0:	d8 09 00 00 	stfd    f0,0(r9)
    poll_fdidx[pollfds[idx].fd] = idx;
100121c4:	3d 20 10 03 	lis     r9,4099
100121c8:	81 49 de 7c 	lwz     r10,-8580(r9)
100121cc:	3d 20 10 03 	lis     r9,4099
100121d0:	81 09 de 74 	lwz     r8,-8588(r9)
100121d4:	81 3f 00 08 	lwz     r9,8(r31)
100121d8:	55 29 18 38 	rlwinm  r9,r9,3,0,28
100121dc:	7d 28 4a 14 	add     r9,r8,r9
100121e0:	81 29 00 00 	lwz     r9,0(r9)
100121e4:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
100121e8:	7d 2a 4a 14 	add     r9,r10,r9
100121ec:	81 5f 00 08 	lwz     r10,8(r31)
100121f0:	91 49 00 00 	stw     r10,0(r9)
    pollfds[npoll_fds].fd = -1;
100121f4:	3d 20 10 03 	lis     r9,4099
100121f8:	81 49 de 74 	lwz     r10,-8588(r9)
100121fc:	3d 20 10 03 	lis     r9,4099
10012200:	81 29 de 78 	lwz     r9,-8584(r9)
10012204:	55 29 18 38 	rlwinm  r9,r9,3,0,28
10012208:	7d 2a 4a 14 	add     r9,r10,r9
1001220c:	39 40 ff ff 	li      r10,-1
10012210:	91 49 00 00 	stw     r10,0(r9)
    poll_fdidx[fd] = -1;
10012214:	3d 20 10 03 	lis     r9,4099
10012218:	81 49 de 7c 	lwz     r10,-8580(r9)
1001221c:	81 3f 00 18 	lwz     r9,24(r31)
10012220:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10012224:	7d 2a 4a 14 	add     r9,r10,r9
10012228:	39 40 ff ff 	li      r10,-1
1001222c:	91 49 00 00 	stw     r10,0(r9)
    }
10012230:	39 7f 00 30 	addi    r11,r31,48
10012234:	80 0b 00 04 	lwz     r0,4(r11)
10012238:	7c 08 03 a6 	mtlr    r0
1001223c:	83 eb ff fc 	lwz     r31,-4(r11)
10012240:	7d 61 5b 78 	mr      r1,r11
10012244:	4e 80 00 20 	blr

10012248 <poll_watch>:


static int
poll_watch( long timeout_msecs )
    {
10012248:	94 21 ff d0 	stwu    r1,-48(r1)
1001224c:	7c 08 02 a6 	mflr    r0
10012250:	90 01 00 34 	stw     r0,52(r1)
10012254:	93 e1 00 2c 	stw     r31,44(r1)
10012258:	7c 3f 0b 78 	mr      r31,r1
1001225c:	90 7f 00 18 	stw     r3,24(r31)
    int r, ridx, i;

    r = poll( pollfds, npoll_fds, (int) timeout_msecs );
10012260:	3d 20 10 03 	lis     r9,4099
10012264:	81 49 de 74 	lwz     r10,-8588(r9)
10012268:	3d 20 10 03 	lis     r9,4099
1001226c:	81 29 de 78 	lwz     r9,-8584(r9)
10012270:	7d 43 53 78 	mr      r3,r10
10012274:	7d 24 4b 78 	mr      r4,r9
10012278:	80 bf 00 18 	lwz     r5,24(r31)
1001227c:	48 01 b2 a1 	bl      1002d51c <poll@plt>
10012280:	90 7f 00 10 	stw     r3,16(r31)
    if ( r <= 0 )
10012284:	81 3f 00 10 	lwz     r9,16(r31)
10012288:	2f 89 00 00 	cmpwi   cr7,r9,0
1001228c:	41 9d 00 0c 	bgt     cr7,10012298 <poll_watch+0x50>
	return r;
10012290:	81 3f 00 10 	lwz     r9,16(r31)
10012294:	48 00 00 b4 	b       10012348 <poll_watch+0x100>

    ridx = 0;
10012298:	39 20 00 00 	li      r9,0
1001229c:	91 3f 00 08 	stw     r9,8(r31)
    for ( i = 0; i < npoll_fds; ++i )
100122a0:	39 20 00 00 	li      r9,0
100122a4:	91 3f 00 0c 	stw     r9,12(r31)
100122a8:	48 00 00 88 	b       10012330 <poll_watch+0xe8>
	if ( pollfds[i].revents &
100122ac:	3d 20 10 03 	lis     r9,4099
100122b0:	81 49 de 74 	lwz     r10,-8588(r9)
100122b4:	81 3f 00 0c 	lwz     r9,12(r31)
100122b8:	55 29 18 38 	rlwinm  r9,r9,3,0,28
100122bc:	7d 2a 4a 14 	add     r9,r10,r9
100122c0:	a1 29 00 06 	lhz     r9,6(r9)
100122c4:	7d 29 07 34 	extsh   r9,r9
100122c8:	55 29 04 3e 	clrlwi  r9,r9,16
100122cc:	71 29 00 3d 	andi.   r9,r9,61
100122d0:	2f 89 00 00 	cmpwi   cr7,r9,0
100122d4:	41 9e 00 50 	beq     cr7,10012324 <poll_watch+0xdc>
	     ( POLLIN | POLLOUT | POLLERR | POLLHUP | POLLNVAL ) )
	    {
	    poll_rfdidx[ridx++] = pollfds[i].fd;
100122d8:	3d 20 10 03 	lis     r9,4099
100122dc:	81 49 de 80 	lwz     r10,-8576(r9)
100122e0:	81 3f 00 08 	lwz     r9,8(r31)
100122e4:	39 09 00 01 	addi    r8,r9,1
100122e8:	91 1f 00 08 	stw     r8,8(r31)
100122ec:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
100122f0:	7d 2a 4a 14 	add     r9,r10,r9
100122f4:	3d 40 10 03 	lis     r10,4099
100122f8:	81 0a de 74 	lwz     r8,-8588(r10)
100122fc:	81 5f 00 0c 	lwz     r10,12(r31)
10012300:	55 4a 18 38 	rlwinm  r10,r10,3,0,28
10012304:	7d 48 52 14 	add     r10,r8,r10
10012308:	81 4a 00 00 	lwz     r10,0(r10)
1001230c:	91 49 00 00 	stw     r10,0(r9)
	    if ( ridx == r )
10012310:	81 5f 00 08 	lwz     r10,8(r31)
10012314:	81 3f 00 10 	lwz     r9,16(r31)
10012318:	7f 8a 48 00 	cmpw    cr7,r10,r9
1001231c:	40 9e 00 08 	bne     cr7,10012324 <poll_watch+0xdc>
		break;
10012320:	48 00 00 24 	b       10012344 <poll_watch+0xfc>
    r = poll( pollfds, npoll_fds, (int) timeout_msecs );
    if ( r <= 0 )
	return r;

    ridx = 0;
    for ( i = 0; i < npoll_fds; ++i )
10012324:	81 3f 00 0c 	lwz     r9,12(r31)
10012328:	39 29 00 01 	addi    r9,r9,1
1001232c:	91 3f 00 0c 	stw     r9,12(r31)
10012330:	3d 20 10 03 	lis     r9,4099
10012334:	81 29 de 78 	lwz     r9,-8584(r9)
10012338:	81 5f 00 0c 	lwz     r10,12(r31)
1001233c:	7f 8a 48 00 	cmpw    cr7,r10,r9
10012340:	41 9c ff 6c 	blt     cr7,100122ac <poll_watch+0x64>
	    poll_rfdidx[ridx++] = pollfds[i].fd;
	    if ( ridx == r )
		break;
	    }

    return ridx;	/* should be equal to r */
10012344:	81 3f 00 08 	lwz     r9,8(r31)
    }
10012348:	7d 23 4b 78 	mr      r3,r9
1001234c:	39 7f 00 30 	addi    r11,r31,48
10012350:	80 0b 00 04 	lwz     r0,4(r11)
10012354:	7c 08 03 a6 	mtlr    r0
10012358:	83 eb ff fc 	lwz     r31,-4(r11)
1001235c:	7d 61 5b 78 	mr      r1,r11
10012360:	4e 80 00 20 	blr

10012364 <poll_check_fd>:


static int
poll_check_fd( int fd )
    {
10012364:	94 21 ff d0 	stwu    r1,-48(r1)
10012368:	7c 08 02 a6 	mflr    r0
1001236c:	90 01 00 34 	stw     r0,52(r1)
10012370:	93 e1 00 2c 	stw     r31,44(r1)
10012374:	7c 3f 0b 78 	mr      r31,r1
10012378:	90 7f 00 18 	stw     r3,24(r31)
    int fdidx = poll_fdidx[fd];
1001237c:	3d 20 10 03 	lis     r9,4099
10012380:	81 49 de 7c 	lwz     r10,-8580(r9)
10012384:	81 3f 00 18 	lwz     r9,24(r31)
10012388:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1001238c:	7d 2a 4a 14 	add     r9,r10,r9
10012390:	81 29 00 00 	lwz     r9,0(r9)
10012394:	91 3f 00 08 	stw     r9,8(r31)

    if ( fdidx < 0 || fdidx >= nfiles )
10012398:	81 3f 00 08 	lwz     r9,8(r31)
1001239c:	2f 89 00 00 	cmpwi   cr7,r9,0
100123a0:	41 9c 00 18 	blt     cr7,100123b8 <poll_check_fd+0x54>
100123a4:	3d 20 10 03 	lis     r9,4099
100123a8:	81 29 de 5c 	lwz     r9,-8612(r9)
100123ac:	81 5f 00 08 	lwz     r10,8(r31)
100123b0:	7f 8a 48 00 	cmpw    cr7,r10,r9
100123b4:	41 9c 00 24 	blt     cr7,100123d8 <poll_check_fd+0x74>
	{
	syslog( LOG_ERR, "bad fdidx (%d) in poll_check_fd!", fdidx );
100123b8:	38 60 00 03 	li      r3,3
100123bc:	3d 20 10 02 	lis     r9,4098
100123c0:	38 89 b1 b8 	addi    r4,r9,-20040
100123c4:	80 bf 00 08 	lwz     r5,8(r31)
100123c8:	4c c6 31 82 	crclr   4*cr1+eq
100123cc:	48 01 b3 b9 	bl      1002d784 <syslog@plt>
	return 0;
100123d0:	39 20 00 00 	li      r9,0
100123d4:	48 00 00 b8 	b       1001248c <poll_check_fd+0x128>
	}
    if ( pollfds[fdidx].revents & POLLERR )
100123d8:	3d 20 10 03 	lis     r9,4099
100123dc:	81 49 de 74 	lwz     r10,-8588(r9)
100123e0:	81 3f 00 08 	lwz     r9,8(r31)
100123e4:	55 29 18 38 	rlwinm  r9,r9,3,0,28
100123e8:	7d 2a 4a 14 	add     r9,r10,r9
100123ec:	a1 29 00 06 	lhz     r9,6(r9)
100123f0:	7d 29 07 34 	extsh   r9,r9
100123f4:	55 29 04 3e 	clrlwi  r9,r9,16
100123f8:	55 29 07 38 	rlwinm  r9,r9,0,28,28
100123fc:	2f 89 00 00 	cmpwi   cr7,r9,0
10012400:	41 9e 00 0c 	beq     cr7,1001240c <poll_check_fd+0xa8>
	return 0;
10012404:	39 20 00 00 	li      r9,0
10012408:	48 00 00 84 	b       1001248c <poll_check_fd+0x128>
    switch ( fd_rw[fd] )
1001240c:	3d 20 10 03 	lis     r9,4099
10012410:	81 49 de 64 	lwz     r10,-8604(r9)
10012414:	81 3f 00 18 	lwz     r9,24(r31)
10012418:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1001241c:	7d 2a 4a 14 	add     r9,r10,r9
10012420:	81 29 00 00 	lwz     r9,0(r9)
10012424:	2f 89 00 00 	cmpwi   cr7,r9,0
10012428:	41 9e 00 10 	beq     cr7,10012438 <poll_check_fd+0xd4>
1001242c:	2f 89 00 01 	cmpwi   cr7,r9,1
10012430:	41 9e 00 30 	beq     cr7,10012460 <poll_check_fd+0xfc>
10012434:	48 00 00 54 	b       10012488 <poll_check_fd+0x124>
	{
	case FDW_READ: return pollfds[fdidx].revents & ( POLLIN | POLLHUP | POLLNVAL );
10012438:	3d 20 10 03 	lis     r9,4099
1001243c:	81 49 de 74 	lwz     r10,-8588(r9)
10012440:	81 3f 00 08 	lwz     r9,8(r31)
10012444:	55 29 18 38 	rlwinm  r9,r9,3,0,28
10012448:	7d 2a 4a 14 	add     r9,r10,r9
1001244c:	a1 29 00 06 	lhz     r9,6(r9)
10012450:	7d 29 07 34 	extsh   r9,r9
10012454:	55 29 04 3e 	clrlwi  r9,r9,16
10012458:	71 29 00 31 	andi.   r9,r9,49
1001245c:	48 00 00 30 	b       1001248c <poll_check_fd+0x128>
	case FDW_WRITE: return pollfds[fdidx].revents & ( POLLOUT | POLLHUP | POLLNVAL );
10012460:	3d 20 10 03 	lis     r9,4099
10012464:	81 49 de 74 	lwz     r10,-8588(r9)
10012468:	81 3f 00 08 	lwz     r9,8(r31)
1001246c:	55 29 18 38 	rlwinm  r9,r9,3,0,28
10012470:	7d 2a 4a 14 	add     r9,r10,r9
10012474:	a1 29 00 06 	lhz     r9,6(r9)
10012478:	7d 29 07 34 	extsh   r9,r9
1001247c:	55 29 04 3e 	clrlwi  r9,r9,16
10012480:	71 29 00 34 	andi.   r9,r9,52
10012484:	48 00 00 08 	b       1001248c <poll_check_fd+0x128>
	default: return 0;
10012488:	39 20 00 00 	li      r9,0
	}
    }
1001248c:	7d 23 4b 78 	mr      r3,r9
10012490:	39 7f 00 30 	addi    r11,r31,48
10012494:	80 0b 00 04 	lwz     r0,4(r11)
10012498:	7c 08 03 a6 	mtlr    r0
1001249c:	83 eb ff fc 	lwz     r31,-4(r11)
100124a0:	7d 61 5b 78 	mr      r1,r11
100124a4:	4e 80 00 20 	blr

100124a8 <poll_get_fd>:


static int
poll_get_fd( int ridx )
    {
100124a8:	94 21 ff e0 	stwu    r1,-32(r1)
100124ac:	7c 08 02 a6 	mflr    r0
100124b0:	90 01 00 24 	stw     r0,36(r1)
100124b4:	93 e1 00 1c 	stw     r31,28(r1)
100124b8:	7c 3f 0b 78 	mr      r31,r1
100124bc:	90 7f 00 08 	stw     r3,8(r31)
    if ( ridx < 0 || ridx >= nfiles )
100124c0:	81 3f 00 08 	lwz     r9,8(r31)
100124c4:	2f 89 00 00 	cmpwi   cr7,r9,0
100124c8:	41 9c 00 18 	blt     cr7,100124e0 <poll_get_fd+0x38>
100124cc:	3d 20 10 03 	lis     r9,4099
100124d0:	81 29 de 5c 	lwz     r9,-8612(r9)
100124d4:	81 5f 00 08 	lwz     r10,8(r31)
100124d8:	7f 8a 48 00 	cmpw    cr7,r10,r9
100124dc:	41 9c 00 24 	blt     cr7,10012500 <poll_get_fd+0x58>
	{
	syslog( LOG_ERR, "bad ridx (%d) in poll_get_fd!", ridx );
100124e0:	38 60 00 03 	li      r3,3
100124e4:	3d 20 10 02 	lis     r9,4098
100124e8:	38 89 b1 dc 	addi    r4,r9,-20004
100124ec:	80 bf 00 08 	lwz     r5,8(r31)
100124f0:	4c c6 31 82 	crclr   4*cr1+eq
100124f4:	48 01 b2 91 	bl      1002d784 <syslog@plt>
	return -1;
100124f8:	39 20 ff ff 	li      r9,-1
100124fc:	48 00 00 1c 	b       10012518 <poll_get_fd+0x70>
	}
    return poll_rfdidx[ridx];
10012500:	3d 20 10 03 	lis     r9,4099
10012504:	81 49 de 80 	lwz     r10,-8576(r9)
10012508:	81 3f 00 08 	lwz     r9,8(r31)
1001250c:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10012510:	7d 2a 4a 14 	add     r9,r10,r9
10012514:	81 29 00 00 	lwz     r9,0(r9)
    }
10012518:	7d 23 4b 78 	mr      r3,r9
1001251c:	39 7f 00 20 	addi    r11,r31,32
10012520:	80 0b 00 04 	lwz     r0,4(r11)
10012524:	7c 08 03 a6 	mtlr    r0
10012528:	83 eb ff fc 	lwz     r31,-4(r11)
1001252c:	7d 61 5b 78 	mr      r1,r11
10012530:	4e 80 00 20 	blr

10012534 <mmc_map>:
static unsigned int hash( ino_t ino, dev_t dev, off_t size, time_t ct );


void*
mmc_map( char* filename, struct stat* sbP, struct timeval* nowP )
    {
10012534:	94 21 ff 70 	stwu    r1,-144(r1)
10012538:	7c 08 02 a6 	mflr    r0
1001253c:	90 01 00 94 	stw     r0,148(r1)
10012540:	93 e1 00 8c 	stw     r31,140(r1)
10012544:	7c 3f 0b 78 	mr      r31,r1
10012548:	90 7f 00 78 	stw     r3,120(r31)
1001254c:	90 9f 00 7c 	stw     r4,124(r31)
10012550:	90 bf 00 80 	stw     r5,128(r31)
    struct stat sb;
    Map* m;
    int fd;

    /* Stat the file, if necessary. */
    if ( sbP != (struct stat*) 0 )
10012554:	81 3f 00 7c 	lwz     r9,124(r31)
10012558:	2f 89 00 00 	cmpwi   cr7,r9,0
1001255c:	41 9e 00 28 	beq     cr7,10012584 <mmc_map+0x50>
	sb = *sbP;
10012560:	81 3f 00 7c 	lwz     r9,124(r31)
10012564:	39 1f 00 18 	addi    r8,r31,24
10012568:	7d 2a 4b 78 	mr      r10,r9
1001256c:	39 20 00 58 	li      r9,88
10012570:	7d 03 43 78 	mr      r3,r8
10012574:	7d 44 53 78 	mr      r4,r10
10012578:	7d 25 4b 78 	mr      r5,r9
1001257c:	48 01 ae d9 	bl      1002d454 <memcpy@plt>
10012580:	48 00 00 3c 	b       100125bc <mmc_map+0x88>
    else
	{
	if ( stat( filename, &sb ) != 0 )
10012584:	39 3f 00 18 	addi    r9,r31,24
10012588:	80 7f 00 78 	lwz     r3,120(r31)
1001258c:	7d 24 4b 78 	mr      r4,r9
10012590:	48 00 56 65 	bl      10017bf4 <__stat>
10012594:	7c 69 1b 78 	mr      r9,r3
10012598:	2f 89 00 00 	cmpwi   cr7,r9,0
1001259c:	41 9e 00 20 	beq     cr7,100125bc <mmc_map+0x88>
	    {
	    syslog( LOG_ERR, "stat - %m" );
100125a0:	38 60 00 03 	li      r3,3
100125a4:	3d 20 10 02 	lis     r9,4098
100125a8:	38 89 b2 08 	addi    r4,r9,-19960
100125ac:	4c c6 31 82 	crclr   4*cr1+eq
100125b0:	48 01 b1 d5 	bl      1002d784 <syslog@plt>
	    return (void*) 0;
100125b4:	39 20 00 00 	li      r9,0
100125b8:	48 00 03 78 	b       10012930 <mmc_map+0x3fc>
	    }
	}

    /* Get the current time, if necessary. */
    if ( nowP != (struct timeval*) 0 )
100125bc:	81 3f 00 80 	lwz     r9,128(r31)
100125c0:	2f 89 00 00 	cmpwi   cr7,r9,0
100125c4:	41 9e 00 14 	beq     cr7,100125d8 <mmc_map+0xa4>
	now = nowP->tv_sec;
100125c8:	81 3f 00 80 	lwz     r9,128(r31)
100125cc:	81 29 00 00 	lwz     r9,0(r9)
100125d0:	91 3f 00 08 	stw     r9,8(r31)
100125d4:	48 00 00 10 	b       100125e4 <mmc_map+0xb0>
    else
	now = time( (time_t*) 0 );
100125d8:	38 60 00 00 	li      r3,0
100125dc:	48 01 ae 99 	bl      1002d474 <time@plt>
100125e0:	90 7f 00 08 	stw     r3,8(r31)

    /* See if we have it mapped already, via the hash table. */
    if ( check_hash_size() < 0 )
100125e4:	48 00 09 85 	bl      10012f68 <check_hash_size>
100125e8:	7c 69 1b 78 	mr      r9,r3
100125ec:	2f 89 00 00 	cmpwi   cr7,r9,0
100125f0:	40 9c 00 20 	bge     cr7,10012610 <mmc_map+0xdc>
	{
	syslog( LOG_ERR, "check_hash_size() failure" );
100125f4:	38 60 00 03 	li      r3,3
100125f8:	3d 20 10 02 	lis     r9,4098
100125fc:	38 89 b2 14 	addi    r4,r9,-19948
10012600:	4c c6 31 82 	crclr   4*cr1+eq
10012604:	48 01 b1 81 	bl      1002d784 <syslog@plt>
	return (void*) 0;
10012608:	39 20 00 00 	li      r9,0
1001260c:	48 00 03 24 	b       10012930 <mmc_map+0x3fc>
	}
    m = find_hash( sb.st_ino, sb.st_dev, sb.st_size, sb.st_ctime );
10012610:	80 df 00 24 	lwz     r6,36(r31)
10012614:	81 3f 00 18 	lwz     r9,24(r31)
10012618:	81 5f 00 1c 	lwz     r10,28(r31)
1001261c:	80 ff 00 44 	lwz     r7,68(r31)
10012620:	81 1f 00 60 	lwz     r8,96(r31)
10012624:	7c c3 33 78 	mr      r3,r6
10012628:	7d 25 4b 78 	mr      r5,r9
1001262c:	7d 46 53 78 	mr      r6,r10
10012630:	48 00 0c 19 	bl      10013248 <find_hash>
10012634:	90 7f 00 0c 	stw     r3,12(r31)
    if ( m != (Map*) 0 )
10012638:	81 3f 00 0c 	lwz     r9,12(r31)
1001263c:	2f 89 00 00 	cmpwi   cr7,r9,0
10012640:	41 9e 00 30 	beq     cr7,10012670 <mmc_map+0x13c>
	{
	/* Yep.  Just return the existing map */
	++m->refcount;
10012644:	81 3f 00 0c 	lwz     r9,12(r31)
10012648:	81 29 00 18 	lwz     r9,24(r9)
1001264c:	39 49 00 01 	addi    r10,r9,1
10012650:	81 3f 00 0c 	lwz     r9,12(r31)
10012654:	91 49 00 18 	stw     r10,24(r9)
	m->reftime = now;
10012658:	81 3f 00 0c 	lwz     r9,12(r31)
1001265c:	81 5f 00 08 	lwz     r10,8(r31)
10012660:	91 49 00 1c 	stw     r10,28(r9)
	return m->addr;
10012664:	81 3f 00 0c 	lwz     r9,12(r31)
10012668:	81 29 00 20 	lwz     r9,32(r9)
1001266c:	48 00 02 c4 	b       10012930 <mmc_map+0x3fc>
	}

    /* Open the file. */
    fd = open( filename, O_RDONLY );
10012670:	80 7f 00 78 	lwz     r3,120(r31)
10012674:	38 80 00 00 	li      r4,0
10012678:	4c c6 31 82 	crclr   4*cr1+eq
1001267c:	48 01 af 81 	bl      1002d5fc <open@plt>
10012680:	90 7f 00 10 	stw     r3,16(r31)
    if ( fd < 0 )
10012684:	81 3f 00 10 	lwz     r9,16(r31)
10012688:	2f 89 00 00 	cmpwi   cr7,r9,0
1001268c:	40 9c 00 20 	bge     cr7,100126ac <mmc_map+0x178>
	{
	syslog( LOG_ERR, "open - %m" );
10012690:	38 60 00 03 	li      r3,3
10012694:	3d 20 10 02 	lis     r9,4098
10012698:	38 89 b2 30 	addi    r4,r9,-19920
1001269c:	4c c6 31 82 	crclr   4*cr1+eq
100126a0:	48 01 b0 e5 	bl      1002d784 <syslog@plt>
	return (void*) 0;
100126a4:	39 20 00 00 	li      r9,0
100126a8:	48 00 02 88 	b       10012930 <mmc_map+0x3fc>
	}

    /* Find a free Map entry or make a new one. */
    if ( free_maps != (Map*) 0 )
100126ac:	3d 20 10 03 	lis     r9,4099
100126b0:	81 29 de 88 	lwz     r9,-8568(r9)
100126b4:	2f 89 00 00 	cmpwi   cr7,r9,0
100126b8:	41 9e 00 38 	beq     cr7,100126f0 <mmc_map+0x1bc>
	{
	m = free_maps;
100126bc:	3d 20 10 03 	lis     r9,4099
100126c0:	81 29 de 88 	lwz     r9,-8568(r9)
100126c4:	91 3f 00 0c 	stw     r9,12(r31)
	free_maps = m->next;
100126c8:	81 3f 00 0c 	lwz     r9,12(r31)
100126cc:	81 49 00 2c 	lwz     r10,44(r9)
100126d0:	3d 20 10 03 	lis     r9,4099
100126d4:	91 49 de 88 	stw     r10,-8568(r9)
	--free_count;
100126d8:	3d 20 10 03 	lis     r9,4099
100126dc:	81 29 de 94 	lwz     r9,-8556(r9)
100126e0:	39 49 ff ff 	addi    r10,r9,-1
100126e4:	3d 20 10 03 	lis     r9,4099
100126e8:	91 49 de 94 	stw     r10,-8556(r9)
100126ec:	48 00 00 58 	b       10012744 <mmc_map+0x210>
	}
    else
	{
	m = (Map*) malloc( sizeof(Map) );
100126f0:	38 60 00 30 	li      r3,48
100126f4:	48 01 ae b1 	bl      1002d5a4 <malloc@plt>
100126f8:	7c 69 1b 78 	mr      r9,r3
100126fc:	91 3f 00 0c 	stw     r9,12(r31)
	if ( m == (Map*) 0 )
10012700:	81 3f 00 0c 	lwz     r9,12(r31)
10012704:	2f 89 00 00 	cmpwi   cr7,r9,0
10012708:	40 9e 00 28 	bne     cr7,10012730 <mmc_map+0x1fc>
	    {
	    (void) close( fd );
1001270c:	80 7f 00 10 	lwz     r3,16(r31)
10012710:	48 01 b0 fd 	bl      1002d80c <close@plt>
	    syslog( LOG_ERR, "out of memory allocating a Map" );
10012714:	38 60 00 03 	li      r3,3
10012718:	3d 20 10 02 	lis     r9,4098
1001271c:	38 89 b2 3c 	addi    r4,r9,-19908
10012720:	4c c6 31 82 	crclr   4*cr1+eq
10012724:	48 01 b0 61 	bl      1002d784 <syslog@plt>
	    return (void*) 0;
10012728:	39 20 00 00 	li      r9,0
1001272c:	48 00 02 04 	b       10012930 <mmc_map+0x3fc>
	    }
	++alloc_count;
10012730:	3d 20 10 03 	lis     r9,4099
10012734:	81 29 de 8c 	lwz     r9,-8564(r9)
10012738:	39 49 00 01 	addi    r10,r9,1
1001273c:	3d 20 10 03 	lis     r9,4099
10012740:	91 49 de 8c 	stw     r10,-8564(r9)
	}

    /* Fill in the Map entry. */
    m->ino = sb.st_ino;
10012744:	81 5f 00 24 	lwz     r10,36(r31)
10012748:	81 3f 00 0c 	lwz     r9,12(r31)
1001274c:	91 49 00 00 	stw     r10,0(r9)
    m->dev = sb.st_dev;
10012750:	c8 1f 00 18 	lfd     f0,24(r31)
10012754:	81 3f 00 0c 	lwz     r9,12(r31)
10012758:	d8 09 00 08 	stfd    f0,8(r9)
    m->size = sb.st_size;
1001275c:	81 5f 00 44 	lwz     r10,68(r31)
10012760:	81 3f 00 0c 	lwz     r9,12(r31)
10012764:	91 49 00 10 	stw     r10,16(r9)
    m->ct = sb.st_ctime;
10012768:	81 5f 00 60 	lwz     r10,96(r31)
1001276c:	81 3f 00 0c 	lwz     r9,12(r31)
10012770:	91 49 00 14 	stw     r10,20(r9)
    m->refcount = 1;
10012774:	81 3f 00 0c 	lwz     r9,12(r31)
10012778:	39 40 00 01 	li      r10,1
1001277c:	91 49 00 18 	stw     r10,24(r9)
    m->reftime = now;
10012780:	81 3f 00 0c 	lwz     r9,12(r31)
10012784:	81 5f 00 08 	lwz     r10,8(r31)
10012788:	91 49 00 1c 	stw     r10,28(r9)

    /* Avoid doing anything for zero-length files; some systems don't like
    ** to mmap them, other systems dislike mallocing zero bytes.
    */
    if ( m->size == 0 )
1001278c:	81 3f 00 0c 	lwz     r9,12(r31)
10012790:	81 29 00 10 	lwz     r9,16(r9)
10012794:	2f 89 00 00 	cmpwi   cr7,r9,0
10012798:	40 9e 00 14 	bne     cr7,100127ac <mmc_map+0x278>
	m->addr = (void*) 1;	/* arbitrary non-NULL address */
1001279c:	81 3f 00 0c 	lwz     r9,12(r31)
100127a0:	39 40 00 01 	li      r10,1
100127a4:	91 49 00 20 	stw     r10,32(r9)
100127a8:	48 00 00 e0 	b       10012888 <mmc_map+0x354>
    else
	{
	size_t size_size = (size_t) m->size;	/* loses on files >2GB */
100127ac:	81 3f 00 0c 	lwz     r9,12(r31)
100127b0:	81 29 00 10 	lwz     r9,16(r9)
100127b4:	91 3f 00 14 	stw     r9,20(r31)
#ifdef HAVE_MMAP
	/* Map the file into memory. */
	m->addr = mmap( 0, size_size, PROT_READ, MAP_PRIVATE, fd, 0 );
100127b8:	38 60 00 00 	li      r3,0
100127bc:	80 9f 00 14 	lwz     r4,20(r31)
100127c0:	38 a0 00 01 	li      r5,1
100127c4:	38 c0 00 02 	li      r6,2
100127c8:	80 ff 00 10 	lwz     r7,16(r31)
100127cc:	39 00 00 00 	li      r8,0
100127d0:	48 01 ae 6d 	bl      1002d63c <mmap@plt>
100127d4:	7c 6a 1b 78 	mr      r10,r3
100127d8:	81 3f 00 0c 	lwz     r9,12(r31)
100127dc:	91 49 00 20 	stw     r10,32(r9)
	if ( m->addr == (void*) -1 && errno == ENOMEM )
100127e0:	81 3f 00 0c 	lwz     r9,12(r31)
100127e4:	81 49 00 20 	lwz     r10,32(r9)
100127e8:	39 20 ff ff 	li      r9,-1
100127ec:	7f 8a 48 00 	cmpw    cr7,r10,r9
100127f0:	40 9e 00 44 	bne     cr7,10012834 <mmc_map+0x300>
100127f4:	48 01 ae e9 	bl      1002d6dc <__errno_location@plt>
100127f8:	7c 69 1b 78 	mr      r9,r3
100127fc:	81 29 00 00 	lwz     r9,0(r9)
10012800:	2f 89 00 0c 	cmpwi   cr7,r9,12
10012804:	40 9e 00 30 	bne     cr7,10012834 <mmc_map+0x300>
	    {
	    /* Ooo, out of address space.  Free all unreferenced maps
	    ** and try again.
	    */
	    panic();
10012808:	48 00 05 05 	bl      10012d0c <panic>
	    m->addr = mmap( 0, size_size, PROT_READ, MAP_PRIVATE, fd, 0 );
1001280c:	38 60 00 00 	li      r3,0
10012810:	80 9f 00 14 	lwz     r4,20(r31)
10012814:	38 a0 00 01 	li      r5,1
10012818:	38 c0 00 02 	li      r6,2
1001281c:	80 ff 00 10 	lwz     r7,16(r31)
10012820:	39 00 00 00 	li      r8,0
10012824:	48 01 ae 19 	bl      1002d63c <mmap@plt>
10012828:	7c 6a 1b 78 	mr      r10,r3
1001282c:	81 3f 00 0c 	lwz     r9,12(r31)
10012830:	91 49 00 20 	stw     r10,32(r9)
	    }
	if ( m->addr == (void*) -1 )
10012834:	81 3f 00 0c 	lwz     r9,12(r31)
10012838:	81 49 00 20 	lwz     r10,32(r9)
1001283c:	39 20 ff ff 	li      r9,-1
10012840:	7f 8a 48 00 	cmpw    cr7,r10,r9
10012844:	40 9e 00 44 	bne     cr7,10012888 <mmc_map+0x354>
	    {
	    syslog( LOG_ERR, "mmap - %m" );
10012848:	38 60 00 03 	li      r3,3
1001284c:	3d 20 10 02 	lis     r9,4098
10012850:	38 89 b2 5c 	addi    r4,r9,-19876
10012854:	4c c6 31 82 	crclr   4*cr1+eq
10012858:	48 01 af 2d 	bl      1002d784 <syslog@plt>
	    (void) close( fd );
1001285c:	80 7f 00 10 	lwz     r3,16(r31)
10012860:	48 01 af ad 	bl      1002d80c <close@plt>
	    free( (void*) m );
10012864:	80 7f 00 0c 	lwz     r3,12(r31)
10012868:	48 01 ab cd 	bl      1002d434 <free@plt>
	    --alloc_count;
1001286c:	3d 20 10 03 	lis     r9,4099
10012870:	81 29 de 8c 	lwz     r9,-8564(r9)
10012874:	39 49 ff ff 	addi    r10,r9,-1
10012878:	3d 20 10 03 	lis     r9,4099
1001287c:	91 49 de 8c 	stw     r10,-8564(r9)
	    return (void*) 0;
10012880:	39 20 00 00 	li      r9,0
10012884:	48 00 00 ac 	b       10012930 <mmc_map+0x3fc>
	    --alloc_count;
	    return (void*) 0;
	    }
#endif /* HAVE_MMAP */
	}
    (void) close( fd );
10012888:	80 7f 00 10 	lwz     r3,16(r31)
1001288c:	48 01 af 81 	bl      1002d80c <close@plt>

    /* Put the Map into the hash table. */
    if ( add_hash( m ) < 0 )
10012890:	80 7f 00 0c 	lwz     r3,12(r31)
10012894:	48 00 08 85 	bl      10013118 <add_hash>
10012898:	7c 69 1b 78 	mr      r9,r3
1001289c:	2f 89 00 00 	cmpwi   cr7,r9,0
100128a0:	40 9c 00 3c 	bge     cr7,100128dc <mmc_map+0x3a8>
	{
	syslog( LOG_ERR, "add_hash() failure" );
100128a4:	38 60 00 03 	li      r3,3
100128a8:	3d 20 10 02 	lis     r9,4098
100128ac:	38 89 b2 68 	addi    r4,r9,-19864
100128b0:	4c c6 31 82 	crclr   4*cr1+eq
100128b4:	48 01 ae d1 	bl      1002d784 <syslog@plt>
	free( (void*) m );
100128b8:	80 7f 00 0c 	lwz     r3,12(r31)
100128bc:	48 01 ab 79 	bl      1002d434 <free@plt>
	--alloc_count;
100128c0:	3d 20 10 03 	lis     r9,4099
100128c4:	81 29 de 8c 	lwz     r9,-8564(r9)
100128c8:	39 49 ff ff 	addi    r10,r9,-1
100128cc:	3d 20 10 03 	lis     r9,4099
100128d0:	91 49 de 8c 	stw     r10,-8564(r9)
	return (void*) 0;
100128d4:	39 20 00 00 	li      r9,0
100128d8:	48 00 00 58 	b       10012930 <mmc_map+0x3fc>
	}

    /* Put the Map on the active list. */
    m->next = maps;
100128dc:	3d 20 10 03 	lis     r9,4099
100128e0:	81 49 de 84 	lwz     r10,-8572(r9)
100128e4:	81 3f 00 0c 	lwz     r9,12(r31)
100128e8:	91 49 00 2c 	stw     r10,44(r9)
    maps = m;
100128ec:	3d 20 10 03 	lis     r9,4099
100128f0:	81 5f 00 0c 	lwz     r10,12(r31)
100128f4:	91 49 de 84 	stw     r10,-8572(r9)
    ++map_count;
100128f8:	3d 20 10 03 	lis     r9,4099
100128fc:	81 29 de 90 	lwz     r9,-8560(r9)
10012900:	39 49 00 01 	addi    r10,r9,1
10012904:	3d 20 10 03 	lis     r9,4099
10012908:	91 49 de 90 	stw     r10,-8560(r9)

    /* Update the total byte count. */
    mapped_bytes += m->size;
1001290c:	81 3f 00 0c 	lwz     r9,12(r31)
10012910:	81 49 00 10 	lwz     r10,16(r9)
10012914:	3d 20 10 03 	lis     r9,4099
10012918:	81 29 de a4 	lwz     r9,-8540(r9)
1001291c:	7d 4a 4a 14 	add     r10,r10,r9
10012920:	3d 20 10 03 	lis     r9,4099
10012924:	91 49 de a4 	stw     r10,-8540(r9)

    /* And return the address. */
    return m->addr;
10012928:	81 3f 00 0c 	lwz     r9,12(r31)
1001292c:	81 29 00 20 	lwz     r9,32(r9)
    }
10012930:	7d 23 4b 78 	mr      r3,r9
10012934:	39 7f 00 90 	addi    r11,r31,144
10012938:	80 0b 00 04 	lwz     r0,4(r11)
1001293c:	7c 08 03 a6 	mtlr    r0
10012940:	83 eb ff fc 	lwz     r31,-4(r11)
10012944:	7d 61 5b 78 	mr      r1,r11
10012948:	4e 80 00 20 	blr

1001294c <mmc_unmap>:


void
mmc_unmap( void* addr, struct stat* sbP, struct timeval* nowP )
    {
1001294c:	94 21 ff d0 	stwu    r1,-48(r1)
10012950:	7c 08 02 a6 	mflr    r0
10012954:	90 01 00 34 	stw     r0,52(r1)
10012958:	93 e1 00 2c 	stw     r31,44(r1)
1001295c:	7c 3f 0b 78 	mr      r31,r1
10012960:	90 7f 00 18 	stw     r3,24(r31)
10012964:	90 9f 00 1c 	stw     r4,28(r31)
10012968:	90 bf 00 20 	stw     r5,32(r31)
    Map* m = (Map*) 0;
1001296c:	39 20 00 00 	li      r9,0
10012970:	91 3f 00 08 	stw     r9,8(r31)

    /* Find the Map entry for this address.  First try a hash. */
    if ( sbP != (struct stat*) 0 )
10012974:	81 3f 00 1c 	lwz     r9,28(r31)
10012978:	2f 89 00 00 	cmpwi   cr7,r9,0
1001297c:	41 9e 00 64 	beq     cr7,100129e0 <mmc_unmap+0x94>
	{
	m = find_hash( sbP->st_ino, sbP->st_dev, sbP->st_size, sbP->st_ctime );
10012980:	81 3f 00 1c 	lwz     r9,28(r31)
10012984:	80 c9 00 0c 	lwz     r6,12(r9)
10012988:	81 3f 00 1c 	lwz     r9,28(r31)
1001298c:	81 49 00 04 	lwz     r10,4(r9)
10012990:	81 29 00 00 	lwz     r9,0(r9)
10012994:	81 1f 00 1c 	lwz     r8,28(r31)
10012998:	80 e8 00 2c 	lwz     r7,44(r8)
1001299c:	81 1f 00 1c 	lwz     r8,28(r31)
100129a0:	81 08 00 48 	lwz     r8,72(r8)
100129a4:	7c c3 33 78 	mr      r3,r6
100129a8:	7d 25 4b 78 	mr      r5,r9
100129ac:	7d 46 53 78 	mr      r6,r10
100129b0:	48 00 08 99 	bl      10013248 <find_hash>
100129b4:	90 7f 00 08 	stw     r3,8(r31)
	if ( m != (Map*) 0 && m->addr != addr )
100129b8:	81 3f 00 08 	lwz     r9,8(r31)
100129bc:	2f 89 00 00 	cmpwi   cr7,r9,0
100129c0:	41 9e 00 20 	beq     cr7,100129e0 <mmc_unmap+0x94>
100129c4:	81 3f 00 08 	lwz     r9,8(r31)
100129c8:	81 49 00 20 	lwz     r10,32(r9)
100129cc:	81 3f 00 18 	lwz     r9,24(r31)
100129d0:	7f 8a 48 00 	cmpw    cr7,r10,r9
100129d4:	41 9e 00 0c 	beq     cr7,100129e0 <mmc_unmap+0x94>
	    m = (Map*) 0;
100129d8:	39 20 00 00 	li      r9,0
100129dc:	91 3f 00 08 	stw     r9,8(r31)
	}
    /* If that didn't work, try a full search. */
    if ( m == (Map*) 0 )
100129e0:	81 3f 00 08 	lwz     r9,8(r31)
100129e4:	2f 89 00 00 	cmpwi   cr7,r9,0
100129e8:	40 9e 00 44 	bne     cr7,10012a2c <mmc_unmap+0xe0>
	for ( m = maps; m != (Map*) 0; m = m->next )
100129ec:	3d 20 10 03 	lis     r9,4099
100129f0:	81 29 de 84 	lwz     r9,-8572(r9)
100129f4:	91 3f 00 08 	stw     r9,8(r31)
100129f8:	48 00 00 28 	b       10012a20 <mmc_unmap+0xd4>
	    if ( m->addr == addr )
100129fc:	81 3f 00 08 	lwz     r9,8(r31)
10012a00:	81 49 00 20 	lwz     r10,32(r9)
10012a04:	81 3f 00 18 	lwz     r9,24(r31)
10012a08:	7f 8a 48 00 	cmpw    cr7,r10,r9
10012a0c:	40 9e 00 08 	bne     cr7,10012a14 <mmc_unmap+0xc8>
		break;
10012a10:	48 00 00 1c 	b       10012a2c <mmc_unmap+0xe0>
	if ( m != (Map*) 0 && m->addr != addr )
	    m = (Map*) 0;
	}
    /* If that didn't work, try a full search. */
    if ( m == (Map*) 0 )
	for ( m = maps; m != (Map*) 0; m = m->next )
10012a14:	81 3f 00 08 	lwz     r9,8(r31)
10012a18:	81 29 00 2c 	lwz     r9,44(r9)
10012a1c:	91 3f 00 08 	stw     r9,8(r31)
10012a20:	81 3f 00 08 	lwz     r9,8(r31)
10012a24:	2f 89 00 00 	cmpwi   cr7,r9,0
10012a28:	40 9e ff d4 	bne     cr7,100129fc <mmc_unmap+0xb0>
	    if ( m->addr == addr )
		break;
    if ( m == (Map*) 0 )
10012a2c:	81 3f 00 08 	lwz     r9,8(r31)
10012a30:	2f 89 00 00 	cmpwi   cr7,r9,0
10012a34:	40 9e 00 1c 	bne     cr7,10012a50 <mmc_unmap+0x104>
	syslog( LOG_ERR, "mmc_unmap failed to find entry!" );
10012a38:	38 60 00 03 	li      r3,3
10012a3c:	3d 20 10 02 	lis     r9,4098
10012a40:	38 89 b2 7c 	addi    r4,r9,-19844
10012a44:	4c c6 31 82 	crclr   4*cr1+eq
10012a48:	48 01 ad 3d 	bl      1002d784 <syslog@plt>
10012a4c:	48 00 00 74 	b       10012ac0 <mmc_unmap+0x174>
    else if ( m->refcount <= 0 )
10012a50:	81 3f 00 08 	lwz     r9,8(r31)
10012a54:	81 29 00 18 	lwz     r9,24(r9)
10012a58:	2f 89 00 00 	cmpwi   cr7,r9,0
10012a5c:	41 9d 00 1c 	bgt     cr7,10012a78 <mmc_unmap+0x12c>
	syslog( LOG_ERR, "mmc_unmap found zero or negative refcount!" );
10012a60:	38 60 00 03 	li      r3,3
10012a64:	3d 20 10 02 	lis     r9,4098
10012a68:	38 89 b2 9c 	addi    r4,r9,-19812
10012a6c:	4c c6 31 82 	crclr   4*cr1+eq
10012a70:	48 01 ad 15 	bl      1002d784 <syslog@plt>
10012a74:	48 00 00 4c 	b       10012ac0 <mmc_unmap+0x174>
    else
	{
	--m->refcount;
10012a78:	81 3f 00 08 	lwz     r9,8(r31)
10012a7c:	81 29 00 18 	lwz     r9,24(r9)
10012a80:	39 49 ff ff 	addi    r10,r9,-1
10012a84:	81 3f 00 08 	lwz     r9,8(r31)
10012a88:	91 49 00 18 	stw     r10,24(r9)
	if ( nowP != (struct timeval*) 0 )
10012a8c:	81 3f 00 20 	lwz     r9,32(r31)
10012a90:	2f 89 00 00 	cmpwi   cr7,r9,0
10012a94:	41 9e 00 18 	beq     cr7,10012aac <mmc_unmap+0x160>
	    m->reftime = nowP->tv_sec;
10012a98:	81 3f 00 20 	lwz     r9,32(r31)
10012a9c:	81 49 00 00 	lwz     r10,0(r9)
10012aa0:	81 3f 00 08 	lwz     r9,8(r31)
10012aa4:	91 49 00 1c 	stw     r10,28(r9)
10012aa8:	48 00 00 18 	b       10012ac0 <mmc_unmap+0x174>
	else
	    m->reftime = time( (time_t*) 0 );
10012aac:	38 60 00 00 	li      r3,0
10012ab0:	48 01 a9 c5 	bl      1002d474 <time@plt>
10012ab4:	7c 6a 1b 78 	mr      r10,r3
10012ab8:	81 3f 00 08 	lwz     r9,8(r31)
10012abc:	91 49 00 1c 	stw     r10,28(r9)
	}
    }
10012ac0:	39 7f 00 30 	addi    r11,r31,48
10012ac4:	80 0b 00 04 	lwz     r0,4(r11)
10012ac8:	7c 08 03 a6 	mtlr    r0
10012acc:	83 eb ff fc 	lwz     r31,-4(r11)
10012ad0:	7d 61 5b 78 	mr      r1,r11
10012ad4:	4e 80 00 20 	blr

10012ad8 <mmc_cleanup>:


void
mmc_cleanup( struct timeval* nowP )
    {
10012ad8:	94 21 ff d0 	stwu    r1,-48(r1)
10012adc:	7c 08 02 a6 	mflr    r0
10012ae0:	90 01 00 34 	stw     r0,52(r1)
10012ae4:	93 e1 00 2c 	stw     r31,44(r1)
10012ae8:	7c 3f 0b 78 	mr      r31,r1
10012aec:	90 7f 00 18 	stw     r3,24(r31)
    time_t now;
    Map** mm;
    Map* m;

    /* Get the current time, if necessary. */
    if ( nowP != (struct timeval*) 0 )
10012af0:	81 3f 00 18 	lwz     r9,24(r31)
10012af4:	2f 89 00 00 	cmpwi   cr7,r9,0
10012af8:	41 9e 00 14 	beq     cr7,10012b0c <mmc_cleanup+0x34>
	now = nowP->tv_sec;
10012afc:	81 3f 00 18 	lwz     r9,24(r31)
10012b00:	81 29 00 00 	lwz     r9,0(r9)
10012b04:	91 3f 00 08 	stw     r9,8(r31)
10012b08:	48 00 00 10 	b       10012b18 <mmc_cleanup+0x40>
    else
	now = time( (time_t*) 0 );
10012b0c:	38 60 00 00 	li      r3,0
10012b10:	48 01 a9 65 	bl      1002d474 <time@plt>
10012b14:	90 7f 00 08 	stw     r3,8(r31)

    /* Really unmap any unreferenced entries older than the age limit. */
    for ( mm = &maps; *mm != (Map*) 0; )
10012b18:	3d 20 10 03 	lis     r9,4099
10012b1c:	39 29 de 84 	addi    r9,r9,-8572
10012b20:	91 3f 00 0c 	stw     r9,12(r31)
10012b24:	48 00 00 5c 	b       10012b80 <mmc_cleanup+0xa8>
	{
	m = *mm;
10012b28:	81 3f 00 0c 	lwz     r9,12(r31)
10012b2c:	81 29 00 00 	lwz     r9,0(r9)
10012b30:	91 3f 00 10 	stw     r9,16(r31)
	if ( m->refcount == 0 && now - m->reftime >= expire_age )
10012b34:	81 3f 00 10 	lwz     r9,16(r31)
10012b38:	81 29 00 18 	lwz     r9,24(r9)
10012b3c:	2f 89 00 00 	cmpwi   cr7,r9,0
10012b40:	40 9e 00 30 	bne     cr7,10012b70 <mmc_cleanup+0x98>
10012b44:	81 3f 00 10 	lwz     r9,16(r31)
10012b48:	81 29 00 1c 	lwz     r9,28(r9)
10012b4c:	81 5f 00 08 	lwz     r10,8(r31)
10012b50:	7d 49 50 50 	subf    r10,r9,r10
10012b54:	3d 20 10 03 	lis     r9,4099
10012b58:	81 29 d1 c8 	lwz     r9,-11832(r9)
10012b5c:	7f 8a 48 00 	cmpw    cr7,r10,r9
10012b60:	41 9c 00 10 	blt     cr7,10012b70 <mmc_cleanup+0x98>
	    really_unmap( mm );
10012b64:	80 7f 00 0c 	lwz     r3,12(r31)
10012b68:	48 00 02 3d 	bl      10012da4 <really_unmap>
10012b6c:	48 00 00 14 	b       10012b80 <mmc_cleanup+0xa8>
	else
	    mm = &(*mm)->next;
10012b70:	81 3f 00 0c 	lwz     r9,12(r31)
10012b74:	81 29 00 00 	lwz     r9,0(r9)
10012b78:	39 29 00 2c 	addi    r9,r9,44
10012b7c:	91 3f 00 0c 	stw     r9,12(r31)
	now = nowP->tv_sec;
    else
	now = time( (time_t*) 0 );

    /* Really unmap any unreferenced entries older than the age limit. */
    for ( mm = &maps; *mm != (Map*) 0; )
10012b80:	81 3f 00 0c 	lwz     r9,12(r31)
10012b84:	81 29 00 00 	lwz     r9,0(r9)
10012b88:	2f 89 00 00 	cmpwi   cr7,r9,0
10012b8c:	40 9e ff 9c 	bne     cr7,10012b28 <mmc_cleanup+0x50>
	}

    /* Adjust the age limit if there are too many bytes mapped, or
    ** too many or too few files mapped.
    */
    if ( mapped_bytes > DESIRED_MAX_MAPPED_BYTES )
10012b90:	3d 20 10 03 	lis     r9,4099
10012b94:	81 49 de a4 	lwz     r10,-8540(r9)
10012b98:	3d 20 3b 9a 	lis     r9,15258
10012b9c:	61 29 ca 00 	ori     r9,r9,51712
10012ba0:	7f 8a 48 00 	cmpw    cr7,r10,r9
10012ba4:	40 9d 00 4c 	ble     cr7,10012bf0 <mmc_cleanup+0x118>
	expire_age = MAX( ( expire_age * 2 ) / 3, DEFAULT_EXPIRE_AGE / 10 );
10012ba8:	3d 20 10 03 	lis     r9,4099
10012bac:	81 29 d1 c8 	lwz     r9,-11832(r9)
10012bb0:	55 29 08 3c 	rlwinm  r9,r9,1,0,30
10012bb4:	2f 89 00 b6 	cmpwi   cr7,r9,182
10012bb8:	40 9d 00 28 	ble     cr7,10012be0 <mmc_cleanup+0x108>
10012bbc:	3d 20 10 03 	lis     r9,4099
10012bc0:	81 29 d1 c8 	lwz     r9,-11832(r9)
10012bc4:	55 29 08 3c 	rlwinm  r9,r9,1,0,30
10012bc8:	3d 40 55 55 	lis     r10,21845
10012bcc:	61 4a 55 56 	ori     r10,r10,21846
10012bd0:	7d 49 50 96 	mulhw   r10,r9,r10
10012bd4:	7d 29 fe 70 	srawi   r9,r9,31
10012bd8:	7d 29 50 50 	subf    r9,r9,r10
10012bdc:	48 00 00 08 	b       10012be4 <mmc_cleanup+0x10c>
10012be0:	39 20 00 3c 	li      r9,60
10012be4:	3d 40 10 03 	lis     r10,4099
10012be8:	91 2a d1 c8 	stw     r9,-11832(r10)
10012bec:	48 00 00 a8 	b       10012c94 <mmc_cleanup+0x1bc>
    else if ( map_count > DESIRED_MAX_MAPPED_FILES )
10012bf0:	3d 20 10 03 	lis     r9,4099
10012bf4:	81 29 de 90 	lwz     r9,-8560(r9)
10012bf8:	2f 89 03 e8 	cmpwi   cr7,r9,1000
10012bfc:	40 9d 00 4c 	ble     cr7,10012c48 <mmc_cleanup+0x170>
	expire_age = MAX( ( expire_age * 2 ) / 3, DEFAULT_EXPIRE_AGE / 10 );
10012c00:	3d 20 10 03 	lis     r9,4099
10012c04:	81 29 d1 c8 	lwz     r9,-11832(r9)
10012c08:	55 29 08 3c 	rlwinm  r9,r9,1,0,30
10012c0c:	2f 89 00 b6 	cmpwi   cr7,r9,182
10012c10:	40 9d 00 28 	ble     cr7,10012c38 <mmc_cleanup+0x160>
10012c14:	3d 20 10 03 	lis     r9,4099
10012c18:	81 29 d1 c8 	lwz     r9,-11832(r9)
10012c1c:	55 29 08 3c 	rlwinm  r9,r9,1,0,30
10012c20:	3d 40 55 55 	lis     r10,21845
10012c24:	61 4a 55 56 	ori     r10,r10,21846
10012c28:	7d 49 50 96 	mulhw   r10,r9,r10
10012c2c:	7d 29 fe 70 	srawi   r9,r9,31
10012c30:	7d 29 50 50 	subf    r9,r9,r10
10012c34:	48 00 00 08 	b       10012c3c <mmc_cleanup+0x164>
10012c38:	39 20 00 3c 	li      r9,60
10012c3c:	3d 40 10 03 	lis     r10,4099
10012c40:	91 2a d1 c8 	stw     r9,-11832(r10)
10012c44:	48 00 00 50 	b       10012c94 <mmc_cleanup+0x1bc>
    else if ( map_count < DESIRED_MAX_MAPPED_FILES / 2 )
10012c48:	3d 20 10 03 	lis     r9,4099
10012c4c:	81 29 de 90 	lwz     r9,-8560(r9)
10012c50:	2f 89 01 f3 	cmpwi   cr7,r9,499
10012c54:	41 9d 00 40 	bgt     cr7,10012c94 <mmc_cleanup+0x1bc>
	expire_age = MIN( ( expire_age * 5 ) / 4, DEFAULT_EXPIRE_AGE * 3 );
10012c58:	3d 20 10 03 	lis     r9,4099
10012c5c:	81 29 d1 c8 	lwz     r9,-11832(r9)
10012c60:	1d 29 00 05 	mulli   r9,r9,5
10012c64:	2f 89 1c 1f 	cmpwi   cr7,r9,7199
10012c68:	41 9d 00 1c 	bgt     cr7,10012c84 <mmc_cleanup+0x1ac>
10012c6c:	3d 20 10 03 	lis     r9,4099
10012c70:	81 29 d1 c8 	lwz     r9,-11832(r9)
10012c74:	1d 29 00 05 	mulli   r9,r9,5
10012c78:	7d 29 16 70 	srawi   r9,r9,2
10012c7c:	7d 29 01 94 	addze   r9,r9
10012c80:	48 00 00 08 	b       10012c88 <mmc_cleanup+0x1b0>
10012c84:	39 20 07 08 	li      r9,1800
10012c88:	3d 40 10 03 	lis     r10,4099
10012c8c:	91 2a d1 c8 	stw     r9,-11832(r10)

    /* Really free excess blocks on the free list. */
    while ( free_count > DESIRED_FREE_COUNT )
10012c90:	48 00 00 54 	b       10012ce4 <mmc_cleanup+0x20c>
10012c94:	48 00 00 50 	b       10012ce4 <mmc_cleanup+0x20c>
	{
	m = free_maps;
10012c98:	3d 20 10 03 	lis     r9,4099
10012c9c:	81 29 de 88 	lwz     r9,-8568(r9)
10012ca0:	91 3f 00 10 	stw     r9,16(r31)
	free_maps = m->next;
10012ca4:	81 3f 00 10 	lwz     r9,16(r31)
10012ca8:	81 49 00 2c 	lwz     r10,44(r9)
10012cac:	3d 20 10 03 	lis     r9,4099
10012cb0:	91 49 de 88 	stw     r10,-8568(r9)
	--free_count;
10012cb4:	3d 20 10 03 	lis     r9,4099
10012cb8:	81 29 de 94 	lwz     r9,-8556(r9)
10012cbc:	39 49 ff ff 	addi    r10,r9,-1
10012cc0:	3d 20 10 03 	lis     r9,4099
10012cc4:	91 49 de 94 	stw     r10,-8556(r9)
	free( (void*) m );
10012cc8:	80 7f 00 10 	lwz     r3,16(r31)
10012ccc:	48 01 a7 69 	bl      1002d434 <free@plt>
	--alloc_count;
10012cd0:	3d 20 10 03 	lis     r9,4099
10012cd4:	81 29 de 8c 	lwz     r9,-8564(r9)
10012cd8:	39 49 ff ff 	addi    r10,r9,-1
10012cdc:	3d 20 10 03 	lis     r9,4099
10012ce0:	91 49 de 8c 	stw     r10,-8564(r9)
	expire_age = MAX( ( expire_age * 2 ) / 3, DEFAULT_EXPIRE_AGE / 10 );
    else if ( map_count < DESIRED_MAX_MAPPED_FILES / 2 )
	expire_age = MIN( ( expire_age * 5 ) / 4, DEFAULT_EXPIRE_AGE * 3 );

    /* Really free excess blocks on the free list. */
    while ( free_count > DESIRED_FREE_COUNT )
10012ce4:	3d 20 10 03 	lis     r9,4099
10012ce8:	81 29 de 94 	lwz     r9,-8556(r9)
10012cec:	2f 89 00 64 	cmpwi   cr7,r9,100
10012cf0:	41 9d ff a8 	bgt     cr7,10012c98 <mmc_cleanup+0x1c0>
	free_maps = m->next;
	--free_count;
	free( (void*) m );
	--alloc_count;
	}
    }
10012cf4:	39 7f 00 30 	addi    r11,r31,48
10012cf8:	80 0b 00 04 	lwz     r0,4(r11)
10012cfc:	7c 08 03 a6 	mtlr    r0
10012d00:	83 eb ff fc 	lwz     r31,-4(r11)
10012d04:	7d 61 5b 78 	mr      r1,r11
10012d08:	4e 80 00 20 	blr

10012d0c <panic>:


static void
panic( void )
    {
10012d0c:	94 21 ff e0 	stwu    r1,-32(r1)
10012d10:	7c 08 02 a6 	mflr    r0
10012d14:	90 01 00 24 	stw     r0,36(r1)
10012d18:	93 e1 00 1c 	stw     r31,28(r1)
10012d1c:	7c 3f 0b 78 	mr      r31,r1
    Map** mm;
    Map* m;

    syslog( LOG_ERR, "mmc panic - freeing all unreferenced maps" );
10012d20:	38 60 00 03 	li      r3,3
10012d24:	3d 20 10 02 	lis     r9,4098
10012d28:	38 89 b2 c8 	addi    r4,r9,-19768
10012d2c:	4c c6 31 82 	crclr   4*cr1+eq
10012d30:	48 01 aa 55 	bl      1002d784 <syslog@plt>

    /* Really unmap all unreferenced entries. */
    for ( mm = &maps; *mm != (Map*) 0; )
10012d34:	3d 20 10 03 	lis     r9,4099
10012d38:	39 29 de 84 	addi    r9,r9,-8572
10012d3c:	91 3f 00 08 	stw     r9,8(r31)
10012d40:	48 00 00 3c 	b       10012d7c <panic+0x70>
	{
	m = *mm;
10012d44:	81 3f 00 08 	lwz     r9,8(r31)
10012d48:	81 29 00 00 	lwz     r9,0(r9)
10012d4c:	91 3f 00 0c 	stw     r9,12(r31)
	if ( m->refcount == 0 )
10012d50:	81 3f 00 0c 	lwz     r9,12(r31)
10012d54:	81 29 00 18 	lwz     r9,24(r9)
10012d58:	2f 89 00 00 	cmpwi   cr7,r9,0
10012d5c:	40 9e 00 10 	bne     cr7,10012d6c <panic+0x60>
	    really_unmap( mm );
10012d60:	80 7f 00 08 	lwz     r3,8(r31)
10012d64:	48 00 00 41 	bl      10012da4 <really_unmap>
10012d68:	48 00 00 14 	b       10012d7c <panic+0x70>
	else
	    mm = &(*mm)->next;
10012d6c:	81 3f 00 08 	lwz     r9,8(r31)
10012d70:	81 29 00 00 	lwz     r9,0(r9)
10012d74:	39 29 00 2c 	addi    r9,r9,44
10012d78:	91 3f 00 08 	stw     r9,8(r31)
    Map* m;

    syslog( LOG_ERR, "mmc panic - freeing all unreferenced maps" );

    /* Really unmap all unreferenced entries. */
    for ( mm = &maps; *mm != (Map*) 0; )
10012d7c:	81 3f 00 08 	lwz     r9,8(r31)
10012d80:	81 29 00 00 	lwz     r9,0(r9)
10012d84:	2f 89 00 00 	cmpwi   cr7,r9,0
10012d88:	40 9e ff bc 	bne     cr7,10012d44 <panic+0x38>
	if ( m->refcount == 0 )
	    really_unmap( mm );
	else
	    mm = &(*mm)->next;
	}
    }
10012d8c:	39 7f 00 20 	addi    r11,r31,32
10012d90:	80 0b 00 04 	lwz     r0,4(r11)
10012d94:	7c 08 03 a6 	mtlr    r0
10012d98:	83 eb ff fc 	lwz     r31,-4(r11)
10012d9c:	7d 61 5b 78 	mr      r1,r11
10012da0:	4e 80 00 20 	blr

10012da4 <really_unmap>:


static void
really_unmap( Map** mm )
    {
10012da4:	94 21 ff d0 	stwu    r1,-48(r1)
10012da8:	7c 08 02 a6 	mflr    r0
10012dac:	90 01 00 34 	stw     r0,52(r1)
10012db0:	93 e1 00 2c 	stw     r31,44(r1)
10012db4:	7c 3f 0b 78 	mr      r31,r1
10012db8:	90 7f 00 18 	stw     r3,24(r31)
    Map* m;

    m = *mm;
10012dbc:	81 3f 00 18 	lwz     r9,24(r31)
10012dc0:	81 29 00 00 	lwz     r9,0(r9)
10012dc4:	91 3f 00 08 	stw     r9,8(r31)
    if ( m->size != 0 )
10012dc8:	81 3f 00 08 	lwz     r9,8(r31)
10012dcc:	81 29 00 10 	lwz     r9,16(r9)
10012dd0:	2f 89 00 00 	cmpwi   cr7,r9,0
10012dd4:	41 9e 00 40 	beq     cr7,10012e14 <really_unmap+0x70>
	{
#ifdef HAVE_MMAP
	if ( munmap( m->addr, m->size ) < 0 )
10012dd8:	81 3f 00 08 	lwz     r9,8(r31)
10012ddc:	81 49 00 20 	lwz     r10,32(r9)
10012de0:	81 3f 00 08 	lwz     r9,8(r31)
10012de4:	81 29 00 10 	lwz     r9,16(r9)
10012de8:	7d 43 53 78 	mr      r3,r10
10012dec:	7d 24 4b 78 	mr      r4,r9
10012df0:	48 01 a9 4d 	bl      1002d73c <munmap@plt>
10012df4:	7c 69 1b 78 	mr      r9,r3
10012df8:	2f 89 00 00 	cmpwi   cr7,r9,0
10012dfc:	40 9c 00 18 	bge     cr7,10012e14 <really_unmap+0x70>
	    syslog( LOG_ERR, "munmap - %m" );
10012e00:	38 60 00 03 	li      r3,3
10012e04:	3d 20 10 02 	lis     r9,4098
10012e08:	38 89 b2 f4 	addi    r4,r9,-19724
10012e0c:	4c c6 31 82 	crclr   4*cr1+eq
10012e10:	48 01 a9 75 	bl      1002d784 <syslog@plt>
#else /* HAVE_MMAP */
	free( (void*) m->addr );
#endif /* HAVE_MMAP */
	}
    /* Update the total byte count. */
    mapped_bytes -= m->size;
10012e14:	3d 20 10 03 	lis     r9,4099
10012e18:	81 49 de a4 	lwz     r10,-8540(r9)
10012e1c:	81 3f 00 08 	lwz     r9,8(r31)
10012e20:	81 29 00 10 	lwz     r9,16(r9)
10012e24:	7d 49 50 50 	subf    r10,r9,r10
10012e28:	3d 20 10 03 	lis     r9,4099
10012e2c:	91 49 de a4 	stw     r10,-8540(r9)
    /* And move the Map to the free list. */
    *mm = m->next;
10012e30:	81 3f 00 08 	lwz     r9,8(r31)
10012e34:	81 49 00 2c 	lwz     r10,44(r9)
10012e38:	81 3f 00 18 	lwz     r9,24(r31)
10012e3c:	91 49 00 00 	stw     r10,0(r9)
    --map_count;
10012e40:	3d 20 10 03 	lis     r9,4099
10012e44:	81 29 de 90 	lwz     r9,-8560(r9)
10012e48:	39 49 ff ff 	addi    r10,r9,-1
10012e4c:	3d 20 10 03 	lis     r9,4099
10012e50:	91 49 de 90 	stw     r10,-8560(r9)
    m->next = free_maps;
10012e54:	3d 20 10 03 	lis     r9,4099
10012e58:	81 49 de 88 	lwz     r10,-8568(r9)
10012e5c:	81 3f 00 08 	lwz     r9,8(r31)
10012e60:	91 49 00 2c 	stw     r10,44(r9)
    free_maps = m;
10012e64:	3d 20 10 03 	lis     r9,4099
10012e68:	81 5f 00 08 	lwz     r10,8(r31)
10012e6c:	91 49 de 88 	stw     r10,-8568(r9)
    ++free_count;
10012e70:	3d 20 10 03 	lis     r9,4099
10012e74:	81 29 de 94 	lwz     r9,-8556(r9)
10012e78:	39 49 00 01 	addi    r10,r9,1
10012e7c:	3d 20 10 03 	lis     r9,4099
10012e80:	91 49 de 94 	stw     r10,-8556(r9)
    /* This will sometimes break hash chains, but that's harmless; the
    ** unmapping code that searches the hash table knows to keep searching.
    */
    hash_table[m->hash_idx] = (Map*) 0;
10012e84:	3d 20 10 03 	lis     r9,4099
10012e88:	81 49 de 98 	lwz     r10,-8552(r9)
10012e8c:	81 3f 00 08 	lwz     r9,8(r31)
10012e90:	81 29 00 28 	lwz     r9,40(r9)
10012e94:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10012e98:	7d 2a 4a 14 	add     r9,r10,r9
10012e9c:	39 40 00 00 	li      r10,0
10012ea0:	91 49 00 00 	stw     r10,0(r9)
    }
10012ea4:	39 7f 00 30 	addi    r11,r31,48
10012ea8:	80 0b 00 04 	lwz     r0,4(r11)
10012eac:	7c 08 03 a6 	mtlr    r0
10012eb0:	83 eb ff fc 	lwz     r31,-4(r11)
10012eb4:	7d 61 5b 78 	mr      r1,r11
10012eb8:	4e 80 00 20 	blr

10012ebc <mmc_term>:


void
mmc_term( void )
    {
10012ebc:	94 21 ff e0 	stwu    r1,-32(r1)
10012ec0:	7c 08 02 a6 	mflr    r0
10012ec4:	90 01 00 24 	stw     r0,36(r1)
10012ec8:	93 e1 00 1c 	stw     r31,28(r1)
10012ecc:	7c 3f 0b 78 	mr      r31,r1
    Map* m;

    while ( maps != (Map*) 0 )
10012ed0:	48 00 00 10 	b       10012ee0 <mmc_term+0x24>
	really_unmap( &maps );
10012ed4:	3d 20 10 03 	lis     r9,4099
10012ed8:	38 69 de 84 	addi    r3,r9,-8572
10012edc:	4b ff fe c9 	bl      10012da4 <really_unmap>
void
mmc_term( void )
    {
    Map* m;

    while ( maps != (Map*) 0 )
10012ee0:	3d 20 10 03 	lis     r9,4099
10012ee4:	81 29 de 84 	lwz     r9,-8572(r9)
10012ee8:	2f 89 00 00 	cmpwi   cr7,r9,0
10012eec:	40 9e ff e8 	bne     cr7,10012ed4 <mmc_term+0x18>
	really_unmap( &maps );
    while ( free_maps != (Map*) 0 )
10012ef0:	48 00 00 50 	b       10012f40 <mmc_term+0x84>
	{
	m = free_maps;
10012ef4:	3d 20 10 03 	lis     r9,4099
10012ef8:	81 29 de 88 	lwz     r9,-8568(r9)
10012efc:	91 3f 00 08 	stw     r9,8(r31)
	free_maps = m->next;
10012f00:	81 3f 00 08 	lwz     r9,8(r31)
10012f04:	81 49 00 2c 	lwz     r10,44(r9)
10012f08:	3d 20 10 03 	lis     r9,4099
10012f0c:	91 49 de 88 	stw     r10,-8568(r9)
	--free_count;
10012f10:	3d 20 10 03 	lis     r9,4099
10012f14:	81 29 de 94 	lwz     r9,-8556(r9)
10012f18:	39 49 ff ff 	addi    r10,r9,-1
10012f1c:	3d 20 10 03 	lis     r9,4099
10012f20:	91 49 de 94 	stw     r10,-8556(r9)
	free( (void*) m );
10012f24:	80 7f 00 08 	lwz     r3,8(r31)
10012f28:	48 01 a5 0d 	bl      1002d434 <free@plt>
	--alloc_count;
10012f2c:	3d 20 10 03 	lis     r9,4099
10012f30:	81 29 de 8c 	lwz     r9,-8564(r9)
10012f34:	39 49 ff ff 	addi    r10,r9,-1
10012f38:	3d 20 10 03 	lis     r9,4099
10012f3c:	91 49 de 8c 	stw     r10,-8564(r9)
    {
    Map* m;

    while ( maps != (Map*) 0 )
	really_unmap( &maps );
    while ( free_maps != (Map*) 0 )
10012f40:	3d 20 10 03 	lis     r9,4099
10012f44:	81 29 de 88 	lwz     r9,-8568(r9)
10012f48:	2f 89 00 00 	cmpwi   cr7,r9,0
10012f4c:	40 9e ff a8 	bne     cr7,10012ef4 <mmc_term+0x38>
	free_maps = m->next;
	--free_count;
	free( (void*) m );
	--alloc_count;
	}
    }
10012f50:	39 7f 00 20 	addi    r11,r31,32
10012f54:	80 0b 00 04 	lwz     r0,4(r11)
10012f58:	7c 08 03 a6 	mtlr    r0
10012f5c:	83 eb ff fc 	lwz     r31,-4(r11)
10012f60:	7d 61 5b 78 	mr      r1,r11
10012f64:	4e 80 00 20 	blr

10012f68 <check_hash_size>:


/* Make sure the hash table is big enough. */
static int
check_hash_size( void )
    {
10012f68:	94 21 ff e0 	stwu    r1,-32(r1)
10012f6c:	7c 08 02 a6 	mflr    r0
10012f70:	90 01 00 24 	stw     r0,36(r1)
10012f74:	93 e1 00 1c 	stw     r31,28(r1)
10012f78:	7c 3f 0b 78 	mr      r31,r1
    int i;
    Map* m;

    /* Are we just starting out? */
    if ( hash_table == (Map**) 0 )
10012f7c:	3d 20 10 03 	lis     r9,4099
10012f80:	81 29 de 98 	lwz     r9,-8552(r9)
10012f84:	2f 89 00 00 	cmpwi   cr7,r9,0
10012f88:	40 9e 00 2c 	bne     cr7,10012fb4 <check_hash_size+0x4c>
	{
	hash_size = INITIAL_HASH_SIZE;
10012f8c:	3d 20 10 03 	lis     r9,4099
10012f90:	39 40 04 00 	li      r10,1024
10012f94:	91 49 de 9c 	stw     r10,-8548(r9)
	hash_mask = hash_size - 1;
10012f98:	3d 20 10 03 	lis     r9,4099
10012f9c:	81 29 de 9c 	lwz     r9,-8548(r9)
10012fa0:	39 29 ff ff 	addi    r9,r9,-1
10012fa4:	7d 2a 4b 78 	mr      r10,r9
10012fa8:	3d 20 10 03 	lis     r9,4099
10012fac:	91 49 de a0 	stw     r10,-8544(r9)
10012fb0:	48 00 00 80 	b       10013030 <check_hash_size+0xc8>
	}
    /* Is it at least three times bigger than the number of entries? */
    else if ( hash_size >= map_count * 3 )
10012fb4:	3d 20 10 03 	lis     r9,4099
10012fb8:	81 29 de 90 	lwz     r9,-8560(r9)
10012fbc:	1d 49 00 03 	mulli   r10,r9,3
10012fc0:	3d 20 10 03 	lis     r9,4099
10012fc4:	81 29 de 9c 	lwz     r9,-8548(r9)
10012fc8:	7f 8a 48 00 	cmpw    cr7,r10,r9
10012fcc:	41 9d 00 0c 	bgt     cr7,10012fd8 <check_hash_size+0x70>
	return 0;
10012fd0:	39 20 00 00 	li      r9,0
10012fd4:	48 00 01 28 	b       100130fc <check_hash_size+0x194>
    else
	{
	/* No, got to expand. */
	free( (void*) hash_table );
10012fd8:	3d 20 10 03 	lis     r9,4099
10012fdc:	81 29 de 98 	lwz     r9,-8552(r9)
10012fe0:	7d 23 4b 78 	mr      r3,r9
10012fe4:	48 01 a4 51 	bl      1002d434 <free@plt>
	/* Double the hash size until it's big enough. */
	do
	    {
	    hash_size = hash_size << 1;
10012fe8:	3d 20 10 03 	lis     r9,4099
10012fec:	81 29 de 9c 	lwz     r9,-8548(r9)
10012ff0:	55 2a 08 3c 	rlwinm  r10,r9,1,0,30
10012ff4:	3d 20 10 03 	lis     r9,4099
10012ff8:	91 49 de 9c 	stw     r10,-8548(r9)
	    }
	while ( hash_size < map_count * 6 );
10012ffc:	3d 20 10 03 	lis     r9,4099
10013000:	81 29 de 90 	lwz     r9,-8560(r9)
10013004:	1d 49 00 06 	mulli   r10,r9,6
10013008:	3d 20 10 03 	lis     r9,4099
1001300c:	81 29 de 9c 	lwz     r9,-8548(r9)
10013010:	7f 8a 48 00 	cmpw    cr7,r10,r9
10013014:	41 9d ff d4 	bgt     cr7,10012fe8 <check_hash_size+0x80>
	hash_mask = hash_size - 1;
10013018:	3d 20 10 03 	lis     r9,4099
1001301c:	81 29 de 9c 	lwz     r9,-8548(r9)
10013020:	39 29 ff ff 	addi    r9,r9,-1
10013024:	7d 2a 4b 78 	mr      r10,r9
10013028:	3d 20 10 03 	lis     r9,4099
1001302c:	91 49 de a0 	stw     r10,-8544(r9)
	}
    /* Make the new table. */
    hash_table = (Map**) malloc( hash_size * sizeof(Map*) );
10013030:	3d 20 10 03 	lis     r9,4099
10013034:	81 29 de 9c 	lwz     r9,-8548(r9)
10013038:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1001303c:	7d 23 4b 78 	mr      r3,r9
10013040:	48 01 a5 65 	bl      1002d5a4 <malloc@plt>
10013044:	7c 69 1b 78 	mr      r9,r3
10013048:	7d 2a 4b 78 	mr      r10,r9
1001304c:	3d 20 10 03 	lis     r9,4099
10013050:	91 49 de 98 	stw     r10,-8552(r9)
    if ( hash_table == (Map**) 0 )
10013054:	3d 20 10 03 	lis     r9,4099
10013058:	81 29 de 98 	lwz     r9,-8552(r9)
1001305c:	2f 89 00 00 	cmpwi   cr7,r9,0
10013060:	40 9e 00 0c 	bne     cr7,1001306c <check_hash_size+0x104>
	return -1;
10013064:	39 20 ff ff 	li      r9,-1
10013068:	48 00 00 94 	b       100130fc <check_hash_size+0x194>
    /* Clear it. */
    for ( i = 0; i < hash_size; ++i )
1001306c:	39 20 00 00 	li      r9,0
10013070:	91 3f 00 08 	stw     r9,8(r31)
10013074:	48 00 00 2c 	b       100130a0 <check_hash_size+0x138>
	hash_table[i] = (Map*) 0;
10013078:	3d 20 10 03 	lis     r9,4099
1001307c:	81 49 de 98 	lwz     r10,-8552(r9)
10013080:	81 3f 00 08 	lwz     r9,8(r31)
10013084:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10013088:	7d 2a 4a 14 	add     r9,r10,r9
1001308c:	39 40 00 00 	li      r10,0
10013090:	91 49 00 00 	stw     r10,0(r9)
    /* Make the new table. */
    hash_table = (Map**) malloc( hash_size * sizeof(Map*) );
    if ( hash_table == (Map**) 0 )
	return -1;
    /* Clear it. */
    for ( i = 0; i < hash_size; ++i )
10013094:	81 3f 00 08 	lwz     r9,8(r31)
10013098:	39 29 00 01 	addi    r9,r9,1
1001309c:	91 3f 00 08 	stw     r9,8(r31)
100130a0:	3d 20 10 03 	lis     r9,4099
100130a4:	81 29 de 9c 	lwz     r9,-8548(r9)
100130a8:	81 5f 00 08 	lwz     r10,8(r31)
100130ac:	7f 8a 48 00 	cmpw    cr7,r10,r9
100130b0:	41 9c ff c8 	blt     cr7,10013078 <check_hash_size+0x110>
	hash_table[i] = (Map*) 0;
    /* And rehash all entries. */
    for ( m = maps; m != (Map*) 0; m = m->next )
100130b4:	3d 20 10 03 	lis     r9,4099
100130b8:	81 29 de 84 	lwz     r9,-8572(r9)
100130bc:	91 3f 00 0c 	stw     r9,12(r31)
100130c0:	48 00 00 2c 	b       100130ec <check_hash_size+0x184>
	if ( add_hash( m ) < 0 )
100130c4:	80 7f 00 0c 	lwz     r3,12(r31)
100130c8:	48 00 00 51 	bl      10013118 <add_hash>
100130cc:	7c 69 1b 78 	mr      r9,r3
100130d0:	2f 89 00 00 	cmpwi   cr7,r9,0
100130d4:	40 9c 00 0c 	bge     cr7,100130e0 <check_hash_size+0x178>
	    return -1;
100130d8:	39 20 ff ff 	li      r9,-1
100130dc:	48 00 00 20 	b       100130fc <check_hash_size+0x194>
	return -1;
    /* Clear it. */
    for ( i = 0; i < hash_size; ++i )
	hash_table[i] = (Map*) 0;
    /* And rehash all entries. */
    for ( m = maps; m != (Map*) 0; m = m->next )
100130e0:	81 3f 00 0c 	lwz     r9,12(r31)
100130e4:	81 29 00 2c 	lwz     r9,44(r9)
100130e8:	91 3f 00 0c 	stw     r9,12(r31)
100130ec:	81 3f 00 0c 	lwz     r9,12(r31)
100130f0:	2f 89 00 00 	cmpwi   cr7,r9,0
100130f4:	40 9e ff d0 	bne     cr7,100130c4 <check_hash_size+0x15c>
	if ( add_hash( m ) < 0 )
	    return -1;
    return 0;
100130f8:	39 20 00 00 	li      r9,0
    }
100130fc:	7d 23 4b 78 	mr      r3,r9
10013100:	39 7f 00 20 	addi    r11,r31,32
10013104:	80 0b 00 04 	lwz     r0,4(r11)
10013108:	7c 08 03 a6 	mtlr    r0
1001310c:	83 eb ff fc 	lwz     r31,-4(r11)
10013110:	7d 61 5b 78 	mr      r1,r11
10013114:	4e 80 00 20 	blr

10013118 <add_hash>:


static int
add_hash( Map* m )
    {
10013118:	94 21 ff d0 	stwu    r1,-48(r1)
1001311c:	7c 08 02 a6 	mflr    r0
10013120:	90 01 00 34 	stw     r0,52(r1)
10013124:	93 e1 00 2c 	stw     r31,44(r1)
10013128:	7c 3f 0b 78 	mr      r31,r1
1001312c:	90 7f 00 18 	stw     r3,24(r31)
    unsigned int h, he, i;

    h = hash( m->ino, m->dev, m->size, m->ct );
10013130:	81 3f 00 18 	lwz     r9,24(r31)
10013134:	80 c9 00 00 	lwz     r6,0(r9)
10013138:	81 3f 00 18 	lwz     r9,24(r31)
1001313c:	81 49 00 0c 	lwz     r10,12(r9)
10013140:	81 29 00 08 	lwz     r9,8(r9)
10013144:	81 1f 00 18 	lwz     r8,24(r31)
10013148:	80 e8 00 10 	lwz     r7,16(r8)
1001314c:	81 1f 00 18 	lwz     r8,24(r31)
10013150:	81 08 00 14 	lwz     r8,20(r8)
10013154:	7c c3 33 78 	mr      r3,r6
10013158:	7d 25 4b 78 	mr      r5,r9
1001315c:	7d 46 53 78 	mr      r6,r10
10013160:	48 00 02 55 	bl      100133b4 <hash>
10013164:	90 7f 00 0c 	stw     r3,12(r31)
    he = ( h + hash_size - 1 ) & hash_mask;
10013168:	3d 20 10 03 	lis     r9,4099
1001316c:	81 29 de 9c 	lwz     r9,-8548(r9)
10013170:	7d 2a 4b 78 	mr      r10,r9
10013174:	81 3f 00 0c 	lwz     r9,12(r31)
10013178:	7d 2a 4a 14 	add     r9,r10,r9
1001317c:	39 49 ff ff 	addi    r10,r9,-1
10013180:	3d 20 10 03 	lis     r9,4099
10013184:	81 29 de a0 	lwz     r9,-8544(r9)
10013188:	7d 49 48 38 	and     r9,r10,r9
1001318c:	91 3f 00 10 	stw     r9,16(r31)
    for ( i = h; ; i = ( i + 1 ) & hash_mask )
10013190:	81 3f 00 0c 	lwz     r9,12(r31)
10013194:	91 3f 00 08 	stw     r9,8(r31)
	{
	if ( hash_table[i] == (Map*) 0 )
10013198:	3d 20 10 03 	lis     r9,4099
1001319c:	81 49 de 98 	lwz     r10,-8552(r9)
100131a0:	81 3f 00 08 	lwz     r9,8(r31)
100131a4:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
100131a8:	7d 2a 4a 14 	add     r9,r10,r9
100131ac:	81 29 00 00 	lwz     r9,0(r9)
100131b0:	2f 89 00 00 	cmpwi   cr7,r9,0
100131b4:	40 9e 00 40 	bne     cr7,100131f4 <add_hash+0xdc>
	    {
	    hash_table[i] = m;
100131b8:	3d 20 10 03 	lis     r9,4099
100131bc:	81 49 de 98 	lwz     r10,-8552(r9)
100131c0:	81 3f 00 08 	lwz     r9,8(r31)
100131c4:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
100131c8:	7d 2a 4a 14 	add     r9,r10,r9
100131cc:	81 5f 00 18 	lwz     r10,24(r31)
100131d0:	91 49 00 00 	stw     r10,0(r9)
	    m->hash = h;
100131d4:	81 3f 00 18 	lwz     r9,24(r31)
100131d8:	81 5f 00 0c 	lwz     r10,12(r31)
100131dc:	91 49 00 24 	stw     r10,36(r9)
	    m->hash_idx = i;
100131e0:	81 5f 00 08 	lwz     r10,8(r31)
100131e4:	81 3f 00 18 	lwz     r9,24(r31)
100131e8:	91 49 00 28 	stw     r10,40(r9)
	    return 0;
100131ec:	39 20 00 00 	li      r9,0
100131f0:	48 00 00 3c 	b       1001322c <add_hash+0x114>
	    }
	if ( i == he )
100131f4:	81 5f 00 08 	lwz     r10,8(r31)
100131f8:	81 3f 00 10 	lwz     r9,16(r31)
100131fc:	7f 8a 48 00 	cmpw    cr7,r10,r9
10013200:	40 9e 00 10 	bne     cr7,10013210 <add_hash+0xf8>
	    break;
10013204:	60 00 00 00 	nop
	}
    return -1;
10013208:	39 20 ff ff 	li      r9,-1
1001320c:	48 00 00 20 	b       1001322c <add_hash+0x114>
    {
    unsigned int h, he, i;

    h = hash( m->ino, m->dev, m->size, m->ct );
    he = ( h + hash_size - 1 ) & hash_mask;
    for ( i = h; ; i = ( i + 1 ) & hash_mask )
10013210:	81 3f 00 08 	lwz     r9,8(r31)
10013214:	39 49 00 01 	addi    r10,r9,1
10013218:	3d 20 10 03 	lis     r9,4099
1001321c:	81 29 de a0 	lwz     r9,-8544(r9)
10013220:	7d 49 48 38 	and     r9,r10,r9
10013224:	91 3f 00 08 	stw     r9,8(r31)
	    m->hash_idx = i;
	    return 0;
	    }
	if ( i == he )
	    break;
	}
10013228:	4b ff ff 70 	b       10013198 <add_hash+0x80>
    return -1;
    }
1001322c:	7d 23 4b 78 	mr      r3,r9
10013230:	39 7f 00 30 	addi    r11,r31,48
10013234:	80 0b 00 04 	lwz     r0,4(r11)
10013238:	7c 08 03 a6 	mtlr    r0
1001323c:	83 eb ff fc 	lwz     r31,-4(r11)
10013240:	7d 61 5b 78 	mr      r1,r11
10013244:	4e 80 00 20 	blr

10013248 <find_hash>:


static Map*
find_hash( ino_t ino, dev_t dev, off_t size, time_t ct )
    {
10013248:	94 21 ff c0 	stwu    r1,-64(r1)
1001324c:	7c 08 02 a6 	mflr    r0
10013250:	90 01 00 44 	stw     r0,68(r1)
10013254:	93 e1 00 3c 	stw     r31,60(r1)
10013258:	7c 3f 0b 78 	mr      r31,r1
1001325c:	90 7f 00 18 	stw     r3,24(r31)
10013260:	90 bf 00 20 	stw     r5,32(r31)
10013264:	90 df 00 24 	stw     r6,36(r31)
10013268:	90 ff 00 1c 	stw     r7,28(r31)
1001326c:	91 1f 00 28 	stw     r8,40(r31)
    unsigned int h, he, i;
    Map* m;

    h = hash( ino, dev, size, ct );
10013270:	80 7f 00 18 	lwz     r3,24(r31)
10013274:	80 bf 00 20 	lwz     r5,32(r31)
10013278:	80 df 00 24 	lwz     r6,36(r31)
1001327c:	80 ff 00 1c 	lwz     r7,28(r31)
10013280:	81 1f 00 28 	lwz     r8,40(r31)
10013284:	48 00 01 31 	bl      100133b4 <hash>
10013288:	90 7f 00 0c 	stw     r3,12(r31)
    he = ( h + hash_size - 1 ) & hash_mask;
1001328c:	3d 20 10 03 	lis     r9,4099
10013290:	81 29 de 9c 	lwz     r9,-8548(r9)
10013294:	7d 2a 4b 78 	mr      r10,r9
10013298:	81 3f 00 0c 	lwz     r9,12(r31)
1001329c:	7d 2a 4a 14 	add     r9,r10,r9
100132a0:	39 49 ff ff 	addi    r10,r9,-1
100132a4:	3d 20 10 03 	lis     r9,4099
100132a8:	81 29 de a0 	lwz     r9,-8544(r9)
100132ac:	7d 49 48 38 	and     r9,r10,r9
100132b0:	91 3f 00 10 	stw     r9,16(r31)
    for ( i = h; ; i = ( i + 1 ) & hash_mask )
100132b4:	81 3f 00 0c 	lwz     r9,12(r31)
100132b8:	91 3f 00 08 	stw     r9,8(r31)
	{
	m = hash_table[i];
100132bc:	3d 20 10 03 	lis     r9,4099
100132c0:	81 49 de 98 	lwz     r10,-8552(r9)
100132c4:	81 3f 00 08 	lwz     r9,8(r31)
100132c8:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
100132cc:	7d 2a 4a 14 	add     r9,r10,r9
100132d0:	81 29 00 00 	lwz     r9,0(r9)
100132d4:	91 3f 00 14 	stw     r9,20(r31)
	if ( m == (Map*) 0 )
100132d8:	81 3f 00 14 	lwz     r9,20(r31)
100132dc:	2f 89 00 00 	cmpwi   cr7,r9,0
100132e0:	40 9e 00 08 	bne     cr7,100132e8 <find_hash+0xa0>
	    break;
100132e4:	48 00 00 b0 	b       10013394 <find_hash+0x14c>
	if ( m->hash == h && m->ino == ino && m->dev == dev &&
100132e8:	81 3f 00 14 	lwz     r9,20(r31)
100132ec:	81 49 00 24 	lwz     r10,36(r9)
100132f0:	81 3f 00 0c 	lwz     r9,12(r31)
100132f4:	7f 8a 48 00 	cmpw    cr7,r10,r9
100132f8:	40 9e 00 6c 	bne     cr7,10013364 <find_hash+0x11c>
100132fc:	81 3f 00 14 	lwz     r9,20(r31)
10013300:	81 49 00 00 	lwz     r10,0(r9)
10013304:	81 3f 00 18 	lwz     r9,24(r31)
10013308:	7f 8a 48 00 	cmpw    cr7,r10,r9
1001330c:	40 9e 00 58 	bne     cr7,10013364 <find_hash+0x11c>
10013310:	81 3f 00 14 	lwz     r9,20(r31)
10013314:	81 49 00 0c 	lwz     r10,12(r9)
10013318:	81 29 00 08 	lwz     r9,8(r9)
1001331c:	81 1f 00 20 	lwz     r8,32(r31)
10013320:	7f 88 48 00 	cmpw    cr7,r8,r9
10013324:	40 9e 00 40 	bne     cr7,10013364 <find_hash+0x11c>
10013328:	81 1f 00 24 	lwz     r8,36(r31)
1001332c:	7f 88 50 00 	cmpw    cr7,r8,r10
10013330:	40 9e 00 34 	bne     cr7,10013364 <find_hash+0x11c>
	     m->size == size && m->ct == ct )
10013334:	81 3f 00 14 	lwz     r9,20(r31)
10013338:	81 49 00 10 	lwz     r10,16(r9)
    for ( i = h; ; i = ( i + 1 ) & hash_mask )
	{
	m = hash_table[i];
	if ( m == (Map*) 0 )
	    break;
	if ( m->hash == h && m->ino == ino && m->dev == dev &&
1001333c:	81 3f 00 1c 	lwz     r9,28(r31)
10013340:	7f 8a 48 00 	cmpw    cr7,r10,r9
10013344:	40 9e 00 20 	bne     cr7,10013364 <find_hash+0x11c>
	     m->size == size && m->ct == ct )
10013348:	81 3f 00 14 	lwz     r9,20(r31)
1001334c:	81 49 00 14 	lwz     r10,20(r9)
10013350:	81 3f 00 28 	lwz     r9,40(r31)
10013354:	7f 8a 48 00 	cmpw    cr7,r10,r9
10013358:	40 9e 00 0c 	bne     cr7,10013364 <find_hash+0x11c>
	    return m;
1001335c:	81 3f 00 14 	lwz     r9,20(r31)
10013360:	48 00 00 38 	b       10013398 <find_hash+0x150>
	if ( i == he )
10013364:	81 5f 00 08 	lwz     r10,8(r31)
10013368:	81 3f 00 10 	lwz     r9,16(r31)
1001336c:	7f 8a 48 00 	cmpw    cr7,r10,r9
10013370:	40 9e 00 08 	bne     cr7,10013378 <find_hash+0x130>
	    break;
10013374:	48 00 00 20 	b       10013394 <find_hash+0x14c>
    unsigned int h, he, i;
    Map* m;

    h = hash( ino, dev, size, ct );
    he = ( h + hash_size - 1 ) & hash_mask;
    for ( i = h; ; i = ( i + 1 ) & hash_mask )
10013378:	81 3f 00 08 	lwz     r9,8(r31)
1001337c:	39 49 00 01 	addi    r10,r9,1
10013380:	3d 20 10 03 	lis     r9,4099
10013384:	81 29 de a0 	lwz     r9,-8544(r9)
10013388:	7d 49 48 38 	and     r9,r10,r9
1001338c:	91 3f 00 08 	stw     r9,8(r31)
	if ( m->hash == h && m->ino == ino && m->dev == dev &&
	     m->size == size && m->ct == ct )
	    return m;
	if ( i == he )
	    break;
	}
10013390:	4b ff ff 2c 	b       100132bc <find_hash+0x74>
    return (Map*) 0;
10013394:	39 20 00 00 	li      r9,0
    }
10013398:	7d 23 4b 78 	mr      r3,r9
1001339c:	39 7f 00 40 	addi    r11,r31,64
100133a0:	80 0b 00 04 	lwz     r0,4(r11)
100133a4:	7c 08 03 a6 	mtlr    r0
100133a8:	83 eb ff fc 	lwz     r31,-4(r11)
100133ac:	7d 61 5b 78 	mr      r1,r11
100133b0:	4e 80 00 20 	blr

100133b4 <hash>:


static unsigned int
hash( ino_t ino, dev_t dev, off_t size, time_t ct )
    {
100133b4:	94 21 ff c0 	stwu    r1,-64(r1)
100133b8:	93 e1 00 3c 	stw     r31,60(r1)
100133bc:	7c 3f 0b 78 	mr      r31,r1
100133c0:	90 7f 00 18 	stw     r3,24(r31)
100133c4:	90 bf 00 20 	stw     r5,32(r31)
100133c8:	90 df 00 24 	stw     r6,36(r31)
100133cc:	90 ff 00 1c 	stw     r7,28(r31)
100133d0:	91 1f 00 28 	stw     r8,40(r31)
    unsigned int h = 177573;
100133d4:	3d 20 00 02 	lis     r9,2
100133d8:	61 29 b5 a5 	ori     r9,r9,46501
100133dc:	91 3f 00 08 	stw     r9,8(r31)

    h ^= ino;
100133e0:	81 5f 00 08 	lwz     r10,8(r31)
100133e4:	81 3f 00 18 	lwz     r9,24(r31)
100133e8:	7d 49 4a 78 	xor     r9,r10,r9
100133ec:	91 3f 00 08 	stw     r9,8(r31)
    h += h << 5;
100133f0:	81 3f 00 08 	lwz     r9,8(r31)
100133f4:	55 29 28 34 	rlwinm  r9,r9,5,0,26
100133f8:	81 5f 00 08 	lwz     r10,8(r31)
100133fc:	7d 2a 4a 14 	add     r9,r10,r9
10013400:	91 3f 00 08 	stw     r9,8(r31)
    h ^= dev;
10013404:	81 3f 00 24 	lwz     r9,36(r31)
10013408:	81 5f 00 08 	lwz     r10,8(r31)
1001340c:	7d 49 4a 78 	xor     r9,r10,r9
10013410:	91 3f 00 08 	stw     r9,8(r31)
    h += h << 5;
10013414:	81 3f 00 08 	lwz     r9,8(r31)
10013418:	55 29 28 34 	rlwinm  r9,r9,5,0,26
1001341c:	81 5f 00 08 	lwz     r10,8(r31)
10013420:	7d 2a 4a 14 	add     r9,r10,r9
10013424:	91 3f 00 08 	stw     r9,8(r31)
    h ^= size;
10013428:	81 3f 00 1c 	lwz     r9,28(r31)
1001342c:	81 5f 00 08 	lwz     r10,8(r31)
10013430:	7d 49 4a 78 	xor     r9,r10,r9
10013434:	91 3f 00 08 	stw     r9,8(r31)
    h += h << 5;
10013438:	81 3f 00 08 	lwz     r9,8(r31)
1001343c:	55 29 28 34 	rlwinm  r9,r9,5,0,26
10013440:	81 5f 00 08 	lwz     r10,8(r31)
10013444:	7d 2a 4a 14 	add     r9,r10,r9
10013448:	91 3f 00 08 	stw     r9,8(r31)
    h ^= ct;
1001344c:	81 3f 00 28 	lwz     r9,40(r31)
10013450:	81 5f 00 08 	lwz     r10,8(r31)
10013454:	7d 49 4a 78 	xor     r9,r10,r9
10013458:	91 3f 00 08 	stw     r9,8(r31)

    return h & hash_mask;
1001345c:	3d 20 10 03 	lis     r9,4099
10013460:	81 49 de a0 	lwz     r10,-8544(r9)
10013464:	81 3f 00 08 	lwz     r9,8(r31)
10013468:	7d 49 48 38 	and     r9,r10,r9
    }
1001346c:	7d 23 4b 78 	mr      r3,r9
10013470:	39 7f 00 40 	addi    r11,r31,64
10013474:	83 eb ff fc 	lwz     r31,-4(r11)
10013478:	7d 61 5b 78 	mr      r1,r11
1001347c:	4e 80 00 20 	blr

10013480 <mmc_logstats>:


/* Generate debugging statistics syslog message. */
void
mmc_logstats( long secs )
    {
10013480:	94 21 ff e0 	stwu    r1,-32(r1)
10013484:	7c 08 02 a6 	mflr    r0
10013488:	90 01 00 24 	stw     r0,36(r1)
1001348c:	93 c1 00 18 	stw     r30,24(r1)
10013490:	93 e1 00 1c 	stw     r31,28(r1)
10013494:	7c 3f 0b 78 	mr      r31,r1
10013498:	90 7f 00 10 	stw     r3,16(r31)
    syslog(
1001349c:	3c c0 10 03 	lis     r6,4099
100134a0:	80 a6 de 8c 	lwz     r5,-8564(r6)
100134a4:	3c c0 10 03 	lis     r6,4099
100134a8:	83 c6 de 90 	lwz     r30,-8560(r6)
100134ac:	3c c0 10 03 	lis     r6,4099
100134b0:	80 c6 de a4 	lwz     r6,-8540(r6)
100134b4:	7c ca 33 78 	mr      r10,r6
100134b8:	7c c6 fe 70 	srawi   r6,r6,31
100134bc:	7c c9 33 78 	mr      r9,r6
100134c0:	3c c0 10 03 	lis     r6,4099
100134c4:	80 06 de 94 	lwz     r0,-8556(r6)
100134c8:	3c c0 10 03 	lis     r6,4099
100134cc:	81 66 de 9c 	lwz     r11,-8548(r6)
100134d0:	3c c0 10 03 	lis     r6,4099
100134d4:	80 c6 d1 c8 	lwz     r6,-11832(r6)
100134d8:	7c c8 33 78 	mr      r8,r6
100134dc:	7c c6 fe 70 	srawi   r6,r6,31
100134e0:	7c c7 33 78 	mr      r7,r6
100134e4:	90 e1 00 08 	stw     r7,8(r1)
100134e8:	91 01 00 0c 	stw     r8,12(r1)
100134ec:	38 60 00 05 	li      r3,5
100134f0:	3d 00 10 02 	lis     r8,4098
100134f4:	38 88 b3 00 	addi    r4,r8,-19712
100134f8:	7f c6 f3 78 	mr      r6,r30
100134fc:	7d 27 4b 78 	mr      r7,r9
10013500:	7d 48 53 78 	mr      r8,r10
10013504:	7c 09 03 78 	mr      r9,r0
10013508:	7d 6a 5b 78 	mr      r10,r11
1001350c:	4c c6 31 82 	crclr   4*cr1+eq
10013510:	48 01 a2 75 	bl      1002d784 <syslog@plt>
	LOG_NOTICE, "  map cache - %d allocated, %d active (%lld bytes), %d free; hash size: %d; expire age: %lld",
	alloc_count, map_count, (long long) mapped_bytes, free_count, hash_size,
	(long long) expire_age );
    if ( map_count + free_count != alloc_count )
10013514:	3d 20 10 03 	lis     r9,4099
10013518:	81 49 de 90 	lwz     r10,-8560(r9)
1001351c:	3d 20 10 03 	lis     r9,4099
10013520:	81 29 de 94 	lwz     r9,-8556(r9)
10013524:	7d 4a 4a 14 	add     r10,r10,r9
10013528:	3d 20 10 03 	lis     r9,4099
1001352c:	81 29 de 8c 	lwz     r9,-8564(r9)
10013530:	7f 8a 48 00 	cmpw    cr7,r10,r9
10013534:	41 9e 00 18 	beq     cr7,1001354c <mmc_logstats+0xcc>
	syslog( LOG_ERR, "map counts don't add up!" );
10013538:	38 60 00 03 	li      r3,3
1001353c:	3d 20 10 02 	lis     r9,4098
10013540:	38 89 b3 60 	addi    r4,r9,-19616
10013544:	4c c6 31 82 	crclr   4*cr1+eq
10013548:	48 01 a2 3d 	bl      1002d784 <syslog@plt>
    }
1001354c:	39 7f 00 20 	addi    r11,r31,32
10013550:	80 0b 00 04 	lwz     r0,4(r11)
10013554:	7c 08 03 a6 	mtlr    r0
10013558:	83 cb ff f8 	lwz     r30,-8(r11)
1001355c:	83 eb ff fc 	lwz     r31,-4(r11)
10013560:	7d 61 5b 78 	mr      r1,r11
10013564:	4e 80 00 20 	blr

10013568 <hash>:



static unsigned int
hash( Timer* t )
    {
10013568:	94 21 ff e0 	stwu    r1,-32(r1)
1001356c:	93 e1 00 1c 	stw     r31,28(r1)
10013570:	7c 3f 0b 78 	mr      r31,r1
10013574:	90 7f 00 08 	stw     r3,8(r31)
    ** the life of a timer via either the periodic bit or the tmr_reset()
    ** call.  This is because both of those guys call l_resort(), which
    ** recomputes the hash and moves the timer to the appropriate list.
    */
    return (
	(unsigned int) t->time.tv_sec ^
10013578:	81 3f 00 08 	lwz     r9,8(r31)
1001357c:	81 29 00 10 	lwz     r9,16(r9)
10013580:	7d 2a 4b 78 	mr      r10,r9
	(unsigned int) t->time.tv_usec ) % HASH_SIZE;
10013584:	81 3f 00 08 	lwz     r9,8(r31)
10013588:	81 29 00 14 	lwz     r9,20(r9)
    ** the life of a timer via either the periodic bit or the tmr_reset()
    ** call.  This is because both of those guys call l_resort(), which
    ** recomputes the hash and moves the timer to the appropriate list.
    */
    return (
	(unsigned int) t->time.tv_sec ^
1001358c:	7d 4a 4a 78 	xor     r10,r10,r9
    /* We can hash on the trigger time, even though it can change over
    ** the life of a timer via either the periodic bit or the tmr_reset()
    ** call.  This is because both of those guys call l_resort(), which
    ** recomputes the hash and moves the timer to the appropriate list.
    */
    return (
10013590:	3d 20 07 a4 	lis     r9,1956
10013594:	61 29 4c 6b 	ori     r9,r9,19563
10013598:	7d 2a 48 16 	mulhwu  r9,r10,r9
1001359c:	55 29 f8 7e 	rlwinm  r9,r9,31,1,31
100135a0:	1d 29 00 43 	mulli   r9,r9,67
100135a4:	7d 29 50 50 	subf    r9,r9,r10
	(unsigned int) t->time.tv_sec ^
	(unsigned int) t->time.tv_usec ) % HASH_SIZE;
    }
100135a8:	7d 23 4b 78 	mr      r3,r9
100135ac:	39 7f 00 20 	addi    r11,r31,32
100135b0:	83 eb ff fc 	lwz     r31,-4(r11)
100135b4:	7d 61 5b 78 	mr      r1,r11
100135b8:	4e 80 00 20 	blr

100135bc <l_add>:


static void
l_add( Timer* t )
    {
100135bc:	94 21 ff d0 	stwu    r1,-48(r1)
100135c0:	93 e1 00 2c 	stw     r31,44(r1)
100135c4:	7c 3f 0b 78 	mr      r31,r1
100135c8:	90 7f 00 18 	stw     r3,24(r31)
    int h = t->hash;
100135cc:	81 3f 00 18 	lwz     r9,24(r31)
100135d0:	81 29 00 20 	lwz     r9,32(r9)
100135d4:	91 3f 00 10 	stw     r9,16(r31)
    Timer* t2;
    Timer* t2prev;

    t2 = timers[h];
100135d8:	3d 20 10 03 	lis     r9,4099
100135dc:	39 49 de a8 	addi    r10,r9,-8536
100135e0:	81 3f 00 10 	lwz     r9,16(r31)
100135e4:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
100135e8:	7d 2a 4a 14 	add     r9,r10,r9
100135ec:	81 29 00 00 	lwz     r9,0(r9)
100135f0:	91 3f 00 08 	stw     r9,8(r31)
    if ( t2 == (Timer*) 0 )
100135f4:	81 3f 00 08 	lwz     r9,8(r31)
100135f8:	2f 89 00 00 	cmpwi   cr7,r9,0
100135fc:	40 9e 00 40 	bne     cr7,1001363c <l_add+0x80>
	{
	/* The list is empty. */
	timers[h] = t;
10013600:	3d 20 10 03 	lis     r9,4099
10013604:	39 49 de a8 	addi    r10,r9,-8536
10013608:	81 3f 00 10 	lwz     r9,16(r31)
1001360c:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10013610:	7d 2a 4a 14 	add     r9,r10,r9
10013614:	81 5f 00 18 	lwz     r10,24(r31)
10013618:	91 49 00 00 	stw     r10,0(r9)
	t->prev = t->next = (Timer*) 0;
1001361c:	81 3f 00 18 	lwz     r9,24(r31)
10013620:	39 40 00 00 	li      r10,0
10013624:	91 49 00 1c 	stw     r10,28(r9)
10013628:	81 3f 00 18 	lwz     r9,24(r31)
1001362c:	81 49 00 1c 	lwz     r10,28(r9)
10013630:	81 3f 00 18 	lwz     r9,24(r31)
10013634:	91 49 00 18 	stw     r10,24(r9)
10013638:	48 00 01 68 	b       100137a0 <l_add+0x1e4>
	}
    else
	{
	if ( t->time.tv_sec < t2->time.tv_sec ||
1001363c:	81 3f 00 18 	lwz     r9,24(r31)
10013640:	81 49 00 10 	lwz     r10,16(r9)
10013644:	81 3f 00 08 	lwz     r9,8(r31)
10013648:	81 29 00 10 	lwz     r9,16(r9)
1001364c:	7f 8a 48 00 	cmpw    cr7,r10,r9
10013650:	41 9c 00 34 	blt     cr7,10013684 <l_add+0xc8>
	     ( t->time.tv_sec == t2->time.tv_sec &&
10013654:	81 3f 00 18 	lwz     r9,24(r31)
10013658:	81 49 00 10 	lwz     r10,16(r9)
1001365c:	81 3f 00 08 	lwz     r9,8(r31)
10013660:	81 29 00 10 	lwz     r9,16(r9)
	timers[h] = t;
	t->prev = t->next = (Timer*) 0;
	}
    else
	{
	if ( t->time.tv_sec < t2->time.tv_sec ||
10013664:	7f 8a 48 00 	cmpw    cr7,r10,r9
10013668:	40 9e 00 60 	bne     cr7,100136c8 <l_add+0x10c>
	     ( t->time.tv_sec == t2->time.tv_sec &&
	       t->time.tv_usec <= t2->time.tv_usec ) )
1001366c:	81 3f 00 18 	lwz     r9,24(r31)
10013670:	81 49 00 14 	lwz     r10,20(r9)
10013674:	81 3f 00 08 	lwz     r9,8(r31)
10013678:	81 29 00 14 	lwz     r9,20(r9)
	t->prev = t->next = (Timer*) 0;
	}
    else
	{
	if ( t->time.tv_sec < t2->time.tv_sec ||
	     ( t->time.tv_sec == t2->time.tv_sec &&
1001367c:	7f 8a 48 00 	cmpw    cr7,r10,r9
10013680:	41 9d 00 48 	bgt     cr7,100136c8 <l_add+0x10c>
	       t->time.tv_usec <= t2->time.tv_usec ) )
	    {
	    /* The new timer goes at the head of the list. */
	    timers[h] = t;
10013684:	3d 20 10 03 	lis     r9,4099
10013688:	39 49 de a8 	addi    r10,r9,-8536
1001368c:	81 3f 00 10 	lwz     r9,16(r31)
10013690:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10013694:	7d 2a 4a 14 	add     r9,r10,r9
10013698:	81 5f 00 18 	lwz     r10,24(r31)
1001369c:	91 49 00 00 	stw     r10,0(r9)
	    t->prev = (Timer*) 0;
100136a0:	81 3f 00 18 	lwz     r9,24(r31)
100136a4:	39 40 00 00 	li      r10,0
100136a8:	91 49 00 18 	stw     r10,24(r9)
	    t->next = t2;
100136ac:	81 3f 00 18 	lwz     r9,24(r31)
100136b0:	81 5f 00 08 	lwz     r10,8(r31)
100136b4:	91 49 00 1c 	stw     r10,28(r9)
	    t2->prev = t;
100136b8:	81 3f 00 08 	lwz     r9,8(r31)
100136bc:	81 5f 00 18 	lwz     r10,24(r31)
100136c0:	91 49 00 18 	stw     r10,24(r9)
100136c4:	48 00 00 dc 	b       100137a0 <l_add+0x1e4>
	    }
	else
	    {
	    /* Walk the list to find the insertion point. */
	    for ( t2prev = t2, t2 = t2->next; t2 != (Timer*) 0;
100136c8:	81 3f 00 08 	lwz     r9,8(r31)
100136cc:	91 3f 00 0c 	stw     r9,12(r31)
100136d0:	81 3f 00 08 	lwz     r9,8(r31)
100136d4:	81 29 00 1c 	lwz     r9,28(r9)
100136d8:	91 3f 00 08 	stw     r9,8(r31)
100136dc:	48 00 00 94 	b       10013770 <l_add+0x1b4>
		  t2prev = t2, t2 = t2->next )
		{
		if ( t->time.tv_sec < t2->time.tv_sec ||
100136e0:	81 3f 00 18 	lwz     r9,24(r31)
100136e4:	81 49 00 10 	lwz     r10,16(r9)
100136e8:	81 3f 00 08 	lwz     r9,8(r31)
100136ec:	81 29 00 10 	lwz     r9,16(r9)
100136f0:	7f 8a 48 00 	cmpw    cr7,r10,r9
100136f4:	41 9c 00 34 	blt     cr7,10013728 <l_add+0x16c>
		     ( t->time.tv_sec == t2->time.tv_sec &&
100136f8:	81 3f 00 18 	lwz     r9,24(r31)
100136fc:	81 49 00 10 	lwz     r10,16(r9)
10013700:	81 3f 00 08 	lwz     r9,8(r31)
10013704:	81 29 00 10 	lwz     r9,16(r9)
	    {
	    /* Walk the list to find the insertion point. */
	    for ( t2prev = t2, t2 = t2->next; t2 != (Timer*) 0;
		  t2prev = t2, t2 = t2->next )
		{
		if ( t->time.tv_sec < t2->time.tv_sec ||
10013708:	7f 8a 48 00 	cmpw    cr7,r10,r9
1001370c:	40 9e 00 50 	bne     cr7,1001375c <l_add+0x1a0>
		     ( t->time.tv_sec == t2->time.tv_sec &&
		       t->time.tv_usec <= t2->time.tv_usec ) )
10013710:	81 3f 00 18 	lwz     r9,24(r31)
10013714:	81 49 00 14 	lwz     r10,20(r9)
10013718:	81 3f 00 08 	lwz     r9,8(r31)
1001371c:	81 29 00 14 	lwz     r9,20(r9)
	    /* Walk the list to find the insertion point. */
	    for ( t2prev = t2, t2 = t2->next; t2 != (Timer*) 0;
		  t2prev = t2, t2 = t2->next )
		{
		if ( t->time.tv_sec < t2->time.tv_sec ||
		     ( t->time.tv_sec == t2->time.tv_sec &&
10013720:	7f 8a 48 00 	cmpw    cr7,r10,r9
10013724:	41 9d 00 38 	bgt     cr7,1001375c <l_add+0x1a0>
		       t->time.tv_usec <= t2->time.tv_usec ) )
		    {
		    /* Found it. */
		    t2prev->next = t;
10013728:	81 3f 00 0c 	lwz     r9,12(r31)
1001372c:	81 5f 00 18 	lwz     r10,24(r31)
10013730:	91 49 00 1c 	stw     r10,28(r9)
		    t->prev = t2prev;
10013734:	81 3f 00 18 	lwz     r9,24(r31)
10013738:	81 5f 00 0c 	lwz     r10,12(r31)
1001373c:	91 49 00 18 	stw     r10,24(r9)
		    t->next = t2;
10013740:	81 3f 00 18 	lwz     r9,24(r31)
10013744:	81 5f 00 08 	lwz     r10,8(r31)
10013748:	91 49 00 1c 	stw     r10,28(r9)
		    t2->prev = t;
1001374c:	81 3f 00 08 	lwz     r9,8(r31)
10013750:	81 5f 00 18 	lwz     r10,24(r31)
10013754:	91 49 00 18 	stw     r10,24(r9)
		    return;
10013758:	48 00 00 48 	b       100137a0 <l_add+0x1e4>
	    }
	else
	    {
	    /* Walk the list to find the insertion point. */
	    for ( t2prev = t2, t2 = t2->next; t2 != (Timer*) 0;
		  t2prev = t2, t2 = t2->next )
1001375c:	81 3f 00 08 	lwz     r9,8(r31)
10013760:	91 3f 00 0c 	stw     r9,12(r31)
10013764:	81 3f 00 08 	lwz     r9,8(r31)
10013768:	81 29 00 1c 	lwz     r9,28(r9)
1001376c:	91 3f 00 08 	stw     r9,8(r31)
	    t2->prev = t;
	    }
	else
	    {
	    /* Walk the list to find the insertion point. */
	    for ( t2prev = t2, t2 = t2->next; t2 != (Timer*) 0;
10013770:	81 3f 00 08 	lwz     r9,8(r31)
10013774:	2f 89 00 00 	cmpwi   cr7,r9,0
10013778:	40 9e ff 68 	bne     cr7,100136e0 <l_add+0x124>
		    t2->prev = t;
		    return;
		    }
		}
	    /* Oops, got to the end of the list.  Add to tail. */
	    t2prev->next = t;
1001377c:	81 3f 00 0c 	lwz     r9,12(r31)
10013780:	81 5f 00 18 	lwz     r10,24(r31)
10013784:	91 49 00 1c 	stw     r10,28(r9)
	    t->prev = t2prev;
10013788:	81 3f 00 18 	lwz     r9,24(r31)
1001378c:	81 5f 00 0c 	lwz     r10,12(r31)
10013790:	91 49 00 18 	stw     r10,24(r9)
	    t->next = (Timer*) 0;
10013794:	81 3f 00 18 	lwz     r9,24(r31)
10013798:	39 40 00 00 	li      r10,0
1001379c:	91 49 00 1c 	stw     r10,28(r9)
	    }
	}
    }
100137a0:	39 7f 00 30 	addi    r11,r31,48
100137a4:	83 eb ff fc 	lwz     r31,-4(r11)
100137a8:	7d 61 5b 78 	mr      r1,r11
100137ac:	4e 80 00 20 	blr

100137b0 <l_remove>:


static void
l_remove( Timer* t )
    {
100137b0:	94 21 ff d0 	stwu    r1,-48(r1)
100137b4:	93 e1 00 2c 	stw     r31,44(r1)
100137b8:	7c 3f 0b 78 	mr      r31,r1
100137bc:	90 7f 00 18 	stw     r3,24(r31)
    int h = t->hash;
100137c0:	81 3f 00 18 	lwz     r9,24(r31)
100137c4:	81 29 00 20 	lwz     r9,32(r9)
100137c8:	91 3f 00 08 	stw     r9,8(r31)

    if ( t->prev == (Timer*) 0 )
100137cc:	81 3f 00 18 	lwz     r9,24(r31)
100137d0:	81 29 00 18 	lwz     r9,24(r9)
100137d4:	2f 89 00 00 	cmpwi   cr7,r9,0
100137d8:	40 9e 00 28 	bne     cr7,10013800 <l_remove+0x50>
	timers[h] = t->next;
100137dc:	81 3f 00 18 	lwz     r9,24(r31)
100137e0:	81 49 00 1c 	lwz     r10,28(r9)
100137e4:	3d 20 10 03 	lis     r9,4099
100137e8:	39 09 de a8 	addi    r8,r9,-8536
100137ec:	81 3f 00 08 	lwz     r9,8(r31)
100137f0:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
100137f4:	7d 28 4a 14 	add     r9,r8,r9
100137f8:	91 49 00 00 	stw     r10,0(r9)
100137fc:	48 00 00 18 	b       10013814 <l_remove+0x64>
    else
	t->prev->next = t->next;
10013800:	81 3f 00 18 	lwz     r9,24(r31)
10013804:	81 29 00 18 	lwz     r9,24(r9)
10013808:	81 5f 00 18 	lwz     r10,24(r31)
1001380c:	81 4a 00 1c 	lwz     r10,28(r10)
10013810:	91 49 00 1c 	stw     r10,28(r9)
    if ( t->next != (Timer*) 0 )
10013814:	81 3f 00 18 	lwz     r9,24(r31)
10013818:	81 29 00 1c 	lwz     r9,28(r9)
1001381c:	2f 89 00 00 	cmpwi   cr7,r9,0
10013820:	41 9e 00 18 	beq     cr7,10013838 <l_remove+0x88>
	t->next->prev = t->prev;
10013824:	81 3f 00 18 	lwz     r9,24(r31)
10013828:	81 29 00 1c 	lwz     r9,28(r9)
1001382c:	81 5f 00 18 	lwz     r10,24(r31)
10013830:	81 4a 00 18 	lwz     r10,24(r10)
10013834:	91 49 00 18 	stw     r10,24(r9)
    }
10013838:	39 7f 00 30 	addi    r11,r31,48
1001383c:	83 eb ff fc 	lwz     r31,-4(r11)
10013840:	7d 61 5b 78 	mr      r1,r11
10013844:	4e 80 00 20 	blr

10013848 <l_resort>:


static void
l_resort( Timer* t )
    {
10013848:	94 21 ff e0 	stwu    r1,-32(r1)
1001384c:	7c 08 02 a6 	mflr    r0
10013850:	90 01 00 24 	stw     r0,36(r1)
10013854:	93 e1 00 1c 	stw     r31,28(r1)
10013858:	7c 3f 0b 78 	mr      r31,r1
1001385c:	90 7f 00 08 	stw     r3,8(r31)
    /* Remove the timer from its old list. */
    l_remove( t );
10013860:	80 7f 00 08 	lwz     r3,8(r31)
10013864:	4b ff ff 4d 	bl      100137b0 <l_remove>
    /* Recompute the hash. */
    t->hash = hash( t );
10013868:	80 7f 00 08 	lwz     r3,8(r31)
1001386c:	4b ff fc fd 	bl      10013568 <hash>
10013870:	7c 69 1b 78 	mr      r9,r3
10013874:	7d 2a 4b 78 	mr      r10,r9
10013878:	81 3f 00 08 	lwz     r9,8(r31)
1001387c:	91 49 00 20 	stw     r10,32(r9)
    /* And add it back in to its new list, sorted correctly. */
    l_add( t );
10013880:	80 7f 00 08 	lwz     r3,8(r31)
10013884:	4b ff fd 39 	bl      100135bc <l_add>
    }
10013888:	39 7f 00 20 	addi    r11,r31,32
1001388c:	80 0b 00 04 	lwz     r0,4(r11)
10013890:	7c 08 03 a6 	mtlr    r0
10013894:	83 eb ff fc 	lwz     r31,-4(r11)
10013898:	7d 61 5b 78 	mr      r1,r11
1001389c:	4e 80 00 20 	blr

100138a0 <tmr_init>:


void
tmr_init( void )
    {
100138a0:	94 21 ff e0 	stwu    r1,-32(r1)
100138a4:	93 e1 00 1c 	stw     r31,28(r1)
100138a8:	7c 3f 0b 78 	mr      r31,r1
    int h;

    for ( h = 0; h < HASH_SIZE; ++h )
100138ac:	39 20 00 00 	li      r9,0
100138b0:	91 3f 00 08 	stw     r9,8(r31)
100138b4:	48 00 00 2c 	b       100138e0 <tmr_init+0x40>
	timers[h] = (Timer*) 0;
100138b8:	3d 20 10 03 	lis     r9,4099
100138bc:	39 49 de a8 	addi    r10,r9,-8536
100138c0:	81 3f 00 08 	lwz     r9,8(r31)
100138c4:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
100138c8:	7d 2a 4a 14 	add     r9,r10,r9
100138cc:	39 40 00 00 	li      r10,0
100138d0:	91 49 00 00 	stw     r10,0(r9)
void
tmr_init( void )
    {
    int h;

    for ( h = 0; h < HASH_SIZE; ++h )
100138d4:	81 3f 00 08 	lwz     r9,8(r31)
100138d8:	39 29 00 01 	addi    r9,r9,1
100138dc:	91 3f 00 08 	stw     r9,8(r31)
100138e0:	81 3f 00 08 	lwz     r9,8(r31)
100138e4:	2f 89 00 42 	cmpwi   cr7,r9,66
100138e8:	40 9d ff d0 	ble     cr7,100138b8 <tmr_init+0x18>
	timers[h] = (Timer*) 0;
    free_timers = (Timer*) 0;
100138ec:	3d 20 10 03 	lis     r9,4099
100138f0:	39 40 00 00 	li      r10,0
100138f4:	91 49 df b4 	stw     r10,-8268(r9)
    alloc_count = active_count = free_count = 0;
100138f8:	3d 20 10 03 	lis     r9,4099
100138fc:	39 40 00 00 	li      r10,0
10013900:	91 49 df c0 	stw     r10,-8256(r9)
10013904:	3d 20 10 03 	lis     r9,4099
10013908:	81 49 df c0 	lwz     r10,-8256(r9)
1001390c:	3d 20 10 03 	lis     r9,4099
10013910:	91 49 df bc 	stw     r10,-8260(r9)
10013914:	3d 20 10 03 	lis     r9,4099
10013918:	81 49 df bc 	lwz     r10,-8260(r9)
1001391c:	3d 20 10 03 	lis     r9,4099
10013920:	91 49 df b8 	stw     r10,-8264(r9)
    }
10013924:	39 7f 00 20 	addi    r11,r31,32
10013928:	83 eb ff fc 	lwz     r31,-4(r11)
1001392c:	7d 61 5b 78 	mr      r1,r11
10013930:	4e 80 00 20 	blr

10013934 <tmr_create>:

Timer*
tmr_create(
    struct timeval* nowP, TimerProc* timer_proc, ClientData client_data,
    long msecs, int periodic )
    {
10013934:	94 21 ff d0 	stwu    r1,-48(r1)
10013938:	7c 08 02 a6 	mflr    r0
1001393c:	90 01 00 34 	stw     r0,52(r1)
10013940:	93 c1 00 28 	stw     r30,40(r1)
10013944:	93 e1 00 2c 	stw     r31,44(r1)
10013948:	7c 3f 0b 78 	mr      r31,r1
1001394c:	90 7f 00 18 	stw     r3,24(r31)
10013950:	90 9f 00 1c 	stw     r4,28(r31)
10013954:	7c be 2b 78 	mr      r30,r5
10013958:	90 df 00 20 	stw     r6,32(r31)
1001395c:	90 ff 00 24 	stw     r7,36(r31)
    Timer* t;

    if ( free_timers != (Timer*) 0 )
10013960:	3d 20 10 03 	lis     r9,4099
10013964:	81 29 df b4 	lwz     r9,-8268(r9)
10013968:	2f 89 00 00 	cmpwi   cr7,r9,0
1001396c:	41 9e 00 38 	beq     cr7,100139a4 <tmr_create+0x70>
	{
	t = free_timers;
10013970:	3d 20 10 03 	lis     r9,4099
10013974:	81 29 df b4 	lwz     r9,-8268(r9)
10013978:	91 3f 00 08 	stw     r9,8(r31)
	free_timers = t->next;
1001397c:	81 3f 00 08 	lwz     r9,8(r31)
10013980:	81 49 00 1c 	lwz     r10,28(r9)
10013984:	3d 20 10 03 	lis     r9,4099
10013988:	91 49 df b4 	stw     r10,-8268(r9)
	--free_count;
1001398c:	3d 20 10 03 	lis     r9,4099
10013990:	81 29 df c0 	lwz     r9,-8256(r9)
10013994:	39 49 ff ff 	addi    r10,r9,-1
10013998:	3d 20 10 03 	lis     r9,4099
1001399c:	91 49 df c0 	stw     r10,-8256(r9)
100139a0:	48 00 00 3c 	b       100139dc <tmr_create+0xa8>
	}
    else
	{
	t = (Timer*) malloc( sizeof(Timer) );
100139a4:	38 60 00 24 	li      r3,36
100139a8:	48 01 9b fd 	bl      1002d5a4 <malloc@plt>
100139ac:	7c 69 1b 78 	mr      r9,r3
100139b0:	91 3f 00 08 	stw     r9,8(r31)
	if ( t == (Timer*) 0 )
100139b4:	81 3f 00 08 	lwz     r9,8(r31)
100139b8:	2f 89 00 00 	cmpwi   cr7,r9,0
100139bc:	40 9e 00 0c 	bne     cr7,100139c8 <tmr_create+0x94>
	    return (Timer*) 0;
100139c0:	39 20 00 00 	li      r9,0
100139c4:	48 00 01 a4 	b       10013b68 <tmr_create+0x234>
	++alloc_count;
100139c8:	3d 20 10 03 	lis     r9,4099
100139cc:	81 29 df b8 	lwz     r9,-8264(r9)
100139d0:	39 49 00 01 	addi    r10,r9,1
100139d4:	3d 20 10 03 	lis     r9,4099
100139d8:	91 49 df b8 	stw     r10,-8264(r9)
	}

    t->timer_proc = timer_proc;
100139dc:	81 3f 00 08 	lwz     r9,8(r31)
100139e0:	81 5f 00 1c 	lwz     r10,28(r31)
100139e4:	91 49 00 00 	stw     r10,0(r9)
    t->client_data = client_data;
100139e8:	81 3f 00 08 	lwz     r9,8(r31)
100139ec:	81 5e 00 00 	lwz     r10,0(r30)
100139f0:	91 49 00 04 	stw     r10,4(r9)
    t->msecs = msecs;
100139f4:	81 3f 00 08 	lwz     r9,8(r31)
100139f8:	81 5f 00 20 	lwz     r10,32(r31)
100139fc:	91 49 00 08 	stw     r10,8(r9)
    t->periodic = periodic;
10013a00:	81 3f 00 08 	lwz     r9,8(r31)
10013a04:	81 5f 00 24 	lwz     r10,36(r31)
10013a08:	91 49 00 0c 	stw     r10,12(r9)
    if ( nowP != (struct timeval*) 0 )
10013a0c:	81 3f 00 18 	lwz     r9,24(r31)
10013a10:	2f 89 00 00 	cmpwi   cr7,r9,0
10013a14:	41 9e 00 18 	beq     cr7,10013a2c <tmr_create+0xf8>
	t->time = *nowP;
10013a18:	81 3f 00 08 	lwz     r9,8(r31)
10013a1c:	81 5f 00 18 	lwz     r10,24(r31)
10013a20:	c8 0a 00 00 	lfd     f0,0(r10)
10013a24:	d8 09 00 10 	stfd    f0,16(r9)
10013a28:	48 00 00 18 	b       10013a40 <tmr_create+0x10c>
    else
	(void) gettimeofday( &t->time, (struct timezone*) 0 );
10013a2c:	81 3f 00 08 	lwz     r9,8(r31)
10013a30:	39 29 00 10 	addi    r9,r9,16
10013a34:	7d 23 4b 78 	mr      r3,r9
10013a38:	38 80 00 00 	li      r4,0
10013a3c:	48 01 9a 59 	bl      1002d494 <gettimeofday@plt>
    t->time.tv_sec += msecs / 1000L;
10013a40:	81 3f 00 08 	lwz     r9,8(r31)
10013a44:	81 49 00 10 	lwz     r10,16(r9)
10013a48:	81 3f 00 20 	lwz     r9,32(r31)
10013a4c:	3d 00 10 62 	lis     r8,4194
10013a50:	61 08 4d d3 	ori     r8,r8,19923
10013a54:	7d 09 40 96 	mulhw   r8,r9,r8
10013a58:	7d 08 36 70 	srawi   r8,r8,6
10013a5c:	7d 29 fe 70 	srawi   r9,r9,31
10013a60:	7d 29 40 50 	subf    r9,r9,r8
10013a64:	7d 4a 4a 14 	add     r10,r10,r9
10013a68:	81 3f 00 08 	lwz     r9,8(r31)
10013a6c:	91 49 00 10 	stw     r10,16(r9)
    t->time.tv_usec += ( msecs % 1000L ) * 1000L;
10013a70:	81 3f 00 08 	lwz     r9,8(r31)
10013a74:	81 09 00 14 	lwz     r8,20(r9)
10013a78:	81 5f 00 20 	lwz     r10,32(r31)
10013a7c:	3d 20 10 62 	lis     r9,4194
10013a80:	61 29 4d d3 	ori     r9,r9,19923
10013a84:	7d 2a 48 96 	mulhw   r9,r10,r9
10013a88:	7d 27 36 70 	srawi   r7,r9,6
10013a8c:	7d 49 fe 70 	srawi   r9,r10,31
10013a90:	7d 29 38 50 	subf    r9,r9,r7
10013a94:	1d 29 03 e8 	mulli   r9,r9,1000
10013a98:	7d 29 50 50 	subf    r9,r9,r10
10013a9c:	1d 29 03 e8 	mulli   r9,r9,1000
10013aa0:	7d 48 4a 14 	add     r10,r8,r9
10013aa4:	81 3f 00 08 	lwz     r9,8(r31)
10013aa8:	91 49 00 14 	stw     r10,20(r9)
    if ( t->time.tv_usec >= 1000000L )
10013aac:	81 3f 00 08 	lwz     r9,8(r31)
10013ab0:	81 49 00 14 	lwz     r10,20(r9)
10013ab4:	3d 20 00 0f 	lis     r9,15
10013ab8:	61 29 42 3f 	ori     r9,r9,16959
10013abc:	7f 8a 48 00 	cmpw    cr7,r10,r9
10013ac0:	40 9d 00 70 	ble     cr7,10013b30 <tmr_create+0x1fc>
	{
	t->time.tv_sec += t->time.tv_usec / 1000000L;
10013ac4:	81 3f 00 08 	lwz     r9,8(r31)
10013ac8:	81 49 00 10 	lwz     r10,16(r9)
10013acc:	81 3f 00 08 	lwz     r9,8(r31)
10013ad0:	81 29 00 14 	lwz     r9,20(r9)
10013ad4:	3d 00 43 1b 	lis     r8,17179
10013ad8:	61 08 de 83 	ori     r8,r8,56963
10013adc:	7d 09 40 96 	mulhw   r8,r9,r8
10013ae0:	7d 08 96 70 	srawi   r8,r8,18
10013ae4:	7d 29 fe 70 	srawi   r9,r9,31
10013ae8:	7d 29 40 50 	subf    r9,r9,r8
10013aec:	7d 4a 4a 14 	add     r10,r10,r9
10013af0:	81 3f 00 08 	lwz     r9,8(r31)
10013af4:	91 49 00 10 	stw     r10,16(r9)
	t->time.tv_usec %= 1000000L;
10013af8:	81 3f 00 08 	lwz     r9,8(r31)
10013afc:	81 49 00 14 	lwz     r10,20(r9)
10013b00:	3d 20 43 1b 	lis     r9,17179
10013b04:	61 29 de 83 	ori     r9,r9,56963
10013b08:	7d 2a 48 96 	mulhw   r9,r10,r9
10013b0c:	7d 28 96 70 	srawi   r8,r9,18
10013b10:	7d 49 fe 70 	srawi   r9,r10,31
10013b14:	7d 29 40 50 	subf    r9,r9,r8
10013b18:	3d 00 00 0f 	lis     r8,15
10013b1c:	61 08 42 40 	ori     r8,r8,16960
10013b20:	7d 29 41 d6 	mullw   r9,r9,r8
10013b24:	7d 29 50 50 	subf    r9,r9,r10
10013b28:	81 5f 00 08 	lwz     r10,8(r31)
10013b2c:	91 2a 00 14 	stw     r9,20(r10)
	}
    t->hash = hash( t );
10013b30:	80 7f 00 08 	lwz     r3,8(r31)
10013b34:	4b ff fa 35 	bl      10013568 <hash>
10013b38:	7c 69 1b 78 	mr      r9,r3
10013b3c:	7d 2a 4b 78 	mr      r10,r9
10013b40:	81 3f 00 08 	lwz     r9,8(r31)
10013b44:	91 49 00 20 	stw     r10,32(r9)
    /* Add the new timer to the proper active list. */
    l_add( t );
10013b48:	80 7f 00 08 	lwz     r3,8(r31)
10013b4c:	4b ff fa 71 	bl      100135bc <l_add>
    ++active_count;
10013b50:	3d 20 10 03 	lis     r9,4099
10013b54:	81 29 df bc 	lwz     r9,-8260(r9)
10013b58:	39 49 00 01 	addi    r10,r9,1
10013b5c:	3d 20 10 03 	lis     r9,4099
10013b60:	91 49 df bc 	stw     r10,-8260(r9)

    return t;
10013b64:	81 3f 00 08 	lwz     r9,8(r31)
    }
10013b68:	7d 23 4b 78 	mr      r3,r9
10013b6c:	39 7f 00 30 	addi    r11,r31,48
10013b70:	80 0b 00 04 	lwz     r0,4(r11)
10013b74:	7c 08 03 a6 	mtlr    r0
10013b78:	83 cb ff f8 	lwz     r30,-8(r11)
10013b7c:	83 eb ff fc 	lwz     r31,-4(r11)
10013b80:	7d 61 5b 78 	mr      r1,r11
10013b84:	4e 80 00 20 	blr

10013b88 <tmr_timeout>:


struct timeval*
tmr_timeout( struct timeval* nowP )
    {
10013b88:	94 21 ff d0 	stwu    r1,-48(r1)
10013b8c:	7c 08 02 a6 	mflr    r0
10013b90:	90 01 00 34 	stw     r0,52(r1)
10013b94:	93 e1 00 2c 	stw     r31,44(r1)
10013b98:	7c 3f 0b 78 	mr      r31,r1
10013b9c:	90 7f 00 18 	stw     r3,24(r31)
    long msecs;
    static struct timeval timeout;

    msecs = tmr_mstimeout( nowP );
10013ba0:	80 7f 00 18 	lwz     r3,24(r31)
10013ba4:	48 00 00 a1 	bl      10013c44 <tmr_mstimeout>
10013ba8:	90 7f 00 08 	stw     r3,8(r31)
    if ( msecs == INFTIM )
10013bac:	81 5f 00 08 	lwz     r10,8(r31)
10013bb0:	39 20 ff ff 	li      r9,-1
10013bb4:	7f 8a 48 00 	cmpw    cr7,r10,r9
10013bb8:	40 9e 00 0c 	bne     cr7,10013bc4 <tmr_timeout+0x3c>
	return (struct timeval*) 0;
10013bbc:	39 20 00 00 	li      r9,0
10013bc0:	48 00 00 68 	b       10013c28 <tmr_timeout+0xa0>
    timeout.tv_sec = msecs / 1000L;
10013bc4:	81 3f 00 08 	lwz     r9,8(r31)
10013bc8:	3d 40 10 62 	lis     r10,4194
10013bcc:	61 4a 4d d3 	ori     r10,r10,19923
10013bd0:	7d 49 50 96 	mulhw   r10,r9,r10
10013bd4:	7d 4a 36 70 	srawi   r10,r10,6
10013bd8:	7d 29 fe 70 	srawi   r9,r9,31
10013bdc:	7d 49 50 50 	subf    r10,r9,r10
10013be0:	3d 20 10 03 	lis     r9,4099
10013be4:	39 29 df c4 	addi    r9,r9,-8252
10013be8:	91 49 00 00 	stw     r10,0(r9)
    timeout.tv_usec = ( msecs % 1000L ) * 1000L;
10013bec:	81 5f 00 08 	lwz     r10,8(r31)
10013bf0:	3d 20 10 62 	lis     r9,4194
10013bf4:	61 29 4d d3 	ori     r9,r9,19923
10013bf8:	7d 2a 48 96 	mulhw   r9,r10,r9
10013bfc:	7d 28 36 70 	srawi   r8,r9,6
10013c00:	7d 49 fe 70 	srawi   r9,r10,31
10013c04:	7d 29 40 50 	subf    r9,r9,r8
10013c08:	1d 29 03 e8 	mulli   r9,r9,1000
10013c0c:	7d 29 50 50 	subf    r9,r9,r10
10013c10:	1d 49 03 e8 	mulli   r10,r9,1000
10013c14:	3d 20 10 03 	lis     r9,4099
10013c18:	39 29 df c4 	addi    r9,r9,-8252
10013c1c:	91 49 00 04 	stw     r10,4(r9)
    return &timeout;
10013c20:	3d 20 10 03 	lis     r9,4099
10013c24:	39 29 df c4 	addi    r9,r9,-8252
    }
10013c28:	7d 23 4b 78 	mr      r3,r9
10013c2c:	39 7f 00 30 	addi    r11,r31,48
10013c30:	80 0b 00 04 	lwz     r0,4(r11)
10013c34:	7c 08 03 a6 	mtlr    r0
10013c38:	83 eb ff fc 	lwz     r31,-4(r11)
10013c3c:	7d 61 5b 78 	mr      r1,r11
10013c40:	4e 80 00 20 	blr

10013c44 <tmr_mstimeout>:


long
tmr_mstimeout( struct timeval* nowP )
    {
10013c44:	94 21 ff c0 	stwu    r1,-64(r1)
10013c48:	93 e1 00 3c 	stw     r31,60(r1)
10013c4c:	7c 3f 0b 78 	mr      r31,r1
10013c50:	90 7f 00 28 	stw     r3,40(r31)
    int h;
    int gotone;
    long msecs, m;
    Timer* t;

    gotone = 0;
10013c54:	39 20 00 00 	li      r9,0
10013c58:	91 3f 00 0c 	stw     r9,12(r31)
    msecs = 0;          /* make lint happy */
10013c5c:	39 20 00 00 	li      r9,0
10013c60:	91 3f 00 10 	stw     r9,16(r31)
    /* Since the lists are sorted, we only need to look at the
    ** first timer on each one.
    */
    for ( h = 0; h < HASH_SIZE; ++h )
10013c64:	39 20 00 00 	li      r9,0
10013c68:	91 3f 00 08 	stw     r9,8(r31)
10013c6c:	48 00 00 bc 	b       10013d28 <tmr_mstimeout+0xe4>
	{
	t = timers[h];
10013c70:	3d 20 10 03 	lis     r9,4099
10013c74:	39 49 de a8 	addi    r10,r9,-8536
10013c78:	81 3f 00 08 	lwz     r9,8(r31)
10013c7c:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10013c80:	7d 2a 4a 14 	add     r9,r10,r9
10013c84:	81 29 00 00 	lwz     r9,0(r9)
10013c88:	91 3f 00 14 	stw     r9,20(r31)
	if ( t != (Timer*) 0 )
10013c8c:	81 3f 00 14 	lwz     r9,20(r31)
10013c90:	2f 89 00 00 	cmpwi   cr7,r9,0
10013c94:	41 9e 00 88 	beq     cr7,10013d1c <tmr_mstimeout+0xd8>
	    {
	    m = ( t->time.tv_sec - nowP->tv_sec ) * 1000L +
10013c98:	81 3f 00 14 	lwz     r9,20(r31)
10013c9c:	81 49 00 10 	lwz     r10,16(r9)
10013ca0:	81 3f 00 28 	lwz     r9,40(r31)
10013ca4:	81 29 00 00 	lwz     r9,0(r9)
10013ca8:	7d 29 50 50 	subf    r9,r9,r10
10013cac:	1d 49 03 e8 	mulli   r10,r9,1000
		( t->time.tv_usec - nowP->tv_usec ) / 1000L;
10013cb0:	81 3f 00 14 	lwz     r9,20(r31)
10013cb4:	81 09 00 14 	lwz     r8,20(r9)
10013cb8:	81 3f 00 28 	lwz     r9,40(r31)
10013cbc:	81 29 00 04 	lwz     r9,4(r9)
10013cc0:	7d 29 40 50 	subf    r9,r9,r8
10013cc4:	3d 00 10 62 	lis     r8,4194
10013cc8:	61 08 4d d3 	ori     r8,r8,19923
10013ccc:	7d 09 40 96 	mulhw   r8,r9,r8
10013cd0:	7d 08 36 70 	srawi   r8,r8,6
10013cd4:	7d 29 fe 70 	srawi   r9,r9,31
10013cd8:	7d 29 40 50 	subf    r9,r9,r8
    for ( h = 0; h < HASH_SIZE; ++h )
	{
	t = timers[h];
	if ( t != (Timer*) 0 )
	    {
	    m = ( t->time.tv_sec - nowP->tv_sec ) * 1000L +
10013cdc:	7d 2a 4a 14 	add     r9,r10,r9
10013ce0:	91 3f 00 18 	stw     r9,24(r31)
		( t->time.tv_usec - nowP->tv_usec ) / 1000L;
	    if ( ! gotone )
10013ce4:	81 3f 00 0c 	lwz     r9,12(r31)
10013ce8:	2f 89 00 00 	cmpwi   cr7,r9,0
10013cec:	40 9e 00 18 	bne     cr7,10013d04 <tmr_mstimeout+0xc0>
		{
		msecs = m;
10013cf0:	81 3f 00 18 	lwz     r9,24(r31)
10013cf4:	91 3f 00 10 	stw     r9,16(r31)
		gotone = 1;
10013cf8:	39 20 00 01 	li      r9,1
10013cfc:	91 3f 00 0c 	stw     r9,12(r31)
10013d00:	48 00 00 1c 	b       10013d1c <tmr_mstimeout+0xd8>
		}
	    else if ( m < msecs )
10013d04:	81 5f 00 18 	lwz     r10,24(r31)
10013d08:	81 3f 00 10 	lwz     r9,16(r31)
10013d0c:	7f 8a 48 00 	cmpw    cr7,r10,r9
10013d10:	40 9c 00 0c 	bge     cr7,10013d1c <tmr_mstimeout+0xd8>
		msecs = m;
10013d14:	81 3f 00 18 	lwz     r9,24(r31)
10013d18:	91 3f 00 10 	stw     r9,16(r31)
    gotone = 0;
    msecs = 0;          /* make lint happy */
    /* Since the lists are sorted, we only need to look at the
    ** first timer on each one.
    */
    for ( h = 0; h < HASH_SIZE; ++h )
10013d1c:	81 3f 00 08 	lwz     r9,8(r31)
10013d20:	39 29 00 01 	addi    r9,r9,1
10013d24:	91 3f 00 08 	stw     r9,8(r31)
10013d28:	81 3f 00 08 	lwz     r9,8(r31)
10013d2c:	2f 89 00 42 	cmpwi   cr7,r9,66
10013d30:	40 9d ff 40 	ble     cr7,10013c70 <tmr_mstimeout+0x2c>
		}
	    else if ( m < msecs )
		msecs = m;
	    }
	}
    if ( ! gotone )
10013d34:	81 3f 00 0c 	lwz     r9,12(r31)
10013d38:	2f 89 00 00 	cmpwi   cr7,r9,0
10013d3c:	40 9e 00 0c 	bne     cr7,10013d48 <tmr_mstimeout+0x104>
	return INFTIM;
10013d40:	39 20 ff ff 	li      r9,-1
10013d44:	48 00 00 1c 	b       10013d60 <tmr_mstimeout+0x11c>
    if ( msecs <= 0 )
10013d48:	81 3f 00 10 	lwz     r9,16(r31)
10013d4c:	2f 89 00 00 	cmpwi   cr7,r9,0
10013d50:	41 9d 00 0c 	bgt     cr7,10013d5c <tmr_mstimeout+0x118>
	msecs = 0;
10013d54:	39 20 00 00 	li      r9,0
10013d58:	91 3f 00 10 	stw     r9,16(r31)
    return msecs;
10013d5c:	81 3f 00 10 	lwz     r9,16(r31)
    }
10013d60:	7d 23 4b 78 	mr      r3,r9
10013d64:	39 7f 00 40 	addi    r11,r31,64
10013d68:	83 eb ff fc 	lwz     r31,-4(r11)
10013d6c:	7d 61 5b 78 	mr      r1,r11
10013d70:	4e 80 00 20 	blr

10013d74 <tmr_run>:


void
tmr_run( struct timeval* nowP )
    {
10013d74:	94 21 ff d0 	stwu    r1,-48(r1)
10013d78:	7c 08 02 a6 	mflr    r0
10013d7c:	90 01 00 34 	stw     r0,52(r1)
10013d80:	93 e1 00 2c 	stw     r31,44(r1)
10013d84:	7c 3f 0b 78 	mr      r31,r1
10013d88:	90 7f 00 18 	stw     r3,24(r31)
    int h;
    Timer* t;
    Timer* next;

    for ( h = 0; h < HASH_SIZE; ++h )
10013d8c:	39 20 00 00 	li      r9,0
10013d90:	91 3f 00 08 	stw     r9,8(r31)
10013d94:	48 00 01 dc 	b       10013f70 <tmr_run+0x1fc>
	for ( t = timers[h]; t != (Timer*) 0; t = next )
10013d98:	3d 20 10 03 	lis     r9,4099
10013d9c:	39 49 de a8 	addi    r10,r9,-8536
10013da0:	81 3f 00 08 	lwz     r9,8(r31)
10013da4:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10013da8:	7d 2a 4a 14 	add     r9,r10,r9
10013dac:	81 29 00 00 	lwz     r9,0(r9)
10013db0:	91 3f 00 0c 	stw     r9,12(r31)
10013db4:	48 00 01 a4 	b       10013f58 <tmr_run+0x1e4>
	    {
	    next = t->next;
10013db8:	81 3f 00 0c 	lwz     r9,12(r31)
10013dbc:	81 29 00 1c 	lwz     r9,28(r9)
10013dc0:	91 3f 00 10 	stw     r9,16(r31)
	    /* Since the lists are sorted, as soon as we find a timer
	    ** that isn't ready yet, we can go on to the next list.
	    */
	    if ( t->time.tv_sec > nowP->tv_sec ||
10013dc4:	81 3f 00 0c 	lwz     r9,12(r31)
10013dc8:	81 49 00 10 	lwz     r10,16(r9)
10013dcc:	81 3f 00 18 	lwz     r9,24(r31)
10013dd0:	81 29 00 00 	lwz     r9,0(r9)
10013dd4:	7f 8a 48 00 	cmpw    cr7,r10,r9
10013dd8:	41 9d 01 8c 	bgt     cr7,10013f64 <tmr_run+0x1f0>
		 ( t->time.tv_sec == nowP->tv_sec &&
10013ddc:	81 3f 00 0c 	lwz     r9,12(r31)
10013de0:	81 49 00 10 	lwz     r10,16(r9)
10013de4:	81 3f 00 18 	lwz     r9,24(r31)
10013de8:	81 29 00 00 	lwz     r9,0(r9)
	    {
	    next = t->next;
	    /* Since the lists are sorted, as soon as we find a timer
	    ** that isn't ready yet, we can go on to the next list.
	    */
	    if ( t->time.tv_sec > nowP->tv_sec ||
10013dec:	7f 8a 48 00 	cmpw    cr7,r10,r9
10013df0:	40 9e 00 1c 	bne     cr7,10013e0c <tmr_run+0x98>
		 ( t->time.tv_sec == nowP->tv_sec &&
		   t->time.tv_usec > nowP->tv_usec ) )
10013df4:	81 3f 00 0c 	lwz     r9,12(r31)
10013df8:	81 49 00 14 	lwz     r10,20(r9)
10013dfc:	81 3f 00 18 	lwz     r9,24(r31)
10013e00:	81 29 00 04 	lwz     r9,4(r9)
	    next = t->next;
	    /* Since the lists are sorted, as soon as we find a timer
	    ** that isn't ready yet, we can go on to the next list.
	    */
	    if ( t->time.tv_sec > nowP->tv_sec ||
		 ( t->time.tv_sec == nowP->tv_sec &&
10013e04:	7f 8a 48 00 	cmpw    cr7,r10,r9
10013e08:	41 9d 01 5c 	bgt     cr7,10013f64 <tmr_run+0x1f0>
		   t->time.tv_usec > nowP->tv_usec ) )
		break;
	    (t->timer_proc)( t->client_data, nowP );
10013e0c:	81 3f 00 0c 	lwz     r9,12(r31)
10013e10:	81 29 00 00 	lwz     r9,0(r9)
10013e14:	81 5f 00 0c 	lwz     r10,12(r31)
10013e18:	81 4a 00 04 	lwz     r10,4(r10)
10013e1c:	91 5f 00 1c 	stw     r10,28(r31)
10013e20:	39 5f 00 1c 	addi    r10,r31,28
10013e24:	7d 43 53 78 	mr      r3,r10
10013e28:	80 9f 00 18 	lwz     r4,24(r31)
10013e2c:	7d 29 03 a6 	mtctr   r9
10013e30:	4e 80 04 21 	bctrl
	    if ( t->periodic )
10013e34:	81 3f 00 0c 	lwz     r9,12(r31)
10013e38:	81 29 00 0c 	lwz     r9,12(r9)
10013e3c:	2f 89 00 00 	cmpwi   cr7,r9,0
10013e40:	41 9e 01 08 	beq     cr7,10013f48 <tmr_run+0x1d4>
		{
		/* Reschedule. */
		t->time.tv_sec += t->msecs / 1000L;
10013e44:	81 3f 00 0c 	lwz     r9,12(r31)
10013e48:	81 49 00 10 	lwz     r10,16(r9)
10013e4c:	81 3f 00 0c 	lwz     r9,12(r31)
10013e50:	81 29 00 08 	lwz     r9,8(r9)
10013e54:	3d 00 10 62 	lis     r8,4194
10013e58:	61 08 4d d3 	ori     r8,r8,19923
10013e5c:	7d 09 40 96 	mulhw   r8,r9,r8
10013e60:	7d 08 36 70 	srawi   r8,r8,6
10013e64:	7d 29 fe 70 	srawi   r9,r9,31
10013e68:	7d 29 40 50 	subf    r9,r9,r8
10013e6c:	7d 4a 4a 14 	add     r10,r10,r9
10013e70:	81 3f 00 0c 	lwz     r9,12(r31)
10013e74:	91 49 00 10 	stw     r10,16(r9)
		t->time.tv_usec += ( t->msecs % 1000L ) * 1000L;
10013e78:	81 3f 00 0c 	lwz     r9,12(r31)
10013e7c:	81 09 00 14 	lwz     r8,20(r9)
10013e80:	81 3f 00 0c 	lwz     r9,12(r31)
10013e84:	81 49 00 08 	lwz     r10,8(r9)
10013e88:	3d 20 10 62 	lis     r9,4194
10013e8c:	61 29 4d d3 	ori     r9,r9,19923
10013e90:	7d 2a 48 96 	mulhw   r9,r10,r9
10013e94:	7d 27 36 70 	srawi   r7,r9,6
10013e98:	7d 49 fe 70 	srawi   r9,r10,31
10013e9c:	7d 29 38 50 	subf    r9,r9,r7
10013ea0:	1d 29 03 e8 	mulli   r9,r9,1000
10013ea4:	7d 29 50 50 	subf    r9,r9,r10
10013ea8:	1d 29 03 e8 	mulli   r9,r9,1000
10013eac:	7d 48 4a 14 	add     r10,r8,r9
10013eb0:	81 3f 00 0c 	lwz     r9,12(r31)
10013eb4:	91 49 00 14 	stw     r10,20(r9)
		if ( t->time.tv_usec >= 1000000L )
10013eb8:	81 3f 00 0c 	lwz     r9,12(r31)
10013ebc:	81 49 00 14 	lwz     r10,20(r9)
10013ec0:	3d 20 00 0f 	lis     r9,15
10013ec4:	61 29 42 3f 	ori     r9,r9,16959
10013ec8:	7f 8a 48 00 	cmpw    cr7,r10,r9
10013ecc:	40 9d 00 70 	ble     cr7,10013f3c <tmr_run+0x1c8>
		    {
		    t->time.tv_sec += t->time.tv_usec / 1000000L;
10013ed0:	81 3f 00 0c 	lwz     r9,12(r31)
10013ed4:	81 49 00 10 	lwz     r10,16(r9)
10013ed8:	81 3f 00 0c 	lwz     r9,12(r31)
10013edc:	81 29 00 14 	lwz     r9,20(r9)
10013ee0:	3d 00 43 1b 	lis     r8,17179
10013ee4:	61 08 de 83 	ori     r8,r8,56963
10013ee8:	7d 09 40 96 	mulhw   r8,r9,r8
10013eec:	7d 08 96 70 	srawi   r8,r8,18
10013ef0:	7d 29 fe 70 	srawi   r9,r9,31
10013ef4:	7d 29 40 50 	subf    r9,r9,r8
10013ef8:	7d 4a 4a 14 	add     r10,r10,r9
10013efc:	81 3f 00 0c 	lwz     r9,12(r31)
10013f00:	91 49 00 10 	stw     r10,16(r9)
		    t->time.tv_usec %= 1000000L;
10013f04:	81 3f 00 0c 	lwz     r9,12(r31)
10013f08:	81 49 00 14 	lwz     r10,20(r9)
10013f0c:	3d 20 43 1b 	lis     r9,17179
10013f10:	61 29 de 83 	ori     r9,r9,56963
10013f14:	7d 2a 48 96 	mulhw   r9,r10,r9
10013f18:	7d 28 96 70 	srawi   r8,r9,18
10013f1c:	7d 49 fe 70 	srawi   r9,r10,31
10013f20:	7d 29 40 50 	subf    r9,r9,r8
10013f24:	3d 00 00 0f 	lis     r8,15
10013f28:	61 08 42 40 	ori     r8,r8,16960
10013f2c:	7d 29 41 d6 	mullw   r9,r9,r8
10013f30:	7d 29 50 50 	subf    r9,r9,r10
10013f34:	81 5f 00 0c 	lwz     r10,12(r31)
10013f38:	91 2a 00 14 	stw     r9,20(r10)
		    }
		l_resort( t );
10013f3c:	80 7f 00 0c 	lwz     r3,12(r31)
10013f40:	4b ff f9 09 	bl      10013848 <l_resort>
10013f44:	48 00 00 0c 	b       10013f50 <tmr_run+0x1dc>
		}
	    else
		tmr_cancel( t );
10013f48:	80 7f 00 0c 	lwz     r3,12(r31)
10013f4c:	48 00 01 8d 	bl      100140d8 <tmr_cancel>
    int h;
    Timer* t;
    Timer* next;

    for ( h = 0; h < HASH_SIZE; ++h )
	for ( t = timers[h]; t != (Timer*) 0; t = next )
10013f50:	81 3f 00 10 	lwz     r9,16(r31)
10013f54:	91 3f 00 0c 	stw     r9,12(r31)
10013f58:	81 3f 00 0c 	lwz     r9,12(r31)
10013f5c:	2f 89 00 00 	cmpwi   cr7,r9,0
10013f60:	40 9e fe 58 	bne     cr7,10013db8 <tmr_run+0x44>
    {
    int h;
    Timer* t;
    Timer* next;

    for ( h = 0; h < HASH_SIZE; ++h )
10013f64:	81 3f 00 08 	lwz     r9,8(r31)
10013f68:	39 29 00 01 	addi    r9,r9,1
10013f6c:	91 3f 00 08 	stw     r9,8(r31)
10013f70:	81 3f 00 08 	lwz     r9,8(r31)
10013f74:	2f 89 00 42 	cmpwi   cr7,r9,66
10013f78:	40 9d fe 20 	ble     cr7,10013d98 <tmr_run+0x24>
		l_resort( t );
		}
	    else
		tmr_cancel( t );
	    }
    }
10013f7c:	39 7f 00 30 	addi    r11,r31,48
10013f80:	80 0b 00 04 	lwz     r0,4(r11)
10013f84:	7c 08 03 a6 	mtlr    r0
10013f88:	83 eb ff fc 	lwz     r31,-4(r11)
10013f8c:	7d 61 5b 78 	mr      r1,r11
10013f90:	4e 80 00 20 	blr

10013f94 <tmr_reset>:


void
tmr_reset( struct timeval* nowP, Timer* t )
    {
10013f94:	94 21 ff e0 	stwu    r1,-32(r1)
10013f98:	7c 08 02 a6 	mflr    r0
10013f9c:	90 01 00 24 	stw     r0,36(r1)
10013fa0:	93 e1 00 1c 	stw     r31,28(r1)
10013fa4:	7c 3f 0b 78 	mr      r31,r1
10013fa8:	90 7f 00 08 	stw     r3,8(r31)
10013fac:	90 9f 00 0c 	stw     r4,12(r31)
    t->time = *nowP;
10013fb0:	81 3f 00 0c 	lwz     r9,12(r31)
10013fb4:	81 5f 00 08 	lwz     r10,8(r31)
10013fb8:	c8 0a 00 00 	lfd     f0,0(r10)
10013fbc:	d8 09 00 10 	stfd    f0,16(r9)
    t->time.tv_sec += t->msecs / 1000L;
10013fc0:	81 3f 00 0c 	lwz     r9,12(r31)
10013fc4:	81 49 00 10 	lwz     r10,16(r9)
10013fc8:	81 3f 00 0c 	lwz     r9,12(r31)
10013fcc:	81 29 00 08 	lwz     r9,8(r9)
10013fd0:	3d 00 10 62 	lis     r8,4194
10013fd4:	61 08 4d d3 	ori     r8,r8,19923
10013fd8:	7d 09 40 96 	mulhw   r8,r9,r8
10013fdc:	7d 08 36 70 	srawi   r8,r8,6
10013fe0:	7d 29 fe 70 	srawi   r9,r9,31
10013fe4:	7d 29 40 50 	subf    r9,r9,r8
10013fe8:	7d 4a 4a 14 	add     r10,r10,r9
10013fec:	81 3f 00 0c 	lwz     r9,12(r31)
10013ff0:	91 49 00 10 	stw     r10,16(r9)
    t->time.tv_usec += ( t->msecs % 1000L ) * 1000L;
10013ff4:	81 3f 00 0c 	lwz     r9,12(r31)
10013ff8:	81 09 00 14 	lwz     r8,20(r9)
10013ffc:	81 3f 00 0c 	lwz     r9,12(r31)
10014000:	81 49 00 08 	lwz     r10,8(r9)
10014004:	3d 20 10 62 	lis     r9,4194
10014008:	61 29 4d d3 	ori     r9,r9,19923
1001400c:	7d 2a 48 96 	mulhw   r9,r10,r9
10014010:	7d 27 36 70 	srawi   r7,r9,6
10014014:	7d 49 fe 70 	srawi   r9,r10,31
10014018:	7d 29 38 50 	subf    r9,r9,r7
1001401c:	1d 29 03 e8 	mulli   r9,r9,1000
10014020:	7d 29 50 50 	subf    r9,r9,r10
10014024:	1d 29 03 e8 	mulli   r9,r9,1000
10014028:	7d 48 4a 14 	add     r10,r8,r9
1001402c:	81 3f 00 0c 	lwz     r9,12(r31)
10014030:	91 49 00 14 	stw     r10,20(r9)
    if ( t->time.tv_usec >= 1000000L )
10014034:	81 3f 00 0c 	lwz     r9,12(r31)
10014038:	81 49 00 14 	lwz     r10,20(r9)
1001403c:	3d 20 00 0f 	lis     r9,15
10014040:	61 29 42 3f 	ori     r9,r9,16959
10014044:	7f 8a 48 00 	cmpw    cr7,r10,r9
10014048:	40 9d 00 70 	ble     cr7,100140b8 <tmr_reset+0x124>
	{
	t->time.tv_sec += t->time.tv_usec / 1000000L;
1001404c:	81 3f 00 0c 	lwz     r9,12(r31)
10014050:	81 49 00 10 	lwz     r10,16(r9)
10014054:	81 3f 00 0c 	lwz     r9,12(r31)
10014058:	81 29 00 14 	lwz     r9,20(r9)
1001405c:	3d 00 43 1b 	lis     r8,17179
10014060:	61 08 de 83 	ori     r8,r8,56963
10014064:	7d 09 40 96 	mulhw   r8,r9,r8
10014068:	7d 08 96 70 	srawi   r8,r8,18
1001406c:	7d 29 fe 70 	srawi   r9,r9,31
10014070:	7d 29 40 50 	subf    r9,r9,r8
10014074:	7d 4a 4a 14 	add     r10,r10,r9
10014078:	81 3f 00 0c 	lwz     r9,12(r31)
1001407c:	91 49 00 10 	stw     r10,16(r9)
	t->time.tv_usec %= 1000000L;
10014080:	81 3f 00 0c 	lwz     r9,12(r31)
10014084:	81 49 00 14 	lwz     r10,20(r9)
10014088:	3d 20 43 1b 	lis     r9,17179
1001408c:	61 29 de 83 	ori     r9,r9,56963
10014090:	7d 2a 48 96 	mulhw   r9,r10,r9
10014094:	7d 28 96 70 	srawi   r8,r9,18
10014098:	7d 49 fe 70 	srawi   r9,r10,31
1001409c:	7d 29 40 50 	subf    r9,r9,r8
100140a0:	3d 00 00 0f 	lis     r8,15
100140a4:	61 08 42 40 	ori     r8,r8,16960
100140a8:	7d 29 41 d6 	mullw   r9,r9,r8
100140ac:	7d 29 50 50 	subf    r9,r9,r10
100140b0:	81 5f 00 0c 	lwz     r10,12(r31)
100140b4:	91 2a 00 14 	stw     r9,20(r10)
	}
    l_resort( t );
100140b8:	80 7f 00 0c 	lwz     r3,12(r31)
100140bc:	4b ff f7 8d 	bl      10013848 <l_resort>
    }
100140c0:	39 7f 00 20 	addi    r11,r31,32
100140c4:	80 0b 00 04 	lwz     r0,4(r11)
100140c8:	7c 08 03 a6 	mtlr    r0
100140cc:	83 eb ff fc 	lwz     r31,-4(r11)
100140d0:	7d 61 5b 78 	mr      r1,r11
100140d4:	4e 80 00 20 	blr

100140d8 <tmr_cancel>:


void
tmr_cancel( Timer* t )
    {
100140d8:	94 21 ff e0 	stwu    r1,-32(r1)
100140dc:	7c 08 02 a6 	mflr    r0
100140e0:	90 01 00 24 	stw     r0,36(r1)
100140e4:	93 e1 00 1c 	stw     r31,28(r1)
100140e8:	7c 3f 0b 78 	mr      r31,r1
100140ec:	90 7f 00 08 	stw     r3,8(r31)
    /* Remove it from its active list. */
    l_remove( t );
100140f0:	80 7f 00 08 	lwz     r3,8(r31)
100140f4:	4b ff f6 bd 	bl      100137b0 <l_remove>
    --active_count;
100140f8:	3d 20 10 03 	lis     r9,4099
100140fc:	81 29 df bc 	lwz     r9,-8260(r9)
10014100:	39 49 ff ff 	addi    r10,r9,-1
10014104:	3d 20 10 03 	lis     r9,4099
10014108:	91 49 df bc 	stw     r10,-8260(r9)
    /* And put it on the free list. */
    t->next = free_timers;
1001410c:	3d 20 10 03 	lis     r9,4099
10014110:	81 49 df b4 	lwz     r10,-8268(r9)
10014114:	81 3f 00 08 	lwz     r9,8(r31)
10014118:	91 49 00 1c 	stw     r10,28(r9)
    free_timers = t;
1001411c:	3d 20 10 03 	lis     r9,4099
10014120:	81 5f 00 08 	lwz     r10,8(r31)
10014124:	91 49 df b4 	stw     r10,-8268(r9)
    ++free_count;
10014128:	3d 20 10 03 	lis     r9,4099
1001412c:	81 29 df c0 	lwz     r9,-8256(r9)
10014130:	39 49 00 01 	addi    r10,r9,1
10014134:	3d 20 10 03 	lis     r9,4099
10014138:	91 49 df c0 	stw     r10,-8256(r9)
    t->prev = (Timer*) 0;
1001413c:	81 3f 00 08 	lwz     r9,8(r31)
10014140:	39 40 00 00 	li      r10,0
10014144:	91 49 00 18 	stw     r10,24(r9)
    }
10014148:	39 7f 00 20 	addi    r11,r31,32
1001414c:	80 0b 00 04 	lwz     r0,4(r11)
10014150:	7c 08 03 a6 	mtlr    r0
10014154:	83 eb ff fc 	lwz     r31,-4(r11)
10014158:	7d 61 5b 78 	mr      r1,r11
1001415c:	4e 80 00 20 	blr

10014160 <tmr_cleanup>:


void
tmr_cleanup( void )
    {
10014160:	94 21 ff e0 	stwu    r1,-32(r1)
10014164:	7c 08 02 a6 	mflr    r0
10014168:	90 01 00 24 	stw     r0,36(r1)
1001416c:	93 e1 00 1c 	stw     r31,28(r1)
10014170:	7c 3f 0b 78 	mr      r31,r1
    Timer* t;

    while ( free_timers != (Timer*) 0 )
10014174:	48 00 00 50 	b       100141c4 <tmr_cleanup+0x64>
	{
	t = free_timers;
10014178:	3d 20 10 03 	lis     r9,4099
1001417c:	81 29 df b4 	lwz     r9,-8268(r9)
10014180:	91 3f 00 08 	stw     r9,8(r31)
	free_timers = t->next;
10014184:	81 3f 00 08 	lwz     r9,8(r31)
10014188:	81 49 00 1c 	lwz     r10,28(r9)
1001418c:	3d 20 10 03 	lis     r9,4099
10014190:	91 49 df b4 	stw     r10,-8268(r9)
	--free_count;
10014194:	3d 20 10 03 	lis     r9,4099
10014198:	81 29 df c0 	lwz     r9,-8256(r9)
1001419c:	39 49 ff ff 	addi    r10,r9,-1
100141a0:	3d 20 10 03 	lis     r9,4099
100141a4:	91 49 df c0 	stw     r10,-8256(r9)
	free( (void*) t );
100141a8:	80 7f 00 08 	lwz     r3,8(r31)
100141ac:	48 01 92 89 	bl      1002d434 <free@plt>
	--alloc_count;
100141b0:	3d 20 10 03 	lis     r9,4099
100141b4:	81 29 df b8 	lwz     r9,-8264(r9)
100141b8:	39 49 ff ff 	addi    r10,r9,-1
100141bc:	3d 20 10 03 	lis     r9,4099
100141c0:	91 49 df b8 	stw     r10,-8264(r9)
void
tmr_cleanup( void )
    {
    Timer* t;

    while ( free_timers != (Timer*) 0 )
100141c4:	3d 20 10 03 	lis     r9,4099
100141c8:	81 29 df b4 	lwz     r9,-8268(r9)
100141cc:	2f 89 00 00 	cmpwi   cr7,r9,0
100141d0:	40 9e ff a8 	bne     cr7,10014178 <tmr_cleanup+0x18>
	free_timers = t->next;
	--free_count;
	free( (void*) t );
	--alloc_count;
	}
    }
100141d4:	39 7f 00 20 	addi    r11,r31,32
100141d8:	80 0b 00 04 	lwz     r0,4(r11)
100141dc:	7c 08 03 a6 	mtlr    r0
100141e0:	83 eb ff fc 	lwz     r31,-4(r11)
100141e4:	7d 61 5b 78 	mr      r1,r11
100141e8:	4e 80 00 20 	blr

100141ec <tmr_term>:


void
tmr_term( void )
    {
100141ec:	94 21 ff e0 	stwu    r1,-32(r1)
100141f0:	7c 08 02 a6 	mflr    r0
100141f4:	90 01 00 24 	stw     r0,36(r1)
100141f8:	93 e1 00 1c 	stw     r31,28(r1)
100141fc:	7c 3f 0b 78 	mr      r31,r1
    int h;

    for ( h = 0; h < HASH_SIZE; ++h )
10014200:	39 20 00 00 	li      r9,0
10014204:	91 3f 00 08 	stw     r9,8(r31)
10014208:	48 00 00 54 	b       1001425c <tmr_term+0x70>
	while ( timers[h] != (Timer*) 0 )
1001420c:	48 00 00 24 	b       10014230 <tmr_term+0x44>
	    tmr_cancel( timers[h] );
10014210:	3d 20 10 03 	lis     r9,4099
10014214:	39 49 de a8 	addi    r10,r9,-8536
10014218:	81 3f 00 08 	lwz     r9,8(r31)
1001421c:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10014220:	7d 2a 4a 14 	add     r9,r10,r9
10014224:	81 29 00 00 	lwz     r9,0(r9)
10014228:	7d 23 4b 78 	mr      r3,r9
1001422c:	4b ff fe ad 	bl      100140d8 <tmr_cancel>
tmr_term( void )
    {
    int h;

    for ( h = 0; h < HASH_SIZE; ++h )
	while ( timers[h] != (Timer*) 0 )
10014230:	3d 20 10 03 	lis     r9,4099
10014234:	39 49 de a8 	addi    r10,r9,-8536
10014238:	81 3f 00 08 	lwz     r9,8(r31)
1001423c:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10014240:	7d 2a 4a 14 	add     r9,r10,r9
10014244:	81 29 00 00 	lwz     r9,0(r9)
10014248:	2f 89 00 00 	cmpwi   cr7,r9,0
1001424c:	40 9e ff c4 	bne     cr7,10014210 <tmr_term+0x24>
void
tmr_term( void )
    {
    int h;

    for ( h = 0; h < HASH_SIZE; ++h )
10014250:	81 3f 00 08 	lwz     r9,8(r31)
10014254:	39 29 00 01 	addi    r9,r9,1
10014258:	91 3f 00 08 	stw     r9,8(r31)
1001425c:	81 3f 00 08 	lwz     r9,8(r31)
10014260:	2f 89 00 42 	cmpwi   cr7,r9,66
10014264:	40 9d ff a8 	ble     cr7,1001420c <tmr_term+0x20>
	while ( timers[h] != (Timer*) 0 )
	    tmr_cancel( timers[h] );
    tmr_cleanup();
10014268:	4b ff fe f9 	bl      10014160 <tmr_cleanup>
    }
1001426c:	39 7f 00 20 	addi    r11,r31,32
10014270:	80 0b 00 04 	lwz     r0,4(r11)
10014274:	7c 08 03 a6 	mtlr    r0
10014278:	83 eb ff fc 	lwz     r31,-4(r11)
1001427c:	7d 61 5b 78 	mr      r1,r11
10014280:	4e 80 00 20 	blr

10014284 <tmr_logstats>:


/* Generate debugging statistics syslog message. */
void
tmr_logstats( long secs )
    {
10014284:	94 21 ff e0 	stwu    r1,-32(r1)
10014288:	7c 08 02 a6 	mflr    r0
1001428c:	90 01 00 24 	stw     r0,36(r1)
10014290:	93 e1 00 1c 	stw     r31,28(r1)
10014294:	7c 3f 0b 78 	mr      r31,r1
10014298:	90 7f 00 08 	stw     r3,8(r31)
    syslog(
1001429c:	3d 20 10 03 	lis     r9,4099
100142a0:	81 09 df b8 	lwz     r8,-8264(r9)
100142a4:	3d 20 10 03 	lis     r9,4099
100142a8:	81 49 df bc 	lwz     r10,-8260(r9)
100142ac:	3d 20 10 03 	lis     r9,4099
100142b0:	81 29 df c0 	lwz     r9,-8256(r9)
100142b4:	38 60 00 05 	li      r3,5
100142b8:	3c e0 10 02 	lis     r7,4098
100142bc:	38 87 b3 7c 	addi    r4,r7,-19588
100142c0:	7d 05 43 78 	mr      r5,r8
100142c4:	7d 46 53 78 	mr      r6,r10
100142c8:	7d 27 4b 78 	mr      r7,r9
100142cc:	4c c6 31 82 	crclr   4*cr1+eq
100142d0:	48 01 94 b5 	bl      1002d784 <syslog@plt>
	LOG_NOTICE, "  timers - %d allocated, %d active, %d free",
	alloc_count, active_count, free_count );
    if ( active_count + free_count != alloc_count )
100142d4:	3d 20 10 03 	lis     r9,4099
100142d8:	81 49 df bc 	lwz     r10,-8260(r9)
100142dc:	3d 20 10 03 	lis     r9,4099
100142e0:	81 29 df c0 	lwz     r9,-8256(r9)
100142e4:	7d 4a 4a 14 	add     r10,r10,r9
100142e8:	3d 20 10 03 	lis     r9,4099
100142ec:	81 29 df b8 	lwz     r9,-8264(r9)
100142f0:	7f 8a 48 00 	cmpw    cr7,r10,r9
100142f4:	41 9e 00 18 	beq     cr7,1001430c <tmr_logstats+0x88>
	syslog( LOG_ERR, "timer counts don't add up!" );
100142f8:	38 60 00 03 	li      r3,3
100142fc:	3d 20 10 02 	lis     r9,4098
10014300:	38 89 b3 a8 	addi    r4,r9,-19544
10014304:	4c c6 31 82 	crclr   4*cr1+eq
10014308:	48 01 94 7d 	bl      1002d784 <syslog@plt>
    }
1001430c:	39 7f 00 20 	addi    r11,r31,32
10014310:	80 0b 00 04 	lwz     r0,4(r11)
10014314:	7c 08 03 a6 	mtlr    r0
10014318:	83 eb ff fc 	lwz     r31,-4(r11)
1001431c:	7d 61 5b 78 	mr      r1,r11
10014320:	4e 80 00 20 	blr

10014324 <match>:

static int match_one( const char* pattern, int patternlen, const char* string );

int
match( const char* pattern, const char* string )
    {
10014324:	94 21 ff d0 	stwu    r1,-48(r1)
10014328:	7c 08 02 a6 	mflr    r0
1001432c:	90 01 00 34 	stw     r0,52(r1)
10014330:	93 e1 00 2c 	stw     r31,44(r1)
10014334:	7c 3f 0b 78 	mr      r31,r1
10014338:	90 7f 00 18 	stw     r3,24(r31)
1001433c:	90 9f 00 1c 	stw     r4,28(r31)
    const char* or;

    for (;;)
	{
	or = strchr( pattern, '|' );
10014340:	80 7f 00 18 	lwz     r3,24(r31)
10014344:	38 80 00 7c 	li      r4,124
10014348:	48 01 92 fd 	bl      1002d644 <strchr@plt>
1001434c:	90 7f 00 08 	stw     r3,8(r31)
	if ( or == (char*) 0 )
10014350:	81 3f 00 08 	lwz     r9,8(r31)
10014354:	2f 89 00 00 	cmpwi   cr7,r9,0
10014358:	40 9e 00 28 	bne     cr7,10014380 <match+0x5c>
	    return match_one( pattern, strlen( pattern ), string );
1001435c:	80 7f 00 18 	lwz     r3,24(r31)
10014360:	48 01 92 f5 	bl      1002d654 <strlen@plt>
10014364:	7c 69 1b 78 	mr      r9,r3
10014368:	80 7f 00 18 	lwz     r3,24(r31)
1001436c:	7d 24 4b 78 	mr      r4,r9
10014370:	80 bf 00 1c 	lwz     r5,28(r31)
10014374:	48 00 00 69 	bl      100143dc <match_one>
10014378:	7c 69 1b 78 	mr      r9,r3
1001437c:	48 00 00 44 	b       100143c0 <match+0x9c>
	if ( match_one( pattern, or - pattern, string ) )
10014380:	81 5f 00 08 	lwz     r10,8(r31)
10014384:	81 3f 00 18 	lwz     r9,24(r31)
10014388:	7d 29 50 50 	subf    r9,r9,r10
1001438c:	80 7f 00 18 	lwz     r3,24(r31)
10014390:	7d 24 4b 78 	mr      r4,r9
10014394:	80 bf 00 1c 	lwz     r5,28(r31)
10014398:	48 00 00 45 	bl      100143dc <match_one>
1001439c:	7c 69 1b 78 	mr      r9,r3
100143a0:	2f 89 00 00 	cmpwi   cr7,r9,0
100143a4:	41 9e 00 0c 	beq     cr7,100143b0 <match+0x8c>
	    return 1;
100143a8:	39 20 00 01 	li      r9,1
100143ac:	48 00 00 14 	b       100143c0 <match+0x9c>
	pattern = or + 1;
100143b0:	81 3f 00 08 	lwz     r9,8(r31)
100143b4:	39 29 00 01 	addi    r9,r9,1
100143b8:	91 3f 00 18 	stw     r9,24(r31)
	}
100143bc:	4b ff ff 84 	b       10014340 <match+0x1c>
    }
100143c0:	7d 23 4b 78 	mr      r3,r9
100143c4:	39 7f 00 30 	addi    r11,r31,48
100143c8:	80 0b 00 04 	lwz     r0,4(r11)
100143cc:	7c 08 03 a6 	mtlr    r0
100143d0:	83 eb ff fc 	lwz     r31,-4(r11)
100143d4:	7d 61 5b 78 	mr      r1,r11
100143d8:	4e 80 00 20 	blr

100143dc <match_one>:


static int
match_one( const char* pattern, int patternlen, const char* string )
    {
100143dc:	94 21 ff d0 	stwu    r1,-48(r1)
100143e0:	7c 08 02 a6 	mflr    r0
100143e4:	90 01 00 34 	stw     r0,52(r1)
100143e8:	93 e1 00 2c 	stw     r31,44(r1)
100143ec:	7c 3f 0b 78 	mr      r31,r1
100143f0:	90 7f 00 18 	stw     r3,24(r31)
100143f4:	90 9f 00 1c 	stw     r4,28(r31)
100143f8:	90 bf 00 20 	stw     r5,32(r31)
    const char* p;

    for ( p = pattern; p - pattern < patternlen; ++p, ++string )
100143fc:	81 3f 00 18 	lwz     r9,24(r31)
10014400:	91 3f 00 08 	stw     r9,8(r31)
10014404:	48 00 01 48 	b       1001454c <match_one+0x170>
	{
	if ( *p == '?' && *string != '\0' )
10014408:	81 3f 00 08 	lwz     r9,8(r31)
1001440c:	89 29 00 00 	lbz     r9,0(r9)
10014410:	55 29 06 3e 	clrlwi  r9,r9,24
10014414:	2b 89 00 3f 	cmplwi  cr7,r9,63
10014418:	40 9e 00 1c 	bne     cr7,10014434 <match_one+0x58>
1001441c:	81 3f 00 20 	lwz     r9,32(r31)
10014420:	89 29 00 00 	lbz     r9,0(r9)
10014424:	55 29 06 3e 	clrlwi  r9,r9,24
10014428:	2f 89 00 00 	cmpwi   cr7,r9,0
1001442c:	41 9e 00 08 	beq     cr7,10014434 <match_one+0x58>
	    continue;
10014430:	48 00 01 04 	b       10014534 <match_one+0x158>
	if ( *p == '*' )
10014434:	81 3f 00 08 	lwz     r9,8(r31)
10014438:	89 29 00 00 	lbz     r9,0(r9)
1001443c:	55 29 06 3e 	clrlwi  r9,r9,24
10014440:	2b 89 00 2a 	cmplwi  cr7,r9,42
10014444:	40 9e 00 c8 	bne     cr7,1001450c <match_one+0x130>
	    {
	    int i, pl;
	    ++p;
10014448:	81 3f 00 08 	lwz     r9,8(r31)
1001444c:	39 29 00 01 	addi    r9,r9,1
10014450:	91 3f 00 08 	stw     r9,8(r31)
	    if ( *p == '*' )
10014454:	81 3f 00 08 	lwz     r9,8(r31)
10014458:	89 29 00 00 	lbz     r9,0(r9)
1001445c:	55 29 06 3e 	clrlwi  r9,r9,24
10014460:	2b 89 00 2a 	cmplwi  cr7,r9,42
10014464:	40 9e 00 24 	bne     cr7,10014488 <match_one+0xac>
		{
		/* Double-wildcard matches anything. */
		++p;
10014468:	81 3f 00 08 	lwz     r9,8(r31)
1001446c:	39 29 00 01 	addi    r9,r9,1
10014470:	91 3f 00 08 	stw     r9,8(r31)
		i = strlen( string );
10014474:	80 7f 00 20 	lwz     r3,32(r31)
10014478:	48 01 91 dd 	bl      1002d654 <strlen@plt>
1001447c:	7c 69 1b 78 	mr      r9,r3
10014480:	91 3f 00 0c 	stw     r9,12(r31)
10014484:	48 00 00 1c 	b       100144a0 <match_one+0xc4>
		}
	    else
		/* Single-wildcard matches anything but slash. */
		i = strcspn( string, "/" );
10014488:	80 7f 00 20 	lwz     r3,32(r31)
1001448c:	3d 20 10 02 	lis     r9,4098
10014490:	38 89 b3 c4 	addi    r4,r9,-19516
10014494:	48 01 8f 61 	bl      1002d3f4 <strcspn@plt>
10014498:	7c 69 1b 78 	mr      r9,r3
1001449c:	91 3f 00 0c 	stw     r9,12(r31)
	    pl = patternlen - ( p - pattern );
100144a0:	81 5f 00 18 	lwz     r10,24(r31)
100144a4:	81 3f 00 08 	lwz     r9,8(r31)
100144a8:	7d 49 50 50 	subf    r10,r9,r10
100144ac:	81 3f 00 1c 	lwz     r9,28(r31)
100144b0:	7d 2a 4a 14 	add     r9,r10,r9
100144b4:	91 3f 00 10 	stw     r9,16(r31)
	    for ( ; i >= 0; --i )
100144b8:	48 00 00 40 	b       100144f8 <match_one+0x11c>
		if ( match_one( p, pl, &(string[i]) ) )
100144bc:	81 3f 00 0c 	lwz     r9,12(r31)
100144c0:	81 5f 00 20 	lwz     r10,32(r31)
100144c4:	7d 2a 4a 14 	add     r9,r10,r9
100144c8:	80 7f 00 08 	lwz     r3,8(r31)
100144cc:	80 9f 00 10 	lwz     r4,16(r31)
100144d0:	7d 25 4b 78 	mr      r5,r9
100144d4:	4b ff ff 09 	bl      100143dc <match_one>
100144d8:	7c 69 1b 78 	mr      r9,r3
100144dc:	2f 89 00 00 	cmpwi   cr7,r9,0
100144e0:	41 9e 00 0c 	beq     cr7,100144ec <match_one+0x110>
		    return 1;
100144e4:	39 20 00 01 	li      r9,1
100144e8:	48 00 00 9c 	b       10014584 <match_one+0x1a8>
		}
	    else
		/* Single-wildcard matches anything but slash. */
		i = strcspn( string, "/" );
	    pl = patternlen - ( p - pattern );
	    for ( ; i >= 0; --i )
100144ec:	81 3f 00 0c 	lwz     r9,12(r31)
100144f0:	39 29 ff ff 	addi    r9,r9,-1
100144f4:	91 3f 00 0c 	stw     r9,12(r31)
100144f8:	81 3f 00 0c 	lwz     r9,12(r31)
100144fc:	2f 89 00 00 	cmpwi   cr7,r9,0
10014500:	40 9c ff bc 	bge     cr7,100144bc <match_one+0xe0>
		if ( match_one( p, pl, &(string[i]) ) )
		    return 1;
	    return 0;
10014504:	39 20 00 00 	li      r9,0
10014508:	48 00 00 7c 	b       10014584 <match_one+0x1a8>
	    }
	if ( *p != *string )
1001450c:	81 3f 00 08 	lwz     r9,8(r31)
10014510:	89 29 00 00 	lbz     r9,0(r9)
10014514:	55 2a 06 3e 	clrlwi  r10,r9,24
10014518:	81 3f 00 20 	lwz     r9,32(r31)
1001451c:	89 29 00 00 	lbz     r9,0(r9)
10014520:	55 29 06 3e 	clrlwi  r9,r9,24
10014524:	7f 8a 48 40 	cmplw   cr7,r10,r9
10014528:	41 9e 00 0c 	beq     cr7,10014534 <match_one+0x158>
	    return 0;
1001452c:	39 20 00 00 	li      r9,0
10014530:	48 00 00 54 	b       10014584 <match_one+0x1a8>
static int
match_one( const char* pattern, int patternlen, const char* string )
    {
    const char* p;

    for ( p = pattern; p - pattern < patternlen; ++p, ++string )
10014534:	81 3f 00 08 	lwz     r9,8(r31)
10014538:	39 29 00 01 	addi    r9,r9,1
1001453c:	91 3f 00 08 	stw     r9,8(r31)
10014540:	81 3f 00 20 	lwz     r9,32(r31)
10014544:	39 29 00 01 	addi    r9,r9,1
10014548:	91 3f 00 20 	stw     r9,32(r31)
1001454c:	81 5f 00 08 	lwz     r10,8(r31)
10014550:	81 3f 00 18 	lwz     r9,24(r31)
10014554:	7d 49 50 50 	subf    r10,r9,r10
10014558:	81 3f 00 1c 	lwz     r9,28(r31)
1001455c:	7f 8a 48 00 	cmpw    cr7,r10,r9
10014560:	41 9c fe a8 	blt     cr7,10014408 <match_one+0x2c>
	    return 0;
	    }
	if ( *p != *string )
	    return 0;
	}
    if ( *string == '\0' )
10014564:	81 3f 00 20 	lwz     r9,32(r31)
10014568:	89 29 00 00 	lbz     r9,0(r9)
1001456c:	55 29 06 3e 	clrlwi  r9,r9,24
10014570:	2f 89 00 00 	cmpwi   cr7,r9,0
10014574:	40 9e 00 0c 	bne     cr7,10014580 <match_one+0x1a4>
	return 1;
10014578:	39 20 00 01 	li      r9,1
1001457c:	48 00 00 08 	b       10014584 <match_one+0x1a8>
    return 0;
10014580:	39 20 00 00 	li      r9,0
    }
10014584:	7d 23 4b 78 	mr      r3,r9
10014588:	39 7f 00 30 	addi    r11,r31,48
1001458c:	80 0b 00 04 	lwz     r0,4(r11)
10014590:	7c 08 03 a6 	mtlr    r0
10014594:	83 eb ff fc 	lwz     r31,-4(r11)
10014598:	7d 61 5b 78 	mr      r1,r11
1001459c:	4e 80 00 20 	blr

100145a0 <pound_case>:
    };


static void
pound_case( char* str )
    {
100145a0:	94 21 ff e0 	stwu    r1,-32(r1)
100145a4:	7c 08 02 a6 	mflr    r0
100145a8:	90 01 00 24 	stw     r0,36(r1)
100145ac:	93 e1 00 1c 	stw     r31,28(r1)
100145b0:	7c 3f 0b 78 	mr      r31,r1
100145b4:	90 7f 00 08 	stw     r3,8(r31)
    for ( ; *str != '\0'; ++str )
100145b8:	48 00 00 68 	b       10014620 <pound_case+0x80>
	{
	if ( isupper( (int) *str ) )
100145bc:	48 01 92 71 	bl      1002d82c <__ctype_b_loc@plt>
100145c0:	7c 69 1b 78 	mr      r9,r3
100145c4:	81 49 00 00 	lwz     r10,0(r9)
100145c8:	81 3f 00 08 	lwz     r9,8(r31)
100145cc:	89 29 00 00 	lbz     r9,0(r9)
100145d0:	55 29 06 3e 	clrlwi  r9,r9,24
100145d4:	55 29 08 3c 	rlwinm  r9,r9,1,0,30
100145d8:	7d 2a 4a 14 	add     r9,r10,r9
100145dc:	a1 29 00 00 	lhz     r9,0(r9)
100145e0:	55 29 04 3e 	clrlwi  r9,r9,16
100145e4:	55 29 07 fe 	clrlwi  r9,r9,31
100145e8:	2f 89 00 00 	cmpwi   cr7,r9,0
100145ec:	41 9e 00 28 	beq     cr7,10014614 <pound_case+0x74>
	    *str = tolower( (int) *str );
100145f0:	81 3f 00 08 	lwz     r9,8(r31)
100145f4:	89 29 00 00 	lbz     r9,0(r9)
100145f8:	55 29 06 3e 	clrlwi  r9,r9,24
100145fc:	7d 23 4b 78 	mr      r3,r9
10014600:	48 01 8e 65 	bl      1002d464 <tolower@plt>
10014604:	7c 69 1b 78 	mr      r9,r3
10014608:	55 2a 06 3e 	clrlwi  r10,r9,24
1001460c:	81 3f 00 08 	lwz     r9,8(r31)
10014610:	99 49 00 00 	stb     r10,0(r9)


static void
pound_case( char* str )
    {
    for ( ; *str != '\0'; ++str )
10014614:	81 3f 00 08 	lwz     r9,8(r31)
10014618:	39 29 00 01 	addi    r9,r9,1
1001461c:	91 3f 00 08 	stw     r9,8(r31)
10014620:	81 3f 00 08 	lwz     r9,8(r31)
10014624:	89 29 00 00 	lbz     r9,0(r9)
10014628:	55 29 06 3e 	clrlwi  r9,r9,24
1001462c:	2f 89 00 00 	cmpwi   cr7,r9,0
10014630:	40 9e ff 8c 	bne     cr7,100145bc <pound_case+0x1c>
	{
	if ( isupper( (int) *str ) )
	    *str = tolower( (int) *str );
	}
    }
10014634:	39 7f 00 20 	addi    r11,r31,32
10014638:	80 0b 00 04 	lwz     r0,4(r11)
1001463c:	7c 08 03 a6 	mtlr    r0
10014640:	83 eb ff fc 	lwz     r31,-4(r11)
10014644:	7d 61 5b 78 	mr      r1,r11
10014648:	4e 80 00 20 	blr

1001464c <strlong_compare>:


static int
strlong_compare( const void* v1, const void* v2 )
    {
1001464c:	94 21 ff d0 	stwu    r1,-48(r1)
10014650:	7c 08 02 a6 	mflr    r0
10014654:	90 01 00 34 	stw     r0,52(r1)
10014658:	93 e1 00 2c 	stw     r31,44(r1)
1001465c:	7c 3f 0b 78 	mr      r31,r1
10014660:	90 7f 00 18 	stw     r3,24(r31)
10014664:	90 9f 00 1c 	stw     r4,28(r31)
    const struct strlong* s1 = (const struct strlong*) v1;
10014668:	81 3f 00 18 	lwz     r9,24(r31)
1001466c:	91 3f 00 08 	stw     r9,8(r31)
    const struct strlong* s2 = (const struct strlong*) v2;
10014670:	81 3f 00 1c 	lwz     r9,28(r31)
10014674:	91 3f 00 0c 	stw     r9,12(r31)
    return strcmp( s1->s, s2->s );
10014678:	81 3f 00 08 	lwz     r9,8(r31)
1001467c:	81 49 00 00 	lwz     r10,0(r9)
10014680:	81 3f 00 0c 	lwz     r9,12(r31)
10014684:	81 29 00 00 	lwz     r9,0(r9)
10014688:	7d 43 53 78 	mr      r3,r10
1001468c:	7d 24 4b 78 	mr      r4,r9
10014690:	48 01 8d 4d 	bl      1002d3dc <strcmp@plt>
10014694:	7c 69 1b 78 	mr      r9,r3
    }
10014698:	7d 23 4b 78 	mr      r3,r9
1001469c:	39 7f 00 30 	addi    r11,r31,48
100146a0:	80 0b 00 04 	lwz     r0,4(r11)
100146a4:	7c 08 03 a6 	mtlr    r0
100146a8:	83 eb ff fc 	lwz     r31,-4(r11)
100146ac:	7d 61 5b 78 	mr      r1,r11
100146b0:	4e 80 00 20 	blr

100146b4 <strlong_search>:


static int
strlong_search( char* str, struct strlong* tab, int n, long* lP )
    {
100146b4:	94 21 ff d0 	stwu    r1,-48(r1)
100146b8:	7c 08 02 a6 	mflr    r0
100146bc:	90 01 00 34 	stw     r0,52(r1)
100146c0:	93 e1 00 2c 	stw     r31,44(r1)
100146c4:	7c 3f 0b 78 	mr      r31,r1
100146c8:	90 7f 00 18 	stw     r3,24(r31)
100146cc:	90 9f 00 1c 	stw     r4,28(r31)
100146d0:	90 bf 00 20 	stw     r5,32(r31)
100146d4:	90 df 00 24 	stw     r6,36(r31)
    int i, h, l, r;

    l = 0;
100146d8:	39 20 00 00 	li      r9,0
100146dc:	91 3f 00 0c 	stw     r9,12(r31)
    h = n - 1;
100146e0:	81 3f 00 20 	lwz     r9,32(r31)
100146e4:	39 29 ff ff 	addi    r9,r9,-1
100146e8:	91 3f 00 08 	stw     r9,8(r31)
    for (;;)
	{
	i = ( h + l ) / 2;
100146ec:	81 5f 00 08 	lwz     r10,8(r31)
100146f0:	81 3f 00 0c 	lwz     r9,12(r31)
100146f4:	7d 2a 4a 14 	add     r9,r10,r9
100146f8:	7d 29 0e 70 	srawi   r9,r9,1
100146fc:	7d 29 01 94 	addze   r9,r9
10014700:	91 3f 00 10 	stw     r9,16(r31)
	r = strcmp( str, tab[i].s );
10014704:	81 3f 00 10 	lwz     r9,16(r31)
10014708:	55 29 18 38 	rlwinm  r9,r9,3,0,28
1001470c:	81 5f 00 1c 	lwz     r10,28(r31)
10014710:	7d 2a 4a 14 	add     r9,r10,r9
10014714:	81 29 00 00 	lwz     r9,0(r9)
10014718:	80 7f 00 18 	lwz     r3,24(r31)
1001471c:	7d 24 4b 78 	mr      r4,r9
10014720:	48 01 8c bd 	bl      1002d3dc <strcmp@plt>
10014724:	90 7f 00 14 	stw     r3,20(r31)
	if ( r < 0 )
10014728:	81 3f 00 14 	lwz     r9,20(r31)
1001472c:	2f 89 00 00 	cmpwi   cr7,r9,0
10014730:	40 9c 00 14 	bge     cr7,10014744 <strlong_search+0x90>
	    h = i - 1;
10014734:	81 3f 00 10 	lwz     r9,16(r31)
10014738:	39 29 ff ff 	addi    r9,r9,-1
1001473c:	91 3f 00 08 	stw     r9,8(r31)
10014740:	48 00 00 44 	b       10014784 <strlong_search+0xd0>
	else if ( r > 0 )
10014744:	81 3f 00 14 	lwz     r9,20(r31)
10014748:	2f 89 00 00 	cmpwi   cr7,r9,0
1001474c:	40 9d 00 14 	ble     cr7,10014760 <strlong_search+0xac>
	    l = i + 1;
10014750:	81 3f 00 10 	lwz     r9,16(r31)
10014754:	39 29 00 01 	addi    r9,r9,1
10014758:	91 3f 00 0c 	stw     r9,12(r31)
1001475c:	48 00 00 28 	b       10014784 <strlong_search+0xd0>
	else
	    {
	    *lP = tab[i].l;
10014760:	81 3f 00 10 	lwz     r9,16(r31)
10014764:	55 29 18 38 	rlwinm  r9,r9,3,0,28
10014768:	81 5f 00 1c 	lwz     r10,28(r31)
1001476c:	7d 2a 4a 14 	add     r9,r10,r9
10014770:	81 49 00 04 	lwz     r10,4(r9)
10014774:	81 3f 00 24 	lwz     r9,36(r31)
10014778:	91 49 00 00 	stw     r10,0(r9)
	    return 1;
1001477c:	39 20 00 01 	li      r9,1
10014780:	48 00 00 20 	b       100147a0 <strlong_search+0xec>
	    }
	if ( h < l )
10014784:	81 5f 00 08 	lwz     r10,8(r31)
10014788:	81 3f 00 0c 	lwz     r9,12(r31)
1001478c:	7f 8a 48 00 	cmpw    cr7,r10,r9
10014790:	40 9c 00 0c 	bge     cr7,1001479c <strlong_search+0xe8>
	    return 0;
10014794:	39 20 00 00 	li      r9,0
10014798:	48 00 00 08 	b       100147a0 <strlong_search+0xec>
	}
1001479c:	4b ff ff 50 	b       100146ec <strlong_search+0x38>
    }
100147a0:	7d 23 4b 78 	mr      r3,r9
100147a4:	39 7f 00 30 	addi    r11,r31,48
100147a8:	80 0b 00 04 	lwz     r0,4(r11)
100147ac:	7c 08 03 a6 	mtlr    r0
100147b0:	83 eb ff fc 	lwz     r31,-4(r11)
100147b4:	7d 61 5b 78 	mr      r1,r11
100147b8:	4e 80 00 20 	blr

100147bc <scan_wday>:


static int
scan_wday( char* str_wday, long* tm_wdayP )
    {
100147bc:	94 21 ff e0 	stwu    r1,-32(r1)
100147c0:	7c 08 02 a6 	mflr    r0
100147c4:	90 01 00 24 	stw     r0,36(r1)
100147c8:	93 e1 00 1c 	stw     r31,28(r1)
100147cc:	7c 3f 0b 78 	mr      r31,r1
100147d0:	90 7f 00 08 	stw     r3,8(r31)
100147d4:	90 9f 00 0c 	stw     r4,12(r31)
	{ "fri", 5 }, { "friday", 5 },
	{ "sat", 6 }, { "saturday", 6 },
	};
    static int sorted = 0;

    if ( ! sorted )
100147d8:	3d 20 10 03 	lis     r9,4099
100147dc:	81 29 df cc 	lwz     r9,-8244(r9)
100147e0:	2f 89 00 00 	cmpwi   cr7,r9,0
100147e4:	40 9e 00 2c 	bne     cr7,10014810 <scan_wday+0x54>
	{
	(void) qsort(
100147e8:	3d 20 10 03 	lis     r9,4099
100147ec:	38 69 d1 cc 	addi    r3,r9,-11828
100147f0:	38 80 00 0e 	li      r4,14
100147f4:	38 a0 00 08 	li      r5,8
100147f8:	3d 20 10 01 	lis     r9,4097
100147fc:	38 c9 46 4c 	addi    r6,r9,17996
10014800:	48 01 8f d5 	bl      1002d7d4 <qsort@plt>
	    wday_tab, sizeof(wday_tab)/sizeof(struct strlong),
	    sizeof(struct strlong), strlong_compare );
	sorted = 1;
10014804:	3d 20 10 03 	lis     r9,4099
10014808:	39 40 00 01 	li      r10,1
1001480c:	91 49 df cc 	stw     r10,-8244(r9)
	}
    pound_case( str_wday );
10014810:	80 7f 00 08 	lwz     r3,8(r31)
10014814:	4b ff fd 8d 	bl      100145a0 <pound_case>
    return strlong_search(
10014818:	80 7f 00 08 	lwz     r3,8(r31)
1001481c:	3d 20 10 03 	lis     r9,4099
10014820:	38 89 d1 cc 	addi    r4,r9,-11828
10014824:	38 a0 00 0e 	li      r5,14
10014828:	80 df 00 0c 	lwz     r6,12(r31)
1001482c:	4b ff fe 89 	bl      100146b4 <strlong_search>
10014830:	7c 69 1b 78 	mr      r9,r3
	str_wday, wday_tab, sizeof(wday_tab)/sizeof(struct strlong), tm_wdayP );
    }
10014834:	7d 23 4b 78 	mr      r3,r9
10014838:	39 7f 00 20 	addi    r11,r31,32
1001483c:	80 0b 00 04 	lwz     r0,4(r11)
10014840:	7c 08 03 a6 	mtlr    r0
10014844:	83 eb ff fc 	lwz     r31,-4(r11)
10014848:	7d 61 5b 78 	mr      r1,r11
1001484c:	4e 80 00 20 	blr

10014850 <scan_mon>:


static int
scan_mon( char* str_mon, long* tm_monP )
    {
10014850:	94 21 ff e0 	stwu    r1,-32(r1)
10014854:	7c 08 02 a6 	mflr    r0
10014858:	90 01 00 24 	stw     r0,36(r1)
1001485c:	93 e1 00 1c 	stw     r31,28(r1)
10014860:	7c 3f 0b 78 	mr      r31,r1
10014864:	90 7f 00 08 	stw     r3,8(r31)
10014868:	90 9f 00 0c 	stw     r4,12(r31)
	{ "nov", 10 }, { "november", 10 },
	{ "dec", 11 }, { "december", 11 },
	};
    static int sorted = 0;

    if ( ! sorted )
1001486c:	3d 20 10 03 	lis     r9,4099
10014870:	81 29 df d0 	lwz     r9,-8240(r9)
10014874:	2f 89 00 00 	cmpwi   cr7,r9,0
10014878:	40 9e 00 2c 	bne     cr7,100148a4 <scan_mon+0x54>
	{
	(void) qsort(
1001487c:	3d 20 10 03 	lis     r9,4099
10014880:	38 69 d2 3c 	addi    r3,r9,-11716
10014884:	38 80 00 17 	li      r4,23
10014888:	38 a0 00 08 	li      r5,8
1001488c:	3d 20 10 01 	lis     r9,4097
10014890:	38 c9 46 4c 	addi    r6,r9,17996
10014894:	48 01 8f 41 	bl      1002d7d4 <qsort@plt>
	    mon_tab, sizeof(mon_tab)/sizeof(struct strlong),
	    sizeof(struct strlong), strlong_compare );
	sorted = 1;
10014898:	3d 20 10 03 	lis     r9,4099
1001489c:	39 40 00 01 	li      r10,1
100148a0:	91 49 df d0 	stw     r10,-8240(r9)
	}
    pound_case( str_mon );
100148a4:	80 7f 00 08 	lwz     r3,8(r31)
100148a8:	4b ff fc f9 	bl      100145a0 <pound_case>
    return strlong_search(
100148ac:	80 7f 00 08 	lwz     r3,8(r31)
100148b0:	3d 20 10 03 	lis     r9,4099
100148b4:	38 89 d2 3c 	addi    r4,r9,-11716
100148b8:	38 a0 00 17 	li      r5,23
100148bc:	80 df 00 0c 	lwz     r6,12(r31)
100148c0:	4b ff fd f5 	bl      100146b4 <strlong_search>
100148c4:	7c 69 1b 78 	mr      r9,r3
	str_mon, mon_tab, sizeof(mon_tab)/sizeof(struct strlong), tm_monP );
    }
100148c8:	7d 23 4b 78 	mr      r3,r9
100148cc:	39 7f 00 20 	addi    r11,r31,32
100148d0:	80 0b 00 04 	lwz     r0,4(r11)
100148d4:	7c 08 03 a6 	mtlr    r0
100148d8:	83 eb ff fc 	lwz     r31,-4(r11)
100148dc:	7d 61 5b 78 	mr      r1,r11
100148e0:	4e 80 00 20 	blr

100148e4 <is_leap>:


static int
is_leap( int year )
    {
100148e4:	94 21 ff e0 	stwu    r1,-32(r1)
100148e8:	93 e1 00 1c 	stw     r31,28(r1)
100148ec:	7c 3f 0b 78 	mr      r31,r1
100148f0:	90 7f 00 08 	stw     r3,8(r31)
    return year % 400? ( year % 100 ? ( year % 4 ? 0 : 1 ) : 0 ) : 1;
100148f4:	81 5f 00 08 	lwz     r10,8(r31)
100148f8:	3d 20 51 eb 	lis     r9,20971
100148fc:	61 29 85 1f 	ori     r9,r9,34079
10014900:	7d 2a 48 96 	mulhw   r9,r10,r9
10014904:	7d 28 3e 70 	srawi   r8,r9,7
10014908:	7d 49 fe 70 	srawi   r9,r10,31
1001490c:	7d 29 40 50 	subf    r9,r9,r8
10014910:	1d 29 01 90 	mulli   r9,r9,400
10014914:	7d 29 50 50 	subf    r9,r9,r10
10014918:	2f 89 00 00 	cmpwi   cr7,r9,0
1001491c:	41 9e 00 40 	beq     cr7,1001495c <is_leap+0x78>
10014920:	81 5f 00 08 	lwz     r10,8(r31)
10014924:	3d 20 51 eb 	lis     r9,20971
10014928:	61 29 85 1f 	ori     r9,r9,34079
1001492c:	7d 2a 48 96 	mulhw   r9,r10,r9
10014930:	7d 28 2e 70 	srawi   r8,r9,5
10014934:	7d 49 fe 70 	srawi   r9,r10,31
10014938:	7d 29 40 50 	subf    r9,r9,r8
1001493c:	1d 29 00 64 	mulli   r9,r9,100
10014940:	7d 29 50 50 	subf    r9,r9,r10
10014944:	2f 89 00 00 	cmpwi   cr7,r9,0
10014948:	41 9e 00 1c 	beq     cr7,10014964 <is_leap+0x80>
1001494c:	81 3f 00 08 	lwz     r9,8(r31)
10014950:	55 29 07 be 	clrlwi  r9,r9,30
10014954:	2f 89 00 00 	cmpwi   cr7,r9,0
10014958:	40 9e 00 0c 	bne     cr7,10014964 <is_leap+0x80>
1001495c:	39 20 00 01 	li      r9,1
10014960:	48 00 00 08 	b       10014968 <is_leap+0x84>
10014964:	39 20 00 00 	li      r9,0
    }
10014968:	7d 23 4b 78 	mr      r3,r9
1001496c:	39 7f 00 20 	addi    r11,r31,32
10014970:	83 eb ff fc 	lwz     r31,-4(r11)
10014974:	7d 61 5b 78 	mr      r1,r11
10014978:	4e 80 00 20 	blr

1001497c <tm_to_time>:


/* Basically the same as mktime(). */
static time_t
tm_to_time( struct tm* tmP )
    {
1001497c:	94 21 ff d0 	stwu    r1,-48(r1)
10014980:	7c 08 02 a6 	mflr    r0
10014984:	90 01 00 34 	stw     r0,52(r1)
10014988:	93 e1 00 2c 	stw     r31,44(r1)
1001498c:	7c 3f 0b 78 	mr      r31,r1
10014990:	90 7f 00 18 	stw     r3,24(r31)
    time_t t;
    static int monthtab[12] = {
	0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334 };

    /* Years since epoch, converted to days. */
    t = ( tmP->tm_year - 70 ) * 365;
10014994:	81 3f 00 18 	lwz     r9,24(r31)
10014998:	81 29 00 14 	lwz     r9,20(r9)
1001499c:	39 29 ff ba 	addi    r9,r9,-70
100149a0:	1d 29 01 6d 	mulli   r9,r9,365
100149a4:	91 3f 00 08 	stw     r9,8(r31)
    /* Leap days for previous years - this will break in 2100! */
    t += ( tmP->tm_year - 69 ) / 4;
100149a8:	81 3f 00 18 	lwz     r9,24(r31)
100149ac:	81 29 00 14 	lwz     r9,20(r9)
100149b0:	39 29 ff bb 	addi    r9,r9,-69
100149b4:	7d 29 16 70 	srawi   r9,r9,2
100149b8:	7d 29 01 94 	addze   r9,r9
100149bc:	81 5f 00 08 	lwz     r10,8(r31)
100149c0:	7d 2a 4a 14 	add     r9,r10,r9
100149c4:	91 3f 00 08 	stw     r9,8(r31)
    /* Days for the beginning of this month. */
    t += monthtab[tmP->tm_mon];
100149c8:	81 3f 00 18 	lwz     r9,24(r31)
100149cc:	81 29 00 10 	lwz     r9,16(r9)
100149d0:	3d 40 10 03 	lis     r10,4099
100149d4:	39 4a d2 f4 	addi    r10,r10,-11532
100149d8:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
100149dc:	7d 2a 4a 14 	add     r9,r10,r9
100149e0:	81 29 00 00 	lwz     r9,0(r9)
100149e4:	81 5f 00 08 	lwz     r10,8(r31)
100149e8:	7d 2a 4a 14 	add     r9,r10,r9
100149ec:	91 3f 00 08 	stw     r9,8(r31)
    /* Leap day for this year. */
    if ( tmP->tm_mon >= 2 && is_leap( tmP->tm_year + 1900 ) )
100149f0:	81 3f 00 18 	lwz     r9,24(r31)
100149f4:	81 29 00 10 	lwz     r9,16(r9)
100149f8:	2f 89 00 01 	cmpwi   cr7,r9,1
100149fc:	40 9d 00 30 	ble     cr7,10014a2c <tm_to_time+0xb0>
10014a00:	81 3f 00 18 	lwz     r9,24(r31)
10014a04:	81 29 00 14 	lwz     r9,20(r9)
10014a08:	39 29 07 6c 	addi    r9,r9,1900
10014a0c:	7d 23 4b 78 	mr      r3,r9
10014a10:	4b ff fe d5 	bl      100148e4 <is_leap>
10014a14:	7c 69 1b 78 	mr      r9,r3
10014a18:	2f 89 00 00 	cmpwi   cr7,r9,0
10014a1c:	41 9e 00 10 	beq     cr7,10014a2c <tm_to_time+0xb0>
	++t;
10014a20:	81 3f 00 08 	lwz     r9,8(r31)
10014a24:	39 29 00 01 	addi    r9,r9,1
10014a28:	91 3f 00 08 	stw     r9,8(r31)
    /* Days since the beginning of this month. */
    t += tmP->tm_mday - 1;	/* 1-based field */
10014a2c:	81 3f 00 18 	lwz     r9,24(r31)
10014a30:	81 29 00 0c 	lwz     r9,12(r9)
10014a34:	39 29 ff ff 	addi    r9,r9,-1
10014a38:	81 5f 00 08 	lwz     r10,8(r31)
10014a3c:	7d 2a 4a 14 	add     r9,r10,r9
10014a40:	91 3f 00 08 	stw     r9,8(r31)
    /* Hours, minutes, and seconds. */
    t = t * 24 + tmP->tm_hour;
10014a44:	81 3f 00 08 	lwz     r9,8(r31)
10014a48:	1d 49 00 18 	mulli   r10,r9,24
10014a4c:	81 3f 00 18 	lwz     r9,24(r31)
10014a50:	81 29 00 08 	lwz     r9,8(r9)
10014a54:	7d 2a 4a 14 	add     r9,r10,r9
10014a58:	91 3f 00 08 	stw     r9,8(r31)
    t = t * 60 + tmP->tm_min;
10014a5c:	81 3f 00 08 	lwz     r9,8(r31)
10014a60:	1d 49 00 3c 	mulli   r10,r9,60
10014a64:	81 3f 00 18 	lwz     r9,24(r31)
10014a68:	81 29 00 04 	lwz     r9,4(r9)
10014a6c:	7d 2a 4a 14 	add     r9,r10,r9
10014a70:	91 3f 00 08 	stw     r9,8(r31)
    t = t * 60 + tmP->tm_sec;
10014a74:	81 3f 00 08 	lwz     r9,8(r31)
10014a78:	1d 49 00 3c 	mulli   r10,r9,60
10014a7c:	81 3f 00 18 	lwz     r9,24(r31)
10014a80:	81 29 00 00 	lwz     r9,0(r9)
10014a84:	7d 2a 4a 14 	add     r9,r10,r9
10014a88:	91 3f 00 08 	stw     r9,8(r31)

    return t;
10014a8c:	81 3f 00 08 	lwz     r9,8(r31)
    }
10014a90:	7d 23 4b 78 	mr      r3,r9
10014a94:	39 7f 00 30 	addi    r11,r31,48
10014a98:	80 0b 00 04 	lwz     r0,4(r11)
10014a9c:	7c 08 03 a6 	mtlr    r0
10014aa0:	83 eb ff fc 	lwz     r31,-4(r11)
10014aa4:	7d 61 5b 78 	mr      r1,r11
10014aa8:	4e 80 00 20 	blr

10014aac <tdate_parse>:


time_t
tdate_parse( char* str )
    {
10014aac:	94 21 fb a0 	stwu    r1,-1120(r1)
10014ab0:	7c 08 02 a6 	mflr    r0
10014ab4:	90 01 04 64 	stw     r0,1124(r1)
10014ab8:	93 e1 04 5c 	stw     r31,1116(r1)
10014abc:	7c 3f 0b 78 	mr      r31,r1
10014ac0:	90 7f 04 50 	stw     r3,1104(r31)
    int tm_sec, tm_min, tm_hour, tm_mday, tm_year;
    long tm_mon, tm_wday;
    time_t t;

    /* Initialize. */
    (void) memset( (char*) &tm, 0, sizeof(struct tm) );
10014ac4:	39 3f 00 18 	addi    r9,r31,24
10014ac8:	7d 23 4b 78 	mr      r3,r9
10014acc:	38 80 00 00 	li      r4,0
10014ad0:	38 a0 00 2c 	li      r5,44
10014ad4:	48 01 8b f1 	bl      1002d6c4 <memset@plt>

    /* Skip initial whitespace ourselves - sscanf is clumsy at this. */
    for ( cp = str; *cp == ' ' || *cp == '\t'; ++cp )
10014ad8:	81 3f 04 50 	lwz     r9,1104(r31)
10014adc:	91 3f 00 10 	stw     r9,16(r31)
10014ae0:	48 00 00 10 	b       10014af0 <tdate_parse+0x44>
10014ae4:	81 3f 00 10 	lwz     r9,16(r31)
10014ae8:	39 29 00 01 	addi    r9,r9,1
10014aec:	91 3f 00 10 	stw     r9,16(r31)
10014af0:	81 3f 00 10 	lwz     r9,16(r31)
10014af4:	89 29 00 00 	lbz     r9,0(r9)
10014af8:	55 29 06 3e 	clrlwi  r9,r9,24
10014afc:	2b 89 00 20 	cmplwi  cr7,r9,32
10014b00:	41 9e ff e4 	beq     cr7,10014ae4 <tdate_parse+0x38>
10014b04:	81 3f 00 10 	lwz     r9,16(r31)
10014b08:	89 29 00 00 	lbz     r9,0(r9)
10014b0c:	55 29 06 3e 	clrlwi  r9,r9,24
10014b10:	2b 89 00 09 	cmplwi  cr7,r9,9
10014b14:	41 9e ff d0 	beq     cr7,10014ae4 <tdate_parse+0x38>
    ** but be careful!  You can easily screw up the parsing of existing
    ** formats when you add new ones.  The order is important.
    */

    /* DD-mth-YY HH:MM:SS GMT */
    if ( sscanf( cp, "%d-%400[a-zA-Z]-%d %d:%d:%d GMT",
10014b18:	38 bf 04 38 	addi    r5,r31,1080
10014b1c:	38 df 00 44 	addi    r6,r31,68
10014b20:	38 ff 04 3c 	addi    r7,r31,1084
10014b24:	39 1f 04 34 	addi    r8,r31,1076
10014b28:	39 3f 04 30 	addi    r9,r31,1072
10014b2c:	39 5f 04 2c 	addi    r10,r31,1068
10014b30:	80 7f 00 10 	lwz     r3,16(r31)
10014b34:	3c 80 10 02 	lis     r4,4098
10014b38:	38 84 b3 c8 	addi    r4,r4,-19512
10014b3c:	4c c6 31 82 	crclr   4*cr1+eq
10014b40:	48 01 8b 6d 	bl      1002d6ac <__isoc99_sscanf@plt>
10014b44:	7c 69 1b 78 	mr      r9,r3
10014b48:	2f 89 00 06 	cmpwi   cr7,r9,6
10014b4c:	40 9e 00 58 	bne     cr7,10014ba4 <tdate_parse+0xf8>
		&tm_mday, str_mon, &tm_year, &tm_hour, &tm_min,
		&tm_sec ) == 6 &&
	    scan_mon( str_mon, &tm_mon ) )
10014b50:	39 5f 00 44 	addi    r10,r31,68
10014b54:	39 3f 04 40 	addi    r9,r31,1088
10014b58:	7d 43 53 78 	mr      r3,r10
10014b5c:	7d 24 4b 78 	mr      r4,r9
10014b60:	4b ff fc f1 	bl      10014850 <scan_mon>
10014b64:	7c 69 1b 78 	mr      r9,r3
    */

    /* DD-mth-YY HH:MM:SS GMT */
    if ( sscanf( cp, "%d-%400[a-zA-Z]-%d %d:%d:%d GMT",
		&tm_mday, str_mon, &tm_year, &tm_hour, &tm_min,
		&tm_sec ) == 6 &&
10014b68:	2f 89 00 00 	cmpwi   cr7,r9,0
10014b6c:	41 9e 00 38 	beq     cr7,10014ba4 <tdate_parse+0xf8>
	    scan_mon( str_mon, &tm_mon ) )
	{
	tm.tm_mday = tm_mday;
10014b70:	81 3f 04 38 	lwz     r9,1080(r31)
10014b74:	91 3f 00 24 	stw     r9,36(r31)
	tm.tm_mon = tm_mon;
10014b78:	81 3f 04 40 	lwz     r9,1088(r31)
10014b7c:	91 3f 00 28 	stw     r9,40(r31)
	tm.tm_year = tm_year;
10014b80:	81 3f 04 3c 	lwz     r9,1084(r31)
10014b84:	91 3f 00 2c 	stw     r9,44(r31)
	tm.tm_hour = tm_hour;
10014b88:	81 3f 04 34 	lwz     r9,1076(r31)
10014b8c:	91 3f 00 20 	stw     r9,32(r31)
	tm.tm_min = tm_min;
10014b90:	81 3f 04 30 	lwz     r9,1072(r31)
10014b94:	91 3f 00 1c 	stw     r9,28(r31)
	tm.tm_sec = tm_sec;
10014b98:	81 3f 04 2c 	lwz     r9,1068(r31)
10014b9c:	91 3f 00 18 	stw     r9,24(r31)
10014ba0:	48 00 03 e4 	b       10014f84 <tdate_parse+0x4d8>
	}

    /* DD mth YY HH:MM:SS GMT */
    else if ( sscanf( cp, "%d %400[a-zA-Z] %d %d:%d:%d GMT",
10014ba4:	38 bf 04 38 	addi    r5,r31,1080
10014ba8:	38 df 00 44 	addi    r6,r31,68
10014bac:	38 ff 04 3c 	addi    r7,r31,1084
10014bb0:	39 1f 04 34 	addi    r8,r31,1076
10014bb4:	39 3f 04 30 	addi    r9,r31,1072
10014bb8:	39 5f 04 2c 	addi    r10,r31,1068
10014bbc:	80 7f 00 10 	lwz     r3,16(r31)
10014bc0:	3c 80 10 02 	lis     r4,4098
10014bc4:	38 84 b3 e8 	addi    r4,r4,-19480
10014bc8:	4c c6 31 82 	crclr   4*cr1+eq
10014bcc:	48 01 8a e1 	bl      1002d6ac <__isoc99_sscanf@plt>
10014bd0:	7c 69 1b 78 	mr      r9,r3
10014bd4:	2f 89 00 06 	cmpwi   cr7,r9,6
10014bd8:	40 9e 00 58 	bne     cr7,10014c30 <tdate_parse+0x184>
		&tm_mday, str_mon, &tm_year, &tm_hour, &tm_min,
		&tm_sec) == 6 &&
	    scan_mon( str_mon, &tm_mon ) )
10014bdc:	39 5f 00 44 	addi    r10,r31,68
10014be0:	39 3f 04 40 	addi    r9,r31,1088
10014be4:	7d 43 53 78 	mr      r3,r10
10014be8:	7d 24 4b 78 	mr      r4,r9
10014bec:	4b ff fc 65 	bl      10014850 <scan_mon>
10014bf0:	7c 69 1b 78 	mr      r9,r3
	}

    /* DD mth YY HH:MM:SS GMT */
    else if ( sscanf( cp, "%d %400[a-zA-Z] %d %d:%d:%d GMT",
		&tm_mday, str_mon, &tm_year, &tm_hour, &tm_min,
		&tm_sec) == 6 &&
10014bf4:	2f 89 00 00 	cmpwi   cr7,r9,0
10014bf8:	41 9e 00 38 	beq     cr7,10014c30 <tdate_parse+0x184>
	    scan_mon( str_mon, &tm_mon ) )
	{
	tm.tm_mday = tm_mday;
10014bfc:	81 3f 04 38 	lwz     r9,1080(r31)
10014c00:	91 3f 00 24 	stw     r9,36(r31)
	tm.tm_mon = tm_mon;
10014c04:	81 3f 04 40 	lwz     r9,1088(r31)
10014c08:	91 3f 00 28 	stw     r9,40(r31)
	tm.tm_year = tm_year;
10014c0c:	81 3f 04 3c 	lwz     r9,1084(r31)
10014c10:	91 3f 00 2c 	stw     r9,44(r31)
	tm.tm_hour = tm_hour;
10014c14:	81 3f 04 34 	lwz     r9,1076(r31)
10014c18:	91 3f 00 20 	stw     r9,32(r31)
	tm.tm_min = tm_min;
10014c1c:	81 3f 04 30 	lwz     r9,1072(r31)
10014c20:	91 3f 00 1c 	stw     r9,28(r31)
	tm.tm_sec = tm_sec;
10014c24:	81 3f 04 2c 	lwz     r9,1068(r31)
10014c28:	91 3f 00 18 	stw     r9,24(r31)
10014c2c:	48 00 03 58 	b       10014f84 <tdate_parse+0x4d8>
	}

    /* HH:MM:SS GMT DD-mth-YY */
    else if ( sscanf( cp, "%d:%d:%d GMT %d-%400[a-zA-Z]-%d",
10014c30:	38 bf 04 34 	addi    r5,r31,1076
10014c34:	38 df 04 30 	addi    r6,r31,1072
10014c38:	38 ff 04 2c 	addi    r7,r31,1068
10014c3c:	39 1f 04 38 	addi    r8,r31,1080
10014c40:	39 3f 00 44 	addi    r9,r31,68
10014c44:	39 5f 04 3c 	addi    r10,r31,1084
10014c48:	80 7f 00 10 	lwz     r3,16(r31)
10014c4c:	3c 80 10 02 	lis     r4,4098
10014c50:	38 84 b4 08 	addi    r4,r4,-19448
10014c54:	4c c6 31 82 	crclr   4*cr1+eq
10014c58:	48 01 8a 55 	bl      1002d6ac <__isoc99_sscanf@plt>
10014c5c:	7c 69 1b 78 	mr      r9,r3
10014c60:	2f 89 00 06 	cmpwi   cr7,r9,6
10014c64:	40 9e 00 58 	bne     cr7,10014cbc <tdate_parse+0x210>
		&tm_hour, &tm_min, &tm_sec, &tm_mday, str_mon,
		&tm_year ) == 6 &&
	    scan_mon( str_mon, &tm_mon ) )
10014c68:	39 5f 00 44 	addi    r10,r31,68
10014c6c:	39 3f 04 40 	addi    r9,r31,1088
10014c70:	7d 43 53 78 	mr      r3,r10
10014c74:	7d 24 4b 78 	mr      r4,r9
10014c78:	4b ff fb d9 	bl      10014850 <scan_mon>
10014c7c:	7c 69 1b 78 	mr      r9,r3
	}

    /* HH:MM:SS GMT DD-mth-YY */
    else if ( sscanf( cp, "%d:%d:%d GMT %d-%400[a-zA-Z]-%d",
		&tm_hour, &tm_min, &tm_sec, &tm_mday, str_mon,
		&tm_year ) == 6 &&
10014c80:	2f 89 00 00 	cmpwi   cr7,r9,0
10014c84:	41 9e 00 38 	beq     cr7,10014cbc <tdate_parse+0x210>
	    scan_mon( str_mon, &tm_mon ) )
	{
	tm.tm_hour = tm_hour;
10014c88:	81 3f 04 34 	lwz     r9,1076(r31)
10014c8c:	91 3f 00 20 	stw     r9,32(r31)
	tm.tm_min = tm_min;
10014c90:	81 3f 04 30 	lwz     r9,1072(r31)
10014c94:	91 3f 00 1c 	stw     r9,28(r31)
	tm.tm_sec = tm_sec;
10014c98:	81 3f 04 2c 	lwz     r9,1068(r31)
10014c9c:	91 3f 00 18 	stw     r9,24(r31)
	tm.tm_mday = tm_mday;
10014ca0:	81 3f 04 38 	lwz     r9,1080(r31)
10014ca4:	91 3f 00 24 	stw     r9,36(r31)
	tm.tm_mon = tm_mon;
10014ca8:	81 3f 04 40 	lwz     r9,1088(r31)
10014cac:	91 3f 00 28 	stw     r9,40(r31)
	tm.tm_year = tm_year;
10014cb0:	81 3f 04 3c 	lwz     r9,1084(r31)
10014cb4:	91 3f 00 2c 	stw     r9,44(r31)
10014cb8:	48 00 02 cc 	b       10014f84 <tdate_parse+0x4d8>
	}

    /* HH:MM:SS GMT DD mth YY */
    else if ( sscanf( cp, "%d:%d:%d GMT %d %400[a-zA-Z] %d",
10014cbc:	38 bf 04 34 	addi    r5,r31,1076
10014cc0:	38 df 04 30 	addi    r6,r31,1072
10014cc4:	38 ff 04 2c 	addi    r7,r31,1068
10014cc8:	39 1f 04 38 	addi    r8,r31,1080
10014ccc:	39 3f 00 44 	addi    r9,r31,68
10014cd0:	39 5f 04 3c 	addi    r10,r31,1084
10014cd4:	80 7f 00 10 	lwz     r3,16(r31)
10014cd8:	3c 80 10 02 	lis     r4,4098
10014cdc:	38 84 b4 28 	addi    r4,r4,-19416
10014ce0:	4c c6 31 82 	crclr   4*cr1+eq
10014ce4:	48 01 89 c9 	bl      1002d6ac <__isoc99_sscanf@plt>
10014ce8:	7c 69 1b 78 	mr      r9,r3
10014cec:	2f 89 00 06 	cmpwi   cr7,r9,6
10014cf0:	40 9e 00 58 	bne     cr7,10014d48 <tdate_parse+0x29c>
		&tm_hour, &tm_min, &tm_sec, &tm_mday, str_mon,
		&tm_year ) == 6 &&
	    scan_mon( str_mon, &tm_mon ) )
10014cf4:	39 5f 00 44 	addi    r10,r31,68
10014cf8:	39 3f 04 40 	addi    r9,r31,1088
10014cfc:	7d 43 53 78 	mr      r3,r10
10014d00:	7d 24 4b 78 	mr      r4,r9
10014d04:	4b ff fb 4d 	bl      10014850 <scan_mon>
10014d08:	7c 69 1b 78 	mr      r9,r3
	}

    /* HH:MM:SS GMT DD mth YY */
    else if ( sscanf( cp, "%d:%d:%d GMT %d %400[a-zA-Z] %d",
		&tm_hour, &tm_min, &tm_sec, &tm_mday, str_mon,
		&tm_year ) == 6 &&
10014d0c:	2f 89 00 00 	cmpwi   cr7,r9,0
10014d10:	41 9e 00 38 	beq     cr7,10014d48 <tdate_parse+0x29c>
	    scan_mon( str_mon, &tm_mon ) )
	{
	tm.tm_hour = tm_hour;
10014d14:	81 3f 04 34 	lwz     r9,1076(r31)
10014d18:	91 3f 00 20 	stw     r9,32(r31)
	tm.tm_min = tm_min;
10014d1c:	81 3f 04 30 	lwz     r9,1072(r31)
10014d20:	91 3f 00 1c 	stw     r9,28(r31)
	tm.tm_sec = tm_sec;
10014d24:	81 3f 04 2c 	lwz     r9,1068(r31)
10014d28:	91 3f 00 18 	stw     r9,24(r31)
	tm.tm_mday = tm_mday;
10014d2c:	81 3f 04 38 	lwz     r9,1080(r31)
10014d30:	91 3f 00 24 	stw     r9,36(r31)
	tm.tm_mon = tm_mon;
10014d34:	81 3f 04 40 	lwz     r9,1088(r31)
10014d38:	91 3f 00 28 	stw     r9,40(r31)
	tm.tm_year = tm_year;
10014d3c:	81 3f 04 3c 	lwz     r9,1084(r31)
10014d40:	91 3f 00 2c 	stw     r9,44(r31)
10014d44:	48 00 02 40 	b       10014f84 <tdate_parse+0x4d8>
	}

    /* wdy, DD-mth-YY HH:MM:SS GMT */
    else if ( sscanf( cp, "%400[a-zA-Z], %d-%400[a-zA-Z]-%d %d:%d:%d GMT",
10014d48:	38 bf 02 38 	addi    r5,r31,568
10014d4c:	38 df 04 38 	addi    r6,r31,1080
10014d50:	38 ff 00 44 	addi    r7,r31,68
10014d54:	39 1f 04 3c 	addi    r8,r31,1084
10014d58:	39 3f 04 34 	addi    r9,r31,1076
10014d5c:	39 5f 04 30 	addi    r10,r31,1072
10014d60:	38 9f 04 2c 	addi    r4,r31,1068
10014d64:	90 81 00 08 	stw     r4,8(r1)
10014d68:	80 7f 00 10 	lwz     r3,16(r31)
10014d6c:	3c 80 10 02 	lis     r4,4098
10014d70:	38 84 b4 48 	addi    r4,r4,-19384
10014d74:	4c c6 31 82 	crclr   4*cr1+eq
10014d78:	48 01 89 35 	bl      1002d6ac <__isoc99_sscanf@plt>
10014d7c:	7c 69 1b 78 	mr      r9,r3
10014d80:	2f 89 00 07 	cmpwi   cr7,r9,7
10014d84:	40 9e 00 80 	bne     cr7,10014e04 <tdate_parse+0x358>
		str_wday, &tm_mday, str_mon, &tm_year, &tm_hour, &tm_min,
		&tm_sec ) == 7 &&
	    scan_wday( str_wday, &tm_wday ) &&
10014d88:	39 5f 02 38 	addi    r10,r31,568
10014d8c:	39 3f 04 44 	addi    r9,r31,1092
10014d90:	7d 43 53 78 	mr      r3,r10
10014d94:	7d 24 4b 78 	mr      r4,r9
10014d98:	4b ff fa 25 	bl      100147bc <scan_wday>
10014d9c:	7c 69 1b 78 	mr      r9,r3
	}

    /* wdy, DD-mth-YY HH:MM:SS GMT */
    else if ( sscanf( cp, "%400[a-zA-Z], %d-%400[a-zA-Z]-%d %d:%d:%d GMT",
		str_wday, &tm_mday, str_mon, &tm_year, &tm_hour, &tm_min,
		&tm_sec ) == 7 &&
10014da0:	2f 89 00 00 	cmpwi   cr7,r9,0
10014da4:	41 9e 00 60 	beq     cr7,10014e04 <tdate_parse+0x358>
	    scan_wday( str_wday, &tm_wday ) &&
	    scan_mon( str_mon, &tm_mon ) )
10014da8:	39 5f 00 44 	addi    r10,r31,68
10014dac:	39 3f 04 40 	addi    r9,r31,1088
10014db0:	7d 43 53 78 	mr      r3,r10
10014db4:	7d 24 4b 78 	mr      r4,r9
10014db8:	4b ff fa 99 	bl      10014850 <scan_mon>
10014dbc:	7c 69 1b 78 	mr      r9,r3

    /* wdy, DD-mth-YY HH:MM:SS GMT */
    else if ( sscanf( cp, "%400[a-zA-Z], %d-%400[a-zA-Z]-%d %d:%d:%d GMT",
		str_wday, &tm_mday, str_mon, &tm_year, &tm_hour, &tm_min,
		&tm_sec ) == 7 &&
	    scan_wday( str_wday, &tm_wday ) &&
10014dc0:	2f 89 00 00 	cmpwi   cr7,r9,0
10014dc4:	41 9e 00 40 	beq     cr7,10014e04 <tdate_parse+0x358>
	    scan_mon( str_mon, &tm_mon ) )
	{
	tm.tm_wday = tm_wday;
10014dc8:	81 3f 04 44 	lwz     r9,1092(r31)
10014dcc:	91 3f 00 30 	stw     r9,48(r31)
	tm.tm_mday = tm_mday;
10014dd0:	81 3f 04 38 	lwz     r9,1080(r31)
10014dd4:	91 3f 00 24 	stw     r9,36(r31)
	tm.tm_mon = tm_mon;
10014dd8:	81 3f 04 40 	lwz     r9,1088(r31)
10014ddc:	91 3f 00 28 	stw     r9,40(r31)
	tm.tm_year = tm_year;
10014de0:	81 3f 04 3c 	lwz     r9,1084(r31)
10014de4:	91 3f 00 2c 	stw     r9,44(r31)
	tm.tm_hour = tm_hour;
10014de8:	81 3f 04 34 	lwz     r9,1076(r31)
10014dec:	91 3f 00 20 	stw     r9,32(r31)
	tm.tm_min = tm_min;
10014df0:	81 3f 04 30 	lwz     r9,1072(r31)
10014df4:	91 3f 00 1c 	stw     r9,28(r31)
	tm.tm_sec = tm_sec;
10014df8:	81 3f 04 2c 	lwz     r9,1068(r31)
10014dfc:	91 3f 00 18 	stw     r9,24(r31)
10014e00:	48 00 01 84 	b       10014f84 <tdate_parse+0x4d8>
	}

    /* wdy, DD mth YY HH:MM:SS GMT */
    else if ( sscanf( cp, "%400[a-zA-Z], %d %400[a-zA-Z] %d %d:%d:%d GMT",
10014e04:	38 bf 02 38 	addi    r5,r31,568
10014e08:	38 df 04 38 	addi    r6,r31,1080
10014e0c:	38 ff 00 44 	addi    r7,r31,68
10014e10:	39 1f 04 3c 	addi    r8,r31,1084
10014e14:	39 3f 04 34 	addi    r9,r31,1076
10014e18:	39 5f 04 30 	addi    r10,r31,1072
10014e1c:	38 9f 04 2c 	addi    r4,r31,1068
10014e20:	90 81 00 08 	stw     r4,8(r1)
10014e24:	80 7f 00 10 	lwz     r3,16(r31)
10014e28:	3c 80 10 02 	lis     r4,4098
10014e2c:	38 84 b4 78 	addi    r4,r4,-19336
10014e30:	4c c6 31 82 	crclr   4*cr1+eq
10014e34:	48 01 88 79 	bl      1002d6ac <__isoc99_sscanf@plt>
10014e38:	7c 69 1b 78 	mr      r9,r3
10014e3c:	2f 89 00 07 	cmpwi   cr7,r9,7
10014e40:	40 9e 00 80 	bne     cr7,10014ec0 <tdate_parse+0x414>
		str_wday, &tm_mday, str_mon, &tm_year, &tm_hour, &tm_min,
		&tm_sec ) == 7 &&
	    scan_wday( str_wday, &tm_wday ) &&
10014e44:	39 5f 02 38 	addi    r10,r31,568
10014e48:	39 3f 04 44 	addi    r9,r31,1092
10014e4c:	7d 43 53 78 	mr      r3,r10
10014e50:	7d 24 4b 78 	mr      r4,r9
10014e54:	4b ff f9 69 	bl      100147bc <scan_wday>
10014e58:	7c 69 1b 78 	mr      r9,r3
	}

    /* wdy, DD mth YY HH:MM:SS GMT */
    else if ( sscanf( cp, "%400[a-zA-Z], %d %400[a-zA-Z] %d %d:%d:%d GMT",
		str_wday, &tm_mday, str_mon, &tm_year, &tm_hour, &tm_min,
		&tm_sec ) == 7 &&
10014e5c:	2f 89 00 00 	cmpwi   cr7,r9,0
10014e60:	41 9e 00 60 	beq     cr7,10014ec0 <tdate_parse+0x414>
	    scan_wday( str_wday, &tm_wday ) &&
	    scan_mon( str_mon, &tm_mon ) )
10014e64:	39 5f 00 44 	addi    r10,r31,68
10014e68:	39 3f 04 40 	addi    r9,r31,1088
10014e6c:	7d 43 53 78 	mr      r3,r10
10014e70:	7d 24 4b 78 	mr      r4,r9
10014e74:	4b ff f9 dd 	bl      10014850 <scan_mon>
10014e78:	7c 69 1b 78 	mr      r9,r3

    /* wdy, DD mth YY HH:MM:SS GMT */
    else if ( sscanf( cp, "%400[a-zA-Z], %d %400[a-zA-Z] %d %d:%d:%d GMT",
		str_wday, &tm_mday, str_mon, &tm_year, &tm_hour, &tm_min,
		&tm_sec ) == 7 &&
	    scan_wday( str_wday, &tm_wday ) &&
10014e7c:	2f 89 00 00 	cmpwi   cr7,r9,0
10014e80:	41 9e 00 40 	beq     cr7,10014ec0 <tdate_parse+0x414>
	    scan_mon( str_mon, &tm_mon ) )
	{
	tm.tm_wday = tm_wday;
10014e84:	81 3f 04 44 	lwz     r9,1092(r31)
10014e88:	91 3f 00 30 	stw     r9,48(r31)
	tm.tm_mday = tm_mday;
10014e8c:	81 3f 04 38 	lwz     r9,1080(r31)
10014e90:	91 3f 00 24 	stw     r9,36(r31)
	tm.tm_mon = tm_mon;
10014e94:	81 3f 04 40 	lwz     r9,1088(r31)
10014e98:	91 3f 00 28 	stw     r9,40(r31)
	tm.tm_year = tm_year;
10014e9c:	81 3f 04 3c 	lwz     r9,1084(r31)
10014ea0:	91 3f 00 2c 	stw     r9,44(r31)
	tm.tm_hour = tm_hour;
10014ea4:	81 3f 04 34 	lwz     r9,1076(r31)
10014ea8:	91 3f 00 20 	stw     r9,32(r31)
	tm.tm_min = tm_min;
10014eac:	81 3f 04 30 	lwz     r9,1072(r31)
10014eb0:	91 3f 00 1c 	stw     r9,28(r31)
	tm.tm_sec = tm_sec;
10014eb4:	81 3f 04 2c 	lwz     r9,1068(r31)
10014eb8:	91 3f 00 18 	stw     r9,24(r31)
10014ebc:	48 00 00 c8 	b       10014f84 <tdate_parse+0x4d8>
	}

    /* wdy mth DD HH:MM:SS GMT YY */
    else if ( sscanf( cp, "%400[a-zA-Z] %400[a-zA-Z] %d %d:%d:%d GMT %d",
10014ec0:	38 bf 02 38 	addi    r5,r31,568
10014ec4:	38 df 00 44 	addi    r6,r31,68
10014ec8:	38 ff 04 38 	addi    r7,r31,1080
10014ecc:	39 1f 04 34 	addi    r8,r31,1076
10014ed0:	39 3f 04 30 	addi    r9,r31,1072
10014ed4:	39 5f 04 2c 	addi    r10,r31,1068
10014ed8:	38 9f 04 3c 	addi    r4,r31,1084
10014edc:	90 81 00 08 	stw     r4,8(r1)
10014ee0:	80 7f 00 10 	lwz     r3,16(r31)
10014ee4:	3c 80 10 02 	lis     r4,4098
10014ee8:	38 84 b4 a8 	addi    r4,r4,-19288
10014eec:	4c c6 31 82 	crclr   4*cr1+eq
10014ef0:	48 01 87 bd 	bl      1002d6ac <__isoc99_sscanf@plt>
10014ef4:	7c 69 1b 78 	mr      r9,r3
10014ef8:	2f 89 00 07 	cmpwi   cr7,r9,7
10014efc:	40 9e 00 80 	bne     cr7,10014f7c <tdate_parse+0x4d0>
		str_wday, str_mon, &tm_mday, &tm_hour, &tm_min, &tm_sec,
		&tm_year ) == 7 &&
	    scan_wday( str_wday, &tm_wday ) &&
10014f00:	39 5f 02 38 	addi    r10,r31,568
10014f04:	39 3f 04 44 	addi    r9,r31,1092
10014f08:	7d 43 53 78 	mr      r3,r10
10014f0c:	7d 24 4b 78 	mr      r4,r9
10014f10:	4b ff f8 ad 	bl      100147bc <scan_wday>
10014f14:	7c 69 1b 78 	mr      r9,r3
	}

    /* wdy mth DD HH:MM:SS GMT YY */
    else if ( sscanf( cp, "%400[a-zA-Z] %400[a-zA-Z] %d %d:%d:%d GMT %d",
		str_wday, str_mon, &tm_mday, &tm_hour, &tm_min, &tm_sec,
		&tm_year ) == 7 &&
10014f18:	2f 89 00 00 	cmpwi   cr7,r9,0
10014f1c:	41 9e 00 60 	beq     cr7,10014f7c <tdate_parse+0x4d0>
	    scan_wday( str_wday, &tm_wday ) &&
	    scan_mon( str_mon, &tm_mon ) )
10014f20:	39 5f 00 44 	addi    r10,r31,68
10014f24:	39 3f 04 40 	addi    r9,r31,1088
10014f28:	7d 43 53 78 	mr      r3,r10
10014f2c:	7d 24 4b 78 	mr      r4,r9
10014f30:	4b ff f9 21 	bl      10014850 <scan_mon>
10014f34:	7c 69 1b 78 	mr      r9,r3

    /* wdy mth DD HH:MM:SS GMT YY */
    else if ( sscanf( cp, "%400[a-zA-Z] %400[a-zA-Z] %d %d:%d:%d GMT %d",
		str_wday, str_mon, &tm_mday, &tm_hour, &tm_min, &tm_sec,
		&tm_year ) == 7 &&
	    scan_wday( str_wday, &tm_wday ) &&
10014f38:	2f 89 00 00 	cmpwi   cr7,r9,0
10014f3c:	41 9e 00 40 	beq     cr7,10014f7c <tdate_parse+0x4d0>
	    scan_mon( str_mon, &tm_mon ) )
	{
	tm.tm_wday = tm_wday;
10014f40:	81 3f 04 44 	lwz     r9,1092(r31)
10014f44:	91 3f 00 30 	stw     r9,48(r31)
	tm.tm_mon = tm_mon;
10014f48:	81 3f 04 40 	lwz     r9,1088(r31)
10014f4c:	91 3f 00 28 	stw     r9,40(r31)
	tm.tm_mday = tm_mday;
10014f50:	81 3f 04 38 	lwz     r9,1080(r31)
10014f54:	91 3f 00 24 	stw     r9,36(r31)
	tm.tm_hour = tm_hour;
10014f58:	81 3f 04 34 	lwz     r9,1076(r31)
10014f5c:	91 3f 00 20 	stw     r9,32(r31)
	tm.tm_min = tm_min;
10014f60:	81 3f 04 30 	lwz     r9,1072(r31)
10014f64:	91 3f 00 1c 	stw     r9,28(r31)
	tm.tm_sec = tm_sec;
10014f68:	81 3f 04 2c 	lwz     r9,1068(r31)
10014f6c:	91 3f 00 18 	stw     r9,24(r31)
	tm.tm_year = tm_year;
10014f70:	81 3f 04 3c 	lwz     r9,1084(r31)
10014f74:	91 3f 00 2c 	stw     r9,44(r31)
10014f78:	48 00 00 0c 	b       10014f84 <tdate_parse+0x4d8>
	}
    else
	return (time_t) -1;
10014f7c:	39 20 ff ff 	li      r9,-1
10014f80:	48 00 00 4c 	b       10014fcc <tdate_parse+0x520>

    if ( tm.tm_year > 1900 )
10014f84:	81 3f 00 2c 	lwz     r9,44(r31)
10014f88:	2f 89 07 6c 	cmpwi   cr7,r9,1900
10014f8c:	40 9d 00 14 	ble     cr7,10014fa0 <tdate_parse+0x4f4>
	tm.tm_year -= 1900;
10014f90:	81 3f 00 2c 	lwz     r9,44(r31)
10014f94:	39 29 f8 94 	addi    r9,r9,-1900
10014f98:	91 3f 00 2c 	stw     r9,44(r31)
10014f9c:	48 00 00 1c 	b       10014fb8 <tdate_parse+0x50c>
    else if ( tm.tm_year < 70 )
10014fa0:	81 3f 00 2c 	lwz     r9,44(r31)
10014fa4:	2f 89 00 45 	cmpwi   cr7,r9,69
10014fa8:	41 9d 00 10 	bgt     cr7,10014fb8 <tdate_parse+0x50c>
	tm.tm_year += 100;
10014fac:	81 3f 00 2c 	lwz     r9,44(r31)
10014fb0:	39 29 00 64 	addi    r9,r9,100
10014fb4:	91 3f 00 2c 	stw     r9,44(r31)

    t = tm_to_time( &tm );
10014fb8:	39 3f 00 18 	addi    r9,r31,24
10014fbc:	7d 23 4b 78 	mr      r3,r9
10014fc0:	4b ff f9 bd 	bl      1001497c <tm_to_time>
10014fc4:	90 7f 00 14 	stw     r3,20(r31)

    return t;
10014fc8:	81 3f 00 14 	lwz     r9,20(r31)
    }
10014fcc:	7d 23 4b 78 	mr      r3,r9
10014fd0:	39 7f 04 60 	addi    r11,r31,1120
10014fd4:	80 0b 00 04 	lwz     r0,4(r11)
10014fd8:	7c 08 03 a6 	mtlr    r0
10014fdc:	83 eb ff fc 	lwz     r31,-4(r11)
10014fe0:	7d 61 5b 78 	mr      r1,r11
10014fe4:	4e 80 00 20 	blr

10014fe8 <json_incref>:
#define JSON_INTERNAL_DECREF(json) (--json->refcount)
#endif

static JSON_INLINE
json_t *json_incref(json_t *json)
{
10014fe8:	94 21 ff e0 	stwu    r1,-32(r1)
10014fec:	93 e1 00 1c 	stw     r31,28(r1)
10014ff0:	7c 3f 0b 78 	mr      r31,r1
10014ff4:	90 7f 00 08 	stw     r3,8(r31)
    if(json && json->refcount != (size_t)-1)
10014ff8:	81 3f 00 08 	lwz     r9,8(r31)
10014ffc:	2f 89 00 00 	cmpwi   cr7,r9,0
10015000:	41 9e 00 38 	beq     cr7,10015038 <json_incref+0x50>
10015004:	81 3f 00 08 	lwz     r9,8(r31)
10015008:	81 49 00 04 	lwz     r10,4(r9)
1001500c:	39 20 ff ff 	li      r9,-1
10015010:	7f 8a 48 00 	cmpw    cr7,r10,r9
10015014:	41 9e 00 24 	beq     cr7,10015038 <json_incref+0x50>
        JSON_INTERNAL_INCREF(json);
10015018:	81 3f 00 08 	lwz     r9,8(r31)
1001501c:	39 29 00 04 	addi    r9,r9,4
10015020:	7d 40 48 28 	lwarx   r10,0,r9
10015024:	39 4a 00 01 	addi    r10,r10,1
10015028:	7d 40 49 2d 	stwcx.  r10,0,r9
1001502c:	4f 80 00 00 	mcrf    cr7,cr0
10015030:	40 9e ff f0 	bne     cr7,10015020 <json_incref+0x38>
10015034:	4c 00 01 2c 	isync
    return json;
10015038:	81 3f 00 08 	lwz     r9,8(r31)
}
1001503c:	7d 23 4b 78 	mr      r3,r9
10015040:	39 7f 00 20 	addi    r11,r31,32
10015044:	83 eb ff fc 	lwz     r31,-4(r11)
10015048:	7d 61 5b 78 	mr      r1,r11
1001504c:	4e 80 00 20 	blr

10015050 <json_decref>:
/* do not call json_delete directly */
void json_delete(json_t *json);

static JSON_INLINE
void json_decref(json_t *json)
{
10015050:	94 21 ff e0 	stwu    r1,-32(r1)
10015054:	7c 08 02 a6 	mflr    r0
10015058:	90 01 00 24 	stw     r0,36(r1)
1001505c:	93 e1 00 1c 	stw     r31,28(r1)
10015060:	7c 3f 0b 78 	mr      r31,r1
10015064:	90 7f 00 08 	stw     r3,8(r31)
    if(json && json->refcount != (size_t)-1 && JSON_INTERNAL_DECREF(json) == 0)
10015068:	81 3f 00 08 	lwz     r9,8(r31)
1001506c:	2f 89 00 00 	cmpwi   cr7,r9,0
10015070:	41 9e 00 4c 	beq     cr7,100150bc <json_decref+0x6c>
10015074:	81 3f 00 08 	lwz     r9,8(r31)
10015078:	81 49 00 04 	lwz     r10,4(r9)
1001507c:	39 20 ff ff 	li      r9,-1
10015080:	7f 8a 48 00 	cmpw    cr7,r10,r9
10015084:	41 9e 00 38 	beq     cr7,100150bc <json_decref+0x6c>
10015088:	81 3f 00 08 	lwz     r9,8(r31)
1001508c:	39 49 00 04 	addi    r10,r9,4
10015090:	39 00 00 01 	li      r8,1
10015094:	7c 20 04 ac 	lwsync
10015098:	7d 20 50 28 	lwarx   r9,0,r10
1001509c:	7d 28 48 50 	subf    r9,r8,r9
100150a0:	7d 20 51 2d 	stwcx.  r9,0,r10
100150a4:	4f 80 00 00 	mcrf    cr7,cr0
100150a8:	40 9e ff f0 	bne     cr7,10015098 <json_decref+0x48>
100150ac:	2f 89 00 00 	cmpwi   cr7,r9,0
100150b0:	40 9e 00 0c 	bne     cr7,100150bc <json_decref+0x6c>
        json_delete(json);
100150b4:	80 7f 00 08 	lwz     r3,8(r31)
100150b8:	48 01 83 f5 	bl      1002d4ac <json_delete@plt>
}
100150bc:	39 7f 00 20 	addi    r11,r31,32
100150c0:	80 0b 00 04 	lwz     r0,4(r11)
100150c4:	7c 08 03 a6 	mtlr    r0
100150c8:	83 eb ff fc 	lwz     r31,-4(r11)
100150cc:	7d 61 5b 78 	mr      r1,r11
100150d0:	4e 80 00 20 	blr

100150d4 <json_object_set>:
		index < json_array_size(array) && (value = json_array_get(array, index)); \
		index++)

static JSON_INLINE
int json_object_set(json_t *object, const char *key, json_t *value)
{
100150d4:	94 21 ff e0 	stwu    r1,-32(r1)
100150d8:	7c 08 02 a6 	mflr    r0
100150dc:	90 01 00 24 	stw     r0,36(r1)
100150e0:	93 e1 00 1c 	stw     r31,28(r1)
100150e4:	7c 3f 0b 78 	mr      r31,r1
100150e8:	90 7f 00 08 	stw     r3,8(r31)
100150ec:	90 9f 00 0c 	stw     r4,12(r31)
100150f0:	90 bf 00 10 	stw     r5,16(r31)
    return json_object_set_new(object, key, json_incref(value));
100150f4:	80 7f 00 10 	lwz     r3,16(r31)
100150f8:	4b ff fe f1 	bl      10014fe8 <json_incref>
100150fc:	7c 69 1b 78 	mr      r9,r3
10015100:	80 7f 00 08 	lwz     r3,8(r31)
10015104:	80 9f 00 0c 	lwz     r4,12(r31)
10015108:	7d 25 4b 78 	mr      r5,r9
1001510c:	48 01 84 d1 	bl      1002d5dc <json_object_set_new@plt>
10015110:	7c 69 1b 78 	mr      r9,r3
}
10015114:	7d 23 4b 78 	mr      r3,r9
10015118:	39 7f 00 20 	addi    r11,r31,32
1001511c:	80 0b 00 04 	lwz     r0,4(r11)
10015120:	7c 08 03 a6 	mtlr    r0
10015124:	83 eb ff fc 	lwz     r31,-4(r11)
10015128:	7d 61 5b 78 	mr      r1,r11
1001512c:	4e 80 00 20 	blr

10015130 <json_array_append>:
    return json_array_set_new(array, ind, json_incref(value));
}

static JSON_INLINE
int json_array_append(json_t *array, json_t *value)
{
10015130:	94 21 ff e0 	stwu    r1,-32(r1)
10015134:	7c 08 02 a6 	mflr    r0
10015138:	90 01 00 24 	stw     r0,36(r1)
1001513c:	93 e1 00 1c 	stw     r31,28(r1)
10015140:	7c 3f 0b 78 	mr      r31,r1
10015144:	90 7f 00 08 	stw     r3,8(r31)
10015148:	90 9f 00 0c 	stw     r4,12(r31)
    return json_array_append_new(array, json_incref(value));
1001514c:	80 7f 00 0c 	lwz     r3,12(r31)
10015150:	4b ff fe 99 	bl      10014fe8 <json_incref>
10015154:	7c 69 1b 78 	mr      r9,r3
10015158:	80 7f 00 08 	lwz     r3,8(r31)
1001515c:	7d 24 4b 78 	mr      r4,r9
10015160:	48 01 82 bd 	bl      1002d41c <json_array_append_new@plt>
10015164:	7c 69 1b 78 	mr      r9,r3
}
10015168:	7d 23 4b 78 	mr      r3,r9
1001516c:	39 7f 00 20 	addi    r11,r31,32
10015170:	80 0b 00 04 	lwz     r0,4(r11)
10015174:	7c 08 03 a6 	mtlr    r0
10015178:	83 eb ff fc 	lwz     r31,-4(r11)
1001517c:	7d 61 5b 78 	mr      r1,r11
10015180:	4e 80 00 20 	blr

10015184 <Uint8toString>:
static uint8 DeviceAudioRouting(uint32 in,uint32 out);
static uint8 JsonGetString(json_t *json,char *data);
static uint8 JsonGetInteger(json_t *json,uint32 *data);
static void Uint8toString(int8 *str,uint8 *data,uint32 length);
void Uint8toString(int8 *str,uint8 *data,uint32 length)
{
10015184:	94 21 ff d0 	stwu    r1,-48(r1)
10015188:	7c 08 02 a6 	mflr    r0
1001518c:	90 01 00 34 	stw     r0,52(r1)
10015190:	93 e1 00 2c 	stw     r31,44(r1)
10015194:	7c 3f 0b 78 	mr      r31,r1
10015198:	90 7f 00 18 	stw     r3,24(r31)
1001519c:	90 9f 00 1c 	stw     r4,28(r31)
100151a0:	90 bf 00 20 	stw     r5,32(r31)
	//length=256;
#if DEBUG
	printf("have call Uint8toString the length is %d\n",length);
100151a4:	3d 20 10 02 	lis     r9,4098
100151a8:	38 69 b5 d0 	addi    r3,r9,-18992
100151ac:	80 9f 00 20 	lwz     r4,32(r31)
100151b0:	4c c6 31 82 	crclr   4*cr1+eq
100151b4:	48 01 82 39 	bl      1002d3ec <printf@plt>
	printf("The address of str is %p",str);
100151b8:	3d 20 10 02 	lis     r9,4098
100151bc:	38 69 b5 fc 	addi    r3,r9,-18948
100151c0:	80 9f 00 18 	lwz     r4,24(r31)
100151c4:	4c c6 31 82 	crclr   4*cr1+eq
100151c8:	48 01 82 25 	bl      1002d3ec <printf@plt>
#endif
	uint32 i,j=0;
100151cc:	39 20 00 00 	li      r9,0
100151d0:	91 3f 00 0c 	stw     r9,12(r31)
	for(i=0;i<length;i++,j+=2)
100151d4:	39 20 00 00 	li      r9,0
100151d8:	91 3f 00 08 	stw     r9,8(r31)
100151dc:	48 00 00 54 	b       10015230 <Uint8toString+0xac>
	{
		sprintf(str+j,"%02X",*(data+i));
100151e0:	81 5f 00 18 	lwz     r10,24(r31)
100151e4:	81 3f 00 0c 	lwz     r9,12(r31)
100151e8:	7d 4a 4a 14 	add     r10,r10,r9
100151ec:	81 1f 00 1c 	lwz     r8,28(r31)
100151f0:	81 3f 00 08 	lwz     r9,8(r31)
100151f4:	7d 28 4a 14 	add     r9,r8,r9
100151f8:	89 29 00 00 	lbz     r9,0(r9)
100151fc:	55 29 06 3e 	clrlwi  r9,r9,24
10015200:	7d 43 53 78 	mr      r3,r10
10015204:	3d 40 10 02 	lis     r10,4098
10015208:	38 8a b6 18 	addi    r4,r10,-18920
1001520c:	7d 25 4b 78 	mr      r5,r9
10015210:	4c c6 31 82 	crclr   4*cr1+eq
10015214:	48 01 85 91 	bl      1002d7a4 <sprintf@plt>
#if DEBUG
	printf("have call Uint8toString the length is %d\n",length);
	printf("The address of str is %p",str);
#endif
	uint32 i,j=0;
	for(i=0;i<length;i++,j+=2)
10015218:	81 3f 00 08 	lwz     r9,8(r31)
1001521c:	39 29 00 01 	addi    r9,r9,1
10015220:	91 3f 00 08 	stw     r9,8(r31)
10015224:	81 3f 00 0c 	lwz     r9,12(r31)
10015228:	39 29 00 02 	addi    r9,r9,2
1001522c:	91 3f 00 0c 	stw     r9,12(r31)
10015230:	81 5f 00 08 	lwz     r10,8(r31)
10015234:	81 3f 00 20 	lwz     r9,32(r31)
10015238:	7f 8a 48 40 	cmplw   cr7,r10,r9
1001523c:	41 9c ff a4 	blt     cr7,100151e0 <Uint8toString+0x5c>
	{
		sprintf(str+j,"%02X",*(data+i));
	}
#if DEBUG
	printf("the data is  %s\n",str);
10015240:	3d 20 10 02 	lis     r9,4098
10015244:	38 69 b6 20 	addi    r3,r9,-18912
10015248:	80 9f 00 18 	lwz     r4,24(r31)
1001524c:	4c c6 31 82 	crclr   4*cr1+eq
10015250:	48 01 81 9d 	bl      1002d3ec <printf@plt>
#endif
}
10015254:	39 7f 00 30 	addi    r11,r31,48
10015258:	80 0b 00 04 	lwz     r0,4(r11)
1001525c:	7c 08 03 a6 	mtlr    r0
10015260:	83 eb ff fc 	lwz     r31,-4(r11)
10015264:	7d 61 5b 78 	mr      r1,r11
10015268:	4e 80 00 20 	blr

1001526c <LiguoWeb_GET_Method>:
uint8 LiguoWeb_GET_Method(const char *sstr,json_t *json,json_t *ech,json_t *res,char *estr)
{
1001526c:	94 21 ff c0 	stwu    r1,-64(r1)
10015270:	7c 08 02 a6 	mflr    r0
10015274:	90 01 00 44 	stw     r0,68(r1)
10015278:	93 e1 00 3c 	stw     r31,60(r1)
1001527c:	7c 3f 0b 78 	mr      r31,r1
10015280:	90 7f 00 18 	stw     r3,24(r31)
10015284:	90 9f 00 1c 	stw     r4,28(r31)
10015288:	90 bf 00 20 	stw     r5,32(r31)
1001528c:	90 df 00 24 	stw     r6,36(r31)
10015290:	90 ff 00 28 	stw     r7,40(r31)
	char* str=strchr(sstr,'=');
10015294:	80 7f 00 18 	lwz     r3,24(r31)
10015298:	38 80 00 3d 	li      r4,61
1001529c:	48 01 83 a9 	bl      1002d644 <strchr@plt>
100152a0:	90 7f 00 0c 	stw     r3,12(r31)
	uint8 flag=0;
100152a4:	39 20 00 00 	li      r9,0
100152a8:	99 3f 00 08 	stb     r9,8(r31)
	if(str)
100152ac:	81 3f 00 0c 	lwz     r9,12(r31)
100152b0:	2f 89 00 00 	cmpwi   cr7,r9,0
100152b4:	41 9e 00 30 	beq     cr7,100152e4 <LiguoWeb_GET_Method+0x78>
	{
		flag=CommandHandle((str+1),json,ech,res,estr);
100152b8:	81 3f 00 0c 	lwz     r9,12(r31)
100152bc:	39 29 00 01 	addi    r9,r9,1
100152c0:	7d 23 4b 78 	mr      r3,r9
100152c4:	80 9f 00 1c 	lwz     r4,28(r31)
100152c8:	80 bf 00 20 	lwz     r5,32(r31)
100152cc:	80 df 00 24 	lwz     r6,36(r31)
100152d0:	80 ff 00 28 	lwz     r7,40(r31)
100152d4:	48 00 00 d5 	bl      100153a8 <CommandHandle>
100152d8:	7c 69 1b 78 	mr      r9,r3
100152dc:	99 3f 00 08 	stb     r9,8(r31)
100152e0:	48 00 00 30 	b       10015310 <LiguoWeb_GET_Method+0xa4>
	}
	else
	{
		strcpy(estr,"Error of format");
100152e4:	81 3f 00 28 	lwz     r9,40(r31)
100152e8:	3d 40 10 02 	lis     r10,4098
100152ec:	39 4a b6 34 	addi    r10,r10,-18892
100152f0:	80 ca 00 00 	lwz     r6,0(r10)
100152f4:	80 ea 00 04 	lwz     r7,4(r10)
100152f8:	81 0a 00 08 	lwz     r8,8(r10)
100152fc:	81 4a 00 0c 	lwz     r10,12(r10)
10015300:	90 c9 00 00 	stw     r6,0(r9)
10015304:	90 e9 00 04 	stw     r7,4(r9)
10015308:	91 09 00 08 	stw     r8,8(r9)
1001530c:	91 49 00 0c 	stw     r10,12(r9)
	}
	if(str)
10015310:	81 3f 00 0c 	lwz     r9,12(r31)
10015314:	2f 89 00 00 	cmpwi   cr7,r9,0
10015318:	41 9e 00 0c 	beq     cr7,10015324 <LiguoWeb_GET_Method+0xb8>
	{
		str=NULL;
1001531c:	39 20 00 00 	li      r9,0
10015320:	91 3f 00 0c 	stw     r9,12(r31)
	}
	return flag;
10015324:	89 3f 00 08 	lbz     r9,8(r31)
10015328:	55 29 06 3e 	clrlwi  r9,r9,24
}
1001532c:	7d 23 4b 78 	mr      r3,r9
10015330:	39 7f 00 40 	addi    r11,r31,64
10015334:	80 0b 00 04 	lwz     r0,4(r11)
10015338:	7c 08 03 a6 	mtlr    r0
1001533c:	83 eb ff fc 	lwz     r31,-4(r11)
10015340:	7d 61 5b 78 	mr      r1,r11
10015344:	4e 80 00 20 	blr

10015348 <LiguoWeb_POST_Method>:
uint8 LiguoWeb_POST_Method(const unsigned char *sstr,json_t *json,json_t *ech,json_t * res,char *estr)
{
10015348:	94 21 ff d0 	stwu    r1,-48(r1)
1001534c:	7c 08 02 a6 	mflr    r0
10015350:	90 01 00 34 	stw     r0,52(r1)
10015354:	93 e1 00 2c 	stw     r31,44(r1)
10015358:	7c 3f 0b 78 	mr      r31,r1
1001535c:	90 7f 00 08 	stw     r3,8(r31)
10015360:	90 9f 00 0c 	stw     r4,12(r31)
10015364:	90 bf 00 10 	stw     r5,16(r31)
10015368:	90 df 00 14 	stw     r6,20(r31)
1001536c:	90 ff 00 18 	stw     r7,24(r31)
	return CommandHandle(sstr,json,ech,res,estr);
10015370:	80 7f 00 08 	lwz     r3,8(r31)
10015374:	80 9f 00 0c 	lwz     r4,12(r31)
10015378:	80 bf 00 10 	lwz     r5,16(r31)
1001537c:	80 df 00 14 	lwz     r6,20(r31)
10015380:	80 ff 00 18 	lwz     r7,24(r31)
10015384:	48 00 00 25 	bl      100153a8 <CommandHandle>
10015388:	7c 69 1b 78 	mr      r9,r3
}
1001538c:	7d 23 4b 78 	mr      r3,r9
10015390:	39 7f 00 30 	addi    r11,r31,48
10015394:	80 0b 00 04 	lwz     r0,4(r11)
10015398:	7c 08 03 a6 	mtlr    r0
1001539c:	83 eb ff fc 	lwz     r31,-4(r11)
100153a0:	7d 61 5b 78 	mr      r1,r11
100153a4:	4e 80 00 20 	blr

100153a8 <CommandHandle>:
uint8 CommandHandle(const char *sstr,json_t *json,json_t *ech,json_t *res,char *estr)
{
100153a8:	94 21 af 80 	stwu    r1,-20608(r1)
100153ac:	7c 08 02 a6 	mflr    r0
100153b0:	90 01 50 84 	stw     r0,20612(r1)
100153b4:	93 e1 50 7c 	stw     r31,20604(r1)
100153b8:	7c 3f 0b 78 	mr      r31,r1
100153bc:	90 7f 50 58 	stw     r3,20568(r31)
100153c0:	90 9f 50 5c 	stw     r4,20572(r31)
100153c4:	90 bf 50 60 	stw     r5,20576(r31)
100153c8:	90 df 50 64 	stw     r6,20580(r31)
100153cc:	90 ff 50 68 	stw     r7,20584(r31)
	json_error_t error;
    json_t *jsonget;
    jsonget=json_loads(sstr,0,&error);
100153d0:	39 3f 00 20 	addi    r9,r31,32
100153d4:	80 7f 50 58 	lwz     r3,20568(r31)
100153d8:	38 80 00 00 	li      r4,0
100153dc:	7d 25 4b 78 	mr      r5,r9
100153e0:	48 01 83 e5 	bl      1002d7c4 <json_loads@plt>
100153e4:	90 7f 00 0c 	stw     r3,12(r31)
    uint8 flag=0;
100153e8:	39 20 00 00 	li      r9,0
100153ec:	99 3f 00 08 	stb     r9,8(r31)
    if(jsonget)
100153f0:	81 3f 00 0c 	lwz     r9,12(r31)
100153f4:	2f 89 00 00 	cmpwi   cr7,r9,0
100153f8:	41 9e 04 20 	beq     cr7,10015818 <CommandHandle+0x470>
    {
        json_t *cmd;
        cmd=json_object_get(jsonget,"cmd");
100153fc:	80 7f 00 0c 	lwz     r3,12(r31)
10015400:	3d 20 10 02 	lis     r9,4098
10015404:	38 89 b6 44 	addi    r4,r9,-18876
10015408:	48 01 84 2d 	bl      1002d834 <json_object_get@plt>
1001540c:	90 7f 00 10 	stw     r3,16(r31)
		char str[30];
        if(JsonGetString(cmd,str))
10015410:	39 3f 01 1c 	addi    r9,r31,284
10015414:	80 7f 00 10 	lwz     r3,16(r31)
10015418:	7d 24 4b 78 	mr      r4,r9
1001541c:	48 00 24 e5 	bl      10017900 <JsonGetString>
10015420:	7c 69 1b 78 	mr      r9,r3
10015424:	2f 89 00 00 	cmpwi   cr7,r9,0
10015428:	41 9e 03 b0 	beq     cr7,100157d8 <CommandHandle+0x430>
        {
			char data[20000];
			json_error_t error;
			json_object_set_new(json,"cmd",json_string(str));
1001542c:	39 3f 01 1c 	addi    r9,r31,284
10015430:	7d 23 4b 78 	mr      r3,r9
10015434:	48 01 81 b9 	bl      1002d5ec <json_string@plt>
10015438:	7c 69 1b 78 	mr      r9,r3
1001543c:	80 7f 50 5c 	lwz     r3,20572(r31)
10015440:	3d 40 10 02 	lis     r10,4098
10015444:	38 8a b6 44 	addi    r4,r10,-18876
10015448:	7d 25 4b 78 	mr      r5,r9
1001544c:	48 01 81 91 	bl      1002d5dc <json_object_set_new@plt>
			/*对应协议的4.2.4获取矩阵状态*/
            if(!strcmp(str,"matrix_status"))
10015450:	39 3f 01 1c 	addi    r9,r31,284
10015454:	7d 23 4b 78 	mr      r3,r9
10015458:	3d 20 10 02 	lis     r9,4098
1001545c:	38 89 b6 48 	addi    r4,r9,-18872
10015460:	48 01 7f 7d 	bl      1002d3dc <strcmp@plt>
10015464:	7c 69 1b 78 	mr      r9,r3
10015468:	2f 89 00 00 	cmpwi   cr7,r9,0
1001546c:	40 9e 00 20 	bne     cr7,1001548c <CommandHandle+0xe4>
			{
				flag=GetDeviceModuleName(data,estr);	
10015470:	39 3f 01 3c 	addi    r9,r31,316
10015474:	7d 23 4b 78 	mr      r3,r9
10015478:	80 9f 50 68 	lwz     r4,20584(r31)
1001547c:	48 00 04 6d 	bl      100158e8 <GetDeviceModuleName>
10015480:	7c 69 1b 78 	mr      r9,r3
10015484:	99 3f 00 08 	stb     r9,8(r31)
10015488:	48 00 02 f4 	b       1001577c <CommandHandle+0x3d4>
			}
			else if(!strcmp(str,"video_info"))
1001548c:	39 3f 01 1c 	addi    r9,r31,284
10015490:	7d 23 4b 78 	mr      r3,r9
10015494:	3d 20 10 02 	lis     r9,4098
10015498:	38 89 b6 58 	addi    r4,r9,-18856
1001549c:	48 01 7f 41 	bl      1002d3dc <strcmp@plt>
100154a0:	7c 69 1b 78 	mr      r9,r3
100154a4:	2f 89 00 00 	cmpwi   cr7,r9,0
100154a8:	40 9e 00 20 	bne     cr7,100154c8 <CommandHandle+0x120>
			{
				flag=GetDeviceVideoInfo(data,estr);
100154ac:	39 3f 01 3c 	addi    r9,r31,316
100154b0:	7d 23 4b 78 	mr      r3,r9
100154b4:	80 9f 50 68 	lwz     r4,20584(r31)
100154b8:	48 00 05 49 	bl      10015a00 <GetDeviceVideoInfo>
100154bc:	7c 69 1b 78 	mr      r9,r3
100154c0:	99 3f 00 08 	stb     r9,8(r31)
100154c4:	48 00 02 b8 	b       1001577c <CommandHandle+0x3d4>
			}
			else if(!strcmp(str,"require_switch"))
100154c8:	39 3f 01 1c 	addi    r9,r31,284
100154cc:	7d 23 4b 78 	mr      r3,r9
100154d0:	3d 20 10 02 	lis     r9,4098
100154d4:	38 89 b6 64 	addi    r4,r9,-18844
100154d8:	48 01 7f 05 	bl      1002d3dc <strcmp@plt>
100154dc:	7c 69 1b 78 	mr      r9,r3
100154e0:	2f 89 00 00 	cmpwi   cr7,r9,0
100154e4:	40 9e 00 20 	bne     cr7,10015504 <CommandHandle+0x15c>
			{
				flag=GetDeviceSwitchInfo(data,estr);
100154e8:	39 3f 01 3c 	addi    r9,r31,316
100154ec:	7d 23 4b 78 	mr      r3,r9
100154f0:	80 9f 50 68 	lwz     r4,20584(r31)
100154f4:	48 00 14 6d 	bl      10016960 <GetDeviceSwitchInfo>
100154f8:	7c 69 1b 78 	mr      r9,r3
100154fc:	99 3f 00 08 	stb     r9,8(r31)
10015500:	48 00 02 7c 	b       1001577c <CommandHandle+0x3d4>
			}
			else if(!strcmp(str,"version_dll"))
10015504:	39 3f 01 1c 	addi    r9,r31,284
10015508:	7d 23 4b 78 	mr      r3,r9
1001550c:	3d 20 10 02 	lis     r9,4098
10015510:	38 89 b6 74 	addi    r4,r9,-18828
10015514:	48 01 7e c9 	bl      1002d3dc <strcmp@plt>
10015518:	7c 69 1b 78 	mr      r9,r3
1001551c:	2f 89 00 00 	cmpwi   cr7,r9,0
10015520:	40 9e 00 20 	bne     cr7,10015540 <CommandHandle+0x198>
			{
				flag=GetDeviceDLLVersion(data,estr);
10015524:	39 3f 01 3c 	addi    r9,r31,316
10015528:	7d 23 4b 78 	mr      r3,r9
1001552c:	80 9f 50 68 	lwz     r4,20584(r31)
10015530:	48 00 17 01 	bl      10016c30 <GetDeviceDLLVersion>
10015534:	7c 69 1b 78 	mr      r9,r3
10015538:	99 3f 00 08 	stb     r9,8(r31)
1001553c:	48 00 02 40 	b       1001577c <CommandHandle+0x3d4>
			}
			else if(!strcmp(str,"audio_info"))
10015540:	39 3f 01 1c 	addi    r9,r31,284
10015544:	7d 23 4b 78 	mr      r3,r9
10015548:	3d 20 10 02 	lis     r9,4098
1001554c:	38 89 b6 80 	addi    r4,r9,-18816
10015550:	48 01 7e 8d 	bl      1002d3dc <strcmp@plt>
10015554:	7c 69 1b 78 	mr      r9,r3
10015558:	2f 89 00 00 	cmpwi   cr7,r9,0
1001555c:	40 9e 00 20 	bne     cr7,1001557c <CommandHandle+0x1d4>
			{
				flag=GetDeviceAudioInfo(data,estr);
10015560:	39 3f 01 3c 	addi    r9,r31,316
10015564:	7d 23 4b 78 	mr      r3,r9
10015568:	80 9f 50 68 	lwz     r4,20584(r31)
1001556c:	48 00 0e 0d 	bl      10016378 <GetDeviceAudioInfo>
10015570:	7c 69 1b 78 	mr      r9,r3
10015574:	99 3f 00 08 	stb     r9,8(r31)
10015578:	48 00 02 04 	b       1001577c <CommandHandle+0x3d4>
			}
			else if(!strcmp(str,"GetEDID"))
1001557c:	39 3f 01 1c 	addi    r9,r31,284
10015580:	7d 23 4b 78 	mr      r3,r9
10015584:	3d 20 10 02 	lis     r9,4098
10015588:	38 89 b6 8c 	addi    r4,r9,-18804
1001558c:	48 01 7e 51 	bl      1002d3dc <strcmp@plt>
10015590:	7c 69 1b 78 	mr      r9,r3
10015594:	2f 89 00 00 	cmpwi   cr7,r9,0
10015598:	40 9e 00 94 	bne     cr7,1001562c <CommandHandle+0x284>
			{
				json_t *getedid;
				getedid=json_object_get(jsonget,"edid");
1001559c:	80 7f 00 0c 	lwz     r3,12(r31)
100155a0:	3d 20 10 02 	lis     r9,4098
100155a4:	38 89 b6 94 	addi    r4,r9,-18796
100155a8:	48 01 82 8d 	bl      1002d834 <json_object_get@plt>
100155ac:	90 7f 00 14 	stw     r3,20(r31)
				if(getedid)
100155b0:	81 3f 00 14 	lwz     r9,20(r31)
100155b4:	2f 89 00 00 	cmpwi   cr7,r9,0
100155b8:	41 9e 00 24 	beq     cr7,100155dc <CommandHandle+0x234>
				{
					flag=GetPortEDID(getedid,data,estr);
100155bc:	39 3f 01 3c 	addi    r9,r31,316
100155c0:	80 7f 00 14 	lwz     r3,20(r31)
100155c4:	7d 24 4b 78 	mr      r4,r9
100155c8:	80 bf 50 68 	lwz     r5,20584(r31)
100155cc:	48 00 18 75 	bl      10016e40 <GetPortEDID>
100155d0:	7c 69 1b 78 	mr      r9,r3
100155d4:	99 3f 00 08 	stb     r9,8(r31)
100155d8:	48 00 00 48 	b       10015620 <CommandHandle+0x278>
				}
				else
				{
					strcpy(estr,"Get EDID not the key edid");
100155dc:	81 3f 50 68 	lwz     r9,20584(r31)
100155e0:	3d 40 10 02 	lis     r10,4098
100155e4:	39 4a b6 9c 	addi    r10,r10,-18788
100155e8:	80 aa 00 00 	lwz     r5,0(r10)
100155ec:	80 ca 00 04 	lwz     r6,4(r10)
100155f0:	80 ea 00 08 	lwz     r7,8(r10)
100155f4:	81 0a 00 0c 	lwz     r8,12(r10)
100155f8:	90 a9 00 00 	stw     r5,0(r9)
100155fc:	90 c9 00 04 	stw     r6,4(r9)
10015600:	90 e9 00 08 	stw     r7,8(r9)
10015604:	91 09 00 0c 	stw     r8,12(r9)
10015608:	80 ea 00 10 	lwz     r7,16(r10)
1001560c:	81 0a 00 14 	lwz     r8,20(r10)
10015610:	a1 4a 00 18 	lhz     r10,24(r10)
10015614:	90 e9 00 10 	stw     r7,16(r9)
10015618:	91 09 00 14 	stw     r8,20(r9)
1001561c:	b1 49 00 18 	sth     r10,24(r9)
				}
				json_decref(getedid);	
10015620:	80 7f 00 14 	lwz     r3,20(r31)
10015624:	4b ff fa 2d 	bl      10015050 <json_decref>
10015628:	48 00 01 54 	b       1001577c <CommandHandle+0x3d4>
			}
			else if(!strcmp(str,"Card_list"))
1001562c:	39 3f 01 1c 	addi    r9,r31,284
10015630:	7d 23 4b 78 	mr      r3,r9
10015634:	3d 20 10 02 	lis     r9,4098
10015638:	38 89 b6 b8 	addi    r4,r9,-18760
1001563c:	48 01 7d a1 	bl      1002d3dc <strcmp@plt>
10015640:	7c 69 1b 78 	mr      r9,r3
10015644:	2f 89 00 00 	cmpwi   cr7,r9,0
10015648:	40 9e 00 20 	bne     cr7,10015668 <CommandHandle+0x2c0>
			{
				flag=GetDeviceCardlist(data,estr);
1001564c:	39 3f 01 3c 	addi    r9,r31,316
10015650:	7d 23 4b 78 	mr      r3,r9
10015654:	80 9f 50 68 	lwz     r4,20584(r31)
10015658:	48 00 18 19 	bl      10016e70 <GetDeviceCardlist>
1001565c:	7c 69 1b 78 	mr      r9,r3
10015660:	99 3f 00 08 	stb     r9,8(r31)
10015664:	48 00 01 18 	b       1001577c <CommandHandle+0x3d4>
			}
			else if(!strcmp(str,"routing"))
10015668:	39 3f 01 1c 	addi    r9,r31,284
1001566c:	7d 23 4b 78 	mr      r3,r9
10015670:	3d 20 10 02 	lis     r9,4098
10015674:	38 89 b6 c4 	addi    r4,r9,-18748
10015678:	48 01 7d 65 	bl      1002d3dc <strcmp@plt>
1001567c:	7c 69 1b 78 	mr      r9,r3
10015680:	2f 89 00 00 	cmpwi   cr7,r9,0
10015684:	40 9e 00 c4 	bne     cr7,10015748 <CommandHandle+0x3a0>
			{
				json_t *rout;
				rout=json_object_get(jsonget,"routing");										
10015688:	80 7f 00 0c 	lwz     r3,12(r31)
1001568c:	3d 20 10 02 	lis     r9,4098
10015690:	38 89 b6 c4 	addi    r4,r9,-18748
10015694:	48 01 81 a1 	bl      1002d834 <json_object_get@plt>
10015698:	90 7f 00 18 	stw     r3,24(r31)
				if(rout)
1001569c:	81 3f 00 18 	lwz     r9,24(r31)
100156a0:	2f 89 00 00 	cmpwi   cr7,r9,0
100156a4:	41 9e 00 74 	beq     cr7,10015718 <CommandHandle+0x370>
				{
					if(json_typeof(rout)==JSON_ARRAY)
100156a8:	81 3f 00 18 	lwz     r9,24(r31)
100156ac:	81 29 00 00 	lwz     r9,0(r9)
100156b0:	2b 89 00 01 	cmplwi  cr7,r9,1
100156b4:	40 9e 00 1c 	bne     cr7,100156d0 <CommandHandle+0x328>
					{
						flag=SetDeviceRouting(rout,estr);
100156b8:	80 7f 00 18 	lwz     r3,24(r31)
100156bc:	80 9f 50 68 	lwz     r4,20584(r31)
100156c0:	48 00 1c 39 	bl      100172f8 <SetDeviceRouting>
100156c4:	7c 69 1b 78 	mr      r9,r3
100156c8:	99 3f 00 08 	stb     r9,8(r31)
100156cc:	48 00 00 40 	b       1001570c <CommandHandle+0x364>
					}
					else
					{
						strcpy(estr,"Error of rout type");
100156d0:	81 3f 50 68 	lwz     r9,20584(r31)
100156d4:	3d 40 10 02 	lis     r10,4098
100156d8:	39 4a b6 cc 	addi    r10,r10,-18740
100156dc:	80 aa 00 00 	lwz     r5,0(r10)
100156e0:	80 ca 00 04 	lwz     r6,4(r10)
100156e4:	80 ea 00 08 	lwz     r7,8(r10)
100156e8:	81 0a 00 0c 	lwz     r8,12(r10)
100156ec:	90 a9 00 00 	stw     r5,0(r9)
100156f0:	90 c9 00 04 	stw     r6,4(r9)
100156f4:	90 e9 00 08 	stw     r7,8(r9)
100156f8:	91 09 00 0c 	stw     r8,12(r9)
100156fc:	a1 0a 00 10 	lhz     r8,16(r10)
10015700:	89 4a 00 12 	lbz     r10,18(r10)
10015704:	b1 09 00 10 	sth     r8,16(r9)
10015708:	99 49 00 12 	stb     r10,18(r9)
					}
					json_decref(rout);
1001570c:	80 7f 00 18 	lwz     r3,24(r31)
10015710:	4b ff f9 41 	bl      10015050 <json_decref>
10015714:	48 00 00 68 	b       1001577c <CommandHandle+0x3d4>
				}
				else
				{
					strcpy(estr,"Error no rout");
10015718:	81 3f 50 68 	lwz     r9,20584(r31)
1001571c:	3d 40 10 02 	lis     r10,4098
10015720:	39 4a b6 e0 	addi    r10,r10,-18720
10015724:	80 ca 00 00 	lwz     r6,0(r10)
10015728:	80 ea 00 04 	lwz     r7,4(r10)
1001572c:	81 0a 00 08 	lwz     r8,8(r10)
10015730:	a1 4a 00 0c 	lhz     r10,12(r10)
10015734:	90 c9 00 00 	stw     r6,0(r9)
10015738:	90 e9 00 04 	stw     r7,4(r9)
1001573c:	91 09 00 08 	stw     r8,8(r9)
10015740:	b1 49 00 0c 	sth     r10,12(r9)
10015744:	48 00 00 38 	b       1001577c <CommandHandle+0x3d4>
				}
			}
			else
			{
				strcpy(estr,"not this command");
10015748:	81 3f 50 68 	lwz     r9,20584(r31)
1001574c:	3d 40 10 02 	lis     r10,4098
10015750:	39 4a b6 f0 	addi    r10,r10,-18704
10015754:	80 aa 00 00 	lwz     r5,0(r10)
10015758:	80 ca 00 04 	lwz     r6,4(r10)
1001575c:	80 ea 00 08 	lwz     r7,8(r10)
10015760:	81 0a 00 0c 	lwz     r8,12(r10)
10015764:	90 a9 00 00 	stw     r5,0(r9)
10015768:	90 c9 00 04 	stw     r6,4(r9)
1001576c:	90 e9 00 08 	stw     r7,8(r9)
10015770:	91 09 00 0c 	stw     r8,12(r9)
10015774:	89 4a 00 10 	lbz     r10,16(r10)
10015778:	99 49 00 10 	stb     r10,16(r9)
			}
			if(flag)
1001577c:	89 3f 00 08 	lbz     r9,8(r31)
10015780:	55 29 06 3e 	clrlwi  r9,r9,24
10015784:	2f 89 00 00 	cmpwi   cr7,r9,0
10015788:	41 9e 00 4c 	beq     cr7,100157d4 <CommandHandle+0x42c>
			{
				res=json_loads(data,0,&error);
1001578c:	39 5f 01 3c 	addi    r10,r31,316
10015790:	39 3f 4f 5c 	addi    r9,r31,20316
10015794:	7d 43 53 78 	mr      r3,r10
10015798:	38 80 00 00 	li      r4,0
1001579c:	7d 25 4b 78 	mr      r5,r9
100157a0:	48 01 80 25 	bl      1002d7c4 <json_loads@plt>
100157a4:	90 7f 00 1c 	stw     r3,28(r31)
				json_object_set_new(ech,"result",res);
100157a8:	80 7f 50 60 	lwz     r3,20576(r31)
100157ac:	3d 20 10 02 	lis     r9,4098
100157b0:	38 89 b7 04 	addi    r4,r9,-18684
100157b4:	80 bf 00 1c 	lwz     r5,28(r31)
100157b8:	48 01 7e 25 	bl      1002d5dc <json_object_set_new@plt>
				json_object_set_new(json,"echo",ech);
100157bc:	80 7f 50 5c 	lwz     r3,20572(r31)
100157c0:	3d 20 10 02 	lis     r9,4098
100157c4:	38 89 b7 0c 	addi    r4,r9,-18676
100157c8:	80 bf 50 60 	lwz     r5,20576(r31)
100157cc:	48 01 7e 11 	bl      1002d5dc <json_object_set_new@plt>
100157d0:	48 00 00 3c 	b       1001580c <CommandHandle+0x464>
100157d4:	48 00 00 38 	b       1001580c <CommandHandle+0x464>
			}
        }
			
        else
        {
            strcpy(estr,"No the key of cmd");
100157d8:	81 3f 50 68 	lwz     r9,20584(r31)
100157dc:	3d 40 10 02 	lis     r10,4098
100157e0:	39 4a b7 14 	addi    r10,r10,-18668
100157e4:	80 aa 00 00 	lwz     r5,0(r10)
100157e8:	80 ca 00 04 	lwz     r6,4(r10)
100157ec:	80 ea 00 08 	lwz     r7,8(r10)
100157f0:	81 0a 00 0c 	lwz     r8,12(r10)
100157f4:	90 a9 00 00 	stw     r5,0(r9)
100157f8:	90 c9 00 04 	stw     r6,4(r9)
100157fc:	90 e9 00 08 	stw     r7,8(r9)
10015800:	91 09 00 0c 	stw     r8,12(r9)
10015804:	a1 4a 00 10 	lhz     r10,16(r10)
10015808:	b1 49 00 10 	sth     r10,16(r9)
        }
        json_decref(cmd);
1001580c:	80 7f 00 10 	lwz     r3,16(r31)
10015810:	4b ff f8 41 	bl      10015050 <json_decref>
10015814:	48 00 00 a8 	b       100158bc <CommandHandle+0x514>
    }
    else
    {
        strcpy(estr,"The Format is error");
10015818:	81 3f 50 68 	lwz     r9,20584(r31)
1001581c:	3d 40 10 02 	lis     r10,4098
10015820:	39 4a b7 28 	addi    r10,r10,-18648
10015824:	80 aa 00 00 	lwz     r5,0(r10)
10015828:	80 ca 00 04 	lwz     r6,4(r10)
1001582c:	80 ea 00 08 	lwz     r7,8(r10)
10015830:	81 0a 00 0c 	lwz     r8,12(r10)
10015834:	90 a9 00 00 	stw     r5,0(r9)
10015838:	90 c9 00 04 	stw     r6,4(r9)
1001583c:	90 e9 00 08 	stw     r7,8(r9)
10015840:	91 09 00 0c 	stw     r8,12(r9)
10015844:	81 4a 00 10 	lwz     r10,16(r10)
10015848:	91 49 00 10 	stw     r10,16(r9)
#if DEBUG
		json_object_set_new(json,"data",json_string(sstr));
1001584c:	80 7f 50 58 	lwz     r3,20568(r31)
10015850:	48 01 7d 9d 	bl      1002d5ec <json_string@plt>
10015854:	7c 69 1b 78 	mr      r9,r3
10015858:	80 7f 50 5c 	lwz     r3,20572(r31)
1001585c:	3d 40 10 02 	lis     r10,4098
10015860:	38 8a b7 3c 	addi    r4,r10,-18628
10015864:	7d 25 4b 78 	mr      r5,r9
10015868:	48 01 7d 75 	bl      1002d5dc <json_object_set_new@plt>
		json_object_set_new(json,"errinfo",json_string(error.text));
1001586c:	39 3f 00 20 	addi    r9,r31,32
10015870:	39 29 00 5c 	addi    r9,r9,92
10015874:	7d 23 4b 78 	mr      r3,r9
10015878:	48 01 7d 75 	bl      1002d5ec <json_string@plt>
1001587c:	7c 69 1b 78 	mr      r9,r3
10015880:	80 7f 50 5c 	lwz     r3,20572(r31)
10015884:	3d 40 10 02 	lis     r10,4098
10015888:	38 8a b7 44 	addi    r4,r10,-18620
1001588c:	7d 25 4b 78 	mr      r5,r9
10015890:	48 01 7d 4d 	bl      1002d5dc <json_object_set_new@plt>
		json_object_set_new(json,"err",json_string(error.source));
10015894:	39 3f 00 20 	addi    r9,r31,32
10015898:	39 29 00 0c 	addi    r9,r9,12
1001589c:	7d 23 4b 78 	mr      r3,r9
100158a0:	48 01 7d 4d 	bl      1002d5ec <json_string@plt>
100158a4:	7c 69 1b 78 	mr      r9,r3
100158a8:	80 7f 50 5c 	lwz     r3,20572(r31)
100158ac:	3d 40 10 02 	lis     r10,4098
100158b0:	38 8a b7 4c 	addi    r4,r10,-18612
100158b4:	7d 25 4b 78 	mr      r5,r9
100158b8:	48 01 7d 25 	bl      1002d5dc <json_object_set_new@plt>
#endif
    }
    json_decref(jsonget);
100158bc:	80 7f 00 0c 	lwz     r3,12(r31)
100158c0:	4b ff f7 91 	bl      10015050 <json_decref>
    return flag;
100158c4:	89 3f 00 08 	lbz     r9,8(r31)
100158c8:	55 29 06 3e 	clrlwi  r9,r9,24

}
100158cc:	7d 23 4b 78 	mr      r3,r9
100158d0:	39 7f 50 80 	addi    r11,r31,20608
100158d4:	80 0b 00 04 	lwz     r0,4(r11)
100158d8:	7c 08 03 a6 	mtlr    r0
100158dc:	83 eb ff fc 	lwz     r31,-4(r11)
100158e0:	7d 61 5b 78 	mr      r1,r11
100158e4:	4e 80 00 20 	blr

100158e8 <GetDeviceModuleName>:

uint8 GetDeviceModuleName(char *data,char *estr)
{
100158e8:	94 21 ff d0 	stwu    r1,-48(r1)
100158ec:	7c 08 02 a6 	mflr    r0
100158f0:	90 01 00 34 	stw     r0,52(r1)
100158f4:	93 e1 00 2c 	stw     r31,44(r1)
100158f8:	7c 3f 0b 78 	mr      r31,r1
100158fc:	90 7f 00 18 	stw     r3,24(r31)
10015900:	90 9f 00 1c 	stw     r4,28(r31)
	uint8 flag=0;
10015904:	39 20 00 00 	li      r9,0
10015908:	99 3f 00 08 	stb     r9,8(r31)
	json_t *json;
	json=json_object();
1001590c:	48 01 7b 71 	bl      1002d47c <json_object@plt>
10015910:	90 7f 00 0c 	stw     r3,12(r31)
	if(json)
10015914:	81 3f 00 0c 	lwz     r9,12(r31)
10015918:	2f 89 00 00 	cmpwi   cr7,r9,0
1001591c:	41 9e 00 74 	beq     cr7,10015990 <GetDeviceModuleName+0xa8>
	{
		char *str;
		json_object_set_new(json,"name",json_string("CMPS-34FD"));
10015920:	3d 20 10 02 	lis     r9,4098
10015924:	38 69 b7 50 	addi    r3,r9,-18608
10015928:	48 01 7c c5 	bl      1002d5ec <json_string@plt>
1001592c:	7c 69 1b 78 	mr      r9,r3
10015930:	80 7f 00 0c 	lwz     r3,12(r31)
10015934:	3d 40 10 02 	lis     r10,4098
10015938:	38 8a b7 5c 	addi    r4,r10,-18596
1001593c:	7d 25 4b 78 	mr      r5,r9
10015940:	48 01 7c 9d 	bl      1002d5dc <json_object_set_new@plt>
		str=json_dumps(json,JSON_PRESERVE_ORDER);
10015944:	80 7f 00 0c 	lwz     r3,12(r31)
10015948:	38 80 01 00 	li      r4,256
1001594c:	48 01 7e 69 	bl      1002d7b4 <json_dumps@plt>
10015950:	90 7f 00 10 	stw     r3,16(r31)
		strcpy(data,str);
10015954:	80 7f 00 18 	lwz     r3,24(r31)
10015958:	80 9f 00 10 	lwz     r4,16(r31)
1001595c:	48 01 7c 09 	bl      1002d564 <strcpy@plt>
		free(str);
10015960:	80 7f 00 10 	lwz     r3,16(r31)
10015964:	48 01 7a d1 	bl      1002d434 <free@plt>
		if(str)
10015968:	81 3f 00 10 	lwz     r9,16(r31)
1001596c:	2f 89 00 00 	cmpwi   cr7,r9,0
10015970:	41 9e 00 0c 	beq     cr7,1001597c <GetDeviceModuleName+0x94>
		{
			str=NULL;
10015974:	39 20 00 00 	li      r9,0
10015978:	91 3f 00 10 	stw     r9,16(r31)
		}
		flag=1;
1001597c:	39 20 00 01 	li      r9,1
10015980:	99 3f 00 08 	stb     r9,8(r31)
		json_decref(json);
10015984:	80 7f 00 0c 	lwz     r3,12(r31)
10015988:	4b ff f6 c9 	bl      10015050 <json_decref>
1001598c:	48 00 00 50 	b       100159dc <GetDeviceModuleName+0xf4>
	}
	else
	{
		strcpy(estr,"Error of command json init");
10015990:	81 3f 00 1c 	lwz     r9,28(r31)
10015994:	3d 40 10 02 	lis     r10,4098
10015998:	39 4a b7 64 	addi    r10,r10,-18588
1001599c:	80 aa 00 00 	lwz     r5,0(r10)
100159a0:	80 ca 00 04 	lwz     r6,4(r10)
100159a4:	80 ea 00 08 	lwz     r7,8(r10)
100159a8:	81 0a 00 0c 	lwz     r8,12(r10)
100159ac:	90 a9 00 00 	stw     r5,0(r9)
100159b0:	90 c9 00 04 	stw     r6,4(r9)
100159b4:	90 e9 00 08 	stw     r7,8(r9)
100159b8:	91 09 00 0c 	stw     r8,12(r9)
100159bc:	80 ca 00 10 	lwz     r6,16(r10)
100159c0:	80 ea 00 14 	lwz     r7,20(r10)
100159c4:	a1 0a 00 18 	lhz     r8,24(r10)
100159c8:	89 4a 00 1a 	lbz     r10,26(r10)
100159cc:	90 c9 00 10 	stw     r6,16(r9)
100159d0:	90 e9 00 14 	stw     r7,20(r9)
100159d4:	b1 09 00 18 	sth     r8,24(r9)
100159d8:	99 49 00 1a 	stb     r10,26(r9)
	}
	return flag;
100159dc:	89 3f 00 08 	lbz     r9,8(r31)
100159e0:	55 29 06 3e 	clrlwi  r9,r9,24
}
100159e4:	7d 23 4b 78 	mr      r3,r9
100159e8:	39 7f 00 30 	addi    r11,r31,48
100159ec:	80 0b 00 04 	lwz     r0,4(r11)
100159f0:	7c 08 03 a6 	mtlr    r0
100159f4:	83 eb ff fc 	lwz     r31,-4(r11)
100159f8:	7d 61 5b 78 	mr      r1,r11
100159fc:	4e 80 00 20 	blr

10015a00 <GetDeviceVideoInfo>:

uint8 GetDeviceVideoInfo(char *data,char *estr)
{
10015a00:	94 21 ff 10 	stwu    r1,-240(r1)
10015a04:	7c 08 02 a6 	mflr    r0
10015a08:	90 01 00 f4 	stw     r0,244(r1)
10015a0c:	91 c1 00 a8 	stw     r14,168(r1)
10015a10:	91 e1 00 ac 	stw     r15,172(r1)
10015a14:	92 01 00 b0 	stw     r16,176(r1)
10015a18:	92 21 00 b4 	stw     r17,180(r1)
10015a1c:	92 41 00 b8 	stw     r18,184(r1)
10015a20:	92 61 00 bc 	stw     r19,188(r1)
10015a24:	92 81 00 c0 	stw     r20,192(r1)
10015a28:	92 a1 00 c4 	stw     r21,196(r1)
10015a2c:	92 c1 00 c8 	stw     r22,200(r1)
10015a30:	92 e1 00 cc 	stw     r23,204(r1)
10015a34:	93 01 00 d0 	stw     r24,208(r1)
10015a38:	93 21 00 d4 	stw     r25,212(r1)
10015a3c:	93 41 00 d8 	stw     r26,216(r1)
10015a40:	93 61 00 dc 	stw     r27,220(r1)
10015a44:	93 81 00 e0 	stw     r28,224(r1)
10015a48:	93 a1 00 e4 	stw     r29,228(r1)
10015a4c:	93 c1 00 e8 	stw     r30,232(r1)
10015a50:	93 e1 00 ec 	stw     r31,236(r1)
10015a54:	7c 3f 0b 78 	mr      r31,r1
10015a58:	90 7f 00 88 	stw     r3,136(r31)
10015a5c:	90 9f 00 8c 	stw     r4,140(r31)
#if DEBUG
	struct timeval start,end;
	unsigned long time;
	json_t *test;
	test=json_array();
10015a60:	48 01 79 ad 	bl      1002d40c <json_array@plt>
10015a64:	90 7f 00 1c 	stw     r3,28(r31)
	//gettimeofday(&start,NULL);
#endif
	json_t *json,*port,*arr,*cpy;
	uint8 flag=0;
10015a68:	39 20 00 00 	li      r9,0
10015a6c:	99 3f 00 0c 	stb     r9,12(r31)
	json=json_object();
10015a70:	48 01 7a 0d 	bl      1002d47c <json_object@plt>
10015a74:	90 7f 00 20 	stw     r3,32(r31)
	port=json_object();
10015a78:	48 01 7a 05 	bl      1002d47c <json_object@plt>
10015a7c:	90 7f 00 24 	stw     r3,36(r31)
	arr=json_array();
10015a80:	48 01 79 8d 	bl      1002d40c <json_array@plt>
10015a84:	90 7f 00 28 	stw     r3,40(r31)
	cpy=json_object();
10015a88:	48 01 79 f5 	bl      1002d47c <json_object@plt>
10015a8c:	90 7f 00 08 	stw     r3,8(r31)
	if(json==(json_t*)0||port==(json_t *)0||arr==(json_t*)0||cpy==(json_t*)0)
10015a90:	81 3f 00 20 	lwz     r9,32(r31)
10015a94:	2f 89 00 00 	cmpwi   cr7,r9,0
10015a98:	41 9e 00 28 	beq     cr7,10015ac0 <GetDeviceVideoInfo+0xc0>
10015a9c:	81 3f 00 24 	lwz     r9,36(r31)
10015aa0:	2f 89 00 00 	cmpwi   cr7,r9,0
10015aa4:	41 9e 00 1c 	beq     cr7,10015ac0 <GetDeviceVideoInfo+0xc0>
10015aa8:	81 3f 00 28 	lwz     r9,40(r31)
10015aac:	2f 89 00 00 	cmpwi   cr7,r9,0
10015ab0:	41 9e 00 10 	beq     cr7,10015ac0 <GetDeviceVideoInfo+0xc0>
10015ab4:	81 3f 00 08 	lwz     r9,8(r31)
10015ab8:	2f 89 00 00 	cmpwi   cr7,r9,0
10015abc:	40 9e 00 5c 	bne     cr7,10015b18 <GetDeviceVideoInfo+0x118>
	{
		strcpy(estr,"Get video info json init error");
10015ac0:	81 3f 00 8c 	lwz     r9,140(r31)
10015ac4:	3d 40 10 02 	lis     r10,4098
10015ac8:	39 4a b7 80 	addi    r10,r10,-18560
10015acc:	80 aa 00 00 	lwz     r5,0(r10)
10015ad0:	80 ca 00 04 	lwz     r6,4(r10)
10015ad4:	80 ea 00 08 	lwz     r7,8(r10)
10015ad8:	81 0a 00 0c 	lwz     r8,12(r10)
10015adc:	90 a9 00 00 	stw     r5,0(r9)
10015ae0:	90 c9 00 04 	stw     r6,4(r9)
10015ae4:	90 e9 00 08 	stw     r7,8(r9)
10015ae8:	91 09 00 0c 	stw     r8,12(r9)
10015aec:	80 aa 00 10 	lwz     r5,16(r10)
10015af0:	80 ca 00 14 	lwz     r6,20(r10)
10015af4:	80 ea 00 18 	lwz     r7,24(r10)
10015af8:	a1 0a 00 1c 	lhz     r8,28(r10)
10015afc:	90 a9 00 10 	stw     r5,16(r9)
10015b00:	90 c9 00 14 	stw     r6,20(r9)
10015b04:	90 e9 00 18 	stw     r7,24(r9)
10015b08:	b1 09 00 1c 	sth     r8,28(r9)
10015b0c:	89 4a 00 1e 	lbz     r10,30(r10)
10015b10:	99 49 00 1e 	stb     r10,30(r9)
10015b14:	48 00 07 fc 	b       10016310 <GetDeviceVideoInfo+0x910>
10015b18:	7c 29 0b 78 	mr      r9,r1
10015b1c:	7d 2e 4b 78 	mr      r14,r9
	}
	else
	{
#if DEBUG
		json_object_set_new(json,"i",json_integer(0));
10015b20:	38 60 00 00 	li      r3,0
10015b24:	38 80 00 00 	li      r4,0
10015b28:	48 01 79 25 	bl      1002d44c <json_integer@plt>
10015b2c:	7c 69 1b 78 	mr      r9,r3
10015b30:	80 7f 00 20 	lwz     r3,32(r31)
10015b34:	3d 40 10 02 	lis     r10,4098
10015b38:	38 8a b7 a0 	addi    r4,r10,-18528
10015b3c:	7d 25 4b 78 	mr      r5,r9
10015b40:	48 01 7a 9d 	bl      1002d5dc <json_object_set_new@plt>
		json_object_set_new(json,"routting",json_integer(0));
10015b44:	38 60 00 00 	li      r3,0
10015b48:	38 80 00 00 	li      r4,0
10015b4c:	48 01 79 01 	bl      1002d44c <json_integer@plt>
10015b50:	7c 69 1b 78 	mr      r9,r3
10015b54:	80 7f 00 20 	lwz     r3,32(r31)
10015b58:	3d 40 10 02 	lis     r10,4098
10015b5c:	38 8a b7 a4 	addi    r4,r10,-18524
10015b60:	7d 25 4b 78 	mr      r5,r9
10015b64:	48 01 7a 79 	bl      1002d5dc <json_object_set_new@plt>
		json_object_set_new(json,"time",test);
10015b68:	80 7f 00 20 	lwz     r3,32(r31)
10015b6c:	3d 20 10 02 	lis     r9,4098
10015b70:	38 89 b7 b0 	addi    r4,r9,-18512
10015b74:	80 bf 00 1c 	lwz     r5,28(r31)
10015b78:	48 01 7a 65 	bl      1002d5dc <json_object_set_new@plt>
#endif
		json_object_set_new(json,"Port",arr);
10015b7c:	80 7f 00 20 	lwz     r3,32(r31)
10015b80:	3d 20 10 02 	lis     r9,4098
10015b84:	38 89 b7 b8 	addi    r4,r9,-18504
10015b88:	80 bf 00 28 	lwz     r5,40(r31)
10015b8c:	48 01 7a 51 	bl      1002d5dc <json_object_set_new@plt>
		json_object_set_new(port,"index",json_integer(1));
10015b90:	38 60 00 00 	li      r3,0
10015b94:	38 80 00 01 	li      r4,1
10015b98:	48 01 78 b5 	bl      1002d44c <json_integer@plt>
10015b9c:	7c 69 1b 78 	mr      r9,r3
10015ba0:	80 7f 00 24 	lwz     r3,36(r31)
10015ba4:	3d 40 10 02 	lis     r10,4098
10015ba8:	38 8a b7 c0 	addi    r4,r10,-18496
10015bac:	7d 25 4b 78 	mr      r5,r9
10015bb0:	48 01 7a 2d 	bl      1002d5dc <json_object_set_new@plt>
		json_object_set_new(port,"Dir",json_string("In"));
10015bb4:	3d 20 10 02 	lis     r9,4098
10015bb8:	38 69 b7 c8 	addi    r3,r9,-18488
10015bbc:	48 01 7a 31 	bl      1002d5ec <json_string@plt>
10015bc0:	7c 69 1b 78 	mr      r9,r3
10015bc4:	80 7f 00 24 	lwz     r3,36(r31)
10015bc8:	3d 40 10 02 	lis     r10,4098
10015bcc:	38 8a b7 cc 	addi    r4,r10,-18484
10015bd0:	7d 25 4b 78 	mr      r5,r9
10015bd4:	48 01 7a 09 	bl      1002d5dc <json_object_set_new@plt>
		json_object_set_new(port,"status",json_string("On"));
10015bd8:	3d 20 10 02 	lis     r9,4098
10015bdc:	38 69 b7 d0 	addi    r3,r9,-18480
10015be0:	48 01 7a 0d 	bl      1002d5ec <json_string@plt>
10015be4:	7c 69 1b 78 	mr      r9,r3
10015be8:	80 7f 00 24 	lwz     r3,36(r31)
10015bec:	3d 40 10 02 	lis     r10,4098
10015bf0:	38 8a b7 d4 	addi    r4,r10,-18476
10015bf4:	7d 25 4b 78 	mr      r5,r9
10015bf8:	48 01 79 e5 	bl      1002d5dc <json_object_set_new@plt>
		json_object_set_new(port,"switch",json_null());
10015bfc:	48 01 7b 29 	bl      1002d724 <json_null@plt>
10015c00:	7c 69 1b 78 	mr      r9,r3
10015c04:	80 7f 00 24 	lwz     r3,36(r31)
10015c08:	3d 40 10 02 	lis     r10,4098
10015c0c:	38 8a b7 dc 	addi    r4,r10,-18468
10015c10:	7d 25 4b 78 	mr      r5,r9
10015c14:	48 01 79 c9 	bl      1002d5dc <json_object_set_new@plt>
		flag=1;
10015c18:	39 20 00 01 	li      r9,1
10015c1c:	99 3f 00 0c 	stb     r9,12(r31)
		int portinfo[ligPorts];
10015c20:	3d 20 10 03 	lis     r9,4099
10015c24:	89 29 d3 50 	lbz     r9,-11440(r9)
10015c28:	55 29 06 3e 	clrlwi  r9,r9,24
10015c2c:	7d 2a 4b 78 	mr      r10,r9
10015c30:	39 4a ff ff 	addi    r10,r10,-1
10015c34:	91 5f 00 2c 	stw     r10,44(r31)
10015c38:	7d 3c 4b 78 	mr      r28,r9
10015c3c:	3b 60 00 00 	li      r27,0
10015c40:	57 8a 2e fe 	rlwinm  r10,r28,5,27,31
10015c44:	57 77 28 34 	rlwinm  r23,r27,5,0,26
10015c48:	7d 57 bb 78 	or      r23,r10,r23
10015c4c:	57 98 28 34 	rlwinm  r24,r28,5,0,26
10015c50:	7d 3e 4b 78 	mr      r30,r9
10015c54:	3b a0 00 00 	li      r29,0
10015c58:	57 ca 2e fe 	rlwinm  r10,r30,5,27,31
10015c5c:	57 b9 28 34 	rlwinm  r25,r29,5,0,26
10015c60:	7d 59 cb 78 	or      r25,r10,r25
10015c64:	57 da 28 34 	rlwinm  r26,r30,5,0,26
10015c68:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10015c6c:	39 29 00 03 	addi    r9,r9,3
10015c70:	39 29 00 0f 	addi    r9,r9,15
10015c74:	55 29 e1 3e 	rlwinm  r9,r9,28,4,31
10015c78:	55 29 20 36 	rlwinm  r9,r9,4,0,27
10015c7c:	81 41 00 00 	lwz     r10,0(r1)
10015c80:	7d 29 00 d0 	neg     r9,r9
10015c84:	7d 41 49 6e 	stwux   r10,r1,r9
10015c88:	39 21 00 08 	addi    r9,r1,8
10015c8c:	39 29 00 03 	addi    r9,r9,3
10015c90:	55 29 f0 be 	rlwinm  r9,r9,30,2,31
10015c94:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10015c98:	91 3f 00 30 	stw     r9,48(r31)
		memset(portinfo,0,ligPorts);
10015c9c:	81 5f 00 30 	lwz     r10,48(r31)
10015ca0:	3d 20 10 03 	lis     r9,4099
10015ca4:	89 29 d3 50 	lbz     r9,-11440(r9)
10015ca8:	55 29 06 3e 	clrlwi  r9,r9,24
10015cac:	7d 43 53 78 	mr      r3,r10
10015cb0:	38 80 00 00 	li      r4,0
10015cb4:	7d 25 4b 78 	mr      r5,r9
10015cb8:	48 01 7a 0d 	bl      1002d6c4 <memset@plt>
		memset(switchinfo,0,ligPorts);
10015cbc:	3d 20 10 03 	lis     r9,4099
10015cc0:	89 29 d3 50 	lbz     r9,-11440(r9)
10015cc4:	55 29 06 3e 	clrlwi  r9,r9,24
10015cc8:	3d 40 10 03 	lis     r10,4099
10015ccc:	38 6a df d4 	addi    r3,r10,-8236
10015cd0:	38 80 00 00 	li      r4,0
10015cd4:	7d 25 4b 78 	mr      r5,r9
10015cd8:	48 01 79 ed 	bl      1002d6c4 <memset@plt>
		int i,in,index=0,iindex=0;
10015cdc:	39 20 00 00 	li      r9,0
10015ce0:	91 3f 00 14 	stw     r9,20(r31)
10015ce4:	39 20 00 00 	li      r9,0
10015ce8:	91 3f 00 18 	stw     r9,24(r31)
		for(i=1;i<=(ligPorts/2);i++)
10015cec:	39 20 00 01 	li      r9,1
10015cf0:	91 3f 00 10 	stw     r9,16(r31)
10015cf4:	48 00 00 fc 	b       10015df0 <GetDeviceVideoInfo+0x3f0>
		{
#if DEBUG
			gettimeofday(&start,NULL);
10015cf8:	39 3f 00 40 	addi    r9,r31,64
10015cfc:	7d 23 4b 78 	mr      r3,r9
10015d00:	38 80 00 00 	li      r4,0
10015d04:	48 01 77 91 	bl      1002d494 <gettimeofday@plt>
#endif
			in=lig_matrix_get_slot_online_state(lighandle,i);
10015d08:	3d 20 10 03 	lis     r9,4099
10015d0c:	81 49 d3 6c 	lwz     r10,-11412(r9)
10015d10:	81 3f 00 10 	lwz     r9,16(r31)
10015d14:	7d 43 53 78 	mr      r3,r10
10015d18:	7d 24 4b 78 	mr      r4,r9
10015d1c:	48 01 77 71 	bl      1002d48c <lig_matrix_get_slot_online_state@plt>
10015d20:	90 7f 00 34 	stw     r3,52(r31)
#if DEBUG
			gettimeofday(&end,NULL);
10015d24:	39 3f 00 48 	addi    r9,r31,72
10015d28:	7d 23 4b 78 	mr      r3,r9
10015d2c:	38 80 00 00 	li      r4,0
10015d30:	48 01 77 65 	bl      1002d494 <gettimeofday@plt>
			time=1000000*(end.tv_sec-start.tv_sec)+end.tv_usec-start.tv_usec;
10015d34:	81 5f 00 48 	lwz     r10,72(r31)
10015d38:	81 3f 00 40 	lwz     r9,64(r31)
10015d3c:	7d 49 50 50 	subf    r10,r9,r10
10015d40:	3d 20 00 0f 	lis     r9,15
10015d44:	61 29 42 40 	ori     r9,r9,16960
10015d48:	7d 4a 49 d6 	mullw   r10,r10,r9
10015d4c:	81 3f 00 4c 	lwz     r9,76(r31)
10015d50:	7d 4a 4a 14 	add     r10,r10,r9
10015d54:	81 3f 00 44 	lwz     r9,68(r31)
10015d58:	7d 29 50 50 	subf    r9,r9,r10
10015d5c:	91 3f 00 38 	stw     r9,56(r31)
			json_array_append(test,json_integer(time));
10015d60:	81 3f 00 38 	lwz     r9,56(r31)
10015d64:	91 3f 00 94 	stw     r9,148(r31)
10015d68:	39 20 00 00 	li      r9,0
10015d6c:	91 3f 00 90 	stw     r9,144(r31)
10015d70:	80 7f 00 90 	lwz     r3,144(r31)
10015d74:	80 9f 00 94 	lwz     r4,148(r31)
10015d78:	48 01 76 d5 	bl      1002d44c <json_integer@plt>
10015d7c:	7c 69 1b 78 	mr      r9,r3
10015d80:	80 7f 00 1c 	lwz     r3,28(r31)
10015d84:	7d 24 4b 78 	mr      r4,r9
10015d88:	4b ff f3 a9 	bl      10015130 <json_array_append>
#endif
			if(in)
10015d8c:	81 3f 00 34 	lwz     r9,52(r31)
10015d90:	2f 89 00 00 	cmpwi   cr7,r9,0
10015d94:	41 9e 00 50 	beq     cr7,10015de4 <GetDeviceVideoInfo+0x3e4>
			{
				portinfo[index++]=2*i-1;
10015d98:	81 3f 00 14 	lwz     r9,20(r31)
10015d9c:	39 49 00 01 	addi    r10,r9,1
10015da0:	91 5f 00 14 	stw     r10,20(r31)
10015da4:	81 5f 00 10 	lwz     r10,16(r31)
10015da8:	55 4a 08 3c 	rlwinm  r10,r10,1,0,30
10015dac:	39 4a ff ff 	addi    r10,r10,-1
10015db0:	81 1f 00 30 	lwz     r8,48(r31)
10015db4:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10015db8:	7d 28 4a 14 	add     r9,r8,r9
10015dbc:	91 49 00 00 	stw     r10,0(r9)
				portinfo[index++]=2*i;
10015dc0:	81 3f 00 14 	lwz     r9,20(r31)
10015dc4:	39 49 00 01 	addi    r10,r9,1
10015dc8:	91 5f 00 14 	stw     r10,20(r31)
10015dcc:	81 5f 00 10 	lwz     r10,16(r31)
10015dd0:	55 4a 08 3c 	rlwinm  r10,r10,1,0,30
10015dd4:	81 1f 00 30 	lwz     r8,48(r31)
10015dd8:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10015ddc:	7d 28 4a 14 	add     r9,r8,r9
10015de0:	91 49 00 00 	stw     r10,0(r9)
		flag=1;
		int portinfo[ligPorts];
		memset(portinfo,0,ligPorts);
		memset(switchinfo,0,ligPorts);
		int i,in,index=0,iindex=0;
		for(i=1;i<=(ligPorts/2);i++)
10015de4:	81 3f 00 10 	lwz     r9,16(r31)
10015de8:	39 29 00 01 	addi    r9,r9,1
10015dec:	91 3f 00 10 	stw     r9,16(r31)
10015df0:	3d 20 10 03 	lis     r9,4099
10015df4:	89 29 d3 50 	lbz     r9,-11440(r9)
10015df8:	55 29 06 3e 	clrlwi  r9,r9,24
10015dfc:	55 29 f8 7e 	rlwinm  r9,r9,31,1,31
10015e00:	55 29 06 3e 	clrlwi  r9,r9,24
10015e04:	7d 2a 4b 78 	mr      r10,r9
10015e08:	81 3f 00 10 	lwz     r9,16(r31)
10015e0c:	7f 8a 48 00 	cmpw    cr7,r10,r9
10015e10:	40 9c fe e8 	bge     cr7,10015cf8 <GetDeviceVideoInfo+0x2f8>
				portinfo[index++]=2*i;
			}
		}
		LIG_MATRIX_OBJ_INPUT_SIGNAL in_info;
		LIG_MATRIX_OBJ_OUTPUT_DISPLAY out_info;
		i=0;
10015e14:	39 20 00 00 	li      r9,0
10015e18:	91 3f 00 10 	stw     r9,16(r31)
#ifdef DEBUG
            json_object_set(port,"i",json_integer(i));
10015e1c:	81 3f 00 10 	lwz     r9,16(r31)
10015e20:	91 3f 00 9c 	stw     r9,156(r31)
10015e24:	7d 29 fe 70 	srawi   r9,r9,31
10015e28:	91 3f 00 98 	stw     r9,152(r31)
10015e2c:	80 7f 00 98 	lwz     r3,152(r31)
10015e30:	80 9f 00 9c 	lwz     r4,156(r31)
10015e34:	48 01 76 19 	bl      1002d44c <json_integer@plt>
10015e38:	7c 69 1b 78 	mr      r9,r3
10015e3c:	80 7f 00 24 	lwz     r3,36(r31)
10015e40:	3d 40 10 02 	lis     r10,4098
10015e44:	38 8a b7 a0 	addi    r4,r10,-18528
10015e48:	7d 25 4b 78 	mr      r5,r9
10015e4c:	4b ff f2 89 	bl      100150d4 <json_object_set>
#endif
		while(portinfo[i]>0)
10015e50:	48 00 04 40 	b       10016290 <GetDeviceVideoInfo+0x890>
		{
#if DEBUG
			json_object_set(port,"i",json_integer(i));
10015e54:	81 3f 00 10 	lwz     r9,16(r31)
10015e58:	7d 36 4b 78 	mr      r22,r9
10015e5c:	7d 29 fe 70 	srawi   r9,r9,31
10015e60:	7d 35 4b 78 	mr      r21,r9
10015e64:	7e a3 ab 78 	mr      r3,r21
10015e68:	7e c4 b3 78 	mr      r4,r22
10015e6c:	48 01 75 e1 	bl      1002d44c <json_integer@plt>
10015e70:	7c 69 1b 78 	mr      r9,r3
10015e74:	80 7f 00 24 	lwz     r3,36(r31)
10015e78:	3d 40 10 02 	lis     r10,4098
10015e7c:	38 8a b7 a0 	addi    r4,r10,-18528
10015e80:	7d 25 4b 78 	mr      r5,r9
10015e84:	4b ff f2 51 	bl      100150d4 <json_object_set>
#endif		
			json_object_set(port,"index",json_integer(portinfo[i]));
10015e88:	81 5f 00 30 	lwz     r10,48(r31)
10015e8c:	81 3f 00 10 	lwz     r9,16(r31)
10015e90:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10015e94:	7d 2a 4a 14 	add     r9,r10,r9
10015e98:	81 29 00 00 	lwz     r9,0(r9)
10015e9c:	7d 34 4b 78 	mr      r20,r9
10015ea0:	7d 29 fe 70 	srawi   r9,r9,31
10015ea4:	7d 33 4b 78 	mr      r19,r9
10015ea8:	7e 63 9b 78 	mr      r3,r19
10015eac:	7e 84 a3 78 	mr      r4,r20
10015eb0:	48 01 75 9d 	bl      1002d44c <json_integer@plt>
10015eb4:	7c 69 1b 78 	mr      r9,r3
10015eb8:	80 7f 00 24 	lwz     r3,36(r31)
10015ebc:	3d 40 10 02 	lis     r10,4098
10015ec0:	38 8a b7 c0 	addi    r4,r10,-18496
10015ec4:	7d 25 4b 78 	mr      r5,r9
10015ec8:	4b ff f2 0d 	bl      100150d4 <json_object_set>
#if DEBUG
            gettimeofday(&start,NULL);
10015ecc:	39 3f 00 40 	addi    r9,r31,64
10015ed0:	7d 23 4b 78 	mr      r3,r9
10015ed4:	38 80 00 00 	li      r4,0
10015ed8:	48 01 75 bd 	bl      1002d494 <gettimeofday@plt>
#endif
			in=lig_matrix_get_video_pipe_io(lighandle,portinfo[i]);
10015edc:	3d 20 10 03 	lis     r9,4099
10015ee0:	81 49 d3 6c 	lwz     r10,-11412(r9)
10015ee4:	81 1f 00 30 	lwz     r8,48(r31)
10015ee8:	81 3f 00 10 	lwz     r9,16(r31)
10015eec:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10015ef0:	7d 28 4a 14 	add     r9,r8,r9
10015ef4:	81 29 00 00 	lwz     r9,0(r9)
10015ef8:	7d 43 53 78 	mr      r3,r10
10015efc:	7d 24 4b 78 	mr      r4,r9
10015f00:	48 01 76 45 	bl      1002d544 <lig_matrix_get_video_pipe_io@plt>
10015f04:	90 7f 00 34 	stw     r3,52(r31)
#if DEBUG
            gettimeofday(&end,NULL);
10015f08:	39 3f 00 48 	addi    r9,r31,72
10015f0c:	7d 23 4b 78 	mr      r3,r9
10015f10:	38 80 00 00 	li      r4,0
10015f14:	48 01 75 81 	bl      1002d494 <gettimeofday@plt>
            time=1000000*(end.tv_sec-start.tv_sec)+end.tv_usec-start.tv_usec;
10015f18:	81 5f 00 48 	lwz     r10,72(r31)
10015f1c:	81 3f 00 40 	lwz     r9,64(r31)
10015f20:	7d 49 50 50 	subf    r10,r9,r10
10015f24:	3d 20 00 0f 	lis     r9,15
10015f28:	61 29 42 40 	ori     r9,r9,16960
10015f2c:	7d 4a 49 d6 	mullw   r10,r10,r9
10015f30:	81 3f 00 4c 	lwz     r9,76(r31)
10015f34:	7d 4a 4a 14 	add     r10,r10,r9
10015f38:	81 3f 00 44 	lwz     r9,68(r31)
10015f3c:	7d 29 50 50 	subf    r9,r9,r10
10015f40:	91 3f 00 38 	stw     r9,56(r31)
            json_array_append(test,json_integer(time));
10015f44:	81 3f 00 38 	lwz     r9,56(r31)
10015f48:	7d 32 4b 78 	mr      r18,r9
10015f4c:	3a 20 00 00 	li      r17,0
10015f50:	7e 23 8b 78 	mr      r3,r17
10015f54:	7e 44 93 78 	mr      r4,r18
10015f58:	48 01 74 f5 	bl      1002d44c <json_integer@plt>
10015f5c:	7c 69 1b 78 	mr      r9,r3
10015f60:	80 7f 00 1c 	lwz     r3,28(r31)
10015f64:	7d 24 4b 78 	mr      r4,r9
10015f68:	4b ff f1 c9 	bl      10015130 <json_array_append>
#endif
			if(0==in)
10015f6c:	81 3f 00 34 	lwz     r9,52(r31)
10015f70:	2f 89 00 00 	cmpwi   cr7,r9,0
10015f74:	40 9e 01 0c 	bne     cr7,10016080 <GetDeviceVideoInfo+0x680>
			{
				json_object_set(port,"Dir",json_string("In"));
10015f78:	3d 20 10 02 	lis     r9,4098
10015f7c:	38 69 b7 c8 	addi    r3,r9,-18488
10015f80:	48 01 76 6d 	bl      1002d5ec <json_string@plt>
10015f84:	7c 69 1b 78 	mr      r9,r3
10015f88:	80 7f 00 24 	lwz     r3,36(r31)
10015f8c:	3d 40 10 02 	lis     r10,4098
10015f90:	38 8a b7 cc 	addi    r4,r10,-18484
10015f94:	7d 25 4b 78 	mr      r5,r9
10015f98:	4b ff f1 3d 	bl      100150d4 <json_object_set>
				//input
				in=lig_matrix_get_port_input_signal_information(lighandle,portinfo[i],&in_info);
10015f9c:	3d 20 10 03 	lis     r9,4099
10015fa0:	81 09 d3 6c 	lwz     r8,-11412(r9)
10015fa4:	81 5f 00 30 	lwz     r10,48(r31)
10015fa8:	81 3f 00 10 	lwz     r9,16(r31)
10015fac:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10015fb0:	7d 2a 4a 14 	add     r9,r10,r9
10015fb4:	81 29 00 00 	lwz     r9,0(r9)
10015fb8:	7d 2a 4b 78 	mr      r10,r9
10015fbc:	39 3f 00 50 	addi    r9,r31,80
10015fc0:	7d 03 43 78 	mr      r3,r8
10015fc4:	7d 44 53 78 	mr      r4,r10
10015fc8:	7d 25 4b 78 	mr      r5,r9
10015fcc:	48 01 76 41 	bl      1002d60c <lig_matrix_get_port_input_signal_information@plt>
10015fd0:	90 7f 00 34 	stw     r3,52(r31)
				if(in)
10015fd4:	81 3f 00 34 	lwz     r9,52(r31)
10015fd8:	2f 89 00 00 	cmpwi   cr7,r9,0
10015fdc:	41 9e 00 14 	beq     cr7,10015ff0 <GetDeviceVideoInfo+0x5f0>
				{
					//error
					i++;
10015fe0:	81 3f 00 10 	lwz     r9,16(r31)
10015fe4:	39 29 00 01 	addi    r9,r9,1
10015fe8:	91 3f 00 10 	stw     r9,16(r31)
					continue;
10015fec:	48 00 02 a4 	b       10016290 <GetDeviceVideoInfo+0x890>
				}
				else
				{
					//
					if(in_info.signal_status==1)
10015ff0:	81 3f 00 54 	lwz     r9,84(r31)
10015ff4:	2f 89 00 01 	cmpwi   cr7,r9,1
10015ff8:	40 9e 00 2c 	bne     cr7,10016024 <GetDeviceVideoInfo+0x624>
					{
						json_object_set(port,"status",json_string("On"));
10015ffc:	3d 20 10 02 	lis     r9,4098
10016000:	38 69 b7 d0 	addi    r3,r9,-18480
10016004:	48 01 75 e9 	bl      1002d5ec <json_string@plt>
10016008:	7c 69 1b 78 	mr      r9,r3
1001600c:	80 7f 00 24 	lwz     r3,36(r31)
10016010:	3d 40 10 02 	lis     r10,4098
10016014:	38 8a b7 d4 	addi    r4,r10,-18476
10016018:	7d 25 4b 78 	mr      r5,r9
1001601c:	4b ff f0 b9 	bl      100150d4 <json_object_set>
10016020:	48 00 00 28 	b       10016048 <GetDeviceVideoInfo+0x648>
					}
					else
					{
						json_object_set(port,"status",json_string("Off"));
10016024:	3d 20 10 02 	lis     r9,4098
10016028:	38 69 b7 e4 	addi    r3,r9,-18460
1001602c:	48 01 75 c1 	bl      1002d5ec <json_string@plt>
10016030:	7c 69 1b 78 	mr      r9,r3
10016034:	80 7f 00 24 	lwz     r3,36(r31)
10016038:	3d 40 10 02 	lis     r10,4098
1001603c:	38 8a b7 d4 	addi    r4,r10,-18476
10016040:	7d 25 4b 78 	mr      r5,r9
10016044:	4b ff f0 91 	bl      100150d4 <json_object_set>
					}
				}
				json_object_set(port,"switch",json_null());
10016048:	48 01 76 dd 	bl      1002d724 <json_null@plt>
1001604c:	7c 69 1b 78 	mr      r9,r3
10016050:	80 7f 00 24 	lwz     r3,36(r31)
10016054:	3d 40 10 02 	lis     r10,4098
10016058:	38 8a b7 dc 	addi    r4,r10,-18468
1001605c:	7d 25 4b 78 	mr      r5,r9
10016060:	4b ff f0 75 	bl      100150d4 <json_object_set>
				cpy=json_deep_copy(port);
10016064:	80 7f 00 24 	lwz     r3,36(r31)
10016068:	48 01 76 b5 	bl      1002d71c <json_deep_copy@plt>
1001606c:	90 7f 00 08 	stw     r3,8(r31)
				json_array_append(arr,cpy);
10016070:	80 7f 00 28 	lwz     r3,40(r31)
10016074:	80 9f 00 08 	lwz     r4,8(r31)
10016078:	4b ff f0 b9 	bl      10015130 <json_array_append>
1001607c:	48 00 02 08 	b       10016284 <GetDeviceVideoInfo+0x884>
			}				
			else if(1==in)
10016080:	81 3f 00 34 	lwz     r9,52(r31)
10016084:	2f 89 00 01 	cmpwi   cr7,r9,1
10016088:	40 9e 01 fc 	bne     cr7,10016284 <GetDeviceVideoInfo+0x884>
			{
				//output
				switchinfo[iindex]=portinfo[i];
1001608c:	81 5f 00 30 	lwz     r10,48(r31)
10016090:	81 3f 00 10 	lwz     r9,16(r31)
10016094:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10016098:	7d 2a 4a 14 	add     r9,r10,r9
1001609c:	81 29 00 00 	lwz     r9,0(r9)
100160a0:	55 2a 06 3e 	clrlwi  r10,r9,24
100160a4:	3d 20 10 03 	lis     r9,4099
100160a8:	39 09 df d4 	addi    r8,r9,-8236
100160ac:	81 3f 00 18 	lwz     r9,24(r31)
100160b0:	7d 28 4a 14 	add     r9,r8,r9
100160b4:	99 49 00 00 	stb     r10,0(r9)
#if DEBUG
				json_object_set(port,"routting",json_integer(switchinfo[iindex]));
100160b8:	3d 20 10 03 	lis     r9,4099
100160bc:	39 49 df d4 	addi    r10,r9,-8236
100160c0:	81 3f 00 18 	lwz     r9,24(r31)
100160c4:	7d 2a 4a 14 	add     r9,r10,r9
100160c8:	89 29 00 00 	lbz     r9,0(r9)
100160cc:	55 29 06 3e 	clrlwi  r9,r9,24
100160d0:	7d 30 4b 78 	mr      r16,r9
100160d4:	39 e0 00 00 	li      r15,0
100160d8:	7d e3 7b 78 	mr      r3,r15
100160dc:	7e 04 83 78 	mr      r4,r16
100160e0:	48 01 73 6d 	bl      1002d44c <json_integer@plt>
100160e4:	7c 69 1b 78 	mr      r9,r3
100160e8:	80 7f 00 24 	lwz     r3,36(r31)
100160ec:	3d 40 10 02 	lis     r10,4098
100160f0:	38 8a b7 a4 	addi    r4,r10,-18524
100160f4:	7d 25 4b 78 	mr      r5,r9
100160f8:	4b ff ef dd 	bl      100150d4 <json_object_set>
#endif
				iindex++;
100160fc:	81 3f 00 18 	lwz     r9,24(r31)
10016100:	39 29 00 01 	addi    r9,r9,1
10016104:	91 3f 00 18 	stw     r9,24(r31)
				json_object_set(port,"Dir",json_string("Out"));
10016108:	3d 20 10 02 	lis     r9,4098
1001610c:	38 69 b7 e8 	addi    r3,r9,-18456
10016110:	48 01 74 dd 	bl      1002d5ec <json_string@plt>
10016114:	7c 69 1b 78 	mr      r9,r3
10016118:	80 7f 00 24 	lwz     r3,36(r31)
1001611c:	3d 40 10 02 	lis     r10,4098
10016120:	38 8a b7 cc 	addi    r4,r10,-18484
10016124:	7d 25 4b 78 	mr      r5,r9
10016128:	4b ff ef ad 	bl      100150d4 <json_object_set>
				in=lig_matrix_get_port_output_display_information(lighandle,portinfo[i],&out_info);
1001612c:	3d 20 10 03 	lis     r9,4099
10016130:	81 09 d3 6c 	lwz     r8,-11412(r9)
10016134:	81 5f 00 30 	lwz     r10,48(r31)
10016138:	81 3f 00 10 	lwz     r9,16(r31)
1001613c:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10016140:	7d 2a 4a 14 	add     r9,r10,r9
10016144:	81 29 00 00 	lwz     r9,0(r9)
10016148:	7d 2a 4b 78 	mr      r10,r9
1001614c:	39 3f 00 6c 	addi    r9,r31,108
10016150:	7d 03 43 78 	mr      r3,r8
10016154:	7d 44 53 78 	mr      r4,r10
10016158:	7d 25 4b 78 	mr      r5,r9
1001615c:	48 01 72 e9 	bl      1002d444 <lig_matrix_get_port_output_display_information@plt>
10016160:	90 7f 00 34 	stw     r3,52(r31)
				if(in)
10016164:	81 3f 00 34 	lwz     r9,52(r31)
10016168:	2f 89 00 00 	cmpwi   cr7,r9,0
1001616c:	41 9e 00 14 	beq     cr7,10016180 <GetDeviceVideoInfo+0x780>
				{
					//error
					i++;
10016170:	81 3f 00 10 	lwz     r9,16(r31)
10016174:	39 29 00 01 	addi    r9,r9,1
10016178:	91 3f 00 10 	stw     r9,16(r31)
					continue;
1001617c:	48 00 01 14 	b       10016290 <GetDeviceVideoInfo+0x890>
				}
				else
				{
					//
					if(out_info.display_status==1)
10016180:	81 3f 00 70 	lwz     r9,112(r31)
10016184:	2f 89 00 01 	cmpwi   cr7,r9,1
10016188:	40 9e 00 2c 	bne     cr7,100161b4 <GetDeviceVideoInfo+0x7b4>
					{
						json_object_set(port,"status",json_string("On"));	
1001618c:	3d 20 10 02 	lis     r9,4098
10016190:	38 69 b7 d0 	addi    r3,r9,-18480
10016194:	48 01 74 59 	bl      1002d5ec <json_string@plt>
10016198:	7c 69 1b 78 	mr      r9,r3
1001619c:	80 7f 00 24 	lwz     r3,36(r31)
100161a0:	3d 40 10 02 	lis     r10,4098
100161a4:	38 8a b7 d4 	addi    r4,r10,-18476
100161a8:	7d 25 4b 78 	mr      r5,r9
100161ac:	4b ff ef 29 	bl      100150d4 <json_object_set>
100161b0:	48 00 00 28 	b       100161d8 <GetDeviceVideoInfo+0x7d8>
					}
					else
					{
						json_object_set(port,"status",json_string("Off"));
100161b4:	3d 20 10 02 	lis     r9,4098
100161b8:	38 69 b7 e4 	addi    r3,r9,-18460
100161bc:	48 01 74 31 	bl      1002d5ec <json_string@plt>
100161c0:	7c 69 1b 78 	mr      r9,r3
100161c4:	80 7f 00 24 	lwz     r3,36(r31)
100161c8:	3d 40 10 02 	lis     r10,4098
100161cc:	38 8a b7 d4 	addi    r4,r10,-18476
100161d0:	7d 25 4b 78 	mr      r5,r9
100161d4:	4b ff ef 01 	bl      100150d4 <json_object_set>
					}
				}
				in=lig_matrix_get_video_switch_state(lighandle,portinfo[i]);
100161d8:	3d 20 10 03 	lis     r9,4099
100161dc:	81 49 d3 6c 	lwz     r10,-11412(r9)
100161e0:	81 1f 00 30 	lwz     r8,48(r31)
100161e4:	81 3f 00 10 	lwz     r9,16(r31)
100161e8:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
100161ec:	7d 28 4a 14 	add     r9,r8,r9
100161f0:	81 29 00 00 	lwz     r9,0(r9)
100161f4:	7d 43 53 78 	mr      r3,r10
100161f8:	7d 24 4b 78 	mr      r4,r9
100161fc:	48 01 72 b9 	bl      1002d4b4 <lig_matrix_get_video_switch_state@plt>
10016200:	90 7f 00 34 	stw     r3,52(r31)
				if(in>0)
10016204:	81 3f 00 34 	lwz     r9,52(r31)
10016208:	2f 89 00 00 	cmpwi   cr7,r9,0
1001620c:	40 9d 00 3c 	ble     cr7,10016248 <GetDeviceVideoInfo+0x848>
				{
					json_object_set(port,"switch",json_integer(in));
10016210:	81 3f 00 34 	lwz     r9,52(r31)
10016214:	91 3f 00 a4 	stw     r9,164(r31)
10016218:	7d 29 fe 70 	srawi   r9,r9,31
1001621c:	91 3f 00 a0 	stw     r9,160(r31)
10016220:	80 7f 00 a0 	lwz     r3,160(r31)
10016224:	80 9f 00 a4 	lwz     r4,164(r31)
10016228:	48 01 72 25 	bl      1002d44c <json_integer@plt>
1001622c:	7c 69 1b 78 	mr      r9,r3
10016230:	80 7f 00 24 	lwz     r3,36(r31)
10016234:	3d 40 10 02 	lis     r10,4098
10016238:	38 8a b7 dc 	addi    r4,r10,-18468
1001623c:	7d 25 4b 78 	mr      r5,r9
10016240:	4b ff ee 95 	bl      100150d4 <json_object_set>
10016244:	48 00 00 28 	b       1001626c <GetDeviceVideoInfo+0x86c>
				}
				else
				{
					json_object_set(port,"switch",json_integer(0));
10016248:	38 60 00 00 	li      r3,0
1001624c:	38 80 00 00 	li      r4,0
10016250:	48 01 71 fd 	bl      1002d44c <json_integer@plt>
10016254:	7c 69 1b 78 	mr      r9,r3
10016258:	80 7f 00 24 	lwz     r3,36(r31)
1001625c:	3d 40 10 02 	lis     r10,4098
10016260:	38 8a b7 dc 	addi    r4,r10,-18468
10016264:	7d 25 4b 78 	mr      r5,r9
10016268:	4b ff ee 6d 	bl      100150d4 <json_object_set>
				}
				cpy=json_deep_copy(port);
1001626c:	80 7f 00 24 	lwz     r3,36(r31)
10016270:	48 01 74 ad 	bl      1002d71c <json_deep_copy@plt>
10016274:	90 7f 00 08 	stw     r3,8(r31)
				json_array_append(arr,cpy);
10016278:	80 7f 00 28 	lwz     r3,40(r31)
1001627c:	80 9f 00 08 	lwz     r4,8(r31)
10016280:	4b ff ee b1 	bl      10015130 <json_array_append>
			}
			else
			{
				//now no support
			}
			i++;
10016284:	81 3f 00 10 	lwz     r9,16(r31)
10016288:	39 29 00 01 	addi    r9,r9,1
1001628c:	91 3f 00 10 	stw     r9,16(r31)
		LIG_MATRIX_OBJ_OUTPUT_DISPLAY out_info;
		i=0;
#ifdef DEBUG
            json_object_set(port,"i",json_integer(i));
#endif
		while(portinfo[i]>0)
10016290:	81 5f 00 30 	lwz     r10,48(r31)
10016294:	81 3f 00 10 	lwz     r9,16(r31)
10016298:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1001629c:	7d 2a 4a 14 	add     r9,r10,r9
100162a0:	81 29 00 00 	lwz     r9,0(r9)
100162a4:	2f 89 00 00 	cmpwi   cr7,r9,0
100162a8:	41 9d fb ac 	bgt     cr7,10015e54 <GetDeviceVideoInfo+0x454>
				//now no support
			}
			i++;
		}
		char *str;
		str=json_dumps(json,JSON_PRESERVE_ORDER);
100162ac:	80 7f 00 20 	lwz     r3,32(r31)
100162b0:	38 80 01 00 	li      r4,256
100162b4:	48 01 75 01 	bl      1002d7b4 <json_dumps@plt>
100162b8:	90 7f 00 3c 	stw     r3,60(r31)
		strcpy(data,str);
100162bc:	80 7f 00 88 	lwz     r3,136(r31)
100162c0:	80 9f 00 3c 	lwz     r4,60(r31)
100162c4:	48 01 72 a1 	bl      1002d564 <strcpy@plt>
		free(str);
100162c8:	80 7f 00 3c 	lwz     r3,60(r31)
100162cc:	48 01 71 69 	bl      1002d434 <free@plt>
		if(str!=NULL)
100162d0:	81 3f 00 3c 	lwz     r9,60(r31)
100162d4:	2f 89 00 00 	cmpwi   cr7,r9,0
100162d8:	41 9e 00 0c 	beq     cr7,100162e4 <GetDeviceVideoInfo+0x8e4>
		{
			str=NULL;
100162dc:	39 20 00 00 	li      r9,0
100162e0:	91 3f 00 3c 	stw     r9,60(r31)
		}
		json_decref(json);
100162e4:	80 7f 00 20 	lwz     r3,32(r31)
100162e8:	4b ff ed 69 	bl      10015050 <json_decref>
		json_decref(port);
100162ec:	80 7f 00 24 	lwz     r3,36(r31)
100162f0:	4b ff ed 61 	bl      10015050 <json_decref>
		json_decref(arr);
100162f4:	80 7f 00 28 	lwz     r3,40(r31)
100162f8:	4b ff ed 59 	bl      10015050 <json_decref>
		json_decref(cpy);
100162fc:	80 7f 00 08 	lwz     r3,8(r31)
10016300:	4b ff ed 51 	bl      10015050 <json_decref>
10016304:	81 21 00 00 	lwz     r9,0(r1)
10016308:	91 2e 00 00 	stw     r9,0(r14)
1001630c:	7d c1 73 78 	mr      r1,r14
		}
	
	return flag;
10016310:	89 3f 00 0c 	lbz     r9,12(r31)
10016314:	55 29 06 3e 	clrlwi  r9,r9,24
}
10016318:	7d 23 4b 78 	mr      r3,r9
1001631c:	39 7f 00 f0 	addi    r11,r31,240
10016320:	80 0b 00 04 	lwz     r0,4(r11)
10016324:	7c 08 03 a6 	mtlr    r0
10016328:	81 cb ff b8 	lwz     r14,-72(r11)
1001632c:	81 eb ff bc 	lwz     r15,-68(r11)
10016330:	82 0b ff c0 	lwz     r16,-64(r11)
10016334:	82 2b ff c4 	lwz     r17,-60(r11)
10016338:	82 4b ff c8 	lwz     r18,-56(r11)
1001633c:	82 6b ff cc 	lwz     r19,-52(r11)
10016340:	82 8b ff d0 	lwz     r20,-48(r11)
10016344:	82 ab ff d4 	lwz     r21,-44(r11)
10016348:	82 cb ff d8 	lwz     r22,-40(r11)
1001634c:	82 eb ff dc 	lwz     r23,-36(r11)
10016350:	83 0b ff e0 	lwz     r24,-32(r11)
10016354:	83 2b ff e4 	lwz     r25,-28(r11)
10016358:	83 4b ff e8 	lwz     r26,-24(r11)
1001635c:	83 6b ff ec 	lwz     r27,-20(r11)
10016360:	83 8b ff f0 	lwz     r28,-16(r11)
10016364:	83 ab ff f4 	lwz     r29,-12(r11)
10016368:	83 cb ff f8 	lwz     r30,-8(r11)
1001636c:	83 eb ff fc 	lwz     r31,-4(r11)
10016370:	7d 61 5b 78 	mr      r1,r11
10016374:	4e 80 00 20 	blr

10016378 <GetDeviceAudioInfo>:
uint8 GetDeviceAudioInfo(char *data,char *estr)
{
10016378:	94 21 ff 80 	stwu    r1,-128(r1)
1001637c:	7c 08 02 a6 	mflr    r0
10016380:	90 01 00 84 	stw     r0,132(r1)
10016384:	92 41 00 48 	stw     r18,72(r1)
10016388:	92 61 00 4c 	stw     r19,76(r1)
1001638c:	92 81 00 50 	stw     r20,80(r1)
10016390:	92 a1 00 54 	stw     r21,84(r1)
10016394:	92 c1 00 58 	stw     r22,88(r1)
10016398:	92 e1 00 5c 	stw     r23,92(r1)
1001639c:	93 01 00 60 	stw     r24,96(r1)
100163a0:	93 21 00 64 	stw     r25,100(r1)
100163a4:	93 41 00 68 	stw     r26,104(r1)
100163a8:	93 61 00 6c 	stw     r27,108(r1)
100163ac:	93 81 00 70 	stw     r28,112(r1)
100163b0:	93 a1 00 74 	stw     r29,116(r1)
100163b4:	93 c1 00 78 	stw     r30,120(r1)
100163b8:	93 e1 00 7c 	stw     r31,124(r1)
100163bc:	7c 3f 0b 78 	mr      r31,r1
100163c0:	90 7f 00 38 	stw     r3,56(r31)
100163c4:	90 9f 00 3c 	stw     r4,60(r31)
	json_t *json,*port,*arr,*cpy;
	uint8 flag=0;
100163c8:	39 20 00 00 	li      r9,0
100163cc:	99 3f 00 0c 	stb     r9,12(r31)
	json=json_object();
100163d0:	48 01 70 ad 	bl      1002d47c <json_object@plt>
100163d4:	90 7f 00 18 	stw     r3,24(r31)
	port=json_object();
100163d8:	48 01 70 a5 	bl      1002d47c <json_object@plt>
100163dc:	90 7f 00 1c 	stw     r3,28(r31)
	arr=json_array();
100163e0:	48 01 70 2d 	bl      1002d40c <json_array@plt>
100163e4:	90 7f 00 20 	stw     r3,32(r31)
	cpy=json_object();
100163e8:	48 01 70 95 	bl      1002d47c <json_object@plt>
100163ec:	90 7f 00 08 	stw     r3,8(r31)
	if(json==(json_t*)0||port==(json_t *)0||arr==(json_t*)0||cpy==(json_t*)0)
100163f0:	81 3f 00 18 	lwz     r9,24(r31)
100163f4:	2f 89 00 00 	cmpwi   cr7,r9,0
100163f8:	41 9e 00 28 	beq     cr7,10016420 <GetDeviceAudioInfo+0xa8>
100163fc:	81 3f 00 1c 	lwz     r9,28(r31)
10016400:	2f 89 00 00 	cmpwi   cr7,r9,0
10016404:	41 9e 00 1c 	beq     cr7,10016420 <GetDeviceAudioInfo+0xa8>
10016408:	81 3f 00 20 	lwz     r9,32(r31)
1001640c:	2f 89 00 00 	cmpwi   cr7,r9,0
10016410:	41 9e 00 10 	beq     cr7,10016420 <GetDeviceAudioInfo+0xa8>
10016414:	81 3f 00 08 	lwz     r9,8(r31)
10016418:	2f 89 00 00 	cmpwi   cr7,r9,0
1001641c:	40 9e 00 5c 	bne     cr7,10016478 <GetDeviceAudioInfo+0x100>
	{
		strcpy(estr,"Get video info json init error");
10016420:	81 3f 00 3c 	lwz     r9,60(r31)
10016424:	3d 40 10 02 	lis     r10,4098
10016428:	39 4a b7 80 	addi    r10,r10,-18560
1001642c:	80 aa 00 00 	lwz     r5,0(r10)
10016430:	80 ca 00 04 	lwz     r6,4(r10)
10016434:	80 ea 00 08 	lwz     r7,8(r10)
10016438:	81 0a 00 0c 	lwz     r8,12(r10)
1001643c:	90 a9 00 00 	stw     r5,0(r9)
10016440:	90 c9 00 04 	stw     r6,4(r9)
10016444:	90 e9 00 08 	stw     r7,8(r9)
10016448:	91 09 00 0c 	stw     r8,12(r9)
1001644c:	80 aa 00 10 	lwz     r5,16(r10)
10016450:	80 ca 00 14 	lwz     r6,20(r10)
10016454:	80 ea 00 18 	lwz     r7,24(r10)
10016458:	a1 0a 00 1c 	lhz     r8,28(r10)
1001645c:	90 a9 00 10 	stw     r5,16(r9)
10016460:	90 c9 00 14 	stw     r6,20(r9)
10016464:	90 e9 00 18 	stw     r7,24(r9)
10016468:	b1 09 00 1c 	sth     r8,28(r9)
1001646c:	89 4a 00 1e 	lbz     r10,30(r10)
10016470:	99 49 00 1e 	stb     r10,30(r9)
10016474:	48 00 04 94 	b       10016908 <GetDeviceAudioInfo+0x590>
10016478:	7c 29 0b 78 	mr      r9,r1
1001647c:	7d 32 4b 78 	mr      r18,r9
	}
	else
	{
		json_object_set_new(json,"Port",arr);
10016480:	80 7f 00 18 	lwz     r3,24(r31)
10016484:	3d 20 10 02 	lis     r9,4098
10016488:	38 89 b7 b8 	addi    r4,r9,-18504
1001648c:	80 bf 00 20 	lwz     r5,32(r31)
10016490:	48 01 71 4d 	bl      1002d5dc <json_object_set_new@plt>
		json_object_set_new(port,"index",json_integer(1));
10016494:	38 60 00 00 	li      r3,0
10016498:	38 80 00 01 	li      r4,1
1001649c:	48 01 6f b1 	bl      1002d44c <json_integer@plt>
100164a0:	7c 69 1b 78 	mr      r9,r3
100164a4:	80 7f 00 1c 	lwz     r3,28(r31)
100164a8:	3d 40 10 02 	lis     r10,4098
100164ac:	38 8a b7 c0 	addi    r4,r10,-18496
100164b0:	7d 25 4b 78 	mr      r5,r9
100164b4:	48 01 71 29 	bl      1002d5dc <json_object_set_new@plt>
		json_object_set_new(port,"Dir",json_string("In"));
100164b8:	3d 20 10 02 	lis     r9,4098
100164bc:	38 69 b7 c8 	addi    r3,r9,-18488
100164c0:	48 01 71 2d 	bl      1002d5ec <json_string@plt>
100164c4:	7c 69 1b 78 	mr      r9,r3
100164c8:	80 7f 00 1c 	lwz     r3,28(r31)
100164cc:	3d 40 10 02 	lis     r10,4098
100164d0:	38 8a b7 cc 	addi    r4,r10,-18484
100164d4:	7d 25 4b 78 	mr      r5,r9
100164d8:	48 01 71 05 	bl      1002d5dc <json_object_set_new@plt>
		json_object_set_new(port,"status",json_string("On"));
100164dc:	3d 20 10 02 	lis     r9,4098
100164e0:	38 69 b7 d0 	addi    r3,r9,-18480
100164e4:	48 01 71 09 	bl      1002d5ec <json_string@plt>
100164e8:	7c 69 1b 78 	mr      r9,r3
100164ec:	80 7f 00 1c 	lwz     r3,28(r31)
100164f0:	3d 40 10 02 	lis     r10,4098
100164f4:	38 8a b7 d4 	addi    r4,r10,-18476
100164f8:	7d 25 4b 78 	mr      r5,r9
100164fc:	48 01 70 e1 	bl      1002d5dc <json_object_set_new@plt>
		json_object_set_new(port,"switch",json_null());
10016500:	48 01 72 25 	bl      1002d724 <json_null@plt>
10016504:	7c 69 1b 78 	mr      r9,r3
10016508:	80 7f 00 1c 	lwz     r3,28(r31)
1001650c:	3d 40 10 02 	lis     r10,4098
10016510:	38 8a b7 dc 	addi    r4,r10,-18468
10016514:	7d 25 4b 78 	mr      r5,r9
10016518:	48 01 70 c5 	bl      1002d5dc <json_object_set_new@plt>
		flag=1;
1001651c:	39 20 00 01 	li      r9,1
10016520:	99 3f 00 0c 	stb     r9,12(r31)
		int portinfo[ligPorts+1];
10016524:	3d 20 10 03 	lis     r9,4099
10016528:	89 29 d3 50 	lbz     r9,-11440(r9)
1001652c:	55 29 06 3e 	clrlwi  r9,r9,24
10016530:	39 29 00 01 	addi    r9,r9,1
10016534:	39 49 ff ff 	addi    r10,r9,-1
10016538:	91 5f 00 24 	stw     r10,36(r31)
1001653c:	7d 2a 4b 78 	mr      r10,r9
10016540:	7d 5c 53 78 	mr      r28,r10
10016544:	3b 60 00 00 	li      r27,0
10016548:	57 8a 2e fe 	rlwinm  r10,r28,5,27,31
1001654c:	57 77 28 34 	rlwinm  r23,r27,5,0,26
10016550:	7d 57 bb 78 	or      r23,r10,r23
10016554:	57 98 28 34 	rlwinm  r24,r28,5,0,26
10016558:	7d 2a 4b 78 	mr      r10,r9
1001655c:	7d 5e 53 78 	mr      r30,r10
10016560:	3b a0 00 00 	li      r29,0
10016564:	57 ca 2e fe 	rlwinm  r10,r30,5,27,31
10016568:	57 b9 28 34 	rlwinm  r25,r29,5,0,26
1001656c:	7d 59 cb 78 	or      r25,r10,r25
10016570:	57 da 28 34 	rlwinm  r26,r30,5,0,26
10016574:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10016578:	39 29 00 03 	addi    r9,r9,3
1001657c:	39 29 00 0f 	addi    r9,r9,15
10016580:	55 29 e1 3e 	rlwinm  r9,r9,28,4,31
10016584:	55 29 20 36 	rlwinm  r9,r9,4,0,27
10016588:	81 41 00 00 	lwz     r10,0(r1)
1001658c:	7d 29 00 d0 	neg     r9,r9
10016590:	7d 41 49 6e 	stwux   r10,r1,r9
10016594:	39 21 00 08 	addi    r9,r1,8
10016598:	39 29 00 03 	addi    r9,r9,3
1001659c:	55 29 f0 be 	rlwinm  r9,r9,30,2,31
100165a0:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
100165a4:	91 3f 00 28 	stw     r9,40(r31)
		memset(portinfo,0,ligPorts);
100165a8:	81 5f 00 28 	lwz     r10,40(r31)
100165ac:	3d 20 10 03 	lis     r9,4099
100165b0:	89 29 d3 50 	lbz     r9,-11440(r9)
100165b4:	55 29 06 3e 	clrlwi  r9,r9,24
100165b8:	7d 43 53 78 	mr      r3,r10
100165bc:	38 80 00 00 	li      r4,0
100165c0:	7d 25 4b 78 	mr      r5,r9
100165c4:	48 01 71 01 	bl      1002d6c4 <memset@plt>
		memset(switchinfo,0,ligPorts);
100165c8:	3d 20 10 03 	lis     r9,4099
100165cc:	89 29 d3 50 	lbz     r9,-11440(r9)
100165d0:	55 29 06 3e 	clrlwi  r9,r9,24
100165d4:	3d 40 10 03 	lis     r10,4099
100165d8:	38 6a df d4 	addi    r3,r10,-8236
100165dc:	38 80 00 00 	li      r4,0
100165e0:	7d 25 4b 78 	mr      r5,r9
100165e4:	48 01 70 e1 	bl      1002d6c4 <memset@plt>
		int i,in,index=0,iindex=0;
100165e8:	39 20 00 00 	li      r9,0
100165ec:	91 3f 00 14 	stw     r9,20(r31)
100165f0:	39 20 00 00 	li      r9,0
100165f4:	91 3f 00 2c 	stw     r9,44(r31)
		for(i=1;i<=(ligPorts/2);i++)
100165f8:	39 20 00 01 	li      r9,1
100165fc:	91 3f 00 10 	stw     r9,16(r31)
10016600:	48 00 00 84 	b       10016684 <GetDeviceAudioInfo+0x30c>
		{
			in=lig_matrix_get_slot_online_state(lighandle,i);
10016604:	3d 20 10 03 	lis     r9,4099
10016608:	81 49 d3 6c 	lwz     r10,-11412(r9)
1001660c:	81 3f 00 10 	lwz     r9,16(r31)
10016610:	7d 43 53 78 	mr      r3,r10
10016614:	7d 24 4b 78 	mr      r4,r9
10016618:	48 01 6e 75 	bl      1002d48c <lig_matrix_get_slot_online_state@plt>
1001661c:	90 7f 00 30 	stw     r3,48(r31)
			if(in)
10016620:	81 3f 00 30 	lwz     r9,48(r31)
10016624:	2f 89 00 00 	cmpwi   cr7,r9,0
10016628:	41 9e 00 50 	beq     cr7,10016678 <GetDeviceAudioInfo+0x300>
			{
				portinfo[index++]=2*i-1;
1001662c:	81 3f 00 14 	lwz     r9,20(r31)
10016630:	39 49 00 01 	addi    r10,r9,1
10016634:	91 5f 00 14 	stw     r10,20(r31)
10016638:	81 5f 00 10 	lwz     r10,16(r31)
1001663c:	55 4a 08 3c 	rlwinm  r10,r10,1,0,30
10016640:	39 4a ff ff 	addi    r10,r10,-1
10016644:	81 1f 00 28 	lwz     r8,40(r31)
10016648:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1001664c:	7d 28 4a 14 	add     r9,r8,r9
10016650:	91 49 00 00 	stw     r10,0(r9)
				portinfo[index++]=2*i;
10016654:	81 3f 00 14 	lwz     r9,20(r31)
10016658:	39 49 00 01 	addi    r10,r9,1
1001665c:	91 5f 00 14 	stw     r10,20(r31)
10016660:	81 5f 00 10 	lwz     r10,16(r31)
10016664:	55 4a 08 3c 	rlwinm  r10,r10,1,0,30
10016668:	81 1f 00 28 	lwz     r8,40(r31)
1001666c:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10016670:	7d 28 4a 14 	add     r9,r8,r9
10016674:	91 49 00 00 	stw     r10,0(r9)
		flag=1;
		int portinfo[ligPorts+1];
		memset(portinfo,0,ligPorts);
		memset(switchinfo,0,ligPorts);
		int i,in,index=0,iindex=0;
		for(i=1;i<=(ligPorts/2);i++)
10016678:	81 3f 00 10 	lwz     r9,16(r31)
1001667c:	39 29 00 01 	addi    r9,r9,1
10016680:	91 3f 00 10 	stw     r9,16(r31)
10016684:	3d 20 10 03 	lis     r9,4099
10016688:	89 29 d3 50 	lbz     r9,-11440(r9)
1001668c:	55 29 06 3e 	clrlwi  r9,r9,24
10016690:	55 29 f8 7e 	rlwinm  r9,r9,31,1,31
10016694:	55 29 06 3e 	clrlwi  r9,r9,24
10016698:	7d 2a 4b 78 	mr      r10,r9
1001669c:	81 3f 00 10 	lwz     r9,16(r31)
100166a0:	7f 8a 48 00 	cmpw    cr7,r10,r9
100166a4:	40 9c ff 60 	bge     cr7,10016604 <GetDeviceAudioInfo+0x28c>
				portinfo[index++]=2*i-1;
				portinfo[index++]=2*i;
			}
		}
		
		i=0;
100166a8:	39 20 00 00 	li      r9,0
100166ac:	91 3f 00 10 	stw     r9,16(r31)
		while(portinfo[i]>0)
100166b0:	48 00 01 d8 	b       10016888 <GetDeviceAudioInfo+0x510>
		{
			json_object_set_new(port,"index",json_integer(portinfo[i]));
100166b4:	81 5f 00 28 	lwz     r10,40(r31)
100166b8:	81 3f 00 10 	lwz     r9,16(r31)
100166bc:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
100166c0:	7d 2a 4a 14 	add     r9,r10,r9
100166c4:	81 29 00 00 	lwz     r9,0(r9)
100166c8:	7d 36 4b 78 	mr      r22,r9
100166cc:	7d 29 fe 70 	srawi   r9,r9,31
100166d0:	7d 35 4b 78 	mr      r21,r9
100166d4:	7e a3 ab 78 	mr      r3,r21
100166d8:	7e c4 b3 78 	mr      r4,r22
100166dc:	48 01 6d 71 	bl      1002d44c <json_integer@plt>
100166e0:	7c 69 1b 78 	mr      r9,r3
100166e4:	80 7f 00 1c 	lwz     r3,28(r31)
100166e8:	3d 40 10 02 	lis     r10,4098
100166ec:	38 8a b7 c0 	addi    r4,r10,-18496
100166f0:	7d 25 4b 78 	mr      r5,r9
100166f4:	48 01 6e e9 	bl      1002d5dc <json_object_set_new@plt>
			in=lig_matrix_get_audio_pipe_io(lighandle,portinfo[i]);
100166f8:	3d 20 10 03 	lis     r9,4099
100166fc:	81 49 d3 6c 	lwz     r10,-11412(r9)
10016700:	81 1f 00 28 	lwz     r8,40(r31)
10016704:	81 3f 00 10 	lwz     r9,16(r31)
10016708:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1001670c:	7d 28 4a 14 	add     r9,r8,r9
10016710:	81 29 00 00 	lwz     r9,0(r9)
10016714:	7d 43 53 78 	mr      r3,r10
10016718:	7d 24 4b 78 	mr      r4,r9
1001671c:	48 01 71 21 	bl      1002d83c <lig_matrix_get_audio_pipe_io@plt>
10016720:	90 7f 00 30 	stw     r3,48(r31)
			if(0==in)
10016724:	81 3f 00 30 	lwz     r9,48(r31)
10016728:	2f 89 00 00 	cmpwi   cr7,r9,0
1001672c:	40 9e 00 84 	bne     cr7,100167b0 <GetDeviceAudioInfo+0x438>
			{
				//input
				json_object_set(port,"Dir",json_string("In"));
10016730:	3d 20 10 02 	lis     r9,4098
10016734:	38 69 b7 c8 	addi    r3,r9,-18488
10016738:	48 01 6e b5 	bl      1002d5ec <json_string@plt>
1001673c:	7c 69 1b 78 	mr      r9,r3
10016740:	80 7f 00 1c 	lwz     r3,28(r31)
10016744:	3d 40 10 02 	lis     r10,4098
10016748:	38 8a b7 cc 	addi    r4,r10,-18484
1001674c:	7d 25 4b 78 	mr      r5,r9
10016750:	4b ff e9 85 	bl      100150d4 <json_object_set>
				json_object_set(port,"status",json_string("On"));
10016754:	3d 20 10 02 	lis     r9,4098
10016758:	38 69 b7 d0 	addi    r3,r9,-18480
1001675c:	48 01 6e 91 	bl      1002d5ec <json_string@plt>
10016760:	7c 69 1b 78 	mr      r9,r3
10016764:	80 7f 00 1c 	lwz     r3,28(r31)
10016768:	3d 40 10 02 	lis     r10,4098
1001676c:	38 8a b7 d4 	addi    r4,r10,-18476
10016770:	7d 25 4b 78 	mr      r5,r9
10016774:	4b ff e9 61 	bl      100150d4 <json_object_set>
				json_object_set(port,"switch",json_null());
10016778:	48 01 6f ad 	bl      1002d724 <json_null@plt>
1001677c:	7c 69 1b 78 	mr      r9,r3
10016780:	80 7f 00 1c 	lwz     r3,28(r31)
10016784:	3d 40 10 02 	lis     r10,4098
10016788:	38 8a b7 dc 	addi    r4,r10,-18468
1001678c:	7d 25 4b 78 	mr      r5,r9
10016790:	4b ff e9 45 	bl      100150d4 <json_object_set>
				cpy=json_deep_copy(port);
10016794:	80 7f 00 1c 	lwz     r3,28(r31)
10016798:	48 01 6f 85 	bl      1002d71c <json_deep_copy@plt>
1001679c:	90 7f 00 08 	stw     r3,8(r31)
				json_array_append(arr,cpy);
100167a0:	80 7f 00 20 	lwz     r3,32(r31)
100167a4:	80 9f 00 08 	lwz     r4,8(r31)
100167a8:	4b ff e9 89 	bl      10015130 <json_array_append>
100167ac:	48 00 00 d0 	b       1001687c <GetDeviceAudioInfo+0x504>
			}				
			else if(1==in)
100167b0:	81 3f 00 30 	lwz     r9,48(r31)
100167b4:	2f 89 00 01 	cmpwi   cr7,r9,1
100167b8:	40 9e 00 c4 	bne     cr7,1001687c <GetDeviceAudioInfo+0x504>
			{
				//output
				json_object_set(port,"Dir",json_string("Out"));
100167bc:	3d 20 10 02 	lis     r9,4098
100167c0:	38 69 b7 e8 	addi    r3,r9,-18456
100167c4:	48 01 6e 29 	bl      1002d5ec <json_string@plt>
100167c8:	7c 69 1b 78 	mr      r9,r3
100167cc:	80 7f 00 1c 	lwz     r3,28(r31)
100167d0:	3d 40 10 02 	lis     r10,4098
100167d4:	38 8a b7 cc 	addi    r4,r10,-18484
100167d8:	7d 25 4b 78 	mr      r5,r9
100167dc:	4b ff e8 f9 	bl      100150d4 <json_object_set>
				json_object_set(port,"status",json_string("On"));
100167e0:	3d 20 10 02 	lis     r9,4098
100167e4:	38 69 b7 d0 	addi    r3,r9,-18480
100167e8:	48 01 6e 05 	bl      1002d5ec <json_string@plt>
100167ec:	7c 69 1b 78 	mr      r9,r3
100167f0:	80 7f 00 1c 	lwz     r3,28(r31)
100167f4:	3d 40 10 02 	lis     r10,4098
100167f8:	38 8a b7 d4 	addi    r4,r10,-18476
100167fc:	7d 25 4b 78 	mr      r5,r9
10016800:	4b ff e8 d5 	bl      100150d4 <json_object_set>
				in=lig_matrix_get_audio_switch_state(lighandle,portinfo[i]);
10016804:	3d 20 10 03 	lis     r9,4099
10016808:	81 49 d3 6c 	lwz     r10,-11412(r9)
1001680c:	81 1f 00 28 	lwz     r8,40(r31)
10016810:	81 3f 00 10 	lwz     r9,16(r31)
10016814:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10016818:	7d 28 4a 14 	add     r9,r8,r9
1001681c:	81 29 00 00 	lwz     r9,0(r9)
10016820:	7d 43 53 78 	mr      r3,r10
10016824:	7d 24 4b 78 	mr      r4,r9
10016828:	48 01 6e a5 	bl      1002d6cc <lig_matrix_get_audio_switch_state@plt>
1001682c:	90 7f 00 30 	stw     r3,48(r31)
				json_object_set(port,"switch",json_integer(in));
10016830:	81 3f 00 30 	lwz     r9,48(r31)
10016834:	7d 34 4b 78 	mr      r20,r9
10016838:	7d 29 fe 70 	srawi   r9,r9,31
1001683c:	7d 33 4b 78 	mr      r19,r9
10016840:	7e 63 9b 78 	mr      r3,r19
10016844:	7e 84 a3 78 	mr      r4,r20
10016848:	48 01 6c 05 	bl      1002d44c <json_integer@plt>
1001684c:	7c 69 1b 78 	mr      r9,r3
10016850:	80 7f 00 1c 	lwz     r3,28(r31)
10016854:	3d 40 10 02 	lis     r10,4098
10016858:	38 8a b7 dc 	addi    r4,r10,-18468
1001685c:	7d 25 4b 78 	mr      r5,r9
10016860:	4b ff e8 75 	bl      100150d4 <json_object_set>
				cpy=json_deep_copy(port);
10016864:	80 7f 00 1c 	lwz     r3,28(r31)
10016868:	48 01 6e b5 	bl      1002d71c <json_deep_copy@plt>
1001686c:	90 7f 00 08 	stw     r3,8(r31)
				json_array_append(arr,cpy);
10016870:	80 7f 00 20 	lwz     r3,32(r31)
10016874:	80 9f 00 08 	lwz     r4,8(r31)
10016878:	4b ff e8 b9 	bl      10015130 <json_array_append>
			}
			else
			{
					//now no support
			}
			i++;
1001687c:	81 3f 00 10 	lwz     r9,16(r31)
10016880:	39 29 00 01 	addi    r9,r9,1
10016884:	91 3f 00 10 	stw     r9,16(r31)
				portinfo[index++]=2*i;
			}
		}
		
		i=0;
		while(portinfo[i]>0)
10016888:	81 5f 00 28 	lwz     r10,40(r31)
1001688c:	81 3f 00 10 	lwz     r9,16(r31)
10016890:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10016894:	7d 2a 4a 14 	add     r9,r10,r9
10016898:	81 29 00 00 	lwz     r9,0(r9)
1001689c:	2f 89 00 00 	cmpwi   cr7,r9,0
100168a0:	41 9d fe 14 	bgt     cr7,100166b4 <GetDeviceAudioInfo+0x33c>
					//now no support
			}
			i++;
		}
		char *str;
		str=json_dumps(json,JSON_PRESERVE_ORDER);
100168a4:	80 7f 00 18 	lwz     r3,24(r31)
100168a8:	38 80 01 00 	li      r4,256
100168ac:	48 01 6f 09 	bl      1002d7b4 <json_dumps@plt>
100168b0:	90 7f 00 34 	stw     r3,52(r31)
		strcpy(data,str);
100168b4:	80 7f 00 38 	lwz     r3,56(r31)
100168b8:	80 9f 00 34 	lwz     r4,52(r31)
100168bc:	48 01 6c a9 	bl      1002d564 <strcpy@plt>
		free(str);
100168c0:	80 7f 00 34 	lwz     r3,52(r31)
100168c4:	48 01 6b 71 	bl      1002d434 <free@plt>
		if(str!=NULL)
100168c8:	81 3f 00 34 	lwz     r9,52(r31)
100168cc:	2f 89 00 00 	cmpwi   cr7,r9,0
100168d0:	41 9e 00 0c 	beq     cr7,100168dc <GetDeviceAudioInfo+0x564>
		{
			str=NULL;
100168d4:	39 20 00 00 	li      r9,0
100168d8:	91 3f 00 34 	stw     r9,52(r31)
		}
		json_decref(json);
100168dc:	80 7f 00 18 	lwz     r3,24(r31)
100168e0:	4b ff e7 71 	bl      10015050 <json_decref>
		json_decref(port);
100168e4:	80 7f 00 1c 	lwz     r3,28(r31)
100168e8:	4b ff e7 69 	bl      10015050 <json_decref>
		json_decref(arr);
100168ec:	80 7f 00 20 	lwz     r3,32(r31)
100168f0:	4b ff e7 61 	bl      10015050 <json_decref>
		json_decref(cpy);
100168f4:	80 7f 00 08 	lwz     r3,8(r31)
100168f8:	4b ff e7 59 	bl      10015050 <json_decref>
100168fc:	81 21 00 00 	lwz     r9,0(r1)
10016900:	91 32 00 00 	stw     r9,0(r18)
10016904:	7e 41 93 78 	mr      r1,r18
	}
	
	return flag;
10016908:	89 3f 00 0c 	lbz     r9,12(r31)
1001690c:	55 29 06 3e 	clrlwi  r9,r9,24
}
10016910:	7d 23 4b 78 	mr      r3,r9
10016914:	39 7f 00 80 	addi    r11,r31,128
10016918:	80 0b 00 04 	lwz     r0,4(r11)
1001691c:	7c 08 03 a6 	mtlr    r0
10016920:	82 4b ff c8 	lwz     r18,-56(r11)
10016924:	82 6b ff cc 	lwz     r19,-52(r11)
10016928:	82 8b ff d0 	lwz     r20,-48(r11)
1001692c:	82 ab ff d4 	lwz     r21,-44(r11)
10016930:	82 cb ff d8 	lwz     r22,-40(r11)
10016934:	82 eb ff dc 	lwz     r23,-36(r11)
10016938:	83 0b ff e0 	lwz     r24,-32(r11)
1001693c:	83 2b ff e4 	lwz     r25,-28(r11)
10016940:	83 4b ff e8 	lwz     r26,-24(r11)
10016944:	83 6b ff ec 	lwz     r27,-20(r11)
10016948:	83 8b ff f0 	lwz     r28,-16(r11)
1001694c:	83 ab ff f4 	lwz     r29,-12(r11)
10016950:	83 cb ff f8 	lwz     r30,-8(r11)
10016954:	83 eb ff fc 	lwz     r31,-4(r11)
10016958:	7d 61 5b 78 	mr      r1,r11
1001695c:	4e 80 00 20 	blr

10016960 <GetDeviceSwitchInfo>:
uint8 GetDeviceSwitchInfo(char *data,char *estr)
{
10016960:	94 21 ff b0 	stwu    r1,-80(r1)
10016964:	7c 08 02 a6 	mflr    r0
10016968:	90 01 00 54 	stw     r0,84(r1)
1001696c:	93 61 00 3c 	stw     r27,60(r1)
10016970:	93 81 00 40 	stw     r28,64(r1)
10016974:	93 a1 00 44 	stw     r29,68(r1)
10016978:	93 c1 00 48 	stw     r30,72(r1)
1001697c:	93 e1 00 4c 	stw     r31,76(r1)
10016980:	7c 3f 0b 78 	mr      r31,r1
10016984:	90 7f 00 28 	stw     r3,40(r31)
10016988:	90 9f 00 2c 	stw     r4,44(r31)
	uint8 i=0;
1001698c:	39 20 00 00 	li      r9,0
10016990:	99 3f 00 08 	stb     r9,8(r31)
	int in;
	json_t *json,*port,*cpy,*arr;
	uint8 flag=0;
10016994:	39 20 00 00 	li      r9,0
10016998:	99 3f 00 10 	stb     r9,16(r31)
    json=json_object();
1001699c:	48 01 6a e1 	bl      1002d47c <json_object@plt>
100169a0:	90 7f 00 14 	stw     r3,20(r31)
    port=json_object();
100169a4:	48 01 6a d9 	bl      1002d47c <json_object@plt>
100169a8:	90 7f 00 18 	stw     r3,24(r31)
    arr=json_array();
100169ac:	48 01 6a 61 	bl      1002d40c <json_array@plt>
100169b0:	90 7f 00 1c 	stw     r3,28(r31)
    cpy=json_object();
100169b4:	48 01 6a c9 	bl      1002d47c <json_object@plt>
100169b8:	90 7f 00 0c 	stw     r3,12(r31)
    if(json==(json_t*)0||port==(json_t *)0||arr==(json_t*)0||cpy==(json_t*)0)
100169bc:	81 3f 00 14 	lwz     r9,20(r31)
100169c0:	2f 89 00 00 	cmpwi   cr7,r9,0
100169c4:	41 9e 00 28 	beq     cr7,100169ec <GetDeviceSwitchInfo+0x8c>
100169c8:	81 3f 00 18 	lwz     r9,24(r31)
100169cc:	2f 89 00 00 	cmpwi   cr7,r9,0
100169d0:	41 9e 00 1c 	beq     cr7,100169ec <GetDeviceSwitchInfo+0x8c>
100169d4:	81 3f 00 1c 	lwz     r9,28(r31)
100169d8:	2f 89 00 00 	cmpwi   cr7,r9,0
100169dc:	41 9e 00 10 	beq     cr7,100169ec <GetDeviceSwitchInfo+0x8c>
100169e0:	81 3f 00 0c 	lwz     r9,12(r31)
100169e4:	2f 89 00 00 	cmpwi   cr7,r9,0
100169e8:	40 9e 00 54 	bne     cr7,10016a3c <GetDeviceSwitchInfo+0xdc>
    {
        strcpy(estr,"Get switch info json init error");
100169ec:	81 3f 00 2c 	lwz     r9,44(r31)
100169f0:	3d 40 10 02 	lis     r10,4098
100169f4:	39 4a b7 ec 	addi    r10,r10,-18452
100169f8:	80 aa 00 00 	lwz     r5,0(r10)
100169fc:	80 ca 00 04 	lwz     r6,4(r10)
10016a00:	80 ea 00 08 	lwz     r7,8(r10)
10016a04:	81 0a 00 0c 	lwz     r8,12(r10)
10016a08:	90 a9 00 00 	stw     r5,0(r9)
10016a0c:	90 c9 00 04 	stw     r6,4(r9)
10016a10:	90 e9 00 08 	stw     r7,8(r9)
10016a14:	91 09 00 0c 	stw     r8,12(r9)
10016a18:	80 ca 00 10 	lwz     r6,16(r10)
10016a1c:	80 ea 00 14 	lwz     r7,20(r10)
10016a20:	81 0a 00 18 	lwz     r8,24(r10)
10016a24:	81 4a 00 1c 	lwz     r10,28(r10)
10016a28:	90 c9 00 10 	stw     r6,16(r9)
10016a2c:	90 e9 00 14 	stw     r7,20(r9)
10016a30:	91 09 00 18 	stw     r8,24(r9)
10016a34:	91 49 00 1c 	stw     r10,28(r9)
10016a38:	48 00 01 c4 	b       10016bfc <GetDeviceSwitchInfo+0x29c>
    }
	else
	{
		flag=1;
10016a3c:	39 20 00 01 	li      r9,1
10016a40:	99 3f 00 10 	stb     r9,16(r31)
		json_object_set_new(json,"routing",arr);
10016a44:	80 7f 00 14 	lwz     r3,20(r31)
10016a48:	3d 20 10 02 	lis     r9,4098
10016a4c:	38 89 b6 c4 	addi    r4,r9,-18748
10016a50:	80 bf 00 1c 	lwz     r5,28(r31)
10016a54:	48 01 6b 89 	bl      1002d5dc <json_object_set_new@plt>
		json_object_set_new(port,"in",json_integer(0));
10016a58:	38 60 00 00 	li      r3,0
10016a5c:	38 80 00 00 	li      r4,0
10016a60:	48 01 69 ed 	bl      1002d44c <json_integer@plt>
10016a64:	7c 69 1b 78 	mr      r9,r3
10016a68:	80 7f 00 18 	lwz     r3,24(r31)
10016a6c:	3d 40 10 02 	lis     r10,4098
10016a70:	38 8a b8 0c 	addi    r4,r10,-18420
10016a74:	7d 25 4b 78 	mr      r5,r9
10016a78:	48 01 6b 65 	bl      1002d5dc <json_object_set_new@plt>
		json_object_set_new(port,"out",json_integer(0));
10016a7c:	38 60 00 00 	li      r3,0
10016a80:	38 80 00 00 	li      r4,0
10016a84:	48 01 69 c9 	bl      1002d44c <json_integer@plt>
10016a88:	7c 69 1b 78 	mr      r9,r3
10016a8c:	80 7f 00 18 	lwz     r3,24(r31)
10016a90:	3d 40 10 02 	lis     r10,4098
10016a94:	38 8a b8 10 	addi    r4,r10,-18416
10016a98:	7d 25 4b 78 	mr      r5,r9
10016a9c:	48 01 6b 41 	bl      1002d5dc <json_object_set_new@plt>
		json_object_set_new(port,"type",json_string("v"));
10016aa0:	3d 20 10 02 	lis     r9,4098
10016aa4:	38 69 b8 14 	addi    r3,r9,-18412
10016aa8:	48 01 6b 45 	bl      1002d5ec <json_string@plt>
10016aac:	7c 69 1b 78 	mr      r9,r3
10016ab0:	80 7f 00 18 	lwz     r3,24(r31)
10016ab4:	3d 40 10 02 	lis     r10,4098
10016ab8:	38 8a b8 18 	addi    r4,r10,-18408
10016abc:	7d 25 4b 78 	mr      r5,r9
10016ac0:	48 01 6b 1d 	bl      1002d5dc <json_object_set_new@plt>
		//while(switchinfo[i])
		for(i=1;i<=PORTNUM;i++)
10016ac4:	39 20 00 01 	li      r9,1
10016ac8:	99 3f 00 08 	stb     r9,8(r31)
10016acc:	48 00 00 c8 	b       10016b94 <GetDeviceSwitchInfo+0x234>
		{
			in=lig_matrix_get_video_switch_state(lighandle,i);
10016ad0:	3d 20 10 03 	lis     r9,4099
10016ad4:	81 49 d3 6c 	lwz     r10,-11412(r9)
10016ad8:	89 3f 00 08 	lbz     r9,8(r31)
10016adc:	55 29 06 3e 	clrlwi  r9,r9,24
10016ae0:	7d 43 53 78 	mr      r3,r10
10016ae4:	7d 24 4b 78 	mr      r4,r9
10016ae8:	48 01 69 cd 	bl      1002d4b4 <lig_matrix_get_video_switch_state@plt>
10016aec:	90 7f 00 20 	stw     r3,32(r31)
        	if(in>=0)
10016af0:	81 3f 00 20 	lwz     r9,32(r31)
10016af4:	2f 89 00 00 	cmpwi   cr7,r9,0
10016af8:	41 9c 00 88 	blt     cr7,10016b80 <GetDeviceSwitchInfo+0x220>
        	{
				json_object_set(port,"out",json_integer(i));
10016afc:	89 3f 00 08 	lbz     r9,8(r31)
10016b00:	55 29 06 3e 	clrlwi  r9,r9,24
10016b04:	7d 3e 4b 78 	mr      r30,r9
10016b08:	3b a0 00 00 	li      r29,0
10016b0c:	7f a3 eb 78 	mr      r3,r29
10016b10:	7f c4 f3 78 	mr      r4,r30
10016b14:	48 01 69 39 	bl      1002d44c <json_integer@plt>
10016b18:	7c 69 1b 78 	mr      r9,r3
10016b1c:	80 7f 00 18 	lwz     r3,24(r31)
10016b20:	3d 40 10 02 	lis     r10,4098
10016b24:	38 8a b8 10 	addi    r4,r10,-18416
10016b28:	7d 25 4b 78 	mr      r5,r9
10016b2c:	4b ff e5 a9 	bl      100150d4 <json_object_set>
        		json_object_set(port,"in",json_integer(in));
10016b30:	81 3f 00 20 	lwz     r9,32(r31)
10016b34:	7d 3c 4b 78 	mr      r28,r9
10016b38:	7d 29 fe 70 	srawi   r9,r9,31
10016b3c:	7d 3b 4b 78 	mr      r27,r9
10016b40:	7f 63 db 78 	mr      r3,r27
10016b44:	7f 84 e3 78 	mr      r4,r28
10016b48:	48 01 69 05 	bl      1002d44c <json_integer@plt>
10016b4c:	7c 69 1b 78 	mr      r9,r3
10016b50:	80 7f 00 18 	lwz     r3,24(r31)
10016b54:	3d 40 10 02 	lis     r10,4098
10016b58:	38 8a b8 0c 	addi    r4,r10,-18420
10016b5c:	7d 25 4b 78 	mr      r5,r9
10016b60:	4b ff e5 75 	bl      100150d4 <json_object_set>
        	{
			
				continue;
       			//json_object_set(port,"in",json_integer(0));
       		}
            cpy=json_deep_copy(port);
10016b64:	80 7f 00 18 	lwz     r3,24(r31)
10016b68:	48 01 6b b5 	bl      1002d71c <json_deep_copy@plt>
10016b6c:	90 7f 00 0c 	stw     r3,12(r31)
            json_array_append(arr,cpy);
10016b70:	80 7f 00 1c 	lwz     r3,28(r31)
10016b74:	80 9f 00 0c 	lwz     r4,12(r31)
10016b78:	4b ff e5 b9 	bl      10015130 <json_array_append>
10016b7c:	48 00 00 08 	b       10016b84 <GetDeviceSwitchInfo+0x224>
        		json_object_set(port,"in",json_integer(in));
        	}
        	else
        	{
			
				continue;
10016b80:	60 00 00 00 	nop
		json_object_set_new(json,"routing",arr);
		json_object_set_new(port,"in",json_integer(0));
		json_object_set_new(port,"out",json_integer(0));
		json_object_set_new(port,"type",json_string("v"));
		//while(switchinfo[i])
		for(i=1;i<=PORTNUM;i++)
10016b84:	89 3f 00 08 	lbz     r9,8(r31)
10016b88:	55 29 06 3e 	clrlwi  r9,r9,24
10016b8c:	39 29 00 01 	addi    r9,r9,1
10016b90:	99 3f 00 08 	stb     r9,8(r31)
10016b94:	89 3f 00 08 	lbz     r9,8(r31)
10016b98:	55 29 06 3e 	clrlwi  r9,r9,24
10016b9c:	2b 89 00 23 	cmplwi  cr7,r9,35
10016ba0:	40 9d ff 30 	ble     cr7,10016ad0 <GetDeviceSwitchInfo+0x170>
       		}
            cpy=json_deep_copy(port);
            json_array_append(arr,cpy);
		}
		char *str;
        str=json_dumps(json,JSON_PRESERVE_ORDER);
10016ba4:	80 7f 00 14 	lwz     r3,20(r31)
10016ba8:	38 80 01 00 	li      r4,256
10016bac:	48 01 6c 09 	bl      1002d7b4 <json_dumps@plt>
10016bb0:	90 7f 00 24 	stw     r3,36(r31)
        strcpy(data,str);
10016bb4:	80 7f 00 28 	lwz     r3,40(r31)
10016bb8:	80 9f 00 24 	lwz     r4,36(r31)
10016bbc:	48 01 69 a9 	bl      1002d564 <strcpy@plt>
        free(str);
10016bc0:	80 7f 00 24 	lwz     r3,36(r31)
10016bc4:	48 01 68 71 	bl      1002d434 <free@plt>
        if(str!=NULL)
10016bc8:	81 3f 00 24 	lwz     r9,36(r31)
10016bcc:	2f 89 00 00 	cmpwi   cr7,r9,0
10016bd0:	41 9e 00 0c 	beq     cr7,10016bdc <GetDeviceSwitchInfo+0x27c>
        {
            str=NULL;
10016bd4:	39 20 00 00 	li      r9,0
10016bd8:	91 3f 00 24 	stw     r9,36(r31)
        }
        json_decref(json);
10016bdc:	80 7f 00 14 	lwz     r3,20(r31)
10016be0:	4b ff e4 71 	bl      10015050 <json_decref>
        json_decref(port);
10016be4:	80 7f 00 18 	lwz     r3,24(r31)
10016be8:	4b ff e4 69 	bl      10015050 <json_decref>
        json_decref(arr);
10016bec:	80 7f 00 1c 	lwz     r3,28(r31)
10016bf0:	4b ff e4 61 	bl      10015050 <json_decref>
        json_decref(cpy);
10016bf4:	80 7f 00 0c 	lwz     r3,12(r31)
10016bf8:	4b ff e4 59 	bl      10015050 <json_decref>
	}	
	return flag;
10016bfc:	89 3f 00 10 	lbz     r9,16(r31)
10016c00:	55 29 06 3e 	clrlwi  r9,r9,24
}
10016c04:	7d 23 4b 78 	mr      r3,r9
10016c08:	39 7f 00 50 	addi    r11,r31,80
10016c0c:	80 0b 00 04 	lwz     r0,4(r11)
10016c10:	7c 08 03 a6 	mtlr    r0
10016c14:	83 6b ff ec 	lwz     r27,-20(r11)
10016c18:	83 8b ff f0 	lwz     r28,-16(r11)
10016c1c:	83 ab ff f4 	lwz     r29,-12(r11)
10016c20:	83 cb ff f8 	lwz     r30,-8(r11)
10016c24:	83 eb ff fc 	lwz     r31,-4(r11)
10016c28:	7d 61 5b 78 	mr      r1,r11
10016c2c:	4e 80 00 20 	blr

10016c30 <GetDeviceDLLVersion>:
uint8 GetDeviceDLLVersion(char *data,char *estr)
{
10016c30:	94 21 ff a0 	stwu    r1,-96(r1)
10016c34:	7c 08 02 a6 	mflr    r0
10016c38:	90 01 00 64 	stw     r0,100(r1)
10016c3c:	93 21 00 44 	stw     r25,68(r1)
10016c40:	93 41 00 48 	stw     r26,72(r1)
10016c44:	93 61 00 4c 	stw     r27,76(r1)
10016c48:	93 81 00 50 	stw     r28,80(r1)
10016c4c:	93 a1 00 54 	stw     r29,84(r1)
10016c50:	93 c1 00 58 	stw     r30,88(r1)
10016c54:	93 e1 00 5c 	stw     r31,92(r1)
10016c58:	7c 3f 0b 78 	mr      r31,r1
10016c5c:	90 7f 00 38 	stw     r3,56(r31)
10016c60:	90 9f 00 3c 	stw     r4,60(r31)
	
	uint8 flag=0;
10016c64:	39 20 00 00 	li      r9,0
10016c68:	99 3f 00 08 	stb     r9,8(r31)
	json_t *json;
	json=json_object();
10016c6c:	48 01 68 11 	bl      1002d47c <json_object@plt>
10016c70:	90 7f 00 0c 	stw     r3,12(r31)
	unsigned int version;
#if DEBUG
	struct timeval start,end;
#endif 
	if(json)
10016c74:	81 3f 00 0c 	lwz     r9,12(r31)
10016c78:	2f 89 00 00 	cmpwi   cr7,r9,0
10016c7c:	41 9e 01 4c 	beq     cr7,10016dc8 <GetDeviceDLLVersion+0x198>
	{
		flag=1;
10016c80:	39 20 00 01 	li      r9,1
10016c84:	99 3f 00 08 	stb     r9,8(r31)
#if DEBUG
		gettimeofday(&start,NULL);
10016c88:	39 3f 00 1c 	addi    r9,r31,28
10016c8c:	7d 23 4b 78 	mr      r3,r9
10016c90:	38 80 00 00 	li      r4,0
10016c94:	48 01 68 01 	bl      1002d494 <gettimeofday@plt>
#endif
		
		version=lig_matrix_get_version(lighandle,0);
10016c98:	3d 20 10 03 	lis     r9,4099
10016c9c:	81 29 d3 6c 	lwz     r9,-11412(r9)
10016ca0:	7d 23 4b 78 	mr      r3,r9
10016ca4:	38 80 00 00 	li      r4,0
10016ca8:	48 01 69 c5 	bl      1002d66c <lig_matrix_get_version@plt>
10016cac:	90 7f 00 10 	stw     r3,16(r31)
#if DEBUG	
		gettimeofday(&end,NULL);
10016cb0:	39 3f 00 24 	addi    r9,r31,36
10016cb4:	7d 23 4b 78 	mr      r3,r9
10016cb8:	38 80 00 00 	li      r4,0
10016cbc:	48 01 67 d9 	bl      1002d494 <gettimeofday@plt>
		unsigned long time;
		time=1000000*(end.tv_sec-start.tv_sec)+end.tv_usec-start.tv_usec;
10016cc0:	81 5f 00 24 	lwz     r10,36(r31)
10016cc4:	81 3f 00 1c 	lwz     r9,28(r31)
10016cc8:	7d 49 50 50 	subf    r10,r9,r10
10016ccc:	3d 20 00 0f 	lis     r9,15
10016cd0:	61 29 42 40 	ori     r9,r9,16960
10016cd4:	7d 4a 49 d6 	mullw   r10,r10,r9
10016cd8:	81 3f 00 28 	lwz     r9,40(r31)
10016cdc:	7d 4a 4a 14 	add     r10,r10,r9
10016ce0:	81 3f 00 20 	lwz     r9,32(r31)
10016ce4:	7d 29 50 50 	subf    r9,r9,r10
10016ce8:	91 3f 00 14 	stw     r9,20(r31)
		json_object_set_new(json,"time",json_integer(time));
10016cec:	81 3f 00 14 	lwz     r9,20(r31)
10016cf0:	7d 3a 4b 78 	mr      r26,r9
10016cf4:	3b 20 00 00 	li      r25,0
10016cf8:	7f 23 cb 78 	mr      r3,r25
10016cfc:	7f 44 d3 78 	mr      r4,r26
10016d00:	48 01 67 4d 	bl      1002d44c <json_integer@plt>
10016d04:	7c 69 1b 78 	mr      r9,r3
10016d08:	80 7f 00 0c 	lwz     r3,12(r31)
10016d0c:	3d 40 10 02 	lis     r10,4098
10016d10:	38 8a b7 b0 	addi    r4,r10,-18512
10016d14:	7d 25 4b 78 	mr      r5,r9
10016d18:	48 01 68 c5 	bl      1002d5dc <json_object_set_new@plt>
		
#endif
		json_object_set_new(json,"version",json_integer(version));
10016d1c:	81 3f 00 10 	lwz     r9,16(r31)
10016d20:	7d 3c 4b 78 	mr      r28,r9
10016d24:	3b 60 00 00 	li      r27,0
10016d28:	7f 63 db 78 	mr      r3,r27
10016d2c:	7f 84 e3 78 	mr      r4,r28
10016d30:	48 01 67 1d 	bl      1002d44c <json_integer@plt>
10016d34:	7c 69 1b 78 	mr      r9,r3
10016d38:	80 7f 00 0c 	lwz     r3,12(r31)
10016d3c:	3d 40 10 02 	lis     r10,4098
10016d40:	38 8a b8 20 	addi    r4,r10,-18400
10016d44:	7d 25 4b 78 	mr      r5,r9
10016d48:	48 01 68 95 	bl      1002d5dc <json_object_set_new@plt>
		json_object_set_new(json,"handle",json_integer(lighandle));
10016d4c:	3d 20 10 03 	lis     r9,4099
10016d50:	81 29 d3 6c 	lwz     r9,-11412(r9)
10016d54:	7d 3e 4b 78 	mr      r30,r9
10016d58:	7d 29 fe 70 	srawi   r9,r9,31
10016d5c:	7d 3d 4b 78 	mr      r29,r9
10016d60:	7f a3 eb 78 	mr      r3,r29
10016d64:	7f c4 f3 78 	mr      r4,r30
10016d68:	48 01 66 e5 	bl      1002d44c <json_integer@plt>
10016d6c:	7c 69 1b 78 	mr      r9,r3
10016d70:	80 7f 00 0c 	lwz     r3,12(r31)
10016d74:	3d 40 10 02 	lis     r10,4098
10016d78:	38 8a b8 28 	addi    r4,r10,-18392
10016d7c:	7d 25 4b 78 	mr      r5,r9
10016d80:	48 01 68 5d 	bl      1002d5dc <json_object_set_new@plt>
		char *str;
		str=json_dumps(json,JSON_PRESERVE_ORDER);
10016d84:	80 7f 00 0c 	lwz     r3,12(r31)
10016d88:	38 80 01 00 	li      r4,256
10016d8c:	48 01 6a 29 	bl      1002d7b4 <json_dumps@plt>
10016d90:	90 7f 00 18 	stw     r3,24(r31)
        strcpy(data,str);
10016d94:	80 7f 00 38 	lwz     r3,56(r31)
10016d98:	80 9f 00 18 	lwz     r4,24(r31)
10016d9c:	48 01 67 c9 	bl      1002d564 <strcpy@plt>
        free(str);
10016da0:	80 7f 00 18 	lwz     r3,24(r31)
10016da4:	48 01 66 91 	bl      1002d434 <free@plt>
        if(str!=NULL)
10016da8:	81 3f 00 18 	lwz     r9,24(r31)
10016dac:	2f 89 00 00 	cmpwi   cr7,r9,0
10016db0:	41 9e 00 0c 	beq     cr7,10016dbc <GetDeviceDLLVersion+0x18c>
        {
            str=NULL;
10016db4:	39 20 00 00 	li      r9,0
10016db8:	91 3f 00 18 	stw     r9,24(r31)
        }
        json_decref(json);
10016dbc:	80 7f 00 0c 	lwz     r3,12(r31)
10016dc0:	4b ff e2 91 	bl      10015050 <json_decref>
10016dc4:	48 00 00 40 	b       10016e04 <GetDeviceDLLVersion+0x1d4>

	}
	else
	{
		strcpy(estr,"Get DLL Version Error");
10016dc8:	81 3f 00 3c 	lwz     r9,60(r31)
10016dcc:	3d 40 10 02 	lis     r10,4098
10016dd0:	39 4a b8 30 	addi    r10,r10,-18384
10016dd4:	80 aa 00 00 	lwz     r5,0(r10)
10016dd8:	80 ca 00 04 	lwz     r6,4(r10)
10016ddc:	80 ea 00 08 	lwz     r7,8(r10)
10016de0:	81 0a 00 0c 	lwz     r8,12(r10)
10016de4:	90 a9 00 00 	stw     r5,0(r9)
10016de8:	90 c9 00 04 	stw     r6,4(r9)
10016dec:	90 e9 00 08 	stw     r7,8(r9)
10016df0:	91 09 00 0c 	stw     r8,12(r9)
10016df4:	81 0a 00 10 	lwz     r8,16(r10)
10016df8:	a1 4a 00 14 	lhz     r10,20(r10)
10016dfc:	91 09 00 10 	stw     r8,16(r9)
10016e00:	b1 49 00 14 	sth     r10,20(r9)
	}

	return flag;
10016e04:	89 3f 00 08 	lbz     r9,8(r31)
10016e08:	55 29 06 3e 	clrlwi  r9,r9,24
}
10016e0c:	7d 23 4b 78 	mr      r3,r9
10016e10:	39 7f 00 60 	addi    r11,r31,96
10016e14:	80 0b 00 04 	lwz     r0,4(r11)
10016e18:	7c 08 03 a6 	mtlr    r0
10016e1c:	83 2b ff e4 	lwz     r25,-28(r11)
10016e20:	83 4b ff e8 	lwz     r26,-24(r11)
10016e24:	83 6b ff ec 	lwz     r27,-20(r11)
10016e28:	83 8b ff f0 	lwz     r28,-16(r11)
10016e2c:	83 ab ff f4 	lwz     r29,-12(r11)
10016e30:	83 cb ff f8 	lwz     r30,-8(r11)
10016e34:	83 eb ff fc 	lwz     r31,-4(r11)
10016e38:	7d 61 5b 78 	mr      r1,r11
10016e3c:	4e 80 00 20 	blr

10016e40 <GetPortEDID>:
uint8 GetPortEDID(json_t* json,char *data,char *estr)
{
10016e40:	94 21 ff e0 	stwu    r1,-32(r1)
10016e44:	93 e1 00 1c 	stw     r31,28(r1)
10016e48:	7c 3f 0b 78 	mr      r31,r1
10016e4c:	90 7f 00 08 	stw     r3,8(r31)
10016e50:	90 9f 00 0c 	stw     r4,12(r31)
10016e54:	90 bf 00 10 	stw     r5,16(r31)
	else
	{
		strcpy(estr,"Get EDID json init error");
	}
	return flag;*/
	return -1;
10016e58:	39 20 00 ff 	li      r9,255
}
10016e5c:	7d 23 4b 78 	mr      r3,r9
10016e60:	39 7f 00 20 	addi    r11,r31,32
10016e64:	83 eb ff fc 	lwz     r31,-4(r11)
10016e68:	7d 61 5b 78 	mr      r1,r11
10016e6c:	4e 80 00 20 	blr

10016e70 <GetDeviceCardlist>:
uint8 GetDeviceCardlist(char *data,char *estr)
{
10016e70:	94 21 ff 40 	stwu    r1,-192(r1)
10016e74:	7c 08 02 a6 	mflr    r0
10016e78:	90 01 00 c4 	stw     r0,196(r1)
10016e7c:	92 41 00 88 	stw     r18,136(r1)
10016e80:	92 61 00 8c 	stw     r19,140(r1)
10016e84:	92 81 00 90 	stw     r20,144(r1)
10016e88:	92 a1 00 94 	stw     r21,148(r1)
10016e8c:	92 c1 00 98 	stw     r22,152(r1)
10016e90:	92 e1 00 9c 	stw     r23,156(r1)
10016e94:	93 01 00 a0 	stw     r24,160(r1)
10016e98:	93 21 00 a4 	stw     r25,164(r1)
10016e9c:	93 41 00 a8 	stw     r26,168(r1)
10016ea0:	93 61 00 ac 	stw     r27,172(r1)
10016ea4:	93 81 00 b0 	stw     r28,176(r1)
10016ea8:	93 a1 00 b4 	stw     r29,180(r1)
10016eac:	93 c1 00 b8 	stw     r30,184(r1)
10016eb0:	93 e1 00 bc 	stw     r31,188(r1)
10016eb4:	7c 3f 0b 78 	mr      r31,r1
10016eb8:	90 7f 00 78 	stw     r3,120(r31)
10016ebc:	90 9f 00 7c 	stw     r4,124(r31)
	json_t *json,*solt,*arr,*cpy;
	char namebuf[65];
	uint8 flag=0;
10016ec0:	39 20 00 00 	li      r9,0
10016ec4:	99 3f 00 0c 	stb     r9,12(r31)
	json=json_object();
10016ec8:	48 01 65 b5 	bl      1002d47c <json_object@plt>
10016ecc:	90 7f 00 14 	stw     r3,20(r31)
	solt=json_object();
10016ed0:	48 01 65 ad 	bl      1002d47c <json_object@plt>
10016ed4:	90 7f 00 18 	stw     r3,24(r31)
	arr=json_array();
10016ed8:	48 01 65 35 	bl      1002d40c <json_array@plt>
10016edc:	90 7f 00 1c 	stw     r3,28(r31)
	cpy=json_object();
10016ee0:	48 01 65 9d 	bl      1002d47c <json_object@plt>
10016ee4:	90 7f 00 08 	stw     r3,8(r31)
	if(json==(json_t*)0||solt==(json_t *)0||arr==(json_t*)0||cpy==(json_t*)0)
10016ee8:	81 3f 00 14 	lwz     r9,20(r31)
10016eec:	2f 89 00 00 	cmpwi   cr7,r9,0
10016ef0:	41 9e 00 28 	beq     cr7,10016f18 <GetDeviceCardlist+0xa8>
10016ef4:	81 3f 00 18 	lwz     r9,24(r31)
10016ef8:	2f 89 00 00 	cmpwi   cr7,r9,0
10016efc:	41 9e 00 1c 	beq     cr7,10016f18 <GetDeviceCardlist+0xa8>
10016f00:	81 3f 00 1c 	lwz     r9,28(r31)
10016f04:	2f 89 00 00 	cmpwi   cr7,r9,0
10016f08:	41 9e 00 10 	beq     cr7,10016f18 <GetDeviceCardlist+0xa8>
10016f0c:	81 3f 00 08 	lwz     r9,8(r31)
10016f10:	2f 89 00 00 	cmpwi   cr7,r9,0
10016f14:	40 9e 00 54 	bne     cr7,10016f68 <GetDeviceCardlist+0xf8>
	{
		strcpy(estr,"Get Card list json init error");
10016f18:	81 3f 00 7c 	lwz     r9,124(r31)
10016f1c:	3d 40 10 02 	lis     r10,4098
10016f20:	39 4a b8 48 	addi    r10,r10,-18360
10016f24:	80 aa 00 00 	lwz     r5,0(r10)
10016f28:	80 ca 00 04 	lwz     r6,4(r10)
10016f2c:	80 ea 00 08 	lwz     r7,8(r10)
10016f30:	81 0a 00 0c 	lwz     r8,12(r10)
10016f34:	90 a9 00 00 	stw     r5,0(r9)
10016f38:	90 c9 00 04 	stw     r6,4(r9)
10016f3c:	90 e9 00 08 	stw     r7,8(r9)
10016f40:	91 09 00 0c 	stw     r8,12(r9)
10016f44:	80 ca 00 10 	lwz     r6,16(r10)
10016f48:	80 ea 00 14 	lwz     r7,20(r10)
10016f4c:	81 0a 00 18 	lwz     r8,24(r10)
10016f50:	a1 4a 00 1c 	lhz     r10,28(r10)
10016f54:	90 c9 00 10 	stw     r6,16(r9)
10016f58:	90 e9 00 14 	stw     r7,20(r9)
10016f5c:	91 09 00 18 	stw     r8,24(r9)
10016f60:	b1 49 00 1c 	sth     r10,28(r9)
10016f64:	48 00 03 3c 	b       100172a0 <GetDeviceCardlist+0x430>
10016f68:	7c 29 0b 78 	mr      r9,r1
10016f6c:	7d 32 4b 78 	mr      r18,r9
	}
	else
	{

		json_object_set_new(json,"solt",arr);
10016f70:	80 7f 00 14 	lwz     r3,20(r31)
10016f74:	3d 20 10 02 	lis     r9,4098
10016f78:	38 89 b8 68 	addi    r4,r9,-18328
10016f7c:	80 bf 00 1c 	lwz     r5,28(r31)
10016f80:	48 01 66 5d 	bl      1002d5dc <json_object_set_new@plt>
		json_object_set_new(solt,"index",json_integer(1));
10016f84:	38 60 00 00 	li      r3,0
10016f88:	38 80 00 01 	li      r4,1
10016f8c:	48 01 64 c1 	bl      1002d44c <json_integer@plt>
10016f90:	7c 69 1b 78 	mr      r9,r3
10016f94:	80 7f 00 18 	lwz     r3,24(r31)
10016f98:	3d 40 10 02 	lis     r10,4098
10016f9c:	38 8a b7 c0 	addi    r4,r10,-18496
10016fa0:	7d 25 4b 78 	mr      r5,r9
10016fa4:	48 01 66 39 	bl      1002d5dc <json_object_set_new@plt>
		json_object_set_new(solt,"status",json_string("online"));
10016fa8:	3d 20 10 02 	lis     r9,4098
10016fac:	38 69 b8 70 	addi    r3,r9,-18320
10016fb0:	48 01 66 3d 	bl      1002d5ec <json_string@plt>
10016fb4:	7c 69 1b 78 	mr      r9,r3
10016fb8:	80 7f 00 18 	lwz     r3,24(r31)
10016fbc:	3d 40 10 02 	lis     r10,4098
10016fc0:	38 8a b7 d4 	addi    r4,r10,-18476
10016fc4:	7d 25 4b 78 	mr      r5,r9
10016fc8:	48 01 66 15 	bl      1002d5dc <json_object_set_new@plt>
		json_object_set_new(solt,"name",json_null());//json_string("On"));
10016fcc:	48 01 67 59 	bl      1002d724 <json_null@plt>
10016fd0:	7c 69 1b 78 	mr      r9,r3
10016fd4:	80 7f 00 18 	lwz     r3,24(r31)
10016fd8:	3d 40 10 02 	lis     r10,4098
10016fdc:	38 8a b7 5c 	addi    r4,r10,-18596
10016fe0:	7d 25 4b 78 	mr      r5,r9
10016fe4:	48 01 65 f9 	bl      1002d5dc <json_object_set_new@plt>
		flag=1;
10016fe8:	39 20 00 01 	li      r9,1
10016fec:	99 3f 00 0c 	stb     r9,12(r31)
		int portinfo[ligPorts];
10016ff0:	3d 20 10 03 	lis     r9,4099
10016ff4:	89 29 d3 50 	lbz     r9,-11440(r9)
10016ff8:	55 29 06 3e 	clrlwi  r9,r9,24
10016ffc:	7d 2a 4b 78 	mr      r10,r9
10017000:	39 4a ff ff 	addi    r10,r10,-1
10017004:	91 5f 00 20 	stw     r10,32(r31)
10017008:	7d 3c 4b 78 	mr      r28,r9
1001700c:	3b 60 00 00 	li      r27,0
10017010:	57 8a 2e fe 	rlwinm  r10,r28,5,27,31
10017014:	57 77 28 34 	rlwinm  r23,r27,5,0,26
10017018:	7d 57 bb 78 	or      r23,r10,r23
1001701c:	57 98 28 34 	rlwinm  r24,r28,5,0,26
10017020:	7d 3e 4b 78 	mr      r30,r9
10017024:	3b a0 00 00 	li      r29,0
10017028:	57 ca 2e fe 	rlwinm  r10,r30,5,27,31
1001702c:	57 b9 28 34 	rlwinm  r25,r29,5,0,26
10017030:	7d 59 cb 78 	or      r25,r10,r25
10017034:	57 da 28 34 	rlwinm  r26,r30,5,0,26
10017038:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
1001703c:	39 29 00 03 	addi    r9,r9,3
10017040:	39 29 00 0f 	addi    r9,r9,15
10017044:	55 29 e1 3e 	rlwinm  r9,r9,28,4,31
10017048:	55 29 20 36 	rlwinm  r9,r9,4,0,27
1001704c:	81 41 00 00 	lwz     r10,0(r1)
10017050:	7d 29 00 d0 	neg     r9,r9
10017054:	7d 41 49 6e 	stwux   r10,r1,r9
10017058:	39 21 00 08 	addi    r9,r1,8
1001705c:	39 29 00 03 	addi    r9,r9,3
10017060:	55 29 f0 be 	rlwinm  r9,r9,30,2,31
10017064:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
10017068:	91 3f 00 24 	stw     r9,36(r31)
		memset(portinfo,0,ligPorts);
1001706c:	81 5f 00 24 	lwz     r10,36(r31)
10017070:	3d 20 10 03 	lis     r9,4099
10017074:	89 29 d3 50 	lbz     r9,-11440(r9)
10017078:	55 29 06 3e 	clrlwi  r9,r9,24
1001707c:	7d 43 53 78 	mr      r3,r10
10017080:	38 80 00 00 	li      r4,0
10017084:	7d 25 4b 78 	mr      r5,r9
10017088:	48 01 66 3d 	bl      1002d6c4 <memset@plt>
		int i,in;
		for(i=1;i<=(ligPorts/2);i++)
1001708c:	39 20 00 01 	li      r9,1
10017090:	91 3f 00 10 	stw     r9,16(r31)
10017094:	48 00 01 84 	b       10017218 <GetDeviceCardlist+0x3a8>
		{

			in=lig_matrix_get_slot_online_state(lighandle,i);
10017098:	3d 20 10 03 	lis     r9,4099
1001709c:	81 49 d3 6c 	lwz     r10,-11412(r9)
100170a0:	81 3f 00 10 	lwz     r9,16(r31)
100170a4:	7d 43 53 78 	mr      r3,r10
100170a8:	7d 24 4b 78 	mr      r4,r9
100170ac:	48 01 63 e1 	bl      1002d48c <lig_matrix_get_slot_online_state@plt>
100170b0:	90 7f 00 28 	stw     r3,40(r31)

			if(in)
100170b4:	81 3f 00 28 	lwz     r9,40(r31)
100170b8:	2f 89 00 00 	cmpwi   cr7,r9,0
100170bc:	41 9e 00 bc 	beq     cr7,10017178 <GetDeviceCardlist+0x308>
			{
				json_object_set(solt,"index",json_integer(i));
100170c0:	81 3f 00 10 	lwz     r9,16(r31)
100170c4:	7d 36 4b 78 	mr      r22,r9
100170c8:	7d 29 fe 70 	srawi   r9,r9,31
100170cc:	7d 35 4b 78 	mr      r21,r9
100170d0:	7e a3 ab 78 	mr      r3,r21
100170d4:	7e c4 b3 78 	mr      r4,r22
100170d8:	48 01 63 75 	bl      1002d44c <json_integer@plt>
100170dc:	7c 69 1b 78 	mr      r9,r3
100170e0:	80 7f 00 18 	lwz     r3,24(r31)
100170e4:	3d 40 10 02 	lis     r10,4098
100170e8:	38 8a b7 c0 	addi    r4,r10,-18496
100170ec:	7d 25 4b 78 	mr      r5,r9
100170f0:	4b ff df e5 	bl      100150d4 <json_object_set>
				json_object_set(solt,"status",json_string("online"));
100170f4:	3d 20 10 02 	lis     r9,4098
100170f8:	38 69 b8 70 	addi    r3,r9,-18320
100170fc:	48 01 64 f1 	bl      1002d5ec <json_string@plt>
10017100:	7c 69 1b 78 	mr      r9,r3
10017104:	80 7f 00 18 	lwz     r3,24(r31)
10017108:	3d 40 10 02 	lis     r10,4098
1001710c:	38 8a b7 d4 	addi    r4,r10,-18476
10017110:	7d 25 4b 78 	mr      r5,r9
10017114:	4b ff df c1 	bl      100150d4 <json_object_set>
				memset(namebuf,0x00,64);
10017118:	39 3f 00 30 	addi    r9,r31,48
1001711c:	7d 23 4b 78 	mr      r3,r9
10017120:	38 80 00 00 	li      r4,0
10017124:	38 a0 00 40 	li      r5,64
10017128:	48 01 65 9d 	bl      1002d6c4 <memset@plt>
				lig_matrix_get_card_name(lighandle,i,namebuf,64);
1001712c:	3d 20 10 03 	lis     r9,4099
10017130:	81 09 d3 6c 	lwz     r8,-11412(r9)
10017134:	81 5f 00 10 	lwz     r10,16(r31)
10017138:	39 3f 00 30 	addi    r9,r31,48
1001713c:	7d 03 43 78 	mr      r3,r8
10017140:	7d 44 53 78 	mr      r4,r10
10017144:	7d 25 4b 78 	mr      r5,r9
10017148:	38 c0 00 40 	li      r6,64
1001714c:	48 01 64 79 	bl      1002d5c4 <lig_matrix_get_card_name@plt>
				json_object_set(solt,"name",json_string((const char *)namebuf));
10017150:	39 3f 00 30 	addi    r9,r31,48
10017154:	7d 23 4b 78 	mr      r3,r9
10017158:	48 01 64 95 	bl      1002d5ec <json_string@plt>
1001715c:	7c 69 1b 78 	mr      r9,r3
10017160:	80 7f 00 18 	lwz     r3,24(r31)
10017164:	3d 40 10 02 	lis     r10,4098
10017168:	38 8a b7 5c 	addi    r4,r10,-18596
1001716c:	7d 25 4b 78 	mr      r5,r9
10017170:	4b ff df 65 	bl      100150d4 <json_object_set>
10017174:	48 00 00 80 	b       100171f4 <GetDeviceCardlist+0x384>
			}else
			{
				json_object_set(solt,"index",json_integer(i));
10017178:	81 3f 00 10 	lwz     r9,16(r31)
1001717c:	7d 34 4b 78 	mr      r20,r9
10017180:	7d 29 fe 70 	srawi   r9,r9,31
10017184:	7d 33 4b 78 	mr      r19,r9
10017188:	7e 63 9b 78 	mr      r3,r19
1001718c:	7e 84 a3 78 	mr      r4,r20
10017190:	48 01 62 bd 	bl      1002d44c <json_integer@plt>
10017194:	7c 69 1b 78 	mr      r9,r3
10017198:	80 7f 00 18 	lwz     r3,24(r31)
1001719c:	3d 40 10 02 	lis     r10,4098
100171a0:	38 8a b7 c0 	addi    r4,r10,-18496
100171a4:	7d 25 4b 78 	mr      r5,r9
100171a8:	4b ff df 2d 	bl      100150d4 <json_object_set>
				json_object_set(solt,"status",json_string("offline"));
100171ac:	3d 20 10 02 	lis     r9,4098
100171b0:	38 69 b8 78 	addi    r3,r9,-18312
100171b4:	48 01 64 39 	bl      1002d5ec <json_string@plt>
100171b8:	7c 69 1b 78 	mr      r9,r3
100171bc:	80 7f 00 18 	lwz     r3,24(r31)
100171c0:	3d 40 10 02 	lis     r10,4098
100171c4:	38 8a b7 d4 	addi    r4,r10,-18476
100171c8:	7d 25 4b 78 	mr      r5,r9
100171cc:	4b ff df 09 	bl      100150d4 <json_object_set>
				json_object_set(solt,"name",json_string("unknown"));
100171d0:	3d 20 10 02 	lis     r9,4098
100171d4:	38 69 b8 80 	addi    r3,r9,-18304
100171d8:	48 01 64 15 	bl      1002d5ec <json_string@plt>
100171dc:	7c 69 1b 78 	mr      r9,r3
100171e0:	80 7f 00 18 	lwz     r3,24(r31)
100171e4:	3d 40 10 02 	lis     r10,4098
100171e8:	38 8a b7 5c 	addi    r4,r10,-18596
100171ec:	7d 25 4b 78 	mr      r5,r9
100171f0:	4b ff de e5 	bl      100150d4 <json_object_set>
			}
			cpy=json_deep_copy(solt);
100171f4:	80 7f 00 18 	lwz     r3,24(r31)
100171f8:	48 01 65 25 	bl      1002d71c <json_deep_copy@plt>
100171fc:	90 7f 00 08 	stw     r3,8(r31)
			json_array_append(arr,cpy);
10017200:	80 7f 00 1c 	lwz     r3,28(r31)
10017204:	80 9f 00 08 	lwz     r4,8(r31)
10017208:	4b ff df 29 	bl      10015130 <json_array_append>
		json_object_set_new(solt,"name",json_null());//json_string("On"));
		flag=1;
		int portinfo[ligPorts];
		memset(portinfo,0,ligPorts);
		int i,in;
		for(i=1;i<=(ligPorts/2);i++)
1001720c:	81 3f 00 10 	lwz     r9,16(r31)
10017210:	39 29 00 01 	addi    r9,r9,1
10017214:	91 3f 00 10 	stw     r9,16(r31)
10017218:	3d 20 10 03 	lis     r9,4099
1001721c:	89 29 d3 50 	lbz     r9,-11440(r9)
10017220:	55 29 06 3e 	clrlwi  r9,r9,24
10017224:	55 29 f8 7e 	rlwinm  r9,r9,31,1,31
10017228:	55 29 06 3e 	clrlwi  r9,r9,24
1001722c:	7d 2a 4b 78 	mr      r10,r9
10017230:	81 3f 00 10 	lwz     r9,16(r31)
10017234:	7f 8a 48 00 	cmpw    cr7,r10,r9
10017238:	40 9c fe 60 	bge     cr7,10017098 <GetDeviceCardlist+0x228>
			cpy=json_deep_copy(solt);
			json_array_append(arr,cpy);
		}

		char *str;
		str=json_dumps(json,JSON_PRESERVE_ORDER);
1001723c:	80 7f 00 14 	lwz     r3,20(r31)
10017240:	38 80 01 00 	li      r4,256
10017244:	48 01 65 71 	bl      1002d7b4 <json_dumps@plt>
10017248:	90 7f 00 2c 	stw     r3,44(r31)
		strcpy(data,str);
1001724c:	80 7f 00 78 	lwz     r3,120(r31)
10017250:	80 9f 00 2c 	lwz     r4,44(r31)
10017254:	48 01 63 11 	bl      1002d564 <strcpy@plt>
		free(str);
10017258:	80 7f 00 2c 	lwz     r3,44(r31)
1001725c:	48 01 61 d9 	bl      1002d434 <free@plt>
		if(str!=NULL)
10017260:	81 3f 00 2c 	lwz     r9,44(r31)
10017264:	2f 89 00 00 	cmpwi   cr7,r9,0
10017268:	41 9e 00 0c 	beq     cr7,10017274 <GetDeviceCardlist+0x404>
		{
			str=NULL;
1001726c:	39 20 00 00 	li      r9,0
10017270:	91 3f 00 2c 	stw     r9,44(r31)
		}
		json_decref(json);
10017274:	80 7f 00 14 	lwz     r3,20(r31)
10017278:	4b ff dd d9 	bl      10015050 <json_decref>
		json_decref(solt);
1001727c:	80 7f 00 18 	lwz     r3,24(r31)
10017280:	4b ff dd d1 	bl      10015050 <json_decref>
		json_decref(arr);
10017284:	80 7f 00 1c 	lwz     r3,28(r31)
10017288:	4b ff dd c9 	bl      10015050 <json_decref>
		json_decref(cpy);
1001728c:	80 7f 00 08 	lwz     r3,8(r31)
10017290:	4b ff dd c1 	bl      10015050 <json_decref>
10017294:	81 21 00 00 	lwz     r9,0(r1)
10017298:	91 32 00 00 	stw     r9,0(r18)
1001729c:	7e 41 93 78 	mr      r1,r18
	}
	
	return flag;
100172a0:	89 3f 00 0c 	lbz     r9,12(r31)
100172a4:	55 29 06 3e 	clrlwi  r9,r9,24
}
100172a8:	7d 23 4b 78 	mr      r3,r9
100172ac:	39 7f 00 c0 	addi    r11,r31,192
100172b0:	80 0b 00 04 	lwz     r0,4(r11)
100172b4:	7c 08 03 a6 	mtlr    r0
100172b8:	82 4b ff c8 	lwz     r18,-56(r11)
100172bc:	82 6b ff cc 	lwz     r19,-52(r11)
100172c0:	82 8b ff d0 	lwz     r20,-48(r11)
100172c4:	82 ab ff d4 	lwz     r21,-44(r11)
100172c8:	82 cb ff d8 	lwz     r22,-40(r11)
100172cc:	82 eb ff dc 	lwz     r23,-36(r11)
100172d0:	83 0b ff e0 	lwz     r24,-32(r11)
100172d4:	83 2b ff e4 	lwz     r25,-28(r11)
100172d8:	83 4b ff e8 	lwz     r26,-24(r11)
100172dc:	83 6b ff ec 	lwz     r27,-20(r11)
100172e0:	83 8b ff f0 	lwz     r28,-16(r11)
100172e4:	83 ab ff f4 	lwz     r29,-12(r11)
100172e8:	83 cb ff f8 	lwz     r30,-8(r11)
100172ec:	83 eb ff fc 	lwz     r31,-4(r11)
100172f0:	7d 61 5b 78 	mr      r1,r11
100172f4:	4e 80 00 20 	blr

100172f8 <SetDeviceRouting>:
/*只是截取数据并未对数据的正确性进行校验*/
uint8 SetDeviceRouting(json_t *json,char *estr)
{
100172f8:	94 21 ff c0 	stwu    r1,-64(r1)
100172fc:	7c 08 02 a6 	mflr    r0
10017300:	90 01 00 44 	stw     r0,68(r1)
10017304:	93 e1 00 3c 	stw     r31,60(r1)
10017308:	7c 3f 0b 78 	mr      r31,r1
1001730c:	90 7f 00 28 	stw     r3,40(r31)
10017310:	90 9f 00 2c 	stw     r4,44(r31)
	uint8 flag=0;
10017314:	39 20 00 00 	li      r9,0
10017318:	99 3f 00 08 	stb     r9,8(r31)
	uint8 ff91=1;
1001731c:	39 20 00 01 	li      r9,1
10017320:	99 3f 00 09 	stb     r9,9(r31)
	json_t *data;
	json_t * val;
	uint8 num;
	num=json_array_size(json);
10017324:	80 7f 00 28 	lwz     r3,40(r31)
10017328:	48 01 63 e5 	bl      1002d70c <json_array_size@plt>
1001732c:	7c 69 1b 78 	mr      r9,r3
10017330:	99 3f 00 0b 	stb     r9,11(r31)
	uint8 i;
	uint32 in,out;
	int32 value;
	char str[5];
	value=lig_matrix_set_db_mode(lighandle,1);
10017334:	3d 20 10 03 	lis     r9,4099
10017338:	81 29 d3 6c 	lwz     r9,-11412(r9)
1001733c:	7d 23 4b 78 	mr      r3,r9
10017340:	38 80 00 01 	li      r4,1
10017344:	48 01 63 d1 	bl      1002d714 <lig_matrix_set_db_mode@plt>
10017348:	90 7f 00 0c 	stw     r3,12(r31)
#if DEBUG
	printf("The open database value is %d\n",value);
1001734c:	3d 20 10 02 	lis     r9,4098
10017350:	38 69 b8 88 	addi    r3,r9,-18296
10017354:	80 9f 00 0c 	lwz     r4,12(r31)
10017358:	4c c6 31 82 	crclr   4*cr1+eq
1001735c:	48 01 60 91 	bl      1002d3ec <printf@plt>
#endif
	for(i=0;i<num;i++)
10017360:	39 20 00 00 	li      r9,0
10017364:	99 3f 00 0a 	stb     r9,10(r31)
10017368:	48 00 04 24 	b       1001778c <SetDeviceRouting+0x494>
	{
		data=json_array_get(json,i);
1001736c:	89 3f 00 0a 	lbz     r9,10(r31)
10017370:	55 29 06 3e 	clrlwi  r9,r9,24
10017374:	80 7f 00 28 	lwz     r3,40(r31)
10017378:	7d 24 4b 78 	mr      r4,r9
1001737c:	48 01 61 b1 	bl      1002d52c <json_array_get@plt>
10017380:	90 7f 00 10 	stw     r3,16(r31)
		if(data&&json_typeof(data)==JSON_OBJECT)
10017384:	81 3f 00 10 	lwz     r9,16(r31)
10017388:	2f 89 00 00 	cmpwi   cr7,r9,0
1001738c:	41 9e 03 b8 	beq     cr7,10017744 <SetDeviceRouting+0x44c>
10017390:	81 3f 00 10 	lwz     r9,16(r31)
10017394:	81 29 00 00 	lwz     r9,0(r9)
10017398:	2f 89 00 00 	cmpwi   cr7,r9,0
1001739c:	40 9e 03 a8 	bne     cr7,10017744 <SetDeviceRouting+0x44c>
		{
			val=json_object_get(data,"in");
100173a0:	80 7f 00 10 	lwz     r3,16(r31)
100173a4:	3d 20 10 02 	lis     r9,4098
100173a8:	38 89 b8 0c 	addi    r4,r9,-18420
100173ac:	48 01 64 89 	bl      1002d834 <json_object_get@plt>
100173b0:	90 7f 00 14 	stw     r3,20(r31)
			if(JsonGetInteger(val,&in))
100173b4:	39 3f 00 18 	addi    r9,r31,24
100173b8:	80 7f 00 14 	lwz     r3,20(r31)
100173bc:	7d 24 4b 78 	mr      r4,r9
100173c0:	48 00 05 c5 	bl      10017984 <JsonGetInteger>
100173c4:	7c 69 1b 78 	mr      r9,r3
100173c8:	2f 89 00 00 	cmpwi   cr7,r9,0
100173cc:	41 9e 03 20 	beq     cr7,100176ec <SetDeviceRouting+0x3f4>
			{
				val=json_object_get(data,"out");
100173d0:	80 7f 00 10 	lwz     r3,16(r31)
100173d4:	3d 20 10 02 	lis     r9,4098
100173d8:	38 89 b8 10 	addi    r4,r9,-18416
100173dc:	48 01 64 59 	bl      1002d834 <json_object_get@plt>
100173e0:	90 7f 00 14 	stw     r3,20(r31)
				if(JsonGetInteger(val,&out))
100173e4:	39 3f 00 1c 	addi    r9,r31,28
100173e8:	80 7f 00 14 	lwz     r3,20(r31)
100173ec:	7d 24 4b 78 	mr      r4,r9
100173f0:	48 00 05 95 	bl      10017984 <JsonGetInteger>
100173f4:	7c 69 1b 78 	mr      r9,r3
100173f8:	2f 89 00 00 	cmpwi   cr7,r9,0
100173fc:	41 9e 02 b0 	beq     cr7,100176ac <SetDeviceRouting+0x3b4>
				{
					val=json_object_get(data,"type");
10017400:	80 7f 00 10 	lwz     r3,16(r31)
10017404:	3d 20 10 02 	lis     r9,4098
10017408:	38 89 b8 18 	addi    r4,r9,-18408
1001740c:	48 01 64 29 	bl      1002d834 <json_object_get@plt>
10017410:	90 7f 00 14 	stw     r3,20(r31)
					if(JsonGetString(val,str))
10017414:	39 3f 00 20 	addi    r9,r31,32
10017418:	80 7f 00 14 	lwz     r3,20(r31)
1001741c:	7d 24 4b 78 	mr      r4,r9
10017420:	48 00 04 e1 	bl      10017900 <JsonGetString>
10017424:	7c 69 1b 78 	mr      r9,r3
10017428:	2f 89 00 00 	cmpwi   cr7,r9,0
1001742c:	41 9e 02 30 	beq     cr7,1001765c <SetDeviceRouting+0x364>
					{
						/*视频切换*/
						if(!strcmp(str,"v"))
10017430:	39 3f 00 20 	addi    r9,r31,32
10017434:	7d 23 4b 78 	mr      r3,r9
10017438:	3d 20 10 02 	lis     r9,4098
1001743c:	38 89 b8 14 	addi    r4,r9,-18412
10017440:	48 01 5f 9d 	bl      1002d3dc <strcmp@plt>
10017444:	7c 69 1b 78 	mr      r9,r3
10017448:	2f 89 00 00 	cmpwi   cr7,r9,0
1001744c:	40 9e 00 88 	bne     cr7,100174d4 <SetDeviceRouting+0x1dc>
						{	
							/*视频预切换错误*/
							value=ex_lig_matrix_stash_video_switch_data(lighandle,in,out);
10017450:	3d 20 10 03 	lis     r9,4099
10017454:	81 09 d3 6c 	lwz     r8,-11412(r9)
10017458:	81 5f 00 18 	lwz     r10,24(r31)
1001745c:	81 3f 00 1c 	lwz     r9,28(r31)
10017460:	7d 03 43 78 	mr      r3,r8
10017464:	7d 44 53 78 	mr      r4,r10
10017468:	7d 25 4b 78 	mr      r5,r9
1001746c:	48 01 5f 99 	bl      1002d404 <ex_lig_matrix_stash_video_switch_data@plt>
10017470:	90 7f 00 0c 	stw     r3,12(r31)
							//if(!DeviceVideoRouting(in,out))
#if DEBUG
							printf("The pre Switch status is %d",value);
10017474:	3d 20 10 02 	lis     r9,4098
10017478:	38 69 b8 a8 	addi    r3,r9,-18264
1001747c:	80 9f 00 0c 	lwz     r4,12(r31)
10017480:	4c c6 31 82 	crclr   4*cr1+eq
10017484:	48 01 5f 69 	bl      1002d3ec <printf@plt>
#endif
							if(value)
10017488:	81 3f 00 0c 	lwz     r9,12(r31)
1001748c:	2f 89 00 00 	cmpwi   cr7,r9,0
10017490:	41 9e 02 9c 	beq     cr7,1001772c <SetDeviceRouting+0x434>
							{
								ff91=0;
10017494:	39 20 00 00 	li      r9,0
10017498:	99 3f 00 09 	stb     r9,9(r31)
								strcpy(estr,"Routing Video Error");
1001749c:	81 3f 00 2c 	lwz     r9,44(r31)
100174a0:	3d 40 10 02 	lis     r10,4098
100174a4:	39 4a b8 c4 	addi    r10,r10,-18236
100174a8:	80 aa 00 00 	lwz     r5,0(r10)
100174ac:	80 ca 00 04 	lwz     r6,4(r10)
100174b0:	80 ea 00 08 	lwz     r7,8(r10)
100174b4:	81 0a 00 0c 	lwz     r8,12(r10)
100174b8:	90 a9 00 00 	stw     r5,0(r9)
100174bc:	90 c9 00 04 	stw     r6,4(r9)
100174c0:	90 e9 00 08 	stw     r7,8(r9)
100174c4:	91 09 00 0c 	stw     r8,12(r9)
100174c8:	81 4a 00 10 	lwz     r10,16(r10)
100174cc:	91 49 00 10 	stw     r10,16(r9)
								break;
100174d0:	48 00 02 d4 	b       100177a4 <SetDeviceRouting+0x4ac>
							}
						}
						/*音频切换*/
						else if(!strcmp(str,"a"))
100174d4:	39 3f 00 20 	addi    r9,r31,32
100174d8:	7d 23 4b 78 	mr      r3,r9
100174dc:	3d 20 10 02 	lis     r9,4098
100174e0:	38 89 b8 d8 	addi    r4,r9,-18216
100174e4:	48 01 5e f9 	bl      1002d3dc <strcmp@plt>
100174e8:	7c 69 1b 78 	mr      r9,r3
100174ec:	2f 89 00 00 	cmpwi   cr7,r9,0
100174f0:	40 9e 00 64 	bne     cr7,10017554 <SetDeviceRouting+0x25c>
						{
							if(!DeviceAudioRouting(in,out))
100174f4:	81 5f 00 18 	lwz     r10,24(r31)
100174f8:	81 3f 00 1c 	lwz     r9,28(r31)
100174fc:	7d 43 53 78 	mr      r3,r10
10017500:	7d 24 4b 78 	mr      r4,r9
10017504:	48 00 05 9d 	bl      10017aa0 <DeviceAudioRouting>
10017508:	7c 69 1b 78 	mr      r9,r3
1001750c:	2f 89 00 00 	cmpwi   cr7,r9,0
10017510:	40 9e 02 1c 	bne     cr7,1001772c <SetDeviceRouting+0x434>
							{
								ff91=0;
10017514:	39 20 00 00 	li      r9,0
10017518:	99 3f 00 09 	stb     r9,9(r31)
								strcpy(estr,"Routing Audio Error");
1001751c:	81 3f 00 2c 	lwz     r9,44(r31)
10017520:	3d 40 10 02 	lis     r10,4098
10017524:	39 4a b8 dc 	addi    r10,r10,-18212
10017528:	80 aa 00 00 	lwz     r5,0(r10)
1001752c:	80 ca 00 04 	lwz     r6,4(r10)
10017530:	80 ea 00 08 	lwz     r7,8(r10)
10017534:	81 0a 00 0c 	lwz     r8,12(r10)
10017538:	90 a9 00 00 	stw     r5,0(r9)
1001753c:	90 c9 00 04 	stw     r6,4(r9)
10017540:	90 e9 00 08 	stw     r7,8(r9)
10017544:	91 09 00 0c 	stw     r8,12(r9)
10017548:	81 4a 00 10 	lwz     r10,16(r10)
1001754c:	91 49 00 10 	stw     r10,16(r9)
								break;
10017550:	48 00 02 54 	b       100177a4 <SetDeviceRouting+0x4ac>
							}
						}
						/*音视频切换*/
						else if(!strcmp(str,"av"))
10017554:	39 3f 00 20 	addi    r9,r31,32
10017558:	7d 23 4b 78 	mr      r3,r9
1001755c:	3d 20 10 02 	lis     r9,4098
10017560:	38 89 b8 f0 	addi    r4,r9,-18192
10017564:	48 01 5e 79 	bl      1002d3dc <strcmp@plt>
10017568:	7c 69 1b 78 	mr      r9,r3
1001756c:	2f 89 00 00 	cmpwi   cr7,r9,0
10017570:	40 9e 00 c4 	bne     cr7,10017634 <SetDeviceRouting+0x33c>
						{
							if(!DeviceVideoRouting(in,out))
10017574:	81 5f 00 18 	lwz     r10,24(r31)
10017578:	81 3f 00 1c 	lwz     r9,28(r31)
1001757c:	7d 43 53 78 	mr      r3,r10
10017580:	7d 24 4b 78 	mr      r4,r9
10017584:	48 00 04 85 	bl      10017a08 <DeviceVideoRouting>
10017588:	7c 69 1b 78 	mr      r9,r3
1001758c:	2f 89 00 00 	cmpwi   cr7,r9,0
10017590:	40 9e 00 44 	bne     cr7,100175d4 <SetDeviceRouting+0x2dc>
							{
								ff91=0;
10017594:	39 20 00 00 	li      r9,0
10017598:	99 3f 00 09 	stb     r9,9(r31)
								strcpy(estr,"Routing Video Error");
1001759c:	81 3f 00 2c 	lwz     r9,44(r31)
100175a0:	3d 40 10 02 	lis     r10,4098
100175a4:	39 4a b8 c4 	addi    r10,r10,-18236
100175a8:	80 aa 00 00 	lwz     r5,0(r10)
100175ac:	80 ca 00 04 	lwz     r6,4(r10)
100175b0:	80 ea 00 08 	lwz     r7,8(r10)
100175b4:	81 0a 00 0c 	lwz     r8,12(r10)
100175b8:	90 a9 00 00 	stw     r5,0(r9)
100175bc:	90 c9 00 04 	stw     r6,4(r9)
100175c0:	90 e9 00 08 	stw     r7,8(r9)
100175c4:	91 09 00 0c 	stw     r8,12(r9)
100175c8:	81 4a 00 10 	lwz     r10,16(r10)
100175cc:	91 49 00 10 	stw     r10,16(r9)
								break;
100175d0:	48 00 01 d4 	b       100177a4 <SetDeviceRouting+0x4ac>
							}
							if(!DeviceAudioRouting(in,out))
100175d4:	81 5f 00 18 	lwz     r10,24(r31)
100175d8:	81 3f 00 1c 	lwz     r9,28(r31)
100175dc:	7d 43 53 78 	mr      r3,r10
100175e0:	7d 24 4b 78 	mr      r4,r9
100175e4:	48 00 04 bd 	bl      10017aa0 <DeviceAudioRouting>
100175e8:	7c 69 1b 78 	mr      r9,r3
100175ec:	2f 89 00 00 	cmpwi   cr7,r9,0
100175f0:	40 9e 01 3c 	bne     cr7,1001772c <SetDeviceRouting+0x434>
							{
								ff91=0;
100175f4:	39 20 00 00 	li      r9,0
100175f8:	99 3f 00 09 	stb     r9,9(r31)
								strcpy(estr,"Routing Audio Error");
100175fc:	81 3f 00 2c 	lwz     r9,44(r31)
10017600:	3d 40 10 02 	lis     r10,4098
10017604:	39 4a b8 dc 	addi    r10,r10,-18212
10017608:	80 aa 00 00 	lwz     r5,0(r10)
1001760c:	80 ca 00 04 	lwz     r6,4(r10)
10017610:	80 ea 00 08 	lwz     r7,8(r10)
10017614:	81 0a 00 0c 	lwz     r8,12(r10)
10017618:	90 a9 00 00 	stw     r5,0(r9)
1001761c:	90 c9 00 04 	stw     r6,4(r9)
10017620:	90 e9 00 08 	stw     r7,8(r9)
10017624:	91 09 00 0c 	stw     r8,12(r9)
10017628:	81 4a 00 10 	lwz     r10,16(r10)
1001762c:	91 49 00 10 	stw     r10,16(r9)
								break;
10017630:	48 00 01 74 	b       100177a4 <SetDeviceRouting+0x4ac>
							}
						}
						else
						{
							ff91=0;
10017634:	39 20 00 00 	li      r9,0
10017638:	99 3f 00 09 	stb     r9,9(r31)
							sprintf(estr,"Error of type type %s",str);
1001763c:	39 3f 00 20 	addi    r9,r31,32
10017640:	80 7f 00 2c 	lwz     r3,44(r31)
10017644:	3d 40 10 02 	lis     r10,4098
10017648:	38 8a b8 f4 	addi    r4,r10,-18188
1001764c:	7d 25 4b 78 	mr      r5,r9
10017650:	4c c6 31 82 	crclr   4*cr1+eq
10017654:	48 01 61 51 	bl      1002d7a4 <sprintf@plt>
							break;
10017658:	48 00 01 4c 	b       100177a4 <SetDeviceRouting+0x4ac>
						}
						
					}
					else
					{
						ff91=0;
1001765c:	39 20 00 00 	li      r9,0
10017660:	99 3f 00 09 	stb     r9,9(r31)
						strcpy(estr,"Error type is not string");
10017664:	81 3f 00 2c 	lwz     r9,44(r31)
10017668:	3d 40 10 02 	lis     r10,4098
1001766c:	39 4a b9 0c 	addi    r10,r10,-18164
10017670:	80 aa 00 00 	lwz     r5,0(r10)
10017674:	80 ca 00 04 	lwz     r6,4(r10)
10017678:	80 ea 00 08 	lwz     r7,8(r10)
1001767c:	81 0a 00 0c 	lwz     r8,12(r10)
10017680:	90 a9 00 00 	stw     r5,0(r9)
10017684:	90 c9 00 04 	stw     r6,4(r9)
10017688:	90 e9 00 08 	stw     r7,8(r9)
1001768c:	91 09 00 0c 	stw     r8,12(r9)
10017690:	80 ea 00 10 	lwz     r7,16(r10)
10017694:	81 0a 00 14 	lwz     r8,20(r10)
10017698:	89 4a 00 18 	lbz     r10,24(r10)
1001769c:	90 e9 00 10 	stw     r7,16(r9)
100176a0:	91 09 00 14 	stw     r8,20(r9)
100176a4:	99 49 00 18 	stb     r10,24(r9)
						break;
100176a8:	48 00 00 fc 	b       100177a4 <SetDeviceRouting+0x4ac>
					}
				}
				else
				{
					ff91=0;
100176ac:	39 20 00 00 	li      r9,0
100176b0:	99 3f 00 09 	stb     r9,9(r31)
					strcpy(estr,"Error of out type");
100176b4:	81 3f 00 2c 	lwz     r9,44(r31)
100176b8:	3d 40 10 02 	lis     r10,4098
100176bc:	39 4a b9 28 	addi    r10,r10,-18136
100176c0:	80 aa 00 00 	lwz     r5,0(r10)
100176c4:	80 ca 00 04 	lwz     r6,4(r10)
100176c8:	80 ea 00 08 	lwz     r7,8(r10)
100176cc:	81 0a 00 0c 	lwz     r8,12(r10)
100176d0:	90 a9 00 00 	stw     r5,0(r9)
100176d4:	90 c9 00 04 	stw     r6,4(r9)
100176d8:	90 e9 00 08 	stw     r7,8(r9)
100176dc:	91 09 00 0c 	stw     r8,12(r9)
100176e0:	a1 4a 00 10 	lhz     r10,16(r10)
100176e4:	b1 49 00 10 	sth     r10,16(r9)
					break;
100176e8:	48 00 00 bc 	b       100177a4 <SetDeviceRouting+0x4ac>
				}
			}
			else
			{
				ff91=0;
100176ec:	39 20 00 00 	li      r9,0
100176f0:	99 3f 00 09 	stb     r9,9(r31)
				strcpy(estr,"Error of in type");
100176f4:	81 3f 00 2c 	lwz     r9,44(r31)
100176f8:	3d 40 10 02 	lis     r10,4098
100176fc:	39 4a b9 3c 	addi    r10,r10,-18116
10017700:	80 aa 00 00 	lwz     r5,0(r10)
10017704:	80 ca 00 04 	lwz     r6,4(r10)
10017708:	80 ea 00 08 	lwz     r7,8(r10)
1001770c:	81 0a 00 0c 	lwz     r8,12(r10)
10017710:	90 a9 00 00 	stw     r5,0(r9)
10017714:	90 c9 00 04 	stw     r6,4(r9)
10017718:	90 e9 00 08 	stw     r7,8(r9)
1001771c:	91 09 00 0c 	stw     r8,12(r9)
10017720:	89 4a 00 10 	lbz     r10,16(r10)
10017724:	99 49 00 10 	stb     r10,16(r9)
				break;
10017728:	48 00 00 7c 	b       100177a4 <SetDeviceRouting+0x4ac>
	{
		data=json_array_get(json,i);
		if(data&&json_typeof(data)==JSON_OBJECT)
		{
			val=json_object_get(data,"in");
			if(JsonGetInteger(val,&in))
1001772c:	60 00 00 00 	nop
	char str[5];
	value=lig_matrix_set_db_mode(lighandle,1);
#if DEBUG
	printf("The open database value is %d\n",value);
#endif
	for(i=0;i<num;i++)
10017730:	89 3f 00 0a 	lbz     r9,10(r31)
10017734:	55 29 06 3e 	clrlwi  r9,r9,24
10017738:	39 29 00 01 	addi    r9,r9,1
1001773c:	99 3f 00 0a 	stb     r9,10(r31)
10017740:	48 00 00 4c 	b       1001778c <SetDeviceRouting+0x494>
				break;
			}
		}
		else
		{
			ff91=0;
10017744:	39 20 00 00 	li      r9,0
10017748:	99 3f 00 09 	stb     r9,9(r31)
			strcpy(estr,"The array is not object");
1001774c:	81 3f 00 2c 	lwz     r9,44(r31)
10017750:	3d 40 10 02 	lis     r10,4098
10017754:	39 4a b9 50 	addi    r10,r10,-18096
10017758:	80 aa 00 00 	lwz     r5,0(r10)
1001775c:	80 ca 00 04 	lwz     r6,4(r10)
10017760:	80 ea 00 08 	lwz     r7,8(r10)
10017764:	81 0a 00 0c 	lwz     r8,12(r10)
10017768:	90 a9 00 00 	stw     r5,0(r9)
1001776c:	90 c9 00 04 	stw     r6,4(r9)
10017770:	90 e9 00 08 	stw     r7,8(r9)
10017774:	91 09 00 0c 	stw     r8,12(r9)
10017778:	81 0a 00 10 	lwz     r8,16(r10)
1001777c:	81 4a 00 14 	lwz     r10,20(r10)
10017780:	91 09 00 10 	stw     r8,16(r9)
10017784:	91 49 00 14 	stw     r10,20(r9)
			break;
10017788:	48 00 00 1c 	b       100177a4 <SetDeviceRouting+0x4ac>
	char str[5];
	value=lig_matrix_set_db_mode(lighandle,1);
#if DEBUG
	printf("The open database value is %d\n",value);
#endif
	for(i=0;i<num;i++)
1001778c:	89 3f 00 0a 	lbz     r9,10(r31)
10017790:	55 2a 06 3e 	clrlwi  r10,r9,24
10017794:	89 3f 00 0b 	lbz     r9,11(r31)
10017798:	55 29 06 3e 	clrlwi  r9,r9,24
1001779c:	7f 8a 48 40 	cmplw   cr7,r10,r9
100177a0:	41 9c fb cc 	blt     cr7,1001736c <SetDeviceRouting+0x74>
			ff91=0;
			strcpy(estr,"The array is not object");
			break;
		}
	}
	if(ff91)
100177a4:	89 3f 00 09 	lbz     r9,9(r31)
100177a8:	55 29 06 3e 	clrlwi  r9,r9,24
100177ac:	2f 89 00 00 	cmpwi   cr7,r9,0
100177b0:	41 9e 00 e4 	beq     cr7,10017894 <SetDeviceRouting+0x59c>
	{
		value=ex_lig_matrix_set_video_switch_done(lighandle);
100177b4:	3d 20 10 03 	lis     r9,4099
100177b8:	81 29 d3 6c 	lwz     r9,-11412(r9)
100177bc:	7d 23 4b 78 	mr      r3,r9
100177c0:	48 01 5f 6d 	bl      1002d72c <ex_lig_matrix_set_video_switch_done@plt>
100177c4:	90 7f 00 0c 	stw     r3,12(r31)
		//value=lig_matrix_set_video_switch_done(lighandle);
#if DEBUG
		printf("The video switch  value is %d\n",value);
100177c8:	3d 20 10 02 	lis     r9,4098
100177cc:	38 69 b9 68 	addi    r3,r9,-18072
100177d0:	80 9f 00 0c 	lwz     r4,12(r31)
100177d4:	4c c6 31 82 	crclr   4*cr1+eq
100177d8:	48 01 5c 15 	bl      1002d3ec <printf@plt>
#endif
		if(value>=0)
100177dc:	81 3f 00 0c 	lwz     r9,12(r31)
100177e0:	2f 89 00 00 	cmpwi   cr7,r9,0
100177e4:	41 9c 00 7c 	blt     cr7,10017860 <SetDeviceRouting+0x568>
		{
#if DEBUG
			printf("The audio switch  value is %d\n",value);
100177e8:	3d 20 10 02 	lis     r9,4098
100177ec:	38 69 b9 88 	addi    r3,r9,-18040
100177f0:	80 9f 00 0c 	lwz     r4,12(r31)
100177f4:	4c c6 31 82 	crclr   4*cr1+eq
100177f8:	48 01 5b f5 	bl      1002d3ec <printf@plt>
#endif
			value=lig_matrix_set_audio_switch_done(lighandle);
100177fc:	3d 20 10 03 	lis     r9,4099
10017800:	81 29 d3 6c 	lwz     r9,-11412(r9)
10017804:	7d 23 4b 78 	mr      r3,r9
10017808:	48 01 5f 8d 	bl      1002d794 <lig_matrix_set_audio_switch_done@plt>
1001780c:	90 7f 00 0c 	stw     r3,12(r31)
			if(value>=0)
10017810:	81 3f 00 0c 	lwz     r9,12(r31)
10017814:	2f 89 00 00 	cmpwi   cr7,r9,0
10017818:	41 9c 00 10 	blt     cr7,10017828 <SetDeviceRouting+0x530>
			{
				flag=1;
1001781c:	39 20 00 01 	li      r9,1
10017820:	99 3f 00 08 	stb     r9,8(r31)
10017824:	48 00 00 70 	b       10017894 <SetDeviceRouting+0x59c>
			}
			else
			{
				strcpy(estr,"Audio done error");
10017828:	81 3f 00 2c 	lwz     r9,44(r31)
1001782c:	3d 40 10 02 	lis     r10,4098
10017830:	39 4a b9 a8 	addi    r10,r10,-18008
10017834:	80 aa 00 00 	lwz     r5,0(r10)
10017838:	80 ca 00 04 	lwz     r6,4(r10)
1001783c:	80 ea 00 08 	lwz     r7,8(r10)
10017840:	81 0a 00 0c 	lwz     r8,12(r10)
10017844:	90 a9 00 00 	stw     r5,0(r9)
10017848:	90 c9 00 04 	stw     r6,4(r9)
1001784c:	90 e9 00 08 	stw     r7,8(r9)
10017850:	91 09 00 0c 	stw     r8,12(r9)
10017854:	89 4a 00 10 	lbz     r10,16(r10)
10017858:	99 49 00 10 	stb     r10,16(r9)
1001785c:	48 00 00 38 	b       10017894 <SetDeviceRouting+0x59c>
			}
		}
		else
		{
			strcpy(estr,"Video done error");
10017860:	81 3f 00 2c 	lwz     r9,44(r31)
10017864:	3d 40 10 02 	lis     r10,4098
10017868:	39 4a b9 bc 	addi    r10,r10,-17988
1001786c:	80 aa 00 00 	lwz     r5,0(r10)
10017870:	80 ca 00 04 	lwz     r6,4(r10)
10017874:	80 ea 00 08 	lwz     r7,8(r10)
10017878:	81 0a 00 0c 	lwz     r8,12(r10)
1001787c:	90 a9 00 00 	stw     r5,0(r9)
10017880:	90 c9 00 04 	stw     r6,4(r9)
10017884:	90 e9 00 08 	stw     r7,8(r9)
10017888:	91 09 00 0c 	stw     r8,12(r9)
1001788c:	89 4a 00 10 	lbz     r10,16(r10)
10017890:	99 49 00 10 	stb     r10,16(r9)
		}
		
	}
	value=lig_matrix_set_db_mode(lighandle,0);
10017894:	3d 20 10 03 	lis     r9,4099
10017898:	81 29 d3 6c 	lwz     r9,-11412(r9)
1001789c:	7d 23 4b 78 	mr      r3,r9
100178a0:	38 80 00 00 	li      r4,0
100178a4:	48 01 5e 71 	bl      1002d714 <lig_matrix_set_db_mode@plt>
100178a8:	90 7f 00 0c 	stw     r3,12(r31)
#if DEBUG
	printf("The ff91 status is %d\n",ff91);
100178ac:	89 3f 00 09 	lbz     r9,9(r31)
100178b0:	55 29 06 3e 	clrlwi  r9,r9,24
100178b4:	3d 40 10 02 	lis     r10,4098
100178b8:	38 6a b9 d0 	addi    r3,r10,-17968
100178bc:	7d 24 4b 78 	mr      r4,r9
100178c0:	4c c6 31 82 	crclr   4*cr1+eq
100178c4:	48 01 5b 29 	bl      1002d3ec <printf@plt>
	printf("The close database value is %d\n",value);
100178c8:	3d 20 10 02 	lis     r9,4098
100178cc:	38 69 b9 e8 	addi    r3,r9,-17944
100178d0:	80 9f 00 0c 	lwz     r4,12(r31)
100178d4:	4c c6 31 82 	crclr   4*cr1+eq
100178d8:	48 01 5b 15 	bl      1002d3ec <printf@plt>
#endif
	return flag;
100178dc:	89 3f 00 08 	lbz     r9,8(r31)
100178e0:	55 29 06 3e 	clrlwi  r9,r9,24
}
100178e4:	7d 23 4b 78 	mr      r3,r9
100178e8:	39 7f 00 40 	addi    r11,r31,64
100178ec:	80 0b 00 04 	lwz     r0,4(r11)
100178f0:	7c 08 03 a6 	mtlr    r0
100178f4:	83 eb ff fc 	lwz     r31,-4(r11)
100178f8:	7d 61 5b 78 	mr      r1,r11
100178fc:	4e 80 00 20 	blr

10017900 <JsonGetString>:
uint8 JsonGetString(json_t *json,char *data)
{
10017900:	94 21 ff d0 	stwu    r1,-48(r1)
10017904:	7c 08 02 a6 	mflr    r0
10017908:	90 01 00 34 	stw     r0,52(r1)
1001790c:	93 e1 00 2c 	stw     r31,44(r1)
10017910:	7c 3f 0b 78 	mr      r31,r1
10017914:	90 7f 00 18 	stw     r3,24(r31)
10017918:	90 9f 00 1c 	stw     r4,28(r31)
	uint8 flag=0;
1001791c:	39 20 00 00 	li      r9,0
10017920:	99 3f 00 08 	stb     r9,8(r31)
	if(json)
10017924:	81 3f 00 18 	lwz     r9,24(r31)
10017928:	2f 89 00 00 	cmpwi   cr7,r9,0
1001792c:	41 9e 00 34 	beq     cr7,10017960 <JsonGetString+0x60>
	{
		if(json_typeof(json)==JSON_STRING)
10017930:	81 3f 00 18 	lwz     r9,24(r31)
10017934:	81 29 00 00 	lwz     r9,0(r9)
10017938:	2b 89 00 02 	cmplwi  cr7,r9,2
1001793c:	40 9e 00 24 	bne     cr7,10017960 <JsonGetString+0x60>
		{
			strcpy(data,json_string_value(json));
10017940:	80 7f 00 18 	lwz     r3,24(r31)
10017944:	48 01 5b b1 	bl      1002d4f4 <json_string_value@plt>
10017948:	7c 69 1b 78 	mr      r9,r3
1001794c:	80 7f 00 1c 	lwz     r3,28(r31)
10017950:	7d 24 4b 78 	mr      r4,r9
10017954:	48 01 5c 11 	bl      1002d564 <strcpy@plt>
			flag=1;
10017958:	39 20 00 01 	li      r9,1
1001795c:	99 3f 00 08 	stb     r9,8(r31)
		}	
	}
	return flag;
10017960:	89 3f 00 08 	lbz     r9,8(r31)
10017964:	55 29 06 3e 	clrlwi  r9,r9,24
}
10017968:	7d 23 4b 78 	mr      r3,r9
1001796c:	39 7f 00 30 	addi    r11,r31,48
10017970:	80 0b 00 04 	lwz     r0,4(r11)
10017974:	7c 08 03 a6 	mtlr    r0
10017978:	83 eb ff fc 	lwz     r31,-4(r11)
1001797c:	7d 61 5b 78 	mr      r1,r11
10017980:	4e 80 00 20 	blr

10017984 <JsonGetInteger>:
uint8 JsonGetInteger(json_t *json,uint32 *data)
{
10017984:	94 21 ff d0 	stwu    r1,-48(r1)
10017988:	7c 08 02 a6 	mflr    r0
1001798c:	90 01 00 34 	stw     r0,52(r1)
10017990:	93 e1 00 2c 	stw     r31,44(r1)
10017994:	7c 3f 0b 78 	mr      r31,r1
10017998:	90 7f 00 18 	stw     r3,24(r31)
1001799c:	90 9f 00 1c 	stw     r4,28(r31)
	uint8 flag=0;
100179a0:	39 20 00 00 	li      r9,0
100179a4:	99 3f 00 08 	stb     r9,8(r31)
	if(json)
100179a8:	81 3f 00 18 	lwz     r9,24(r31)
100179ac:	2f 89 00 00 	cmpwi   cr7,r9,0
100179b0:	41 9e 00 34 	beq     cr7,100179e4 <JsonGetInteger+0x60>
	{
		if(json_typeof(json)==JSON_INTEGER)
100179b4:	81 3f 00 18 	lwz     r9,24(r31)
100179b8:	81 29 00 00 	lwz     r9,0(r9)
100179bc:	2b 89 00 03 	cmplwi  cr7,r9,3
100179c0:	40 9e 00 24 	bne     cr7,100179e4 <JsonGetInteger+0x60>
		{
			*data=json_integer_value(json);
100179c4:	80 7f 00 18 	lwz     r3,24(r31)
100179c8:	48 01 5a bd 	bl      1002d484 <json_integer_value@plt>
100179cc:	7c 8a 23 78 	mr      r10,r4
100179d0:	7c 69 1b 78 	mr      r9,r3
100179d4:	81 3f 00 1c 	lwz     r9,28(r31)
100179d8:	91 49 00 00 	stw     r10,0(r9)
			flag=1;
100179dc:	39 20 00 01 	li      r9,1
100179e0:	99 3f 00 08 	stb     r9,8(r31)
		}

	}
	return flag;
100179e4:	89 3f 00 08 	lbz     r9,8(r31)
100179e8:	55 29 06 3e 	clrlwi  r9,r9,24
}
100179ec:	7d 23 4b 78 	mr      r3,r9
100179f0:	39 7f 00 30 	addi    r11,r31,48
100179f4:	80 0b 00 04 	lwz     r0,4(r11)
100179f8:	7c 08 03 a6 	mtlr    r0
100179fc:	83 eb ff fc 	lwz     r31,-4(r11)
10017a00:	7d 61 5b 78 	mr      r1,r11
10017a04:	4e 80 00 20 	blr

10017a08 <DeviceVideoRouting>:
uint8 DeviceVideoRouting(uint32 in,uint32 out)
{
10017a08:	94 21 ff d0 	stwu    r1,-48(r1)
10017a0c:	7c 08 02 a6 	mflr    r0
10017a10:	90 01 00 34 	stw     r0,52(r1)
10017a14:	93 e1 00 2c 	stw     r31,44(r1)
10017a18:	7c 3f 0b 78 	mr      r31,r1
10017a1c:	90 7f 00 18 	stw     r3,24(r31)
10017a20:	90 9f 00 1c 	stw     r4,28(r31)
	uint32 value;
	uint8 flag=1;	
10017a24:	39 20 00 01 	li      r9,1
10017a28:	99 3f 00 08 	stb     r9,8(r31)
	value=ex_lig_matrix_stash_video_switch_data(lighandle,in,out);
10017a2c:	3d 20 10 03 	lis     r9,4099
10017a30:	81 29 d3 6c 	lwz     r9,-11412(r9)
10017a34:	7d 23 4b 78 	mr      r3,r9
10017a38:	80 9f 00 18 	lwz     r4,24(r31)
10017a3c:	80 bf 00 1c 	lwz     r5,28(r31)
10017a40:	48 01 59 c5 	bl      1002d404 <ex_lig_matrix_stash_video_switch_data@plt>
10017a44:	7c 69 1b 78 	mr      r9,r3
10017a48:	91 3f 00 0c 	stw     r9,12(r31)
#if DEBUG
	printf("Video Pre switch value is %d in is %d out is %d\n",value,in,out);
10017a4c:	3d 20 10 02 	lis     r9,4098
10017a50:	38 69 ba 08 	addi    r3,r9,-17912
10017a54:	80 9f 00 0c 	lwz     r4,12(r31)
10017a58:	80 bf 00 18 	lwz     r5,24(r31)
10017a5c:	80 df 00 1c 	lwz     r6,28(r31)
10017a60:	4c c6 31 82 	crclr   4*cr1+eq
10017a64:	48 01 59 89 	bl      1002d3ec <printf@plt>
#endif 
	if(!value)
10017a68:	81 3f 00 0c 	lwz     r9,12(r31)
10017a6c:	2f 89 00 00 	cmpwi   cr7,r9,0
10017a70:	40 9e 00 0c 	bne     cr7,10017a7c <DeviceVideoRouting+0x74>
	{
		flag=1;
10017a74:	39 20 00 01 	li      r9,1
10017a78:	99 3f 00 08 	stb     r9,8(r31)
	}
	return flag;
10017a7c:	89 3f 00 08 	lbz     r9,8(r31)
10017a80:	55 29 06 3e 	clrlwi  r9,r9,24
}
10017a84:	7d 23 4b 78 	mr      r3,r9
10017a88:	39 7f 00 30 	addi    r11,r31,48
10017a8c:	80 0b 00 04 	lwz     r0,4(r11)
10017a90:	7c 08 03 a6 	mtlr    r0
10017a94:	83 eb ff fc 	lwz     r31,-4(r11)
10017a98:	7d 61 5b 78 	mr      r1,r11
10017a9c:	4e 80 00 20 	blr

10017aa0 <DeviceAudioRouting>:
uint8 DeviceAudioRouting(uint32 in,uint32 out)
{
10017aa0:	94 21 ff d0 	stwu    r1,-48(r1)
10017aa4:	7c 08 02 a6 	mflr    r0
10017aa8:	90 01 00 34 	stw     r0,52(r1)
10017aac:	93 e1 00 2c 	stw     r31,44(r1)
10017ab0:	7c 3f 0b 78 	mr      r31,r1
10017ab4:	90 7f 00 18 	stw     r3,24(r31)
10017ab8:	90 9f 00 1c 	stw     r4,28(r31)
	uint32 value;
	uint8 flag=1;
10017abc:	39 20 00 01 	li      r9,1
10017ac0:	99 3f 00 08 	stb     r9,8(r31)
	value=lig_matrix_stash_audio_switch_data(lighandle,in,out);
10017ac4:	3d 20 10 03 	lis     r9,4099
10017ac8:	81 29 d3 6c 	lwz     r9,-11412(r9)
10017acc:	7d 23 4b 78 	mr      r3,r9
10017ad0:	80 9f 00 18 	lwz     r4,24(r31)
10017ad4:	80 bf 00 1c 	lwz     r5,28(r31)
10017ad8:	48 01 5c 1d 	bl      1002d6f4 <lig_matrix_stash_audio_switch_data@plt>
10017adc:	7c 69 1b 78 	mr      r9,r3
10017ae0:	91 3f 00 0c 	stw     r9,12(r31)
#if DEBUG
	printf("Audio Pre switch value is %d in is %d out is %d\n",value,in,out);
10017ae4:	3d 20 10 02 	lis     r9,4098
10017ae8:	38 69 ba 3c 	addi    r3,r9,-17860
10017aec:	80 9f 00 0c 	lwz     r4,12(r31)
10017af0:	80 bf 00 18 	lwz     r5,24(r31)
10017af4:	80 df 00 1c 	lwz     r6,28(r31)
10017af8:	4c c6 31 82 	crclr   4*cr1+eq
10017afc:	48 01 58 f1 	bl      1002d3ec <printf@plt>
#endif 
	if(!value)
10017b00:	81 3f 00 0c 	lwz     r9,12(r31)
10017b04:	2f 89 00 00 	cmpwi   cr7,r9,0
10017b08:	40 9e 00 0c 	bne     cr7,10017b14 <DeviceAudioRouting+0x74>
	{
		flag=1;
10017b0c:	39 20 00 01 	li      r9,1
10017b10:	99 3f 00 08 	stb     r9,8(r31)
	}
	return flag;
10017b14:	89 3f 00 08 	lbz     r9,8(r31)
10017b18:	55 29 06 3e 	clrlwi  r9,r9,24
10017b1c:	7d 23 4b 78 	mr      r3,r9
10017b20:	39 7f 00 30 	addi    r11,r31,48
10017b24:	80 0b 00 04 	lwz     r0,4(r11)
10017b28:	7c 08 03 a6 	mtlr    r0
10017b2c:	83 eb ff fc 	lwz     r31,-4(r11)
10017b30:	7d 61 5b 78 	mr      r1,r11
10017b34:	4e 80 00 20 	blr
10017b38:	00 01 c4 cc 	.long 0x1c4cc

10017b3c <__libc_csu_init>:
10017b3c:	94 21 ff d0 	stwu    r1,-48(r1)
10017b40:	7c 08 02 a6 	mflr    r0
10017b44:	42 9f 00 05 	bcl     20,4*cr7+so,10017b48 <__libc_csu_init+0xc>
10017b48:	93 c1 00 28 	stw     r30,40(r1)
10017b4c:	7f c8 02 a6 	mflr    r30
10017b50:	90 01 00 34 	stw     r0,52(r1)
10017b54:	93 21 00 14 	stw     r25,20(r1)
10017b58:	7c 79 1b 78 	mr      r25,r3
10017b5c:	80 1e ff f0 	lwz     r0,-16(r30)
10017b60:	93 41 00 18 	stw     r26,24(r1)
10017b64:	7c 9a 23 78 	mr      r26,r4
10017b68:	7f c0 f2 14 	add     r30,r0,r30
10017b6c:	93 61 00 1c 	stw     r27,28(r1)
10017b70:	93 81 00 20 	stw     r28,32(r1)
10017b74:	7c bb 2b 78 	mr      r27,r5
10017b78:	93 a1 00 24 	stw     r29,36(r1)
10017b7c:	93 e1 00 2c 	stw     r31,44(r1)
10017b80:	4b fe a0 0d 	bl      10001b8c <_init>
10017b84:	81 3e 80 04 	lwz     r9,-32764(r30)
10017b88:	3b e0 00 00 	li      r31,0
10017b8c:	83 9e 80 00 	lwz     r28,-32768(r30)
10017b90:	3b a9 ff fc 	addi    r29,r9,-4
10017b94:	7f 89 e0 50 	subf    r28,r9,r28
10017b98:	7f 9c 16 71 	srawi.  r28,r28,2
10017b9c:	41 82 00 28 	beq     10017bc4 <__libc_csu_init+0x88>
10017ba0:	85 3d 00 04 	lwzu    r9,4(r29)
10017ba4:	7f 23 cb 78 	mr      r3,r25
10017ba8:	7f 44 d3 78 	mr      r4,r26
10017bac:	7f 65 db 78 	mr      r5,r27
10017bb0:	7d 29 03 a6 	mtctr   r9
10017bb4:	3b ff 00 01 	addi    r31,r31,1
10017bb8:	4e 80 04 21 	bctrl
10017bbc:	7f 9f e0 40 	cmplw   cr7,r31,r28
10017bc0:	40 9e ff e0 	bne     cr7,10017ba0 <__libc_csu_init+0x64>
10017bc4:	80 01 00 34 	lwz     r0,52(r1)
10017bc8:	83 21 00 14 	lwz     r25,20(r1)
10017bcc:	7c 08 03 a6 	mtlr    r0
10017bd0:	83 41 00 18 	lwz     r26,24(r1)
10017bd4:	83 61 00 1c 	lwz     r27,28(r1)
10017bd8:	83 81 00 20 	lwz     r28,32(r1)
10017bdc:	83 a1 00 24 	lwz     r29,36(r1)
10017be0:	83 c1 00 28 	lwz     r30,40(r1)
10017be4:	83 e1 00 2c 	lwz     r31,44(r1)
10017be8:	38 21 00 30 	addi    r1,r1,48
10017bec:	4e 80 00 20 	blr

10017bf0 <__libc_csu_fini>:
10017bf0:	4e 80 00 20 	blr

10017bf4 <__stat>:
10017bf4:	7c 69 1b 78 	mr      r9,r3
10017bf8:	7c 85 23 78 	mr      r5,r4
10017bfc:	38 60 00 03 	li      r3,3
10017c00:	7d 24 4b 78 	mr      r4,r9
10017c04:	48 01 59 08 	b       1002d50c <__xstat@plt>

10017c08 <__lstat>:
10017c08:	7c 69 1b 78 	mr      r9,r3
10017c0c:	7c 85 23 78 	mr      r5,r4
10017c10:	38 60 00 03 	li      r3,3
10017c14:	7d 24 4b 78 	mr      r4,r9
10017c18:	48 01 5b d4 	b       1002d7ec <__lxstat@plt>
10017c1c:	00 00 00 00 	.long 0x0

10017c20 <__do_global_ctors_aux>:
10017c20:	94 21 ff f0 	stwu    r1,-16(r1)
10017c24:	7c 08 02 a6 	mflr    r0
10017c28:	90 01 00 14 	stw     r0,20(r1)
10017c2c:	93 e1 00 0c 	stw     r31,12(r1)
10017c30:	3f e0 10 03 	lis     r31,4099
10017c34:	3b ff c0 04 	addi    r31,r31,-16380
10017c38:	85 3f ff fc 	lwzu    r9,-4(r31)
10017c3c:	2f 89 ff ff 	cmpwi   cr7,r9,-1
10017c40:	41 9e 00 34 	beq     cr7,10017c74 <__do_global_ctors_aux+0x54>
10017c44:	48 00 00 1c 	b       10017c60 <__do_global_ctors_aux+0x40>
10017c48:	60 00 00 00 	nop
10017c4c:	60 00 00 00 	nop
10017c50:	60 00 00 00 	nop
10017c54:	60 00 00 00 	nop
10017c58:	60 00 00 00 	nop
10017c5c:	60 00 00 00 	nop
10017c60:	7d 29 03 a6 	mtctr   r9
10017c64:	4e 80 04 21 	bctrl
10017c68:	85 3f ff fc 	lwzu    r9,-4(r31)
10017c6c:	2f 89 ff ff 	cmpwi   cr7,r9,-1
10017c70:	40 9e ff f0 	bne     cr7,10017c60 <__do_global_ctors_aux+0x40>
10017c74:	80 01 00 14 	lwz     r0,20(r1)
10017c78:	83 e1 00 0c 	lwz     r31,12(r1)
10017c7c:	38 21 00 10 	addi    r1,r1,16
10017c80:	7c 08 03 a6 	mtlr    r0
10017c84:	4e 80 00 20 	blr
10017c88:	60 00 00 00 	nop
10017c8c:	60 00 00 00 	nop

10017c90 <call___do_global_ctors_aux>:
10017c90:	94 21 ff f0 	stwu    r1,-16(r1)
10017c94:	7c 08 02 a6 	mflr    r0
10017c98:	90 01 00 14 	stw     r0,20(r1)
10017c9c:	80 01 00 14 	lwz     r0,20(r1)
10017ca0:	38 21 00 10 	addi    r1,r1,16
10017ca4:	7c 08 03 a6 	mtlr    r0
10017ca8:	4e 80 00 20 	blr

Disassembly of section .fini:

10017cac <_fini>:
10017cac:	94 21 ff f0 	stwu    r1,-16(r1)
10017cb0:	7c 08 02 a6 	mflr    r0
10017cb4:	90 01 00 14 	stw     r0,20(r1)
10017cb8:	93 c1 00 08 	stw     r30,8(r1)
10017cbc:	42 9f 00 05 	bcl     20,4*cr7+so,10017cc0 <_fini+0x14>
10017cc0:	7f c8 02 a6 	mflr    r30
10017cc4:	4b fe 9f cd 	bl      10001c90 <__do_global_dtors_aux>
10017cc8:	80 01 00 14 	lwz     r0,20(r1)
10017ccc:	7c 08 03 a6 	mtlr    r0
10017cd0:	83 c1 00 08 	lwz     r30,8(r1)
10017cd4:	38 21 00 10 	addi    r1,r1,16
10017cd8:	4e 80 00 20 	blr

Disassembly of section .got:

1002d324 <_GLOBAL_OFFSET_TABLE_-0x8>:
1002d324:	00 00 00 00 	.long 0x0
1002d328:	4e 80 00 21 	blrl

1002d32c <_GLOBAL_OFFSET_TABLE_>:
1002d32c:	10 02 c0 1c 00 00 00 00 00 00 00 00                 ............
